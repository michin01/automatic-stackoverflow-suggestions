Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate
"40621433","1","","","2016-11-15 23:17:00","","1","101","<p>If you build your project with <code>NODE_ENV=production</code>, react automatically includes the minified production verison of the lib in the bundle. Conversely, a non production build will include the dev unminified version of react.</p>

<p>How is this being achieved?</p>

<p>If we install react:</p>

<pre><code>npm install --save react
</code></pre>

<p>Then look at its <code>package.json</code> for the <code>main</code> key, it points to: </p>

<pre><code>""main"": ""react.js"",
</code></pre>

<p>Looking at <code>react.js</code> the contents of the file are simply:</p>

<pre><code>module.exports = require('./lib/React');
</code></pre>

<p>Looking in <code>./lib/React</code> I was expecting to see a conditional that loaded the minified build or not, but the conditionals seem to do other stuff:</p>

<pre><code>if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = require('./ReactElementValidator');
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if (process.env.NODE_ENV !== 'production') {
  var warned = false;
  __spread = function () {
    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;
    return _assign.apply(null, arguments);
  };
}
</code></pre>

<p>What is react doing exactly between prod and dev builds? It doesn't seem like it interacts with the minified and unminified builds in <code>/dist</code> as I thought. </p>
","1062794","","","","","2016-11-15 23:17:00","How does react conditionally give the minified production bundle when NODE_ENV=production?","<reactjs><build><npm>","0","0","","",""
"38642976","1","38808218","","2016-07-28 17:25:18","","0","256","<p>I'm working on a react/redux app and want my tabbed components to use the redux store for their active tab state. I attempted to do this in as generic a way as possible to share the functionality among all of my different tab components; this resulted in a generic tab panel with the following render method:</p>

<pre><code> render () {
    var activeTarget = this.props.panelState.tabPanes[this.props.tabPanelID] ? this.props.panelState.tabPanes[this.props.tabPanelID].activeTarget : this.props.defaultTarget;
    var tabs = this.props.panelState.tabs;
    var tabPanelID = this.props.tabPanelID;
    // Add the tabPanelID and active properties to the tab pane children
    const childrenWithProps = React.Children.map(this.props.children,
        (child) =&gt; React.cloneElement(child, {
            tabPanelID: tabPanelID,
            active: activeTarget === child.props.id
        })
    );
    // Render complete tab pane
    return (
        &lt;div&gt;
            &lt;ul className=""nav nav-tabs""&gt;
                {this.buildTabs()}
            &lt;/ul&gt;
            &lt;div className=""tab-content""&gt;
                {childrenWithProps}
            &lt;/div&gt;
        &lt;/div&gt;
    );
}
</code></pre>

<p>However, the map call appears to result in the following warning:</p>

<blockquote>
  <p>Warning: setState(...): Cannot update during an existing state transition (such as within <code>render</code> or another component's constructor). Render methods should be a pure function of props and state; constructor side-effects are an anti-pattern, but can be moved to `componentWillMount</p>
</blockquote>

<p>Unless I'm mistaken I'm not actually changing the state here, so I'm not certain why I'm getting this warning. I'm relatively new to react, though, so it's likely enough that I'm missing something or misunderstanding.</p>

<p>Any assistance would be greatly appreciated.</p>

<p>Edit: for those wondering, here is the contents of buildTabs():</p>

<pre><code>buildTabs() {
    var result = [];
    var tabPanelID = this.props.tabPanelID;
    // Create a tab for each tab in the props
    for(var i = 0; i &lt; this.props.tabs.length; i++) {
        result.push
        (
            &lt;Tab tabPanelID={this.props.tabPanelID} bare={this.props.tabs[i].bare} key={i} target={this.props.tabs[i].target} 
                active={this.props.panelState.tabPanes[tabPanelID] ? 
                    (this.props.panelState.tabPanes[tabPanelID].activeTarget === this.props.tabs[i].target) : 
                    this.props.tabs[i].target == this.props.defaultTarget} 
                    additionalClasses={this.props.additionalTabClasses}&gt; 
                {this.props.tabs[i].contents}
            &lt;/Tab&gt;
        )
    }
    return result;
}
</code></pre>

<p>I simply didn't include that before because I can leave that in without issue, but removing the call to Children.map eliminates the warning.</p>
","1775859","","1775859","","2016-07-28 17:38:28","2016-08-06 19:57:31","Why do I get a warning when cloning elements with new props in render() with react/redux?","<reactjs><redux>","1","4","1","",""
"30141352","1","30142179","","2015-05-09 14:50:51","","0","4076","<p>Using the latest React (0.13) I am attempting to change the class and style of a child element using <code>cloneElement</code> prior to rendering.</p>

<p>Looking through the tests: <a href=""https://github.com/facebook/react/blob/0.13-stable/src/classic/element/__tests__/ReactElementClone-test.js#L44"" rel=""nofollow noreferrer"">https://github.com/facebook/react/blob/0.13-stable/src/classic/element/<strong>tests</strong>/ReactElementClone-test.js#L44</a></p>

<p>And other answers: <a href=""https://stackoverflow.com/questions/24856044/reactjs-how-to-change-style-and-class-of-react-component/24856195#24856195"">ReactJS - How to change style and class of react component?</a></p>

<p>It seems like this should be pretty straightforward, however I can't seem to achieve the desired behavior as detailed in this fiddle: <a href=""https://jsfiddle.net/69z2wepo/7924/"" rel=""nofollow noreferrer"">https://jsfiddle.net/69z2wepo/7924/</a></p>
","113960","","-1","","2017-05-23 10:29:36","2015-05-09 16:22:16","Changing class and style of React children using cloneElement","<javascript><reactjs>","1","0","","",""
"50199328","1","","","2018-05-06 11:46:44","","3","143","<p>I'm writing a component that handle some internal <code>state</code> according to a <code>ref</code> of it's child (a mouse event related to that child's ref for example).<br>
This component is using a <code>render-prop</code> to pass on the relevant piece of <code>state</code> to it's child, and render the child with the <code>ref</code> attached via <code>React.cloneElement</code> util.  </p>

<p>The problem is that when the child is a <code>class</code> component, for some reason the <code>ref</code> is not available, and i can't find a way to render it as it's a react element object with a type of <code>function</code> (after i clone it of course).  </p>

<p>But if the child is just a <code>DOM</code> node like  a <code>div</code> for example, it is working as expected.</p>

<p>My work-around is to check the type of the child, and if it is a type of <code>function</code> I'll wrap the cloned element with my own <code>div</code>, if it's just a dom node then render as is.<br>
However, i would like to not wrap the child with an extra <code>div</code> as i don't want to add unnecessary <code>DOM</code> nodes.</p>

<p>Here is a basic code example, most code removed for brevity:<br>
<strong>The Parent component:</strong></p>

<pre><code>class Parent extends Component {

    attachRef = node =&gt; {
        this.ref = node;
    }

    render() {
        const { render } = this.props;
        const { someValue } = this.state;
        const Child = render(someValue);
        const WithRef = React.cloneElement(Child, {
            ref: this.attachRef
        });
        if (typeof WithRef.type === 'string') { // node element
            return WithRef;
        }
        else if (typeof WithRef.type === 'function') {
            // this is a react element object.. not sure how to render it
            // return ?
        } else {
            // need to find a way to render without a wrapping div
            return (
                &lt;div ref={this.attachRef}&gt;{Child}&lt;/div&gt;
            );
        }
    }
}
</code></pre>

<p><strong>The usage:</strong></p>

<pre><code>class App extends Component {
    render() {
        return (
            &lt;div&gt;
                &lt;Parent render={someValue =&gt; &lt;div&gt; {someValue}&lt;/div&gt;} /&gt;
                &lt;Parent render={someValue =&gt; &lt;Menu someValue={someValue} /&gt;} /&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>When i render regular DOM nodes like the first example it works fine, when i try to render the <code>Menu</code> (which is a <code>class</code> component) it doesn't work as mentioned above.</p>
","8608017","","8608017","","2018-05-06 21:41:29","2018-06-28 13:19:02","pass ref to a class component with React.cloneElement and render prop","<reactjs><ecmascript-6><ref><clone-element>","1","4","1","",""
"42578982","1","42580450","","2017-03-03 12:32:10","","1","368","<p><a href=""https://facebook.github.io/react/docs/react-api.html#cloneelement"" rel=""nofollow noreferrer"">React's documentation</a> says:</p>

<blockquote>
  <p>React.cloneElement() is almost equivalent to:</p>
  
  <p><code>&lt;element.type {...element.props} {...props}&gt;{children}&lt;/element.type&gt;</code></p>
  
  <p>However, it also preserves refs. This means that if you get a child with a ref on it, you won't accidentally steal it from your ancestor. You will get the same ref attached to your new element.</p>
</blockquote>

<p>So I made this small example:</p>

<pre><code>import React, { Component, Children, cloneElement } from 'react';

class Wrapper extends Component {
    render() {
        return cloneElement(Children.only(this.props.children), {
            ref: (ref) =&gt; {
                console.log(""wrapper"", ref);
            },
        });
    }
}

const MyComponent = () =&gt;
    &lt;Wrapper&gt;
        &lt;div ref={ref =&gt; {
            console.log(""original"", ref);
        }}&gt;
            My content
        &lt;/div&gt;
    &lt;/Wrapper&gt;

export default MyComponent;
</code></pre>

<p>(Fiddle: <a href=""https://jsfiddle.net/pxho45um/"" rel=""nofollow noreferrer"">https://jsfiddle.net/pxho45um/</a>)</p>

<p>I thought rendering <code>MyComponent</code> would log both <code>""wrapper"" &lt;div&gt;...&lt;/div&gt;</code> and <code>""original"" &lt;div&gt;...&lt;/div&gt;</code>, but it seems like only the wrapper ref callback is called.</p>

<p>Isn't this contrary to the documentation? Or what do the React team mean when they say ""if you get a child with a ref on it, you won't accidentally steal it from your ancestor""?</p>
","1227116","","","","","2017-03-03 13:45:44","Is this a bug in React.cloneElement?","<reactjs>","1","0","1","",""
"33947146","1","","","2015-11-26 21:18:51","","0","178","<p>Have this webpack config I am using react-native-webpack-server</p>

<pre class=""lang-js prettyprint-override""><code>var fs = require('fs');
var path = require('path');
var webpack = require('webpack');

var config = {
  debug: true,
  devtool: 'source-map',
  entry: {
    'index.ios': ['./src/main.js'],
  },

  output: {
    path: path.resolve(__dirname, 'build'),
    filename: '[name].js',
  },

  module: {
    loaders: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        loader: 'babel',
        query: { stage: 0, plugins: ['./build/babelRelayPlugin'] }
      },
    ],
  },

  plugins: [],
};
</code></pre>



<p>When I do import </p>

<p>import ScrollableTabView from 'react-native-scrollable-tab-view';</p>

<p>I got </p>

<pre class=""lang-js prettyprint-override""><code>ERROR in ./~/react-native-scrollable-tab-view/index.js
Module parse failed: /Users/butuzgol/Playground/watchme/node_modules/react-native-scrollable-tab-view/index.js Line 135: Unexpected token &lt;
You may need an appropriate loader to handle this file type.
|       return React.cloneElement(this.props.renderTabBar(), props);
|     } else {
|       return &lt;DefaultTabBar {...props} /&gt;;
|     }
|   },
 @ ./src/pages/dashboard.js 25:36-79
</code></pre>



<p>Also I found this issue <a href=""https://github.com/mjohnston/react-native-webpack-server/issues/34"" rel=""nofollow"">https://github.com/mjohnston/react-native-webpack-server/issues/34</a> but for now I haven't found solution</p>
","1309841","","","","","2015-11-27 11:56:29","Webpack react-native-webpack-server import 3d part library","<react-native><webpack>","1","0","","",""
"42619509","1","42620537","","2017-03-06 07:08:49","","1","38","<pre><code>import React , {Component} from 'react'

class App extends Component{
  render(){
    return(
      &lt;Buttons&gt;
        &lt;button value='A'&gt;A&lt;/button&gt;
        &lt;button value='B'&gt;B&lt;/button&gt;
        &lt;button value='C'&gt;C&lt;/button&gt;
      &lt;/Buttons&gt;
    )
  }
}


class Buttons extends Component{
  constructor(){
    super()
    this.state= {
      selected: 'none'
    }
  }

  selectItem(selected){
    this.setState( { selected } )
  }

  render(){
    let fn = (child) =&gt; (
      React.cloneElement( child , {
          // this only change is the call to bind here  
          onClick: this.selectItem.bind(this , child.props.value)
        } 
      )
    )
    let items = React.Children.map(this.props.children , fn)
    return(
      &lt;div&gt;
        &lt;h3&gt;
          you have selected: {this.state.selected}
        &lt;/h3&gt;
        {items}
      &lt;/div&gt;
    )
  }
}

export default App
</code></pre>

<hr>

<pre><code>import React , {Component} from 'react'

class App extends Component{
  render(){
    return(
      &lt;Buttons&gt;
        &lt;button value='A'&gt;A&lt;/button&gt;
        &lt;button value='B'&gt;B&lt;/button&gt;
        &lt;button value='C'&gt;C&lt;/button&gt;
      &lt;/Buttons&gt;
    )
  }
}


class Buttons extends Component{
  constructor(){
    super()
    this.state= {
      selected: 'none'
    }
    // here I added the binding on the constructor . 
    this.selectItem = this.selectItem.bind(this)
  }

  selectItem(selected){
    this.setState( { selected } )
  }

  render(){
    let fn = (child) =&gt; (
      React.cloneElement( child , {
          // this only change is the call to bind here  
          onClick: this.selectItem(child.props.value)
        } 
      )
    )
    let items = React.Children.map(this.props.children , fn)
    return(
      &lt;div&gt;
        &lt;h3&gt;
          you have selected: {this.state.selected}
        &lt;/h3&gt;
        {items}
      &lt;/div&gt;
    )
  }
}

export default App
</code></pre>

<p>when adding the <code>this</code> binding inside the callback that is passed to <code>React.cloneElement</code> everything works just find (first code example)</p>

<p>but </p>

<p>when adding the binding up top in the constructor seems to invoke an infinite loop of some sort . I still can't figure out why ? 
what is the difference between the two ?</p>

<p><a href=""https://i.stack.imgur.com/0Y0fJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0Y0fJ.png"" alt=""enter image description here""></a></p>
","3260606","","","","","2017-03-06 08:28:27","How is it that binding a method inside the constructor is different from binding it inside the call to React.cloneElement?","<reactjs>","1","0","","",""
"44097568","1","","","2017-05-21 13:39:45","","0","97","<p>i don't know how solve my problem. This is react route code
How i know, switch must throw one route component in my Base, but he throw all route's in Router.I don't know how work with this object( in image) and have to get key for ReactCSSTransitionGroup</p>

<p><a href=""https://www.dropbox.com/s/nzkf91delcvuo2f/%D0%91%D0%B5%D0%B7%D1%8B%D0%BC%D1%8F%D0%BD%D0%BD%D1%8B%D0%B9.png?dl=0"" rel=""nofollow noreferrer"">https://www.dropbox.com/s/nzkf91delcvuo2f/%D0%91%D0%B5%D0%B7%D1%8B%D0%BC%D1%8F%D0%BD%D0%BD%D1%8B%D0%B9.png?dl=0</a></p>

<pre><code>import React, {Component} from 'react'
import {
BrowserRouter as Router,
Route,
Switch,
browserHistory
} from 'react-router-dom'
import render from 'react-dom'
import Base from '../../layouts/BaseLayout'
import Contacts from '../contacts'
import Product from '../product'
import Main from '../main'
class App extends Component {
render() {
    return (
        &lt;Router history={browserHistory}&gt;
            &lt;Base&gt;
                &lt;Switch&gt;
                    &lt;Route exact path=""/"" component={Main} key={'1'} location={location}/&gt;
                    &lt;Route component={Product} path='/product' key={'2'} location={location}/&gt;
                    &lt;Route component={Contacts} path='/contacts' key={'3'} location={location}/&gt;
                &lt;/Switch&gt;
            &lt;/Base&gt;
        &lt;/Router&gt;
    )
}
}
</code></pre>

<p>and this is my Base class</p>

<pre><code>class Base extends Component {
    componentDidMount() {
    console.log(this.props);
}
render() {
return (
    &lt;div&gt;
        &lt; Head /&gt;

        &lt;ReactCSSTransitionGroup transitionName=""example""
                                 transitionEnterTimeout={1500}
                                 transitionLeaveTimeout={1500}
        &gt;

            {React.cloneElement(this.props.children, {
                key: this.props.location
            })}
        &lt;/ ReactCSSTransitionGroup &gt;
        &lt; Footer/&gt;
    &lt;/ div &gt;
    );
}
</code></pre>
","8043991","","4355342","","2017-05-21 13:44:41","2017-05-21 13:44:41","react switch v4 doesn't work and throw all route's","<reactjs><switch-statement><frontend><reactcsstransitiongroup><react-router-dom>","0","5","","",""
"34555766","1","","","2016-01-01 11:36:12","","2","185","<p>I have used the below structure to create a react component which is working on the browser after done babel. But the Layout spec is failing in my case since the <code>React</code> is declared in <code>Base</code> component only. Why the inheritance is not working in spec? </p>

<p><strong>Base.js</strong></p>

<pre><code>import React from 'react';

export default class Base extends React.Component {

}
</code></pre>

<p><strong>Layout.js</strong></p>

<pre><code>import 'Base' from './Base';

export default class Layout extends Base {
const sample = React.cloneElement(this.props.data, {ref: 't'});

}
</code></pre>

<p><strong>Test Case</strong></p>

<pre><code>import Layout from 'component/Layout'
import React from 'react';

describe('Layout', () =&gt; {
}
</code></pre>

<p><strong>Error message:</strong></p>

<pre><code>ReferenceError: Can't find variable: React
</code></pre>
","409617","","409617","","2016-01-01 11:46:20","2016-01-01 12:12:51","inheritance is not working in react mocha test","<javascript><reactjs><mocha>","1","0","","",""
"34410051","1","34411160","","2015-12-22 06:54:15","","9","8646","<p>I am using react router 1.0.2 and my routes look like this:</p>

<pre><code>ReactDOM.render(
  &lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={Home}/&gt;
        &lt;Route path=""triangles"" component={Triangles}/&gt;
      &lt;/Route&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;,
  document.querySelector('.container')
);
</code></pre>

<p>My App component looks like this and I thought I could pass the location in the props:</p>

<pre><code>import React, {Component} from 'react';

import Menu from './menu';

export default class App extends Component {
  render() {
    return (
      &lt;div&gt;
        &lt;Menu/&gt;
        &lt;div className=""jumbotron""&gt;
         {this.props.children &amp;&amp; React.cloneElement(this.props.children, {
            location: this.props.location
          })}
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
};
</code></pre>

<p>I want to conditionally set an active class on the Menu component:</p>

<pre><code>import React, {Component} from 'react';

import { pushPath } from 'redux-simple-router';
import { Link } from 'react-router';

    export default class Menu extends Component {
      render() {
        return (
            &lt;nav role=""navigation"" className=""navbar navbar-default""&gt;
              &lt;div id=""navbarCollapse"" className=""collapse navbar-collapse""&gt;
                &lt;ul className=""nav navbar-nav""&gt;
                  &lt;li className={this.props.location.pathname === '/' ? 'active' : ''}&gt;
                    &lt;Link to=""/""&gt;Home&lt;/Link&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/nav&gt;
        );
      }
    };
</code></pre>

<p>But the <code>this.props.location</code> is null when the menu's render function is called?</p>

<p>How can I pass props to child components?</p>
","11755","","1443490","","2016-05-19 18:13:19","2018-04-12 11:01:13","Conditionally set active class on menu using react router current route","<reactjs><react-routing>","2","1","2","",""
"47028558","1","47030407","","2017-10-31 05:41:12","","3","539","<p>As the title states, using <code>React.cloneElement</code> inside <code>React.Children.map</code> is causing element keys to change.</p>

<p>Here is a <a href=""https://codesandbox.io/s/91jm9609w"" rel=""nofollow noreferrer"">sandbox</a> demonstrating this.</p>

<pre><code>React.Children.map(children, (child) =&gt; {
    let clonedEl = React.cloneElement( child );
    console.log(clonedEl);
    return clonedEl;
});
</code></pre>

<p>The result of that block of code has elements with <code>.$</code> added to the front of every key. This is really confusing for two reasons.</p>

<p>1: The documentation says that <a href=""https://reactjs.org/docs/react-api.html#cloneelement"" rel=""nofollow noreferrer"">cloneElement</a> will preserve keys and refs. </p>

<blockquote>
  <p>Clone and return a new React element using element as the starting point. The resulting element will have the original element’s props with the new props merged in shallowly. New children will replace existing children. key and ref from the original element will be preserved.</p>
</blockquote>

<p>2: The results of the <code>console.log</code> is an element with preserved keys and ref...</p>

<p>This would lead me to believe that the addition is happening somewhere in the React.Children.map code.</p>

<p>UPDATE: After looking at the code for React.Children.map...</p>

<p>I figured out it is getting added by the following function chain: mapChilren -> mapIntoWithKeyPrefixInternal -> traverseAllChildren -> traverseAllChildrenImpl -> mapSingleChildIntoContext.</p>

<p><code>mapSingleChildIntoContext</code>'s third argument is childKey. It is called with <code>nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar</code> as it's third argument inside <code>traverseAllChildrenImpl</code>.</p>

<p><code>SEPARATOR = "".""</code> and <code>getComponentKey</code> returns the key with a $ prefixed to it within the escape function.</p>

<p>UPDATED PROBLEM:</p>

<p>Now I'm looking for a way around this... I'm not sure if there is one considering traverseAllChildrenImpl is called with an empty string as the <code>nameSoFar</code> within traverseAllChildren.</p>

<p>I think this may be intended the intended behavior of <code>React.Children.map</code> to build new DOM. This is causing a for me when trying to update the props on dynamic children.</p>

<p>SOLUTION: Don't use things how they're not intended to be used.</p>

<p>I was building a grouping of form controls that are really easy for the developer. The state tree is dynamically built by mapping the children and using . delineated string names from elements with names to create keys and values on the top level component.</p>

<p>The top level form component has onChange handlers for different types of controls and they are applied to the onChange properties of elements as needed. This mapping was done in the componentWillMount method and is what was causing me problems.</p>

<p>Moving the mapping to the render method allowed me to not have to update the children in the handles. Updating in the handles was causing elements to lose focus. All is good now!</p>
","6338762","","6338762","","2017-10-31 06:45:34","2018-04-12 13:44:53","React.cloneElement inside React.Children.map is causing element keys to change","<javascript><reactjs>","1","2","1","",""
"43818279","1","","","2017-05-06 08:19:56","","2","116","<p>I decided to use react-router v4 instead of v3 and change my paths so they work with v4 of the router and redux, but I get the error below(I exported all components using export default and didn't forget to export anything). What is wrong with my code?</p>

<blockquote>
  <p>Element type is invalid: expected a string (for built-in components)
  or a class/function (for composite components) but got: undefined. You
  likely forgot to export your component from the file it's defined in.</p>
</blockquote>

<p>I tried to turn this v3 router code, which worked:</p>

<pre><code>&lt;Router history={history}&gt;
  &lt;Route path=""/"" component={App}&gt;
    &lt;IndexRoute component={UserGrid}&gt;&lt;/IndexRoute&gt;
    &lt;Route path=""/login"" component={Login}&gt;&lt;/Route&gt;
    &lt;Route path=""/users/:userId"" component={UserPage}&gt;&lt;/Route&gt;
    &lt;Route path=""/registration"" component={RegistrationPage}&gt;&lt;/Route&gt;
    &lt;Route path=""/topSecret"" component={requireAuth(SecretComponent)}&gt;&lt;/Route&gt;
  &lt;/Route&gt;
&lt;/Router&gt;
</code></pre>

<p>Into v4 code like so:</p>

<pre><code>const history = createBrowserHistory()

const router = (
  &lt;Provider store={store}&gt;
    &lt;BrowserRouter history={history}&gt;
        &lt;App&gt;
          &lt;Route exact path=""/"" component={UserGrid}&gt;&lt;/Route&gt;
          &lt;Route path=""/login"" component={Login}&gt;&lt;/Route&gt;
          &lt;Route path=""/users/:userId"" component={UserPage}&gt;&lt;/Route&gt;
          &lt;Route path=""/registration"" component={RegistrationPage}&gt;&lt;/Route&gt;
          &lt;Route path=""/topSecret"" component={requireAuth(SecretComponent)}&gt;&lt;/Route&gt;
        &lt;/App&gt;
    &lt;/BrowserRouter&gt;
  &lt;/Provider&gt;
)

ReactDOM.render(
  router,
  document.getElementById('root')
)
</code></pre>

<p>App.js:</p>

<pre><code>class App extends React.Component {
    render() {
        return (
            &lt;div&gt;
                &lt;NavBar /&gt;
                {React.cloneElement(this.props.children, this.props)}
            &lt;/div&gt;
        )
    }
}

function mapStateToProps (state) {
  return {
    session: state.session,
    users: state.users
  }
}

function mapDispatchToProps (dispatch) {
  return bindActionCreators(actionCreators, dispatch)
}


export default connect(mapStateToProps, mapDispatchToProps)(App)
</code></pre>

<p>Store:</p>

<pre><code>import {applyMiddleware, createStore} from 'redux'
import {createLogger} from 'redux-logger'
import { connectRouter, routerMiddleware } from 'connected-react-router'
import thunk from 'redux-thunk'
import { createBrowserHistory } from 'history'
import rootReducer from '../reducers/rootReducer'
import async from '../middlewares/async'
import {authUser} from '../actions/actionCreators'

const history = createBrowserHistory()

const initialState = {
  bla-bla
}

const store = createStore(
  connectRouter(history)(rootReducer),
  initialState,
  applyMiddleware(
    async,
    thunk,
    routerMiddleware(history),
    createLogger()
  )
)

export default store
</code></pre>
","7725632","","","","","2017-05-06 13:16:54","Getting an error when migrating from v3 to v4 react-router","<reactjs><redux><react-router><react-router-redux><react-router-dom>","1","0","2","",""
"50296982","1","50298811","","2018-05-11 16:58:25","","0","46","<p>In code similar to the following, I'm getting <code>Type { foo: number } has no properties in common with type 'Partial&lt;Child&gt; &amp; Attributes'</code> for the second parameter of the call to <code>cloneElement</code> and I don't understand why... It appears to me that <code>Partial&lt;Child&gt;</code> is getting props of the right shape, but TypeScript doesn't agree.</p>

<p>Here's the library versions from <a href=""https://github.com/DefinitelyTyped/DefinitelyTyped"" rel=""nofollow noreferrer"">https://github.com/DefinitelyTyped/DefinitelyTyped</a></p>

<pre><code>""@types/react"": ""16.3.14"",
""@types/react-dom"": ""16.0.5"",
</code></pre>

<p>Here's the example:</p>

<pre><code>import * as React from ""react"";
interface Props {
  foo: number;
}
class Child extends React.Component&lt;Props&gt; {
    public render(): React.ReactNode {
        return &lt;span&gt;{this.props.foo}&lt;/span&gt;;
    }
}
class Parent extends React.Component&lt;Props&gt; {
    public render(): React.ReactNode {
        return React.Children.map(this.props.children, (child: JSX.Element) =&gt; this.cloneChild(child));
    }

    public cloneChild(child: React.ReactElement&lt;Child&gt;): React.ReactElement&lt;Child&gt; {
        const newProps = {
            foo: this.props.foo,
        };
        return React.cloneElement&lt;Child&gt;(child, newProps);
    }
}
</code></pre>

<p>Is this a bug, or am I missing something?</p>
","333761","","5599567","","2018-05-12 10:40:01","2018-05-12 10:40:01","cloneElement: Type has no properties in common with type Partial<P> & Attributes","<reactjs><typescript><definitelytyped>","1","0","","",""
"34336662","1","34348691","","2015-12-17 14:11:37","","0","378","<p>I am learning React and got stuck. Maybe someone can help. I have the following code:</p>

<p>React-router</p>

<pre><code>ReactDOM.render(

   &lt;Router&gt; 
       &lt;Route path=""/"" component={App}&gt;
           &lt;Route path=""something"" component={Something} /&gt;
       &lt;/Route&gt;
   &lt;/Router&gt;

,document.getElementById('react-container')
);
</code></pre>

<p>App</p>

<pre><code>var App = React.createClass({

getInitialState: function() {
    return {
        status: 'ready',
        title: 'The Title'
    }
},

render: function() {

    var childComp = null;

    if(this.props.children) {

            /*
                This will work 
                childComp = React.cloneElement(this.props.children, {title: this.state.title, status: this.state.status});
            */

            /*this wont*/
            childComp = React.cloneElement(this.props.children, {...this.state});
    }

    return (
        &lt;div&gt;
            &lt;Header title={this.state.title} /&gt;
            {childComp}
        &lt;/div&gt;
    );
}
});
</code></pre>

<p>Something:</p>

<pre><code>var Something = React.createClass({
render: function() {
    return (
        &lt;div&gt;
            &lt;h1&gt;Something&lt;/h1&gt;
            &lt;h2&gt;{this.props.title}&lt;/h2&gt;
            &lt;h3&gt;{this.props.status}&lt;/h3&gt;
        &lt;/div&gt;
    );
}
});  
</code></pre>

<p>The problem is that App can have many many states. I dont want to manually write them like so:</p>

<pre><code>React.cloneElement(this.props.children, {title: this.state.title, status: this.state.status})
</code></pre>

<p>But using JSX spread attributes wont work (syntaxerror)</p>
","3338786","","","","","2015-12-18 04:46:39","React JSX Spread Attribute in cloneElement","<reactjs><react-jsx>","1","2","","",""
"51214269","1","","","2018-07-06 16:17:03","","0","19","<p>I am trying to view an InfoWindow everytime the maps is clicked, it will show an input field and a button to add the named location to list. For now, I am just trying to get the text out of the form, the problem that I am having is how to access the form when the button is clicked???!</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import ReactDOM from 'react-dom';
import PopUpForm from './PopUpForm';
import ReactDOMServer from 'react-dom/server'

class Map extends React.Component {
  
  state = {
      infowindow: new google.maps.InfoWindow({}),
  }

  componentDidUpdate(prevProps, prevState) {
    console.log('componentDidUpdate');
    if (prevProps.google !== this.props.google) {
      this.loadMap();
    }
  }

  componentDidMount() {
    console.log('componentDidMount');
    this.loadMap();
  }

  loadMap() {
    console.log('loadMap');
    if (this.props &amp;&amp; this.props.google) {
      // google is available
      const {google} = this.props;
      const maps = google.maps;

      const mapRef = this.refs.map;
      const node = ReactDOM.findDOMNode(mapRef);

      const {initialCenter, zoom} = this.props;
      const {lat, lng} = initialCenter;
      const center = new maps.LatLng(lat, lng);
      const mapConfig = Object.assign({}, {
        center,
        zoom
      })
      this.map = new maps.Map(node, mapConfig);

      // adding markers for corresponding saved places
      const pos = {lat: 59.329113196988345 , lng: 17.966015144369067};
      const marker = new google.maps.Marker({
        position: pos,
        map: this.map,
        title: 'first marker',
      });
      const infowindow = new google.maps.InfoWindow({
        content: `&lt;h3&gt;${marker.title}&lt;/h3&gt;`
      });
      marker.addListener('click', () =&gt; {
        infowindow.open(this.map, marker);
      });

      // pop up  infoWindoW on map
      this.map.addListener('click', (e) =&gt; {
        this.state.infowindow.close();
        const popUp = &lt;PopUpForm onSubmit={this.onSubmit}/&gt;;
        this.showPopupOnMap(e.latLng, popUp);
        google.maps.event.addListener(this.state.infowindow, 'domready', () =&gt; {
          // HOW TO ACCESS THE FORM HERE
        });
      })
      this.forceUpdate();
    }      
}

onSubmit = () =&gt; {
  e.preventDefault();
  window.alert('onSubmit form')
}

showPopupOnMap = (latLng, popUp) =&gt; {
  const contentString = ReactDOMServer.renderToString(popUp)

  const pos = { lat: latLng.lat(), lng: latLng.lng() };

  this.state.infowindow = new google.maps.InfoWindow({
    content: contentString,
    position: pos
  });
  this.state.infowindow.open(this.map)
}

renderChildren() {
  console.log('renderChildren');
  const {children} = this.props;
  if (!children) return;
  return React.Children.map(children, c =&gt; {
    return React.cloneElement(c, {
      map: this.map,
      google: this.props.google,
    });
  })
}

render() {
  console.log('render');
    const style = {
      width: '70vw',
      height: '70vh'
    }

    return (
      &lt;div  ref=""map"" style={style}&gt;
        loading map...
        {this.renderChildren()}
      &lt;/div&gt;
    )
  }
};

Map.defaultProps = {
  zoom: 11,
  initialCenter: {
    lat: 59.3293,
    lng: 18.0686
  }
}

export default Map;</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';

class PopUpForm extends React.Component {
    render() {
        return (
            &lt;div id='iwc' ref='iwc' &gt;
                &lt;b&gt;Add this location&lt;/b&gt;&lt;br /&gt;
                &lt;form ref='mapform' className='map-form' onSubmit={this.onSubmit}&gt;
                    &lt;input type='text' /&gt;
                    &lt;button id='btn'&gt;Add&lt;/button&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        );
    }
}

export default PopUpForm;</code></pre>
</div>
</div>
</p>

<p>inside of this.map.addListner(this.state.infoWindow, 'domready', someFunctionToBeCalled) I do not know how to acces the form in React, I searched about it all I could found is this:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>google.maps.event.addListener(info, 'domready', function() {
    document.id(""map-form"").addEvent(""submit"", function(e) {
        e.stop();
        console.log(""hi!"");
    });
});</code></pre>
</div>
</div>
</p>

<p>is this even possible? Am I missing something??</p>
","7463649","","","","","2018-07-07 07:48:19","How to access a form inside InfoWindow content in React using Google maps api and google-maps-react V2.0.2","<reactjs><google-maps><google-maps-api-3><infowindow><google-maps-react>","1","0","","",""
"51459763","1","","","2018-07-21 20:15:44","","0","6","<p>This should be so simple, but I've been breaking my head over this for days.  I'm trying to learn the react-transition-group library to animate my page transitions.  The problem is the DOCS SUCK.  I've followed them over and over and tried every which way, but can't get it to work.</p>

<p>What I want to do is slide my pages gracefully either right or left, and fade the one that was already there out behind it. Simple right?</p>

<p>So on my app container I want to put something like this:</p>

<pre><code>&lt;App&gt;
  &lt;PageSlider&gt;
     &lt;Page key={uniqueId} /&gt;  &lt;==this will be ""swapped"" through (Redux) props
  &lt;/PageSlider&gt;
</code></pre>

<p>    </p>

<p>So, from what I've read, I have to use a TransitionGroup container as my PageSlider for this, so that it will manage the entering and exiting of my page.  So here goes:</p>

<pre><code> class PageSlider extends Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      &lt;TransitionGroup 
         component=""div""
         id=""page-slider""
         childFactory={child =&gt; React.cloneElement(child,
           {classNames: `page-${this.props.fromDir}`, timeout: 500}
         )}
      &gt;
        {this.props.children}
      &lt;/TransitionGroup&gt;

    );
  }
}
</code></pre>

<p>I also read I need to do a ""child Factory"" to enable the exiting stuff.  There was absolutely no example of this I could find in the docs. Since the pages will come from different directions, I will pass to this the direction from which I want to slide the page, which will tell the page what class it gets.</p>

<p>Now, as for the page itself, I have wrapped it in a CSSTransition like so.  There were no good examples in the docs of how this all gets passed down, so I'm really confused what to do here:</p>

<pre><code> class Page extends Component {
  constructor(props) {
    super(props);
  }

  render() {
   return (
    &lt;CSSTransition&gt;                   &lt;==????????
      {this.props.children}           Do props get passed down?
    &lt;/CSSTransition&gt;                  Which ones? 
 );                                   Does ""in"" get taken care of?
  }
}
</code></pre>

<p>And just to finish the styles will be applied in CSS something like this:</p>

<pre><code>.page {
  display: flex; 
  flex-direction: column; 
  height: 100%;
  position: absolute;
  top: 0;
  bottom: 0;
  -webkit-transition: all 500ms ease-in-out;
  transition: all 500ms ;
}

//go from this
.page-right-enter {
  -webkit-transform: translate3d(100%, 0, 0);
  transform: translate3d(100%, 0, 0);
}

//to this
.page-right-enter-active {
  -webkit-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0);
}

 //exiting go from this
    .page-right-exit {
      opacity: 1;
    }
   //to this
    .page-right-exit-active {
      opacity: 0;
    }
</code></pre>

<p>All of these components will be connected through Redux so they know when a new page has been triggered and which direction has been called.</p>

<p>Can someone PLEEEEASE help me on this?  I've literally spent days and tried every library out there.  Why is this not easier?</p>
","2928231","","2928231","","2018-07-22 00:34:53","2018-07-22 00:34:53","page slider with redux and react-transition-group v2","<css><animation><react-transition-group>","0","0","","",""
"35020735","1","40729975","","2016-01-26 18:04:14","","7","813","<p>The past couple of weeks I've been working on an app using React. So far everything is working fine, but now I want to add some transitions to it. These transitions are a bit more complex than any examples I managed to find.</p>

<p>I've got 2 pages, an overview and a detail page which I'd like to transition between.</p>

<p>I'm using react-router to manage my routes:</p>

<pre><code>&lt;Route path='/' component={CoreLayout}&gt;

  &lt;Route path=':pageSlug' component={Overview} /&gt;
  &lt;Route path=':pageSlug/:detailSlug' component={DetailView} /&gt;

&lt;/Route&gt;
</code></pre>

<p>Overview looks like this:
<a href=""https://i.stack.imgur.com/oUmZn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oUmZn.png"" alt=""enter image description here""></a></p>

<p>Detailview looks like this:
<a href=""https://i.stack.imgur.com/TUUQg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TUUQg.png"" alt=""enter image description here""></a></p>

<p>The idea of the transition is that you click on one of the elements of the Overview. This element which has been clicked moves towards the position it should have on the detailView. The transition should be initiated by a route change (I think) and should also be able to happen in reverse.</p>

<p>I've already tried using <code>ReactTransitionGroup</code> on the Layout, which has a render method which looks like this:</p>

<pre><code>render () {
    return (
        &lt;div className='layout'&gt;
            &lt;ReactTransitionGroup&gt;
                React.cloneElement(this.props.children, { key: this.props.location.pathname })
            &lt;/ReactTransitionGroup&gt;
        &lt;/div&gt;
    )
}
</code></pre>

<p>This will give the child component the ability to receive the special <a href=""https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup"" rel=""nofollow noreferrer"">lifecycle hooks</a>. But I'd like to access the child components somehow during these hooks and still keep doing things the React way.</p>

<p>Could someone point me in the right direction for the next step to take? Or maybe point me to an example which I may have missed somewhere? In previous projects I used <a href=""http://emberjs.com/"" rel=""nofollow noreferrer"">Ember</a> together with <a href=""http://ember-animation.github.io/liquid-fire/"" rel=""nofollow noreferrer"">liquid fire</a> to get these kinds of transitions, is there maybe something like this for React?</p>

<p>I'm using <a href=""https://facebook.github.io/react/"" rel=""nofollow noreferrer"">react</a>/<a href=""https://github.com/rackt/react-redux"" rel=""nofollow noreferrer"">react-redux</a>/<a href=""https://github.com/rackt/react-router"" rel=""nofollow noreferrer"">react-router</a>/<a href=""https://github.com/rackt/react-router-redux"" rel=""nofollow noreferrer"">react-router-redux</a>.</p>
","1242929","","","","","2018-06-25 07:32:22","Animated page transitions in react","<animation><reactjs><transitions>","2","7","1","",""
"42261783","1","42261933","","2017-02-15 23:05:09","","9","4155","<p>I am using React and Typescript. I have a react component that acts as a wrapper, and I wish to copy its properties to its children. I am following React's guide to using clone element: <a href=""https://facebook.github.io/react/blog/2015/03/03/react-v0.13-rc2.html#react.cloneelement"" rel=""noreferrer"">https://facebook.github.io/react/blog/2015/03/03/react-v0.13-rc2.html#react.cloneelement</a>. But when using using <code>React.cloneElement</code> I get the following error from Typescript:</p>

<pre><code>Argument of type 'ReactChild' is not assignable to parameter of type 'ReactElement&lt;any&gt;'.at line 27 col 39
  Type 'string' is not assignable to type 'ReactElement&lt;any&gt;'.
</code></pre>

<p><strong>How can I assign the correct typing's to react.cloneElement?</strong></p>

<p>Here is an example that replicates the error above:</p>

<pre><code>import * as React from 'react';

interface AnimationProperties {
    width: number;
    height: number;
}

/**
 * the svg html element which serves as a wrapper for the entire animation
 */
export class Animation extends React.Component&lt;AnimationProperties, undefined&gt;{

    /**
     * render all children with properties from parent
     *
     * @return {React.ReactNode} react children
     */
    renderChildren(): React.ReactNode {
        return React.Children.map(this.props.children, (child) =&gt; {
            return React.cloneElement(child, { // &lt;-- line that is causing error
                width: this.props.width,
                height: this.props.height
            });
        });
    }

    /**
     * render method for react component
     */
    render() {
        return React.createElement('svg', {
            width: this.props.width,
            height: this.props.height
        }, this.renderChildren());
    }
}
</code></pre>
","3987360","","","","","2018-06-20 08:57:17","How to assign the correct typing to React.cloneElement when giving properties to children?","<reactjs><typescript><ecmascript-6>","1","0","4","",""
"51369551","1","","","2018-07-16 20:19:57","","0","11","<p>From the documentation cloneElement removes the old children if the third parameter is added (<a href=""https://reactjs.org/docs/react-api.html#cloneelement"" rel=""nofollow noreferrer"">https://reactjs.org/docs/react-api.html#cloneelement</a>).</p>

<p>However if one wants to add a list of new child components instead of replacing them, how can this be achieved? Doing: 
<code>&lt;View&gt;{this._childViews}&lt;/View&gt;</code> will not work as I have no access to the old childrens, and providing such list will end up being a bad solution. As I see it two possible solutions exists:
1. Programmatically access the list of old children on the given view.
2. Use a method with the same behaviour, which instead adds the new children to the list of old childrens. </p>

<p>Any ideas? </p>
","2119540","","","","","2018-07-16 20:19:57","React native cloneElement while preserving the children","<react-native>","0","0","","",""
"50073052","1","","","2018-04-28 05:04:40","","5","365","<p>I have a child component in a Layout that I want to pass a props value too. But I don't know how. In the class below the layoutFileDataRequest() receives a string variable from a child component on a click event.  There is a need to send that value to one of the this.props.children components so it can update. </p>

<p>How do I do this? In the code below  <code>React.cloneElement(child, {</code> does not change it always stays the same which means I can't update the child prop.</p>

<pre><code>  export default class Layout extends React.Component {
    constructor(props) {
      super(props)

      this.layoutFileDataRequest = this.layoutFileDataRequest.bind(this);
      this.state = {
        newData: '',
        returnData: 'test',

      }
    }

    /**
     *  Received request from server add it to 
     *  react component so that it can be rendered
     */
    layoutFileDataRequest(data) {
      this.setState({ returnData:data })
    }


    renderChildren() {
      return React.Children.map(this.props.children, child =&gt; {
        console.log(this.state.returnData); 
          return React.cloneElement(child, {
            data: this.state.returnData
          })
      });
    } 

    /**
     *  Render request
     * 
     * 
     */
    render() {
      const { location } = this.props;
      const title = this.state.newData;
      return (
        &lt;div id=""app-container"" class={title}&gt;
          &lt;Nav location={location} /&gt;
          &lt;main id=""main""&gt;
            &lt;h1&gt;{title}&lt;/h1&gt;
            &lt;section&gt;
                {this.renderChildren()}
            &lt;/section&gt;
          &lt;/main&gt;
          &lt;Project layoutFileDataRequest={this.layoutFileDataRequest} /&gt;
          &lt;Footer /&gt;
        &lt;/div&gt;
      );
    }
  }


export default class Project extends React.Component {
  constructor(props) {
    super(props)

    this.projectFileDataRequest = this.projectFileDataRequest.bind(this);

    this.state = {
      newData: [],
    }

  }


  /**
   *  Received request from server add it to 
   *  react component so that it can be rendered
   */
  projectFileDataRequest(data) {
    this.props.layoutFileDataRequest(data);
  }


  /**
   *  Received request from server add it to 
   *  react component so that it can be rendered
   */
  componentDidMount() {
    ApiCalls.readSassDirData()
      .then(function (serverData) {
        this.setState({ newData: serverData[0].data })
      }.bind(this));
  }


  /**
   *  Render request
   */
  render() {
    const listOfObjects = this.state.newData;
    return (
      &lt;aside id=""project""&gt;
        &lt;h2&gt;Files&lt;/h2&gt;
        &lt;FileListing listOfObjects={listOfObjects} projectFileDataRequest={this.projectFileDataRequest} /&gt;,
       &lt;/aside&gt;
    );
  }
}
</code></pre>
","1246519","","1246519","","2018-04-28 06:24:27","2018-05-08 08:06:57","Passing a value onto a child component (this.props.children) in react","<javascript><reactjs>","3","11","3","",""
"48377657","1","","","2018-01-22 08:48:26","","0","113","<p>I have such a React Component:</p>

<pre><code>import Rect from 'react';
import Hammer from 'react-hammerjs';
import { DIRECTION_ALL } from 'hammerjs';
import AnSvg from '!svg-react-loader?name=AnSvg!../../../assets/svg/an-svg.svg';

class MyComponent extends React.Component {
  construct(props) {
    super(props);
  }

  render () {
    const
      instance = AnSvg(AnSvg.defaultProps),

      clone = React.cloneElement(instance, /*adding some css classes here*/)
    ;

    return (
      &lt;Hammer
        onPanStart={e =&gt; console.log('start')}
        onPan={e =&gt; console.log('panning)}
        onPanEnd={e =&gt; console.log('end')}
        onPanCancel={e =&gt; console.log('cancel')}
        options={{
          touchAction:'compute',
            recognizers: {
            pan: {
              direction: DIRECTION_ALL,
              threshold: 10
            }
          }
       }}&gt;{clone}&lt;/Hammer&gt;
    );
  }
}
</code></pre>

<p>The <code>pan-end</code> event is never triggered, but the <code>pan-cancel</code> instead, even if the target does not change. So the output looks like that:</p>

<pre><code>start
(6) panning
cancel &lt;-- also missing sometimes
</code></pre>

<p>What causes Hammerjs to trigger the <code>pan-cancel</code> event?</p>
","687901","","","","","2018-01-22 08:48:26","react-hammerjs — pan always cancels","<reactjs><hammer.js><pan>","0","0","","",""
"42903869","1","","","2017-03-20 12:40:13","","1","66","<p>I am rendering some child routes with react router using <code>React.children</code> (for all the sub routes under a certain main route. </p>

<p>This has been working fine for me, however I previously was deconstructing the props I was passing into the children like so -</p>

<pre><code>const { prop1, prop2, prop3 } = this.props;

 const children = React.Children.map(this.props.children, (child) =&gt; {
  return React.cloneElement(child, {
    prop1,
    prop2,
    prop3
  });
});
</code></pre>

<p>This had been working great, however more recently I started to get a lot more props so I figured I could make it much easier by just spreading props into the child object like so :</p>

<pre><code> const children = React.Children.map(this.props.children, (child) =&gt; {
  return React.cloneElement(child, {...this.props});
})
</code></pre>

<p>This seemed to be ok, but I am now getting some weird behaviour in that <strong>I can no longer see my <code>routeParams</code> (<code>this.props.routeParams</code>) from react router</strong>.</p>

<p>It seems like the spread operator should do the same thing, just with less code, unless I am misunderstanding something.</p>

<p>When I switch it back the non spread operator approach this works fine. Any idea why this is?</p>
","3201696","","2902660","","2017-03-20 16:08:55","2017-03-20 16:08:55","React, react.children + react.cloneElement breaks when using spread operator","<javascript><reactjs><react-router>","1","2","","",""
"33176773","1","33177352","","2015-10-16 17:59:16","","0","221","<p>In version 0.13.x version of react-router, functions could be passed to child components of the RouteHandler as a prop by doing something like:</p>

<pre><code>&lt;RouteHandler foo={this.foo} {...this.state} /&gt;
</code></pre>

<p>I have recently upgraded to version 1.0.0 and found that the new syntax does not let me attach functions: </p>

<pre><code>{React.cloneElement(this.props.children, {...this.state}, foo={this.foo})}
</code></pre>

<p>The code above throws a compilation error as <code>foo={this.foo}</code> is an unexpected token (I am aware that foo={this.foo} does not belong here, but where do I put it now?).</p>

<p>How do I attach functions to the component so that I can invoke them from child components? My use case here is that I want my child components to be able to invoke an emit event which will tell the server to push a notification to connected sockets, which will synchronise with connected clients.</p>

<p>Any help would be appreciated.</p>
","1020154","","","","","2015-10-16 18:33:36","How do I pass a function to a child component using react-router","<reactjs><react-router>","1","0","","",""
"42764154","1","42764255","","2017-03-13 12:53:13","","1","169","<p>I'm new to this and following a tutorial.  I've actually copied the code from the starter files but the children do now show in the React devtools, hence not rendering.  The components are fine and I can render them individually. PhotoGrid doesn't show as a child of Main that's all. This is the code:</p>

<p>Main.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';

const Main = React.createClass({
    render() {
        const props = this.props;

        return (
            &lt;div&gt;
                &lt;h1&gt;
                    &lt;Link to=""/""&gt;Reduxstagram&lt;/Link&gt;
                &lt;/h1&gt;

                { React.cloneElement(props.children, props) }
            &lt;/div&gt;
        );
    }
});

export default Main;
</code></pre>

<p>App.js</p>

<pre><code>    import React from 'react';

import { render } from 'react-dom';


// Import css
import css from './styles/style.styl';

// Import Components
import Main from './components/Main';
import Single from './components/Single';
import PhotoGrid from './components/PhotoGrid';

// import react router deps
import { Router, Route, IndexRoute, browserHistory } from 'react-router';


render(
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;IndexRoute component={PhotoGrid}&gt;&lt;/IndexRoute&gt;
      &lt;Route path=""/view/:postId"" component={Single}&gt;&lt;/Route&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;, document.getElementById('root'));
</code></pre>
","7703017","","","","","2017-03-13 12:58:12","Reactjs: returning children with cloneElement","<reactjs><react-router>","1","0","1","",""
"33221473","1","","","2015-10-19 18:33:43","","4","938","<p>I am trying to use <code>reactjs</code> and <code>react-router</code> (<code>1.x</code>) with my Django application but I am having a hard time putting all this together. Here is the github project just incase I dont provide enough information within this question.</p>

<p><a href=""https://github.com/liondancer/django-cherngloong"" rel=""nofollow noreferrer"">https://github.com/liondancer/django-cherngloong</a></p>

<p>I created a <code>path=""about""</code> within my <code>routes.js</code> </p>

<pre><code>var routes = (
    &lt;Router&gt;
        &lt;Route path=""/"" component={ Views.Layout }&gt;
            &lt;IndexRoute component={ Views.Index } /&gt;
            &lt;Route path=""about"" component={ Views.About } /&gt;
        &lt;/Route&gt;
        &lt;Route path=""*"" component={ Views.RouteNotFound } /&gt;
    &lt;/Router&gt;
);

export default routes;
</code></pre>

<p>My <code>layout.js</code></p>

<pre><code>class Layout extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        return (
            &lt;div id=""review-web""&gt;
                &lt;header className=""header""&gt;
                    &lt;LogoElement /&gt;
                    &lt;CenterPiece /&gt;
                &lt;/header&gt;
                &lt;div&gt;
                    { React.cloneElement(this.props.children, { path: this.props.path }) }
                &lt;/div&gt;
                &lt;Footer /&gt;
            &lt;/div&gt;
        );
    }
}

export default Layout;
</code></pre>

<p>When I enter in <code>localhost.8000/about</code> I get a <code>404</code> Django error</p>

<p><a href=""https://i.stack.imgur.com/CQF5r.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CQF5r.png"" alt=""enter image description here""></a></p>

<p>My goal is to keep the frontend and backend separate so I believe I should be able to use Django as just an endpoint for data and not for rendering views.</p>
","1815710","","","","","2016-03-22 11:02:19","404 page not found using Django + react-router","<javascript><python><django><reactjs><react-router>","2","5","","",""
"44329351","1","","","2017-06-02 12:46:55","","1","85","<p>I'm trying to animate on route leave and enter with react-router 3 and transisReactCSSTransitionGroup. 
My code looks something like this:</p>

<pre><code>import React, { Component, PropTypes } from 'react'
import { browserHistory, Router } from 'react-router'
import { Provider } from 'react-redux'

    class AppContainer extends Component {
      static propTypes = {
        routes : PropTypes.object.isRequired,
        store  : PropTypes.object.isRequired
      }

      shouldComponentUpdate () {
        return false
      }

      render () {
        const { routes, store } = this.props
        return (
          &lt;Provider store={store}&gt;
            &lt;div style={{ height: '100%' }}&gt;
              &lt;Router history={browserHistory} children={routes} /&gt;
            &lt;/div&gt;
          &lt;/Provider&gt;
        )
      }
    }

    export default AppContainer
</code></pre>

<p>route index file:</p>

<pre><code>import CoreLayout from '../layouts/CoreLayout'
import Home from './Home'
import About from './About'
import NewsRoute from './News'


export const createRoutes = (store) =&gt; ({
  path        : '/',
  component   : CoreLayout,
  indexRoute  : Home,
  childRoutes : [
    NewsRoute(store),
    About,
  ]
})
</code></pre>

<p>I understand that I need to clone the ReactCSSTransitionGroup component with the location.pathname in my main component.
Something like:</p>

<pre><code> &lt;ReactCSSTransitionGroup
  transitionName=""example""
  transitionAppear={true}
  transitionAppearTimeout={1000}
  transitionLeaveTimeOut={1000}
 &gt;
    {
      React.cloneElement(this.props.children, {
        key: location.pathname}
      )
    }
&lt;/ReactCSSTransitionGroup&gt;
</code></pre>

<p>The problem is I'm not sure how to achieve that with my current setup.</p>
","6216235","","","","","2017-06-02 12:46:55","Animate route change with react-router v3 and transisReactCSSTransitionGroup","<reactjs><react-router>","0","0","","",""
"41876702","1","","","2017-01-26 15:15:58","","1","806","<p>I have been testing the possible limitations/dangers of using <code>React.cloneElement()</code> to extend a component's <code>children</code>. One possible danger I've identified is the possible overwriting of props such as <code>ref</code> and <code>key</code>.</p>

<p>However, as per React's <a href=""https://facebook.github.io/react/blog/2015/03/03/react-v0.13-rc2.html"" rel=""nofollow noreferrer"">0.13 release candidate</a> (back in 2015):</p>

<blockquote>
  <p>However, unlike JSX and cloneWithProps, it also preserves refs. This means that if you get a child with a ref on it, you won't accidentally steal it from your ancestor. You will get the same ref attached to your new element.</p>
  
  <p>[...]</p>
  
  <p>Note: <code>React.cloneElement(child, { ref: 'newRef' })</code> DOES override the ref so it is still not possible for two parents to have a ref to the same child, unless you use callback-refs.</p>
</blockquote>

<p>I have written a <a href=""http://codepen.io/pvienneau/pen/PWJjKq?editors=0010"" rel=""nofollow noreferrer"">small React application</a> that clones children components pushed through, testing for the validity of refs at two levels:</p>

<pre><code>class ChildComponent extends React.Component{
  constructor(props){
    super(props);   

    this.onClick = this.onClick.bind(this);
    this.extendsChildren = this.extendChildren(this);
  }

  onClick(e) {
    e.preventDefault();

    try{
      alert(this._input.value);
    }catch(e){
      alert('ref broken :(');
    }
  }

  extendChildren(){
    return React.Children.map(this.props.children, child =&gt; {
      return React.cloneElement(
        child,
        {
          ref: ref =&gt; this._input = ref
        }
      );
    });
  }

  render() {
    return(
      &lt;div&gt;
      &lt;button onClick={this.onClick}&gt;
        ChildComponent ref check
      &lt;/button&gt;
      {this.extendChildren()}
    &lt;/div&gt;
    );
  }
}


class AncestorComponent extends React.Component{
  constructor(props){
    super(props);

    this.onClick = this.onClick.bind(this);
  }

  onClick(e) {
    e.preventDefault();

    try{
      alert(this._input.value);
    }catch(e){
      alert('ref broken :(');
    }

  }

  render() {
    return (
    &lt;div&gt;
        &lt;p&gt;
          The expected behaviour is that I should be able to click on both Application and ChildComponent check buttons and have a reference to the input (poping an alert with the input's value).
        &lt;/p&gt;
      &lt;button onClick={this.onClick}&gt;
        Ancestor ref check
      &lt;/button&gt;
      &lt;ChildComponent&gt;
        &lt;input ref={ref =&gt; this._input = ref} defaultValue=""Hello World""/&gt;
      &lt;/ChildComponent&gt;
    &lt;/div&gt;
    );
  }
}
</code></pre>

<p>However, cloningElements inside my ChildComponent overwrites the AncestorComponent's <code>ref</code> prop from the input field, where I would expect that <code>ref</code> prop to be preserved, alongside the new <code>ref</code> I defined as part of the <code>React.cloneElement</code>.</p>

<p>You can test this by running the <a href=""http://codepen.io/pvienneau/pen/PWJjKq?editors=0010"" rel=""nofollow noreferrer"">CodePen</a>.</p>

<p>Is there anything I'm doing wrong, or has this feature been dropped since?</p>
","751564","","","","","2017-01-26 16:07:00","Maintaining Component Refs Through React.cloneElement","<javascript><reactjs>","1","0","","",""
"35800779","1","35800914","","2016-03-04 16:12:57","","0","977","<p>I'm new to ReactJS and recently trying to work out a sidebar component.
I have two react components (<strong>SidebarNav</strong> and <strong>SidebarNavItem</strong>) which can be nested with each other to display a structured sidebar menu.</p>

<p><strong>SidebarNav</strong></p>

<pre><code>import React, {Component, PropTypes} from 'react';

export default class SidebarNav extends Component {

    static propTypes = {
        level: PropTypes.number,
        children: React.PropTypes.oneOfType([
            React.PropTypes.object,
            PropTypes.arrayOf(PropTypes.object)
        ])
    };

    render() {

        const {level, children} = this.props;

        const currentLevel = !level ? 1 : level;

        let navClass;
        switch (currentLevel) {
            case 1:
                navClass = 'tfmenu';
                break;
            case 2:
                navClass = 'nav-second-level collpase in';
                break;
            default:
                navClass = 'nav-third-level collpase in';
        }

        return (
            &lt;ul className={'nav ' + navClass}&gt;
                {React.Children.map(children, element =&gt; {
                    return React.cloneElement(element, {level: currentLevel});
                })}
            &lt;/ul&gt;
        );
    }
}
</code></pre>

<p><strong>SidebarNavItem</strong></p>

<pre><code>import React, {Component, PropTypes} from 'react';

export default class SidebarNavItem extends Component {

    static propTypes = {
        title: PropTypes.string.isRequired,
        href: PropTypes.string.isRequired,
        iconClass: PropTypes.string,
        level: PropTypes.number,
        children: PropTypes.object
    };

    render() {

        const {title, href, iconClass, level, children} = this.props;

        return (
            &lt;li&gt;
                &lt;a href={href}&gt;
                    {iconClass &amp;&amp; level === 1 &amp;&amp; &lt;i className={'fa ' + iconClass}&gt;&lt;/i&gt;}

                    {level === 1 ? &lt;span className=""nav-label""&gt;{title}&lt;/span&gt; : {title}}

                    {level === 2 &amp;&amp; children &amp;&amp; &lt;span className=""fa arrow""&gt;&lt;/span&gt;}

                    {'level: ' + level}
                &lt;/a&gt;

                {children &amp;&amp; React.cloneElement(children, {level: level + 1})}
            &lt;/li&gt;
        );
    }
}
</code></pre>

<p>The problem seems exists in the line:</p>

<pre><code>{children &amp;&amp; React.cloneElement(children, {level: level + 1})}
</code></pre>

<p>I'd like to explain here. The <em>level</em> prop is used to distinguish how deep the sidebar item lays so that different styles can be applied. When I tried to test the component with following code.</p>

<pre><code>&lt;SidebarNav&gt;
  &lt;SidebarNavItem href=""/portal"" title=""Portal"" iconClass=""fa-home""&gt;
    &lt;SidebarNav&gt;
      &lt;SidebarNavItem href=""/portal/home1"" title=""Home1"" /&gt;
      &lt;SidebarNavItem href=""/portal/home2"" title=""Home2"" /&gt;
    &lt;/SidebarNav&gt;
  &lt;/SidebarNavItem&gt;
  &lt;SidebarNavItem href=""/signin"" title=""Signin"" iconClass=""fa-home"" /&gt;
&lt;/SidebarNav&gt;
</code></pre>

<p>I got the following errors. </p>

<blockquote>
  <p>Invariant Violation: Objects are not valid as a React child (found:
  object with keys {title}). If you meant to render a collection of
  children, use an array instead or wrap the object using
  createFragment(object) from the React add-ons. Check the render method
  of <code>SidebarNavItem</code>.</p>
</blockquote>

<p>Does anyone know what's going wrong with my code? Many thanks in advance.</p>
","5680933","","2815635","","2016-03-04 17:38:18","2016-03-04 17:38:18","Error when overriding props in React.cloneElement()","<javascript><reactjs><override>","2","0","","",""
"43702277","1","","","2017-04-30 02:16:31","","1","405","<p>I am having some trouble accessing what I wrote to the store after one of my actions fires and reading it on a different page and different component via react-router. Here is what my main code looks like:</p>

<pre><code>  &lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;
</code></pre>

<p>And so on the Index page the user fills out a form and the submit button for that form fires an action that saves all the form data into the store and brings them to /preview. However when I get the the Preview component and try to access the data I just stored it is nowhere to be found? How can I make it so that when the user fills out a form on the Index page, I can display their results on a different one.</p>

<p>Edit: Here are is the code for all my main components</p>

<pre><code>import React from 'react';
import { render } from 'react-dom';

import css from './styles/main.css';
import bootstrap from './styles/bootstrap.css';

import App from './components/App';
import LetterForm from './components/LetterForm';
import Preview from './components/Preview';

import { Router, Route, IndexRoute, browserHistory } from 'react-router';
import { Provider } from 'react-redux';
import store, {history} from './store';

const router = (
  &lt;Provider store={store}&gt;
        &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
        &lt;/Router&gt;
    &lt;/Provider&gt;
);

render(router, document.getElementById('root'));
</code></pre>

<p>App.js (submitLetter should contain all the form data, after the form is submitted)</p>

<pre><code>import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import * as actionCreators from '../actions/actionCreators';

import Main from './Main';

function mapStateToProps(state) {
    return {
    submitLocations: state.submitLocations,
    submitLetter: state.submitLetter
    }
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators(actionCreators, dispatch);
}

const App = connect(mapStateToProps, mapDispatchToProps)(Main);

export default App;
</code></pre>

<p>Main.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';
import SubmitTo from './SubmitTo';
import LetterForm from './LetterForm';

class Main extends React.Component{
    constructor(props){
        super(props);
    }
    render(){
        return (
            &lt;div className=""main-wrapper""&gt;
        &lt;nav className=""navbar navbar-default""&gt;
          &lt;div className=""container-fluid""&gt;
            &lt;div className=""navbar-header""&gt;
              &lt;button type=""button"" className=""navbar-toggle collapsed""&gt;
                &lt;span className=""sr-only""&gt;Toggle navigation&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a className=""navbar-brand"" href=""#""&gt;Logo Ipsum&lt;/a&gt;
            &lt;/div&gt;

            &lt;div className=""collapse navbar-collapse"" id=""bs-example-navbar-collapse-1""&gt;
              &lt;ul className=""nav navbar-nav""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Link&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
              &lt;ul className=""nav navbar-nav navbar-right""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Home&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;About&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Sign up&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;/nav&gt;
        &lt;div className=""main-container""&gt;
                  &lt;h1&gt;
                     Pitch your startup to the top tech sites, free!
                  &lt;/h1&gt;
          &lt;SubmitTo {...this.props}/&gt;
                  {React.cloneElement(this.props.children,this.props)}
        &lt;/div&gt;
            &lt;/div&gt;
        )
    }
}

export default Main;
</code></pre>

<p>LetterForm.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';

class LetterForm extends React.Component{
  constructor(props){
    super(props);
    this.state = {'companyInput':'','raisedInput':'','raiseLocation':''};
  }
  handleSubmit(){
    var company = this.refs.company.value;
    var companyType = this.refs.companyType.value;
    var raised = this.refs.raised.value;
    var raiseLocation = this.refs.raiseLocation.value;
    var stateCopy = Object.assign({},this.state);
    if(!company){
      stateCopy['companyInput'] = 'input-error';
    }else{
      stateCopy['companyInput'] = '';
    }
    if(!raised){
      stateCopy['raisedInput'] = 'input-error';
    }else{
      stateCopy['raisedInput'] = '';
    }
    if(!raiseLocation){
      stateCopy['raiseLocation'] = 'input-error';
    }else{
      stateCopy['raiseLocation'] = '';
    }
    this.setState(stateCopy);
    this.props.submitLetter(company,companyType,raised,raiseLocation);
  }
  render(){
    return (
      &lt;div className=""letter-form well""&gt;
        &lt;form ref=""letterForm""&gt;
          &lt;h2&gt;Dear TechCrunch Editor,&lt;/h2&gt;
          &lt;br/&gt;
          &lt;p&gt;I am working with a company called&lt;/p&gt;
          &lt;input ref=""company"" className={""flat-input big-input ""+this.state.companyInput}/&gt;
          &lt;br/&gt;
          &lt;p&gt;We are:&lt;/p&gt;
          &lt;label className=""letter-label""&gt;Bootstrapped&lt;/label&gt;&lt;input value=""bootstrapped"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;label className=""letter-label""&gt;Venture Backed&lt;/label&gt;&lt;input value=""venture"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;br/&gt;
          &lt;p&gt;and have just raised&lt;/p&gt; 
          &lt;input ref=""raised"" type=""number"" className={""flat-input small-input ""+this.state.raisedInput}/&gt;
          &lt;p&gt;from&lt;/p&gt;
          &lt;input ref=""raiseLocation"" className={""flat-input medium-input ""+this.state.raiseLocation}/&gt;
          &lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;
        &lt;/form&gt;
        &lt;button className=""btn btn-success"" onClick={this.handleSubmit.bind(this)}&gt;Next step&lt;/button&gt;
      &lt;/div&gt;
    )
  }
}

export default LetterForm;
</code></pre>
","1775500","","1775500","","2017-04-30 15:10:39","2017-04-30 15:10:39","Passing data in store from one component to another on different urls using redux, react-router?","<reactjs><redux><react-router><react-redux>","1","7","1","",""
"42991329","1","42993320","","2017-03-24 04:17:01","","0","582","<p>So, I have a site with react router, and redux (example below is severely simplified)</p>

<pre><code>&lt;Route path=""/"" component={ A } &gt;
  &lt;Route path=""/B"" component={B} /&gt;
&lt;/Route&gt;
</code></pre>

<p><strong>A.jsx</strong></p>

<pre><code>class A extends Component {
    render () {
        const calculated_value_to_pass_down = FooBar()
        return (
            &lt;div&gt;
                {React.Children.map(this.props.children,
                    (child) =&gt; React.cloneElement(child, {
                        required_prop: calculated_value_to_pass_down
                    })
                )}
            &lt;/div&gt;
        )
    }
}    
export default A
</code></pre>

<p><strong>B.jsx</strong></p>

<pre><code>class B extends Component {
    render () {
        return (
            &lt;div&gt;
                { this.props.required_prop }
            &lt;/div&gt;
        )
    }
}    
B.propTypes = {
    required_prop: PropTypes.any.isRequired
}    
export default B
</code></pre>

<p>But, when I go to <code>localhost:8080/B</code> I get a error backtrace:</p>

<pre><code>Warning: Failed prop type: The prop `required_prop` is marked as required in `B`, but its value is `undefined`.
in A (created by RouterContext)
in RouterContext (created by Router)
in Router
in Provider
</code></pre>

<p>The page 100% works. And the error doesn't happen in production, but I hate the error showing up at all. </p>

<p>The page never actually renders with the undefined props even, I get the error before render is even called.</p>

<p>I know I could simply remove the .isRequired and it will work, but that idea smells rotten.</p>

<p>thanks!</p>
","191440","","","","","2017-03-24 17:33:16","Why am I getting Failed prop type using react router and nested components","<reactjs><react-router><react-redux><react-proptypes>","3","6","","",""
"48921725","1","48922957","","2018-02-22 07:24:18","","1","103","<p>React.cloneElement() always require first parameter as react component which should be passed as children in props. </p>

<p>Is there are way to pass a simple HTML node as a children. Please refer the code below for better understanding of my issue:</p>

<p>Dialog.jsx (Common component):</p>

<pre><code> return (
            &lt;div className=""app-dialog-jsx"" ref={(ele) =&gt; this.ele = ele}&gt;
                {this.state.show &amp;&amp; React.cloneElement(this.props.children, {
                    contentStyle: {
                        height: 400,
                        overflowY: 'auto',
                        overflowX: 'hidden'
                    },
                    method1: this. method1,
                    method2: this. method2
                })}
            &lt;/div&gt;
        );
</code></pre>

<p>now I can not pass:</p>

<pre><code>&lt;Dialog
  ref={(dialog)=&gt;this.dialog=dialog}
  method1={()=&gt;console.log(1)}
  method2 ={()=&gt;console.log(1)}
&gt;
  &lt;h4&gt;somethign&lt;/h4&gt;
&lt;/Dialog&gt;
</code></pre>

<p>H4 needs to be a react component otherwise it will not set the props in cloneElement. How can I send simple HTML here, any help?</p>
","7879013","","","","","2018-03-19 14:30:28","render simple HTML with react.cloneElement","<javascript><reactjs>","2","4","","",""
"48944362","1","","","2018-02-23 09:01:56","","1","227","<p>My app drop-downs are pretty slow. It especially takes a long time if i go into the Settings Screen and try to change my major. Or anything dealing with adding or editing a major in this specific screen. I really need to make adding or editing a major much faster. I am not sure the reason why editing or adding a major is taking too long. And I am not sure about how to go at making adding and editing a major much faster. So I am posting the entire component and I am commenting parts that deal with adding or editing a major. I am using react-native-material-dropdown. 
Here is the entire component code:</p>

<pre><code>import React from 'react';
import PropTypes from 'prop-types';
import { View, ScrollView, Text, TouchableOpacity } from 'react-native';
import { connect } from 'react-redux';
import { compose, withStateHandlers } from 'recompose';
import { Dropdown } from 'react-native-material-dropdown';
import { Icon } from 'react-native-material-ui';
import R from 'ramda';
import { ConnectivityRenderer } from 'react-native-offline';
import NetworkConnectivity from '../error/NetworkConnectivity';
import { toArray } from '../selectors';
import { Container, Switch, SwitchOption } from './common';
import { editStudent } from '../actions';

const propTypes = {
  toolbar: PropTypes.elem,
  loading: PropTypes.bool,
  university: PropTypes.shape({
  id: PropTypes.string,
  name: PropTypes.string,
  }),
  universities: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string,
      name: PropTypes.string,
    })
  ),
  degrees: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string,
      name: PropTypes.string,
    })
  ),
  studentDegrees: PropTypes.arrayOf(
    PropTypes.shape({
      index: PropTypes.number,
      track: PropTypes.string,
    })
  ),
  errors: PropTypes.shape({
    university: PropTypes.string,
    degree: PropTypes.string,
  }),
  year: PropTypes.string,
  onUniversityChange: PropTypes.func,
  onTermChange: PropTypes.func,
  onDegreeChange: PropTypes.func,
  onYearChange: PropTypes.func,
  onTrackChange: PropTypes.func,
  onAddDegree: PropTypes.func,
  onDone: PropTypes.func,
};

const contextTypes = {
  uiTheme: PropTypes.object.isRequired,
};

const validate = state =&gt; {
  const result = {};

  if (!state.university.id) {
    result.university = 'You should select an university';
  }

  return result;
};

const enhance = compose(
  connect(
    ({ user, universities, degrees }) =&gt; ({
      studentId: user.id,
      user,
      universities: toArray(universities),
      degrees: toArray(degrees),
    }),
    { editStudent }
  ),
  withStateHandlers(
    props =&gt; {
      return {
        university: props.user.university || {},
        year: props.user.academicClass || 'freshman',
        studentDegrees: R.isEmpty(props.degrees)
          ? []
          : R.isEmpty(props.user.studentDegrees)
            ? [{ degree_id: props.degrees[0].id, track: 'Major' }]
            : R.values(props.user.studentDegrees),
        errors: {},
       };
    },
    {
      onUniversityChange: () =&gt; (value, index, data) =&gt; ({
        university: data[index],
       }),
      onYearChange: () =&gt; year =&gt; ({ year }),
      onTrackChange: state =&gt; ({ idx, track }) =&gt; ({
        studentDegrees: R.update(
          idx,
          R.assoc('track', track, state.studentDegrees[idx]),
          state.studentDegrees
        ),
      }),



      // Fucntion dealing with degree change

      onDegreeChange: (state, props) =&gt; ({ idx, index }) =&gt; ({
         studentDegrees: R.update(
          idx,
          R.assoc(
            'degree_id',
            props.degrees[index].id,
            state.studentDegrees[idx]
          ),
          state.studentDegrees
        ),
      }),


    // Function dealing with degree adding

    onAddDegree: (state, props) =&gt; () =&gt; ({
        studentDegrees: R.append(
          {
            degree_id: props.degrees[0].id,
            track: 'Major',
          },
          state.studentDegrees
        ),
      }),
      onRemoveDegree: state =&gt; idx =&gt; ({
        studentDegrees: [
          ...state.studentDegrees.slice(0, idx),
          ...state.studentDegrees.slice(idx + 1),
        ],
      }),


      // When the user is done with settings.
      // This function communicates with the back end to save things in the remote database
      onDone: (state, { studentId, editStudent }) =&gt; () =&gt; {
      const errors = validate(state);
        if (Object.keys(errors).length !== 0) {
          return { errors };
        }

        editStudent(
          studentId,
          state.year,
          state.university.id,
          state.studentDegrees
        );
      },
    }
  )
);




// The Settings Component 
  const FormUserSettings = (props, context) =&gt; {
  const styles = getStyles(props, context);

  return (
    &lt;ConnectivityRenderer&gt;
      {isConnected =&gt; (
        isConnected ? (
          &lt;Container&gt;
            {React.cloneElement(props.toolbar, {
              onRightElementPress: props.onDone,
            })}
            &lt;ScrollView style={styles.container}&gt;
              &lt;Text
                style={[
                  styles.title,
                  props.errors.university ? styles.titleError : {},
                ]}
              &gt;
                University
              &lt;/Text&gt;

          // Selecting a university
              &lt;Dropdown
                label=""Select university...""
                data={props.universities.map(u =&gt; ({ id: u.id, value: u.name }))}
                onChangeText={props.onUniversityChange}
                value={props.university.name}
              /&gt;
              {props.errors.university &amp;&amp;
                &lt;Text style={styles.errorMessage}&gt;
                  {props.errors.university}
                &lt;/Text&gt;}
              &lt;View style={{ height: 16 }} /&gt;
                &lt;Text style={styles.title}&gt;Current Year&lt;/Text&gt;
               &lt;View style={{ height: 8 }} /&gt;
              &lt;Switch
                value={props.year}
                onChange={props.onYearChange}
                selectedColor={styles.switchSelectedColor}
                unselectedColor={styles.switchUnselectedColor}
               &gt;
                &lt;SwitchOption text=""Freshman"" value=""freshman"" /&gt;
                &lt;SwitchOption text=""Sophomore"" value=""sophomore"" /&gt;
                &lt;SwitchOption text=""Junior"" value=""junior"" /&gt;
                &lt;SwitchOption text=""Senior"" value=""senior"" /&gt;
                &lt;/Switch&gt;
               &lt;View style={{ height: 16 }} /&gt;
               &lt;Text
                style={[styles.title, props.errors.degree ? styles.titleError : {}]}
              &gt;
            Major / Minors
          &lt;/Text&gt;
          {!R.isEmpty(props.degrees) &amp;&amp;
            props.studentDegrees.map((sd, idx) =&gt; {
              const degree = R.find(R.propEq('id', sd.degree_id), props.degrees);

              return (
                &lt;View
                  key={`sd-${idx}`}
                  style={{ flex: 1, height: 96, marginTop: 24 }}
                &gt;
                  &lt;View
                    style={{
                      flex: 1,
                      flexDirection: 'row',
                      alignItems: 'flex-end',
                    }}
                  &gt;
                    &lt;View style={{ flex: 1 }}&gt;
                      &lt;Dropdown
                        style={{ flex: 1 }}
                        label=""Select degree...""
                        data={props.degrees.map(d =&gt; ({
                          id: d.id,
                          value: d.name,
                        }))}
                        onChangeText={(value, index) =&gt;
                          props.onDegreeChange({ idx, index })}
                        value={degree ? degree.name : ''}
                      /&gt;
                    &lt;/View&gt;
                    {props.studentDegrees.length !== 1 &amp;&amp;
                      &lt;TouchableOpacity
                        style={{ marginBottom: 8, paddingLeft: 24 }}
                        onPress={() =&gt; props.onRemoveDegree(idx)}
                      &gt;
                        &lt;Icon name=""delete"" size={24} /&gt;
                      &lt;/TouchableOpacity&gt;}
                  &lt;/View&gt;
                  &lt;Switch
                    value={sd.track}
                    onChange={track =&gt; props.onTrackChange({ idx, track })}
                    selectedColor={styles.switchSelectedColor}
                    unselectedColor={styles.switchUnselectedColor}
                  &gt;
                    &lt;SwitchOption text=""Major"" value=""Major"" /&gt;
                    &lt;SwitchOption text=""Minor"" value=""Minor"" /&gt;
                    &lt;SwitchOption text=""Certificate"" value=""Cert"" /&gt;
                  &lt;/Switch&gt;
                &lt;/View&gt;
              );
            })}
          &lt;TouchableOpacity style={{ padding: 10 }} onPress={props.onAddDegree}&gt;
            &lt;Text style={styles.addDegreeText}&gt;+ Degree&lt;/Text&gt;
          &lt;/TouchableOpacity&gt;
        &lt;/ScrollView&gt;
      &lt;/Container&gt;
    ) : (
      &lt;Container&gt;
        {React.cloneElement(props.toolbar, {
          onRightElementPress: props.onDone,
        })}
        &lt;NetworkConnectivity /&gt;
        &lt;ScrollView style={styles.container}&gt;
          &lt;Text
            style={[
              styles.titleDisabled,
              props.errors.university ? styles.titleError : {},
            ]}
          &gt;
            University
          &lt;/Text&gt;
          &lt;Dropdown
            label=""""
            data={props.universities.map(u =&gt; ({ id: u.id, value: u.name }))}
            onChangeText={props.onUniversityChange}
            value={props.university.name}
            disabled={true}
            editable={false}
          /&gt;
          {props.errors.university &amp;&amp;
            &lt;Text style={styles.errorMessage}&gt;
              {props.errors.university}
            &lt;/Text&gt;}
          &lt;View style={{ height: 16 }} /&gt;
          &lt;Text style={styles.titleDisabled}&gt;Current Year&lt;/Text&gt;
          &lt;View style={{ height: 8 }} /&gt;
          &lt;Switch
            value={props.year}
            onChange={props.onYearChange}
            selectedColor={styles.disabledSwitchSelectedColor}
            unselectedColor={styles.switchUnselectedColor}
          &gt;
            &lt;SwitchOption text=""Freshman"" value=""freshman"" /&gt;
            &lt;SwitchOption text=""Sophomore"" value=""sophomore"" /&gt;
            &lt;SwitchOption text=""Junior"" value=""junior"" /&gt;
            &lt;SwitchOption text=""Senior"" value=""senior"" /&gt;
          &lt;/Switch&gt;
          &lt;View style={{ height: 16 }} /&gt;
          &lt;Text
            style={[styles.titleDisabled, props.errors.degree ? styles.titleError : {}]}
          &gt;
            Major / Minors
          &lt;/Text&gt;

          // The problem of slowness starts here
          // I feel like something here should be improved
          {!R.isEmpty(props.degrees) &amp;&amp;
            props.studentDegrees.map((sd, idx) =&gt; {
              const degree = R.find(R.propEq('id', sd.degree_id), props.degrees);

                  return (
                    &lt;View
                      key={`sd-${idx}`}
                      style={{ flex: 1, height: 96, marginTop: 24 }}
                    &gt;
                      &lt;View
                        style={{
                          flex: 1,
                          flexDirection: 'row',
                          alignItems: 'flex-end',
                        }}
                      &gt;
                        &lt;View style={{ flex: 1 }}&gt;
                          &lt;Dropdown
                            style={{ flex: 1 }}
                            label=""Select degree...""
                            data={props.degrees.map(d =&gt; ({
                              id: d.id,
                              value: d.name,
                            }))}
                            disabled={true}
                            editable={false}
                            onChangeText={(value, index) =&gt;
                              props.onDegreeChange({ idx, index })}
                            value={degree ? degree.name : ''}
                          /&gt;
                        &lt;/View&gt;
                      &lt;/View&gt;
                      &lt;Switch
                        value={sd.track}
                         onChange={track =&gt; props.onTrackChange({ idx, track })}
                        selectedColor={styles.disabledSwitchSelectedColor}
                        unselectedColor={styles.switchUnselectedColor}
                      &gt;
                        &lt;SwitchOption text=""Major"" value=""Major"" /&gt;
                        &lt;SwitchOption text=""Minor"" value=""Minor"" /&gt;
                        &lt;SwitchOption text=""Certificate"" value=""Cert"" /&gt;
                      &lt;/Switch&gt;
                    &lt;/View&gt;
                  );
                })}
              &lt;TouchableOpacity disabled={true} style={{ padding: 10 }} onPress={props.onAddDegree} disabled={true}&gt;
                &lt;Text style={styles.addDegreeTextDisabled}&gt;+ Degree&lt;/Text&gt;
              &lt;/TouchableOpacity&gt;
            &lt;/ScrollView&gt;
          &lt;/Container&gt;
        )
      )}
    &lt;/ConnectivityRenderer&gt;
  );
};



FormUserSettings.contextTypes = contextTypes;
FormUserSettings.propTypes = propTypes;

export default enhance(FormUserSettings);
</code></pre>
","8005612","","571724","","2018-02-24 02:58:48","2018-02-24 02:58:48","Why is react-native-material-dropdown so slow in the way I use it to edit and add majors?","<performance><react-native><dropdown>","0","0","1","",""
"45555017","1","","","2017-08-07 20:15:23","","0","110","<p>I'm following a react and redux tutorial in which the following code is used:</p>

<pre><code>class App extends Component {
  render() {
    return (
      &lt;div&gt;
        {React.cloneElement(this.props.children, this.props)}
      &lt;/div&gt;
    );
  }
};
</code></pre>

<p>I've checked out the <a href=""https://facebook.github.io/react/docs/react-api.html#cloneelement"" rel=""nofollow noreferrer"">documentation</a> for <code>cloneElement()</code> and it only covers examples where a React component is passed as the first object, e.g. <br>
<code>{React.cloneElement(ChatWindow, this.props.children, this.props)}</code>. </p>

<p>How does the function work when you omit the initial element arg?</p>
","7028216","","7028216","","2017-08-07 20:25:15","2017-08-07 20:25:15","How does React.cloneElement() work when you don't pass it an element?","<reactjs>","0","2","","",""
"35616029","1","35616144","","2016-02-25 00:34:06","","2","3245","<p>Can anyone let me know if using cloneElement (on exist element instance) or createElement (on react Element class) which one is better in term of performance?</p>

<p>Sometimes cloning something is faster than create new instance.
Please let me know. Thanks</p>
","533738","","","","","2017-03-15 22:44:15","React createElement vs cloneElement","<javascript><reactjs><clone>","2","1","1","",""
"36921019","1","37448255","","2016-04-28 16:58:46","","1","878","<p>So, I have a list, and I can now drag elements (divs) out of that list, using react-draggable. React-draggable makes the original element draggable (makes sense), but I need to drag a copy (clone) of the original element, and keep the original element in place. 
So, I have the entities list that contain the elements, each element has an event that calls the parent element list hoping to clone the original shift, and wrap the original element with a draggable element in order to make it draggable. Once it it draggable/created, I want to attach it to a different element on the screen, and put the initial position to centre where the mouse cursor is. 
One last thing I want to do is that if the element is dropped in a ""wrong"" location, it should animate (react-motion I guess) a return to the original position. Originally it was written in Jquery and I obviously know how to use jquery-ui to make all this happen, but I'm a bit stuck with doing it the react way. </p>

<pre><code>   var Scheduler = require('scheduler/components/Scheduler');

    var ShiftTypeDiv = require('scheduler/components/ShiftType');

    var Draggable = ReactDraggable;

    var ShiftTypes = React.createClass({
      getInitialState: function() {
         return ({
          shiftTypes: SchedulerStore.getShiftTypes(),
          clonedItem: null
         })
      },
      handleStart: function (event, ui) {
        console.log('handleStart: ', event);
        console.log('Position: ', ui.position);
      },

      cloneShiftBeforeDrag: function (item) {
        console.log('cloning', item);
        React.cloneElement(item);
        ReactDOM.findDOMNode
        this.setState({
          clonedItem: item
        });
      },

      handleDrag: function (event, ui) {
        console.log('handledrag: ',ui);
        console.log('dragging');
      },

      handleStop: function (event, ui) {
        console.log('handleStop: ', event);
        console.log('Position: ', ui.position);
      },

      render: function() {

        var self = this;

        shiftTypesJSX = this.state.shiftTypes.map(function(shiftType,index) {
        return (
                &lt;ShiftTypeDiv shiftType={shiftType} key={index} cloneShiftBeforeDrag={self.cloneShiftBeforeDrag.bind(null, shiftType)} /&gt;
                )
        });

        return (
          &lt;div &gt;
             &lt;div className=""box-header""&gt;
              &lt;ul&gt;
                &lt;li className=""title title-name""&gt;Shift Templates&lt;/li&gt;
                &lt;li className=""title edit-link""&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/div&gt;
              &lt;div className=""box-content"" data-onboarding-item=""2""&gt;
                &lt;Draggable
                  handle="".ui-draggable""
                  zIndex={100}
                  onStart={this.handleStart}
                  onDrag={this.handleDrag}
                  onStop={this.handleStop}
                  &gt;
                  &lt;div className=""draggable-custom-shift ui-draggable ui-draggable-handle""&gt;&lt;strong&gt;New Shift&lt;/strong&gt;&lt;/div&gt;
                &lt;/Draggable&gt;
              &lt;/div&gt;
            &lt;div className=""box-content"" id=""shift-templates""&gt;
              &lt;div className=""row-fluid""&gt;
                &lt;div id=""shift-types-list"" className=""span12""&gt;
                  &lt;div className=""input-group shift-type-filter-form""&gt;
                    &lt;input type=""text"" className=""span12"" id=""shift-type-filter"" placeholder=""Filter shift templates"" /&gt;
                    &lt;i className=""icon-remove-sign"" id=""remove-shift-type-filter""&gt;&lt;/i&gt;
                  &lt;/div&gt;
                  &lt;div id=""shift_types"" &gt;
                    {shiftTypesJSX}
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          )
      }
    })

    module.exports = ShiftTypes;


var Scheduler = require('scheduler/components/Scheduler').default;

var Draggable = ReactDraggable;

var ShiftTypeDiv = React.createClass({
  handleStart: function (event, ui) {
    console.log('cloning');
    this.props.cloneShiftBeforeDrag(this);
  },

  handleDrag: function (event, ui) {
    console.log('handledrag: ',ui);
    console.log('dragging');
  },

  handleStop: function (event, ui) {
    console.log('handleStop: ', event);
    console.log('Position: ', ui);
    this.setState({

    })

  },
  render: function() {
    shiftType = this.props.shiftType;
    return (
      &lt;Draggable
              bounds=""body""
              zIndex={100}
              onStart={this.handleStart}
              onDrag={this.handleDrag}
              onStop={this.handleStop}
              position={null}
              &gt;
        &lt;div className=""draggable-shift-type ui-draggable ui-draggable-handle"" data-shift-type-id={shiftType.id}&gt;
          {shiftType.name} &lt;span dangerouslySetInnerHTML={{__html:shiftType.start_time + '-' + shiftType.end_time}}&gt;&lt;/span&gt;
        &lt;/div&gt;
      &lt;/Draggable&gt;
      )
  }
})

module.exports = ShiftTypeDiv;
</code></pre>
","5364505","","","","","2018-01-16 13:16:43","How to clone a react element for dragging purposes","<reactjs><draggable><react-motion>","2","0","","",""
"36520479","1","","","2016-04-09 17:46:25","","0","817","<p>I'm using react-router which forces me to use <code>React.cloneElement</code> to pass down properties to my Children.  I can pass down objects and functions, but my issue is where one of my functions has a return object back up to the parent, which is always undefined.  The function triggers in the parent, but it doesn't receive the object I'm passing it from the child.</p>

<p>Here is a jsFiddle of the below example code if anyone wants to edit it <a href=""https://jsfiddle.net/conor909/gqdfwg6p/"" rel=""nofollow"">https://jsfiddle.net/conor909/gqdfwg6p/</a></p>

<pre><code>import React from ""react"";
import ReactDom from ""react-dom"";

const App = React.createClass({

    render() {
        return (
            &lt;div&gt;
                {this.getChildrenWithProps()}
            &lt;/div&gt;
        )
    },

    getChildrenWithProps() {
        return React.Children.map(this.props.children, (child) =&gt; {
            return React.cloneElement(child, {
                myFunction: this.myFunction
            });
        });
    },
    // NOTE:
    // the idea is that the variable 'newForm' should be sent back up to App, I can log out 'newForm' in the Child, but here in App, it is undefined.
    myFunction(newForm) {
        console.log(newForm); // =&gt; undefined object 
    }

});

const Child = React.createClass({

    propTypes: {
        myFunction: React.PropTypes.func,
        myForm: React.PropTypes.object
    },

    render() {
        return (
            &lt;form className=""col-sm-12""&gt;
                &lt;MyForm
                    changeForm={this.onChangeForm}
                    form={this.props.myForm} /&gt;
            &lt;/form&gt;
        )
    },

    onChangeForm(formChanges) {
        let newForm = {
            ...this.props.myForm,
            ...formChanges
        }
        // console.log(newForm); =&gt; here my newForm object looks fine 
        this.props.myFunction(newForm);
    }
});

const MyForm = React.createClass({

    propTypes: {
        changeForm: React.PropTypes.func.isRequired
    },

    render() {
        return (
             &lt;div&gt;
                 &lt;Input onChange={this.onChangeForm}&gt;
             &lt;/div&gt;
        )
    },

    onChangeForm(value) {
        this.props.changeForm({ something: value });
    }
});
</code></pre>
","1853114","","1853114","","2016-04-09 20:46:39","2016-04-09 20:46:39","How to use React.cloneElement to pass a function property with a return object?","<javascript><reactjs><properties><react-router>","0","4","","",""
"45722352","1","45822165","","2017-08-16 20:21:19","","2","408","<p>If I type the parent component's children as <code>Node</code>, then it says that <code>children</code> is the wrong type to pass to <code>React.Children.map</code>. However, if I type it as <code>ChildrenArray&lt;any&gt;</code>, then it says that the type I'm passing to <code>React.cloneElement</code> is incorrect.</p>

<p><a href=""https://flow.org/try/#0JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwBQdMAnmFnAArFjoC8cA3nThxcAC2AAbACaUAdgH4AXJiowAdAGFx0uQEEoUZEwA8yWUwB8AGjoBfenVwS06ACpZU8LAA8YWWVLo2HjqGiSQsv4wxpwQ3BYCQnBgXKjKsdz0wklyUlhQABQAlInCwpQwAK5Qsiohmtoy-mogyGAFMOKoailx3WKSTbJWIo1wPAlJZXX4ak4QkQCiElggUQUD0iP8tkVTcEVZcLZ2DMbunhZJxqhgZhYEEBDGAPS399fvshYARshQry+V1eFxgFiAA"" rel=""nofollow noreferrer"">Scenario 1</a>:</p>

<pre><code>import * as React from 'react';

type Props = {
  children?: React.ChildrenArray&lt;any&gt;,
};

class Test extends React.Component&lt;Props&gt; {
  props: Props;

  render() {
    return React.Children.map(this.props.children, child =&gt; 
      React.cloneElement(child, {})
    );
  }
}

&lt;Test&gt;
  &lt;span&gt;foo&lt;/span&gt;
  &lt;span&gt;bar&lt;/span&gt;
&lt;/Test&gt;
</code></pre>

<p><a href=""https://flow.org/try/#0JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwBQdMAnmFnAArFjoC8cA3nThxcAC2AAbACaUAdgH4AXHAByEKVgA0dAL706uCWnQAVLKnhYAHjCyyp6bHhgA6AMIlIsuzAA8nCG4APgEhODAuVGUA7nphMLkNKAAKAEpQ4WFKGABXKFlMKlc3cWk5FxBkMGSYcVQXCMD6sUkZO00RUqk4HhCwzMLnF0MIbwBRCSwQH2SW6Q7+HVT+uFS4uB1dBl8zCyCw31QwZFkggggIXwB6I5P94UPj04AjZChr29O6a92YIKA"" rel=""nofollow noreferrer"">Scenario 2</a>:</p>

<pre><code>import * as React from 'react';

type Props = {
  children?: Node,
};

class Test extends React.Component&lt;Props&gt; {
  props: Props;

  render() {
    return React.Children.map(this.props.children, child =&gt; 
      React.cloneElement(child, {})
    );
  }
}

&lt;Test&gt;
  &lt;span&gt;foo&lt;/span&gt;
  &lt;span&gt;bar&lt;/span&gt;
&lt;/Test&gt;
</code></pre>
","1653298","","","","","2017-08-22 15:51:21","How to use React.Children.map with React.cloneElement with flow@0.53.0","<reactjs><flowtype>","1","1","","",""
"45623426","1","45623762","","2017-08-10 21:02:39","","0","135","<p>I would like to fix a problem with this library : <a href=""https://github.com/tannerlinsley/react-form"" rel=""nofollow noreferrer"">react-form</a>. 
For information, this is my current error : </p>

<blockquote>
  <p>Uncaught Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object. Check the render method of <code>CustomInput</code>.</p>
</blockquote>

<p>This is what i'm trying to do : </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>&lt;CustomInput field=""date"" showErrors={false}&gt;
    &lt;DatePickerForm /&gt;
&lt;/CustomInput&gt;</code></pre>
</div>
</div>
</p>

<p>this is my CustomInput Component : </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, { Component } from 'react';
import FormInput from 'react-form';

class CustomInput extends Component {
  render() {
    const { showErrors, field, children } = this.props;
    return (
      &lt;FormInput showErrors={showErrors} field={field}&gt;
        {({ setValue }) =&gt; {
          return (
            React.cloneElement(children, { setValueForm: setValue })
          );
        }}
      &lt;/FormInput&gt;
    );
  }
}
export default CustomInput;</code></pre>
</div>
</div>
</p>

<p>React.cloneElement(children, { setValueForm: setValue }) seems to return an object. 
But if i just render React.cloneElement without ""FormInput"" part, the rendering is ok. 
So, i suppose the problem come from the function of FormInput. </p>

<p>What do i make wrong ? </p>

<p>you can check the <a href=""https://github.com/tannerlinsley/react-form/blob/master/src/formInput.js"" rel=""nofollow noreferrer"">FormInput class</a></p>

<p>Thanks.</p>
","1889469","","","","","2017-08-10 21:33:00","Nested Component react.cloneElement with react-form","<javascript><forms><reactjs><ecmascript-6>","1","2","","",""
"37521798","1","37522586","","2016-05-30 09:10:45","","37","20806","<p>I am still a noob at React and in many examples on the internet, I see this variation in rendering child elements which I find confusing. Normally I see this:</p>

<pre><code>class Users extends React.Component {
  render() {
    return (
      &lt;div&gt;
        &lt;h2&gt;Users&lt;/h2&gt;
        {this.props.children}
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p>But then I see an example like this:</p>

<pre><code>&lt;ReactCSSTransitionGroup
     component=""div""
     transitionName=""example""
     transitionEnterTimeout={500}
     transitionLeaveTimeout={500}
     &gt;
     {React.cloneElement(this.props.children, {
       key: this.props.location.pathname
      })}
&lt;/ReactCSSTransitionGroup&gt;
</code></pre>

<p>Now I understand the api but the <a href=""https://reactjs.org/docs/react-api.html#cloneelement"" rel=""noreferrer"">docs</a> don't exactly make clear when I should be using it. </p>

<p>So what does one do which the other can't? Could someone explain this to me with better examples?</p>
","228521","","2950032","","2018-02-08 08:46:29","2018-05-23 00:12:55","When should I be using React.cloneElement vs this.props.children?","<reactjs>","3","1","6","",""
"38650077","1","","","2016-07-29 03:29:59","","0","399","<p>I have the following reactJS component structure</p>

<pre><code>&lt;Parent&gt;
    &lt;Child1/&gt;
&lt;/Parent&gt;
&lt;Parent&gt;
    &lt;Child2/&gt;
&lt;/Parent&gt;
</code></pre>

<p>the children have a function that performs different API calls.. Until thats finished, the child is not ready to be rendered. So is there a way for me to have the parent display 
""waiting for data..."" 
and call the method in the child to do the API call</p>

<p>in the child i would like to have a simple render method which does not have to check if the get API call has completed or not</p>

<p>I have tried two approaches but both unsuccessful </p>

<ol>
<li><p>Try call a method in the child with out rendering it.. React.Children.map(this.props.children, (child)=>child.doAPICall()) but this child does not seem to have its functions available</p></li>
<li><p>Override the render function dynamically so it renders nothing, then after the children have completed the API calls to swap the render mthod back</p>

<p>React.Children.map(this.props.children, (item, i) =><br>
(React.cloneElement(item, { 
    render: () => false
  })))
this will allow me to override props but not the render method</p></li>
</ol>

<p>Any advice would be greatly appriciated </p>
","3533542","","","","","2016-07-29 04:05:04","react dynamically override child render","<reactjs>","1","0","","",""
"46244010","1","","","2017-09-15 16:28:41","","1","36","<p>I want to write a Router in React Project. But Route children and cloneElement  work not anymore by Version 4. I haven't found demo or tutor to teach how to pass value in router in Router Version 4.</p>

<p>Have someone idea to solve that?</p>

<p>My project in Github: <a href=""https://github.com/LeMueller/musicplayer-by-react/tree/dev"" rel=""nofollow noreferrer"">https://github.com/LeMueller/musicplayer-by-react/tree/dev</a></p>

<p>Thanks a lot.</p>

<pre><code>import React, {Component} from 'react';
import Header from './commen/header.js';
import Player from './page/player.js';
import {MUSIC_LIST} from '../config/musiclist';
import MusicListUI from './page/musiclistui.js';

import {HashRouter, Switch, Route, Link} from 'react-router-dom';


class MusicApp extends Component{
    constructor(props){
        super(props);
        this.state={
            musiclist: MUSIC_LIST,
            currentMusicItem: MUSIC_LIST[0]
        }
    }

    componentDidMount(){


        $('#player').jPlayer({
            ready:function(){
                $(this).jPlayer('setMedia',{
                    mp3:'http://oj4t8z2d5.bkt.clouddn.com/%E9%AD%94%E9%AC%BC%E4%B8%AD%E7%9A%84%E5%A4%A9%E4%BD%BF.mp3'
                }).jPlayer('play');
            },
            supplied:'mp3',
            wmode: 'window'
        });


    }

    componentWillUnMount(){

    }

    render(){
        return(
            &lt;div&gt;
                {React.cloneElement(this.props.children, this.state)}               
            &lt;/div&gt;
        )
    }
}

export default class Root extends Component{
    render(){
        return(
            &lt;HashRouter&gt;
                &lt;div&gt;
                    &lt;Header/&gt;
                    &lt;Route exact path=""/"" component={MusicApp}&gt;
                        &lt;Route exact path=""/"" component={Player }&gt;&lt;/Route&gt;
                        &lt;Route path=""/list"" component={MusicListUI}&gt;&lt;/Route&gt;
                    &lt;/Route&gt;
                &lt;/div&gt;

            &lt;/HashRouter&gt;
        )
    }   
}
</code></pre>
","8149548","","","","","2017-09-15 17:31:26","transform ""Route children"" and ""cloneElement"" to RouterV4","<javascript><reactjs><router><react-router-v4>","1","3","","",""
"38056800","1","","","2016-06-27 14:38:40","","5","120","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","1745409","","1745409","","2016-06-27 15:53:03","2016-06-27 15:53:03","How to maintain passed props to a component when url rendering that component is refreshed in react?","<javascript><reactjs><react-router>","0","14","3","",""
"46127964","1","","","2017-09-09 06:49:46","","0","91","<p>I'm having a hard time wrapping my head around this issue. I was wondering if someone here would be able to take a look? I have a component that I'm passing a method called <code>this.fetchContent</code> to as props called Filter. <code>this.fetchContent</code> fires an action creator that uses axios via Redux to get some data from an API, I pass it the current page location using react-router via<code>this.props.params</code>.</p>

<p>The issue occurs with calling the method from the child component. What I've done is bound <code>this.props.fetchContent</code> to an onClick handler inside the Filter component. Whenever I click the <code>&lt;Link /&gt;</code> tag the function fires, and the page route gets updated. However the value of the parent components <code>props</code> doesn't update until <em>after</em> the function has fired, causing only every other click to produce the correct API call.</p>

<p><strong>App:</strong></p>

<pre><code>class App extends Component {
  constructor(props) {
    super(props)

    this.fetchContent = this.fetchContent.bind(this);
  }
  static contextTypes = {
    router: PropTypes.object
  };

  componentDidMount() {
    this.fetchContent();
  }

  fetchContent() {
    let query = `${this.props.params.sub}/${this.props.params.filter}`;
    this.props.fetchList(query, this.props.location.search);
  }

  render() {
    return (
      &lt;div&gt;
        &lt;Filter 
          filter={this.props.params.filter}
          sub={this.props.params.sub}
          search={this.props.location.search}
          fetchContent={this.fetchContent} /&gt;
          {React.cloneElement(this.props.children, this.props)}
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p><strong>Filter</strong></p>

<pre><code>class Filter extends Component {

    render() {
        return (
            &lt;div className=""mdl-tabs mdl-js-tabs mdl-js-ripple-effect""&gt;
                &lt;div className=""mdl-tabs__tab-bar""&gt;
                    &lt;Link to={`/r/${this.props.sub}/new/${this.props.search}`} onClick={this.props.fetchContent}&gt;
                        &lt;span className=""mdl-tabs__tab is-active""&gt;Hot&lt;/span&gt;
                    &lt;/Link&gt;
                &lt;/div&gt;
            &lt;/div&gt;  
        )
    }
}
</code></pre>

<p>I understand what's happening here but I'm not sure what the React-friendly way of solving this issue is. How can I re-factor my code to produce the results I need and what are the best practices for solving this sort of issue?</p>

<p><strong>Edit:</strong> Updated the syntax but still seeing the same issue. </p>
","4933483","","4933483","","2017-09-09 09:37:08","2017-09-09 09:37:08","Calling a props provided method that uses react-router properties","<javascript><reactjs><react-router>","1","6","","",""
"38978936","1","","","2016-08-16 15:31:25","","3","751","<p>I'm using react with react-router and CSS-modules and webpack. This was all working nicely, but now a requirement has come in to be able to change language. I first tried to do this by only changing a state attribute to the different language, but when changing it the current route doesn't rerender, so the language change would only take effect when the next route change happens, i.e click on a link.</p>

<p>Plan B: trying to add the locale to the routing / so it appears in the URL now, which should then take effect because route update -> rerender. However I am getting errors when loading my CSS modules now. </p>

<p>This is my router setup:</p>

<pre><code>&lt;Router onUpdate={() =&gt; window.scrollTo(0, 0)} history={hashHistory}&gt;
    &lt;Route path=""/"" component={App}&gt;
      &lt;IndexRedirect to=""/english/hydraulics"" /&gt;
      &lt;Route path=""/:lang""&gt;
        &lt;IndexRedirect to=""/hydraulics"" /&gt;
        &lt;Route path=""/"" component={Hydraulics}/&gt;
        &lt;Route path=""hydraulics"" component={Hydraulics}/&gt;
        &lt;Route path=""bearings"" component={Bearings}/&gt;
        &lt;Route path=""compressor"" component={Compressor}/&gt;
        &lt;Route path=""gears"" component={Gears}/&gt;
      &lt;/Route&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
</code></pre>

<p>This is my functions in my app:</p>

<pre><code>constructor(props) {
    super(props);

    this._updateLanguage = this._updateLanguage.bind(this);
  }

  componentWillMount() {
    this.setState({
      lang: 'english',
      language: english
    })
  }

  _updateLanguage(language) {
    this.setState({
      language: language === ENGLISH ? english : russian
    });
  }

  _addChildren() {
    return this.props.children ? React.cloneElement(this.props.children, {language: this.state.language}) : this.props.children;
  }

  render() {

    var language = this.state.language;
    var children = this.props.children;

    return &lt;div className={wrapper}&gt;
        &lt;Nav copy={this.state.language} location={this.props.location} callback={this._updateLanguage} locale={this.state.lang}/&gt;
        &lt;section className={content}&gt;
          { this._addChildren() }
        &lt;/section&gt;
      &lt;/div&gt;
  }
</code></pre>

<p>My default route is hydraulics, so am getting the error: </p>

<blockquote>
  <p>Uncaught Error: ""is-english/hydraulics"" CSS module is undefined.</p>
</blockquote>

<p>I wonder if it is a configuration in my webpack css modules loader:</p>

<pre><code>{
        test: /\.css$/,
        loader: ExtractTextPlugin.extract('style', 'css?modules&amp;importLoaders=1&amp;localIdentName=[name]__[local]___[hash:base64:5]')
      },
</code></pre>

<p>in the hydraulics.jsx I am importing the CSS like this:</p>

<pre><code>import styles from './hydraulics.css';
</code></pre>

<p>what I don't understand is why the css modules are loaded from ""is-english"", where is that ""is-"" prefix coming from? Also the file isn't in an english subfolder, it's just in the same folder as hydraulics.jsx</p>

<p>Or whether it's got something to do with the way the routes have been arranged?</p>
","1331867","","1331867","","2016-08-16 16:11:40","2016-08-16 16:11:40","""CSS module is undefined"" error when using react-css-modules with react-router with locale and webpack","<reactjs><webpack><react-router><css-modules><react-css-modules>","0","0","","",""
"50281279","1","","","2018-05-10 20:46:55","","2","29","<p>I have inherited a code base that makes frequent use of <code>React.cloneElement(this.props.children, {})</code> in the <code>render()</code> method of container components.  Like this:</p>

<pre><code>import React from 'react';
class App extends React.Component {
  render() {
    &lt;div&gt;
      {this.props.children &amp;&amp; React.cloneElement(this.props.children, {})}
    &lt;/div&gt;
  }
}


...


import {Route} from 'react-router'
import App from '..';
import SomePureComponent from '..';
&lt;Route
  component={App}
  path='/'
&gt;
  &lt;Route
    component={SomePureComponent}
    path='/test'
  /&gt;
&lt;/Route&gt;
</code></pre>

<p>Isn't this an anti-pattern?  It was my understanding that calling functions like <code>React.cloneElement()</code> will return a new instance on each render, alerting the virtual DOM of new changes it must reconcile, and thus leaving <code>PureComponent</code> ineffective at minimizing re-renders.  Am I misunderstanding something about Virtual DOM reconciliation?</p>
","1181150","","1181150","","2018-05-10 20:55:45","2018-05-10 20:55:45","What effect does React.cloneElement() have on React's reconciliation of the virtual DOM?","<javascript><reactjs>","0","2","","",""
"37120956","1","38924486","","2016-05-09 16:33:47","","6","3669","<p>I'm confused by the third ""children"" parameter of <code>React.cloneElement</code> and it's relation to <code>this.props.children</code>.</p>

<p>I followed <a href=""https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e#.kr2laetcn"" rel=""noreferrer"">this guide</a> on higher order components and have the following code:</p>

<pre><code>render() {
    const elementsTree = super.render()

    let myPropChange = {}

    /* work on newProps... */
    myPropChange.something = ""nice!"".

    const newProps = Object.assign({}, elementsTree.props, myPropChange)

    /* map children */
    const newChildren = React.Children.map(elementsTree.props.children, c =&gt; something(c))

    return React.cloneElement(elementsTree, newProps, newChildren)
}
</code></pre>

<ul>
<li><p>Should I put the mapped children into my <code>newProps.children</code> or should I pass them as the third parameter to <code>cloneElement</code>?</p></li>
<li><p><code>Object.assign</code> copied the children from <code>props</code> to <code>newProps</code> anyway, should I skip them?</p></li>
<li><p>In the guide it says</p>

<blockquote>
  <p>Components don’t have a guaranty of having the full children tree resolved.</p>
</blockquote>

<p>What does that mean in my situation? That <code>this.props.children</code> is not there?</p></li>
<li><p>Added 4th question: Why should I clone the props at all and not just directly edit them?</p></li>
</ul>
","342947","","342947","","2016-05-09 16:44:44","2016-08-12 18:38:24","React.cloneElement: pass new children or copy props.children?","<javascript><reactjs><higher-order-functions>","1","0","1","",""
"47584828","1","","","2017-12-01 00:26:01","","0","240","<p>I am building an isomorphic react-redux app on top of NodeJS. I am rendering my homePage from the server. However, my styles are not reflected in my rendered view. I would like to import stylesheets just how I do it on the client side. I tried <a href=""https://stackoverflow.com/questions/36507147/webpack-es6-how-to-import-stylesheets"">this article</a> and <a href=""https://stackoverflow.com/questions/30347722/importing-css-files-in-isomorphic-react-components"">this</a> too, but neither of them actually got me what I want to achieve.</p>

<p>Here are more details on the project.</p>

<p>.babelrc</p>

<pre><code>{
 ""presets"": [ ""es2015"", ""react"", ""stage-0""],
 ""plugins"": [""transform-decorators-legacy"", [""transform-assets"", {
            ""extensions"": [""scss""],
            ""name"": ""[name].[ext]?[sha512:hash:base64:7]"",
          }]]
 }
</code></pre>

<p>webpack.config.js</p>

<pre><code>const path = require('path');
module.exports = [
    {
      name: 'client',
      target: 'web',
      entry: './routes/client.jsx',
      output: {
        path: path.join(__dirname, 'assets'),
        filename: 'client.js',
        publicPath: '/assets/',
      },
      resolve: {
        extensions: ['.js', '.jsx']
      },
      devtool: 'source-map',
      module: {
        rules: [
            {
                test: /\.(js|jsx)$/,
                exclude: /(node_modules\/)/,
                use: [{ loader: 'babel-loader'}]
            },
            {
                test: /\.scss$/,
                use: [
                    { loader: 'isomorphic-style-loader' },
                    {
                        loader: 'css-loader',
                        options: {
                            modules: true,
                            importLoaders: 1,
                            localIdentName: '[name]__[local]___[hash:base64:5]',
                            sourceMap: true
                        }
                    },
                    { loader: 'sass-loader'}
                ]
            }
        ],
    },
}];
</code></pre>

<p>server.js</p>

<pre><code>import express from 'express'
import React from 'react'
import { createStore } from 'redux'
import { Provider } from 'react-redux'
import MainStore from './views/store/MainStore'
import { StaticRouter } from 'react-router-dom';
import Routes from './routes/routes';
import Template from './views/templates/template';
import { Helmet } from 'react-helmet';
import { renderToString } from 'react-dom/server'
import ReactDOMServer from 'react-dom/server';
import ContextProvider from './routes/contextProvider'

const webpackDevMiddleware = require('webpack-dev-middleware')
const config = require('./webpack/webpack.development.config.js')
const webpack = require('webpack')
const app = express()
const port = 3000
const compiler = webpack(config);

let preloadedState = { shipper: {view: ""from_server""} }

app.use('/assets', express.static('./assets'))
app.use(webpackDevMiddleware(compiler, {
   publicPath: ""/assets/"",
}));

app.use(handleRender);

function handleRender(req, res) {
   // Create a new Redux store instance
   const store = createStore(MainStore, preloadedState)
   const css = new Set(); // CSS for all rendered React components
   const context = { insertCss: (...styles) =&gt; styles.forEach(style =&gt;   
   css.add(style._getCss())) }

   const html = renderToString(
     &lt;Provider store={store}&gt;
        &lt;StaticRouter context={context}&gt;
            &lt;ContextProvider context={context}&gt;
            &lt;Routes /&gt;
        &lt;/ContextProvider&gt;
        &lt;/StaticRouter&gt;
     &lt;/Provider&gt;
  )
  const finalState = store.getState()
  const helmet = Helmet.renderStatic();
  const preloadedState = store.getState()
  res.send(renderFullPage(html, preloadedState));
 }

 function renderFullPage(html, finalState) {
    return `
      &lt;!doctype html&gt;
      &lt;html&gt;
         &lt;head&gt;
            &lt;title&gt;Redux Universal Example&lt;/title&gt;
            &lt;style type=""text/css""&gt;${[...css].join('')}&lt;/style&gt;
         &lt;/head&gt;
         &lt;body&gt;
             &lt;div id=""root""&gt;${html}&lt;/div&gt;
             &lt;script&gt;
                window.__PRELOADED_STATE__ = ${JSON.stringify(preloadedState).replace(/&lt;/g, '\\u003c')}
             &lt;/script&gt;
             &lt;script src=""./assets/client.js""&gt;&lt;/script&gt;
         &lt;/body&gt;
    &lt;/html&gt;
    `
  }

app.listen(port)
</code></pre>

<p>contextProvider.js</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Routes from './routes.jsx';

export default class ContextProvider extends Component {
   static childContextTypes = {
   insertCss: PropTypes.func,
}

 getChildContext() {
    return { ...this.props.context }
  }

 render() {
    const { children, ...props } = this.props
    return React.cloneElement(children, props)
  }
}
</code></pre>

<p>I am importing it in my homePresenter as</p>

<pre><code>import homePageStyle from './home.scss';
</code></pre>

<p>and using it in my div in the same component as </p>

<pre><code>&lt;div className=""component""&gt;
</code></pre>

<p>If I change this to</p>

<pre><code>&lt;div className={homePageStyle.component}&gt;
</code></pre>

<p>I get an error on the browser </p>

<pre><code>TypeError: style._getCss is not a function at server.js:52:84
</code></pre>

<p>On the browser, I could see that the div has class name as 'component'; it;'s just it is not inheriting the styles.</p>

<p>Any suggestions on what I am missing here?</p>
","6164284","","6164284","","2017-12-02 23:12:42","2017-12-06 10:24:13","Importing stylesheet in a server rendered react view - TypeError: style._getCss is not a function","<reactjs><sass><redux><isomorphic-style-loader>","1","2","","",""
"31415305","1","31416882","","2015-07-14 19:10:14","","0","110","<p>I've got a component which can contain any number of child components, and I want these child components, which contain input fields, to set those input fields to ""disabled"" when the state in the parent is changed. I've been attempting to use <code>React.cloneElement</code> with <code>React.Children.map</code> to modify the properties of the child elements, but it doesn't seem to be affecting anything.</p>

<p>Here's a simplified version:</p>

<pre><code># parent component
# assume that there's a @setState call in here somewhere
DisableableItem = React.createClass
  getInitialState: -&gt;
    disabled: false
  render: -&gt;
    &lt;div&gt;
      {
        React.Children.map @props.children, (child) =&gt;
          React.cloneElement child, isDisabled: @state.disabled
      }
    &lt;/div&gt;

# child component
ParameterizedOption = React.createClass
  getInitialState: -&gt;
    disabled: @props.isDisabled
  render: -&gt;
    &lt;div className=""parameterized-option""&gt;
      &lt;label&gt;{@props.text}&lt;/label&gt;
      &lt;div className=""input-group input-group-sm""&gt;
        &lt;input type={@props.inputType or ""text""} className=""form-control""
          placeholder={@props.initialInput or ""00.00""}
          disabled={@state.disabled}&gt;&lt;/input&gt;
      &lt;/div&gt;
    &lt;/div&gt;
</code></pre>

<p>And rendering it like:</p>

<pre><code>React.render &lt;DisableableItem&gt;
    &lt;ParameterizedOption text=""hey"" isDisabled=false /&gt;
    &lt;ParameterizedOption text=""hey"" isDisabled=false /&gt;
  &lt;/DisableableItem&gt;, document.body
</code></pre>

<p>So I'm <code>console.log</code>ging the output, and the state in the parent is getting modified when I want it to, but the children's props are not getting modified as I thought the <code>React.cloneElement</code> call would modify them (they're always false as they were at start). I've taken a look at <a href=""https://stackoverflow.com/questions/30840258/encapsulation-with-react-child-components"">these</a> <a href=""https://stackoverflow.com/questions/21285923/reactjs-two-components-communicating"">questions</a>, but I don't think they really apply, since <code>DisableableItem</code> doesn't know what its children are until they're given to it in the call to <code>React.render</code>, so it can't put <code>disabled={@state.disabled}</code> as one of the children's properties.</p>

<p>How would I reach in and modify these children's state? Am I misunderstanding what <code>cloneElement</code> is supposed to do?</p>
","2518889","","-1","","2017-05-23 12:14:04","2015-07-14 20:41:13","how to interact with unspecified number of react child components","<javascript><reactjs>","1","0","","",""
"46943534","1","","","2017-10-25 23:26:19","","0","42","<p>I have been following examples on on this <a href=""https://github.com/chenglou/react-motion/issues/287"" rel=""nofollow noreferrer"">issue on github</a> and on this <a href=""https://medium.com/@zrisha/simple-transition-with-react-motion-236ae5f348b1"" rel=""nofollow noreferrer"">example</a> from medium.</p>

<p>Here is my code for the transition component</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>export default function Transition (props) {
    let defaultStyles = [], styles = [];
    const {children} = props;
    React.Children.map(children, (child)=&gt;{

        if(child){
            defaultStyles.push({
                key: child.key,
                data: child,
                style: {opacity: 0}
            });

            styles.push({
                key: child.key,
                data: child,
                style: {opacity: spring(1)}
            })
        }
    });

    function willEnter() {
        return {opacity: 0}
    }

    function willLeave() {
        return {opacity: spring(0, {stiffness: 90, damping: 11})}
    }

    console.log(styles, defaultStyles);

    &lt;TransitionMotion styles={styles} defaultStyles={defaultStyles} willEnter={willEnter} willLeave={willLeave} children={props.children}&gt;
        {
            (styles)=&gt;{
                return(
                    &lt;div&gt;
                        {
                            styles.map((child)=&gt;{
                                const {key, data, style} = child;
                                return React.cloneElement(
                                    data,
                                    {key, style}
                                )
                            })
                        }
                    &lt;/div&gt;
                )
            }
        }
    &lt;/TransitionMotion&gt;
};</code></pre>
</div>
</div>
</p>

<p>And here is a simple component I tried to build using it</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class GroupItem extends Component{

    render(){
        return(
            &lt;Transition&gt;
                {&lt;div key=""1""&gt;Hello there&lt;/div&gt;}
            &lt;/Transition&gt;
        )
    }
}</code></pre>
</div>
</div>
</p>

<p>On trying to open the group component I get the following message</p>

<p><strong>bundle.js:4882 Warning: Transition(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.</strong></p>

<p>I do not know where this is coming from in the Transition component any help would be great.</p>
","4642046","","","","","2017-10-25 23:26:19","How to implement react motion simple example","<react-motion>","0","0","","",""
"40682064","1","","","2016-11-18 16:39:05","","3","5557","<p>I have react class that is rendered using react router. I understand that React.cloneElement is used to pass elements from parent to child. But why/what does the '&amp;&amp;' operator do with this kind of statement : </p>

<pre><code>class Users extends React.Component {
    getInitialState() {
      return {
          page:0
        }
     },      
    foo(){
        this.setState({'page':1})
     }
      render() {
        return (
          &lt;div&gt;
            &lt;h2&gt;Users&lt;/h2&gt;
            { this.props.children &amp;&amp; React.cloneElement(this.props.children, {
    foo:this.foo})
          &lt;/div&gt;
        )
      }
    }
</code></pre>

<p>I would like to understand why are we using '&amp;&amp;' operator here.</p>
","4464803","","","","","2018-01-07 11:40:52","What does '&&' operator indicate with { this.props.children && React.cloneElement(this.props.children, { foo:this.foo})","<reactjs><react-native><react-router>","5","0","2","",""
"38841893","1","38841989","","2016-08-09 04:10:05","","1","692","<p>with <code>cloneElement</code>, one can set new props like</p>

<pre><code>React.cloneElement(node, { ...props });
</code></pre>

<p>is there a way to set <code>context</code> also? or only way to pass context is to wrap it in a react component, and set <code>childContextTypes</code> and <code>getChildContext</code> on this container ?</p>
","303477","","","","","2016-08-09 04:19:16","How to set context with react cloneElement","<reactjs>","1","0","1","",""
"39206674","1","","","2016-08-29 12:44:06","","0","98","<p>Is there a way to find out which props are allowed in React components when using <code>React.Children.map</code>. Here is an example: </p>

<pre><code>{React.Children.map(props.children, c =&gt; React.cloneElement(c, extendedProps))}
</code></pre>

<p>The <code>extendedProps</code> can hold unknown props for the specific child, which leads to an <a href=""https://facebook.github.io/react/warnings/unknown-prop.html"" rel=""nofollow"">Unknown Prop Warning</a>. </p>
","184883","","","","","2016-08-29 12:44:06","Check which props are allowed for react child components","<reactjs>","0","3","","",""
"47717250","1","","","2017-12-08 15:22:32","","0","38","<p>Im trying to use React-No-Redux which is redux but without the redux package. i will put my code below because the issue im having is that i can access the props in my navbar which is outside the router but i cant access the appState from inside any of the components inside of my router.</p>

<p>AppState.js</p>

<pre><code>import React, { Component } from 'react';

export default class AppState extends Component {
  constructor(props) {
    super(props);
    this.state = {
      test: 'hello im a test string'
    };
    this.setAppState = this.setAppState.bind(this);
}

setAppState(newState, callback) {
  this.setState(newState, callback);
}

render() {
  return (
    &lt;div className=""AppState""&gt;
    {React.Children.map(this.props.children, child =&gt; {
      return React.cloneElement(child, {
      appState: this.state,
      setAppState: this.setAppState
      });
    })}
  &lt;/div&gt;
  );
}
}
</code></pre>

<p>index.js</p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import registerServiceWorker from './registerServiceWorker';

import AppState from './AppState';
import StateConstants from './constants/stateConstants';
import Error404 from './views/errorPages/Error404';

ReactDOM.render(
  &lt;Router&gt;
    &lt;AppState&gt;
      &lt;App
        setAppState={this.setAppState}
        appState={this.appState}
      /&gt;
    &lt;/AppState&gt;
  &lt;/Router&gt;
  , 
  document.getElementById('root')
);
registerServiceWorker();
</code></pre>

<p>App.js</p>

<pre><code>import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';

import Error404 from './views/errorPages/Error404';
import Home from './views/pages/Home';
import Navbar from './partials/Navbar';

import './App.css';

class App extends Component {
  render() {
    return (
      &lt;div&gt;
        &lt;Navbar 
          setAppState={this.props.setAppState}
          appState={this.props.appState}
        /&gt;
        &lt;Switch&gt;
          &lt;Route exact path='/' component={Home} appState={this.props.appState} setAppState={this.props.setAppState} /&gt;
          &lt;Route component={Error404} /&gt;
        &lt;/Switch&gt;
      &lt;/div&gt;
    );
  }
}

export default App;
</code></pre>

<p>Navbar.js</p>

<pre><code>import React, { Component } from 'react';

export default class Navbar extends Component {
  constructor(props){
    super(props);
    console.log(this.props);
  }

  render(){
    return (
      &lt;div className=""navbar""&gt;&lt;center&gt;&lt;h1&gt;Hello Navbar&lt;/h1&gt;&lt;/center&lt;/div&gt;
    );
}
}
</code></pre>

<p>Home.js the one it is erroring on it says cannot read property test of undefined</p>

<pre><code>import React, { Component } from 'react';

export default class Home extends Component{
  constructor(props){
    super(props);
    console.log(this.props);
  }

  render(){
    return (
      &lt;div&gt;
        {this.props.appState.test}
      &lt;/div&gt;
    );
  }

}
</code></pre>

<p>This should work as I have done it before and this is the exact same thing I did last time.</p>
","","user9061132","","","","2017-12-11 07:44:25","React-no-redux cant pass appstate through react-router","<javascript><reactjs>","1","0","","",""
"39553894","1","","","2016-09-18 03:49:30","","0","232","<p>I'm new to react and I'm sure I'm not the only one with this question. I have a div in my component that is width:100%; I need to calculate it's pixel width. How would I do this?</p>

<p>To put this in perspective of my actual use-case, here's what I'm doing:
I'm building a slider in react. My slider has a div with the class name ""slide-holder"" inside of this div are the individual div's for the slides. The slider is  a very basic slider and the slide-holder will move horizontally the width of one slide to change to the next/previous slide. </p>

<p>Here is my full code - be aware I'm still working on this actively so it may break at times but you should be able to get the idea of how it works from it, I'm just doing the basics in react nothing fancy yet.</p>

<p><a href=""http://codepen.io/thewebtech/pen/JRXybb?editors=0110"" rel=""nofollow"">http://codepen.io/thewebtech/pen/JRXybb?editors=0110</a></p>

<pre><code>    /*var React = require(""react"");
var ReactDOM = require('react-dom');*/
var Slide = React.createClass({
  render: function() {
    return (&lt;div className=""slide"" style={{backgroundImage:'url(' + this.props.imgsrc + ')'}}&gt;
        &lt;div className=""caption""&gt;{this.props.children}&lt;/div&gt;
      &lt;/div&gt;);
  }
});

var SliderControlButton = React.createClass({

  render: function() {
    var btnClasses=""slider-control-button ""+this.props.direction;

    return (
      &lt;button className={btnClasses}&gt;
        {this.props.direction}
      &lt;/button&gt;
    );
  }
});

var SliderControls = React.createClass({
  render: function() {
    return (
      &lt;div className=""slider-controls""&gt;
        &lt;SliderControlButton direction=""left""/&gt;         &lt;SliderControlButton direction=""right""/&gt;
      &lt;/div&gt;
    );
  }
});
var SliderHolder = React.createClass({
  getInitialState:function(){
    var setWidth= React.Children.count(this.props.children)* 200+""px"";
    var setSlideWidth= setWidth / React.Children.count(this.props.children);
    return{width: setWidth,
           slideWidth: setSlideWidth

          }


  },
  render:function(){

    return (
    &lt;div className=""slide-holder"" style={{width: this.state.width}}&gt;
        {this.props.children}
        &lt;/div&gt;
    )

  }

});

function renderChildren(props) {
  return React.Children.map(props.children, child =&gt; {
    if (child.type === Slide)
      return React.cloneElement(child, {
        name: props.name
      })
    else
      return child
  })
}


var Slider = React.createClass({
  render: function() {
    return (
      &lt;div className=""slider""&gt;
        &lt;SliderControls/&gt;
        &lt;SliderHolder&gt;
            &lt;Slide imgsrc=""http://jonmclarendesigns.com/wedding/wp-content/uploads/2016/09/DSC_4050.jpg""&gt;hello&lt;/Slide&gt;
          &lt;Slide imgsrc=""http://jonmclarendesigns.com/wedding/wp-content/uploads/2016/09/DSC_3819.jpg""/&gt;
        &lt;/SliderHolder&gt;
      &lt;/div&gt;
    );
  }
});

ReactDOM.render(&lt;Slider/&gt;, document.getElementById(""app""));
</code></pre>
","2000238","","","","","2016-09-18 03:53:42","How to query the px width of a div 100% width element in react.js?","<javascript><reactjs><fluid-layout><responsive>","1","0","","",""
"47286553","1","47291444","","2017-11-14 12:59:28","","0","94","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","1211577","","1211577","","2017-11-14 13:19:51","2017-11-14 17:05:07","react-router-dom Element Type Invalid","<javascript><reactjs><react-router><react-router-dom>","1","10","","",""
"47993323","1","","","2017-12-27 13:47:20","","3","133","<p>Have an element that wraps several rows of cell elements, its purpose is simply for styling the bottom borders (really missing css :last-child in react native).  </p>

<p>The cell element exists elsewhere and can be used independent of the wrapper if the devs choose, so this wrapper is just an optional addition if they are making a list of cell rows and need border style formatting.</p>

<p>The cell elements pipe in sub elements as props and render them so you've got cell button things with text/whatever passed on the left and an arrow on the right, pretty typical <a href=""https://i.stack.imgur.com/3slsX.png"" rel=""nofollow noreferrer"">iphone list</a> . </p>

<p>The following works mostly (even the last child border style logic is working) except the sub element props are not preserved in the clone for some reason, so the output rather than being ""some sub El text"" then an "">"", it is only showing the "">"".  Code included below (stripped out most styling for readability)</p>

<p>Cell elements:</p>

<pre><code>class Cell extends Component {
  constructor(props) {
  super(props);
}

render() {
    styles = [styles.container];
    if(!this.props.isLastChild) {
      styles.push({borderBottomWidth: 0});
    }

    return (
      &lt;TouchableHighlight style={{ flexDirection: 'row'}}&gt;
        &lt;View style={styles}&gt;
          {this.props.subElements}
          &lt;Text&gt; &gt; &lt;/Text&gt;
        &lt;/View&gt;
      &lt;/TouchableHighlight&gt;
     );
   }
};
</code></pre>

<p>Wrapper:</p>

<pre><code>const Wrapper = () =&gt; {

  const childCount = React.Children.count(children);
  return (&lt;View&gt;
     {React.Children.map(children, (c, i) =&gt; 
        React.cloneElement(c, {
          isLastChild: i === childCount - 1,
        })
      )}&lt;/View&gt;);
}
</code></pre>

<p>Usage:</p>

<pre><code>const subEl = 
    &lt;View&gt;
      &lt;Text&gt;Blah&lt;/Text&gt;
      &lt;Text&gt;La La La&lt;/Text&gt;
    &lt;/View&gt;

  &lt;View&gt;
      &lt;Wrapper&gt;
        &lt;Cell subElements={subEl} /&gt;
        &lt;Cell subElements={subEl} /&gt;
      &lt;/Wrapper&gt;
  &lt;/View&gt;
</code></pre>
","4872156","","4872156","","2017-12-27 14:22:26","2017-12-27 14:22:26","React.cloneElement() in react native not keeping original props","<reactjs><react-native>","0","5","","",""
"37310406","1","37327012","","2016-05-18 21:29:30","","0","128","<p>I'm running into an issue where my React components are just not being bootstrapped into the page, but no error messages are showing up so I don't know what's going on. I don't believe that the issue is with the CalcList.js or Calculator.js files, since I've been able to render them without any issue in a single-page (i.e. not using react-router) context.</p>

<p>Implemented using the index.js and App.js parents below, when I visit I just get an empty page without any feedback from the console.</p>

<p>index.js</p>

<pre><code>import React from 'react';
import {render} from 'react-dom';
import {Router, Route, Link, IndexRoute, browserHistory} from 'react-router';
import App from './App';
import {Calculator} from './Calculator';
import {CalcList} from './CalcList';

render ((
    &lt;Router history={browserHistory}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={CalcList} /&gt;
        &lt;Route path=""/calculator/:num"" component={Calculator} /&gt;
      &lt;/Route&gt;
    &lt;/Router&gt;
), document.getElementById('root'));
</code></pre>

<p>App.js</p>

<pre><code>import React, { Component } from 'react';
import {render} from 'react-dom';
import {Router, Route, IndexRoute, hashHistory} from 'react-router';
import CalcList from './CalcList';
import Calculator from './Calculator';

export default class App extends Component {
  render() {
    var children = React.Children.map(this.props.children, function(child) {
        return React.cloneElement(child);
    });
    return (
        &lt;div id=""app""&gt;
        {children}
      &lt;/div&gt;
    );
  }
}
</code></pre>
","4237715","","","","","2016-05-19 14:57:15","How to bootstrap component using react-router","<reactjs><react-router>","1","2","","",""
"40703613","1","","","2016-11-20 11:42:14","","2","527","<p>I just want to pass a react View inside a component and then I want to find out the dimensions of the passed (as a prop) View in another react Component.
Is it possible to find out the dimensions without using onLayout() means before
rendering the child component.</p>

<pre><code> class Child extends Component {  
   render() {
    return(
     &lt;Parent&gt;
       &lt;View style = {{width: 100}}&gt;
        &lt;View style = {{height: 50,flex:1}}&gt;
        &lt;/View&gt;
        &lt;View style = {{height: 30,flex:1}}&gt;
        &lt;/View&gt;
       &lt;View&gt;
     &lt;/Parent&gt;
    )}  
 }  
 class Parent extends Component {  
   getDimensions(child) {
     // Here I want to find the dimensions of child Component
     // In this use case it should be like height = 80 &amp; width = 100
     // set the state height and width
    }  
   getChildComponent(child) {
     // Here I want to modify the style of Child Component
     var style = [
                   child.props.style,
                   {
                   height: this.state.height + 50,
                   width : this.state.width + 50
                  }];
      return React.cloneElement(child, {style});
    }  
   componentWillMount() {
      this.getDimensions(this.props.children);
    }  
   render() {
    return (
      &lt;View&gt; 
        { this.getChildComponent(this.props.children) } 
      &lt;View&gt;
    )}  
   }
</code></pre>
","7185008","","7185008","","2016-11-20 14:27:22","2016-11-20 14:27:22","How to get the dimensions of a react-native Child Component","<react-native>","0","0","0","",""
"48011113","1","48011307","","2017-12-28 16:39:19","","1","287","<p>I have routes that share the same behauvior, layout, etc. I'd like to pass props from layout to those components (Dashboard and Login) inside Route</p>

<p>My routes.js file is the following one</p>

<pre><code>//imports omited    
export default (
    &lt;AppLayout&gt;
        &lt;Route component={Dashboard} path=""/"" key=""/"" /&gt;
        &lt;Route component={Login} path=""/login"" key=""/login"" /&gt;
    &lt;/AppLayout&gt;
);
</code></pre>

<p>The render method of AppLayout.js has this code</p>

<pre><code>const childrenWithExtraProp = React.Children.map(this.props.children, (child) =&gt; {
            return React.cloneElement(child, {
                component: React.cloneElement(child.props.component, {
                    functions: {
                        updateMenuTitle: this.updateTitle //function
                    }
                })
            });
        });
</code></pre>

<p>This code results on numerous errors:</p>

<pre><code>Warning: Failed prop type: Invalid prop `component` of type `object` supplied to `Route`, expected `function`.
    in Route
    in AppHeader
    in Router (created by BrowserRouter)
    in BrowserRouter (created by App)
    in App


Check the render method of `Route`.
    in Route
    in AppHeader
    in Router (created by BrowserRouter)
    in BrowserRouter (created by App)
    in App


Uncaught Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.

    Check the render method of `Route`.
        at invariant (invariant.js?7313:42)
        at createFiberFromElement (react-dom.development.js?cada:5753)
        at reconcileSingleElement (react-dom.development.js?cada:7531)
        at reconcileChildFibers (react-dom.development.js?cada:7635)
        at reconcileChildrenAtExpirationTime (react-dom.development.js?cada:7756)
        at reconcileChildren (react-dom.development.js?cada:7747)
        at finishClassComponent (react-dom.development.js?cada:7881)
        at updateClassComponent (react-dom.development.js?cada:7850)
        at beginWork (react-dom.development.js?cada:8225)
        at performUnitOfWork (react-dom.development.js?cada:10224)
</code></pre>

<p>At the last project I've worked we where using Routes inside Route, but at React-Router v4 this is not allowed.</p>

<p>Edit: before was something like this:</p>

<pre><code>//Array of routes declared before
export default (
    &lt;Router history={browserHistory}&gt;
        &lt;Route path=""/"" component={General}&gt;
            &lt;IndexRoute component={Index} /&gt;
            {routes}
        &lt;/Route&gt;
    &lt;/Router&gt;
);
</code></pre>
","5728050","","5728050","","2017-12-28 16:43:30","2017-12-28 17:22:48","Add props to component of wrapped route in react router v4","<reactjs><react-router><react-router-v4>","1","4","","",""
"48012179","1","","","2017-12-28 17:59:17","","0","42","<p>I have strange issue with index not being preserved while looping and cloning 
react children. Here is code in question :</p>

<pre><code>// Table Body component
const DataBody = ({
  resource,
  children,
  ids,
  data,
  ...rest
}) =&gt; (
  &lt;tbody {...rest}&gt;
    {ids.map((id, rowIndex) =&gt; (
      &lt;TableRow key={id}&gt;
        {React.Children.map(children, (field, index) =&gt; {
          return (
            &lt;Cell
              key={`${id}-${field.props.source || index}`}
              record={data[id]}
              {...{ field, index, resource }}
            /&gt;
          )
        })}
      &lt;/TableRow&gt;
    ))}
  &lt;/tbody&gt;
)

// Table Cell component
const Cell = ({ classes, field, index, record, resource, theme, ...rest }) =&gt; {
  return (
    &lt;td className={mapToCSSModule(classes, theme)} {...rest}&gt;
      {React.cloneElement(field, { record, resource, index })}
    &lt;/td&gt;
  )
}

// Table data component
const IndexField = ({
  format,
  index,
  tag: Tag = 'span',
  ...props
}) =&gt; {
  const no = index + 1
  return &lt;Tag {...props}&gt;{format ? format(no) : no}&lt;/Tag&gt;
}
</code></pre>

<p>Now, the problem is that index is always 0 inside the IndexField but in Cell it's value is OK, like when we are lost inside a loop/closure which always returns last value of the passed variable.
Is there a clean way to handle elegantly this ?</p>

<p>EDIT: Added main component that is looping trough the data, note that this is streamed down version (original is fully working, only thing that is non-functional is the index).</p>
","1217944","","1217944","","2017-12-28 18:38:03","2017-12-28 19:58:30","Preserve array index inside react clone child loop","<javascript><arrays><reactjs><loops><closures>","1","2","","",""
"40845869","1","40848363","","2016-11-28 13:47:31","","0","111","<p>I am using contentful api to get content for a news-article and the body contains diffrent fields like question and answer. I use the api to get the content as json and i get the body as an array of objects.</p>

<pre><code>      ""body"": [
      {
        ""question"": ""what's up?""
      },
      {
        ""answer"": ""good good""
      }
    ],
</code></pre>

<p>I'm wondering if could map each field in the body array to different react component and pass the right props to that component?</p>

<pre><code>&lt;div {...other}&gt;
   {items.map((item, key) =&gt; (
     React.cloneElement(children, {
       key,
       ...item,
     })
   ))}
&lt;/div&gt;
</code></pre>
","","user5797064","","user5797064","2016-11-28 15:25:37","2016-11-28 15:50:52","cotentful api map content types to components in reactjs","<reactjs><ecmascript-6><contentful>","1","3","","",""
"32365171","1","","","2015-09-03 00:18:57","","0","570","<p>My team has been trying to think ahead on the topic of form validation using react components.</p>

<p>We've been following a guide we've seen <a href=""http://christianalfoni.github.io/javascript/2014/10/22/nailing-that-validation-with-reactjs.html"" rel=""nofollow noreferrer"">here</a> which looks really awesome and well thought out.</p>

<p>There's a property on the component here that looks a like this:</p>

<pre><code>registerInputs: function (children) {
  React.Children.forEach(children, function (child) {
    if (child.props.name) {
      child.props.attachToForm = this.attachToForm;
      child.props.detachFromForm = this.detachFromForm;
    }

    if (child.props.children) {
      this.registerInputs(child.props.children);
    }
  }.bind(this));
},
attachToForm: function (component) {
  this.inputs[component.props.name] = component;
},
detachFromForm: function (component) {
  delete this.inputs[component.props.name];
}
</code></pre>

<p>The problem with this is attaching props this way gives you a warning in react, it suggests to use cloneElement instead.  It DOES work though, it just gives some console warnings which I don't like to see.</p>

<p>So in ES6 fashion, my team came up with this:</p>

<pre><code>registerInputs = children =&gt; {
    React.Children.forEach(children, child =&gt; {
        if (child.props.name) {
            React.cloneElement(child, {
                attachToForm: this.attachToForm,
                detachFromForm: this.detachFromForm
            })
            //child.props.attachToForm = this.attachToForm;
            //child.props.detachFromForm = this.detachFromForm;
        }
        if (child.props.children) {
            this.registerInputs(child.props.children);
        }
    })
}
attachToForm = component =&gt; {
    this.inputs[component.props.name] = component;
    this.model[component.props.name] = component.state.value;
}
detachFromForm = component =&gt; {
    delete this.inputs[component.props.name];
    delete this.model[component.props.name];
}
</code></pre>

<p>This does <strong>not</strong> work, we get an invariant error saying the dom node wasn't found (the one that says you either have a <code>&lt;tbody&gt;</code> missing etc.).</p>

<p>To clarify: If we comment out the cloneElement block, and uncomment the explicit declaration of the prop on the children, it works -but with the warnings.</p>

<p>We've tried a few other solutions including the similar question posted <a href=""https://stackoverflow.com/questions/31841949/react-this-cloneelement-and-es6"">here</a>
but this did not work for us.  We also tried mapping, which seems to be common in the react docs and returning the new array with the new props that way, but we kept getting the invariant error.</p>

<p><strong>How come setting the props on the children works when doing so in object dot notation works (though advises against it) and the cloned element approach does not?</strong></p>

<p>Console logging seems to indicate that cloning the children and adding the props the way we have done it above is not actually adding anything to the props object.</p>
","2747829","","-1","","2017-05-23 11:44:03","2015-09-03 01:48:04","React, cloneElement - invariant error","<javascript><reactjs>","1","0","","",""
"40759461","1","","","2016-11-23 08:35:51","","2","1331","<p>I have a parent Component [MainLayout] that has a child [ListItems] and that has multiple children [ListItem].</p>

<p>How can I get the value of the clicked child [ListItem] in the [MainLayout] component?</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/* index.js */

import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { Router, Route, Link, IndexRoute } from 'react-router'
import ListItems from './components/listitems';

class MainLayout extends Component {
    constructor(props) {
        super(props);

        this.state = {
            items: [],
            selectedItem: null
        };

        this.getTracks = this.getTracks.bind(this);

        this.listItemClicked = this.listItemClicked.bind(this);

        this.getTracks();

    }

    listItemClicked(item) {
        console.log(item);
    }

    getTracks() {

fetch('https://api.spotify.com/v1/search?q=newman&amp;type=track&amp;market=US')
                .then((response) =&gt; response.json())
                .then((responseJson) =&gt; {
                    this.setState({items: responseJson.tracks.items});
                    console.log(responseJson);
                    return responseJson;
                });
    }

    render() {
        return (
            &lt;div&gt;
                {this.props.children &amp;&amp; React.cloneElement(this.props.children, {
                    items: this.state.items,
                    onListItemClicked: this.listItemClicked
                })}
            &lt;/div&gt;
        );
    }
}

class App extends Component {
  constructor(props) {
    super(props);
  }

  render() {

    return (
        &lt;div&gt;
            &lt;ListItems onListItemClick={this.props.onListItemClicked} items={this.props.items} /&gt;
        &lt;/div&gt;
    );
  }

}


/* listitems.js */

import React, {Component} from 'react';
import ListItem from './listitem';

const ListItems = (props) =&gt; {

    const allitems = props.items.map((item) =&gt; {
        return (
            &lt;ListItem onListItemClick={props.onListItemClick} item={item} key={item.id} /&gt;
        )
    });


        return (
            &lt;ul className=""list-group""&gt;
                {allitems}
            &lt;/ul&gt;
        );


}
export default ListItems;

/* listitem.js */

import React, {Component} from 'react';

class ListItem extends Component {

    constructor (props) {
        super(props);
    }

    render() {
        return (
            &lt;div className=""""&gt;
                &lt;h4 onClick={this.props.onListItemClick}&gt;{this.props.item.album.artists['0'].name} - {this.props.item.name}&lt;/h4&gt;
            &lt;/div&gt;
        );
    }

}
export default ListItem;</code></pre>
</div>
</div>
</p>

<p>Thanks for the answers!</p>
","6108503","","","","","2016-11-23 09:24:44","react.js get child value in parent component","<javascript><reactjs><components>","2","0","","",""
"48842537","1","48917488","","2018-02-17 14:47:27","","1","97","<p>I have component with a trigger Element, the trigger Element is A react component  like the following </p>

<pre><code>const TriggerComponent = () =&gt; &lt;div&gt; trigger example &lt;/div&gt;

&lt;MyComponent  trigger={&lt;TriggerComponent /&gt;} /&gt;
</code></pre>

<p>Inside the MyComponent class, I want to add a ref attribute to the trigger Element by cloneElement or creatElement API, of course, I can't add a ref attribute to a functional component according to react documentation. So my idea is to convert the function component to class?</p>

<p>lets me know if you have any idea on how can I implement this idea?</p>
","5927325","","","","","2018-02-21 23:56:50","Convert A function react component To a react class To Add ref attribute","<javascript><reactjs>","2","1","","",""
"48268423","1","","","2018-01-15 18:04:39","","0","36","<p>I am having trouble migrating to react router 4 with nested routes. Here was some snippets from my previous code.   was my layout container and everything was rendered within that if logged in (otherwise redirect to login)</p>

<pre><code>ReactDOM.render(
&lt;Provider store={ store }&gt;
&lt;div&gt;
  &lt;Router history={ history }&gt;
    &lt;Route path='/login' component={ Login } /&gt;
    &lt;Route path=""/password/reset"" component={PasswordReset} /&gt;
    &lt;Route path='/register' component={ Register } title={ 'Register' } /&gt;
    &lt;Route path='/password/change/:token' component={ ChangePassword } title={ 'Register' } /&gt;
    &lt;Route component={ EnsureLoggedInContainer }&gt;
      &lt;Redirect from='/' to='/dashboard' /&gt;
      &lt;Route path='/' component={ App }&gt;
        &lt;Route path='/logout' component={ Logout } /&gt;
  ....
  &lt;/Router&gt;
&lt;/div&gt;
</code></pre>

<p></p>

<p>within  to render the children components:</p>

<pre><code>class ContentLayout extends React.Component {
constructor(props) {
super(props);
this.state = {};
}
render() {
  let children = null;
  if (this.props.children) {
    children = React.cloneElement(this.props.children, {
      updateHeader: this.props.updateHeader,
    });
  }
  return (
    &lt;div className={ this.props.cls }&gt;
      &lt;MainHeader
        updateHeader={ this.props.updateHeader }
        header={ this.props.header }
      /&gt;
      {children}
    &lt;/div&gt;
  );
}
}
</code></pre>

<p>With v4 I've been trying to figure out the proper way to render  as the layout and any child components within.  So far I've been trying to get it working but feel I am on wrong path. (Currently props.match always points to '/')</p>

<pre><code>ReactDOM.render(
&lt;Provider store={ store }&gt;
  &lt;ConnectedRouter history={history}&gt;
    &lt;div&gt;
        &lt;Switch&gt;
          &lt;Route exact path='/login' component={ Login } /&gt;
          &lt;Route exact path=""/password/reset"" component={PasswordReset} /&gt;
          &lt;Route exact path='/register' component={ Register } /&gt;
          &lt;Route exact path='/password/change/:token' component={ ChangePassword } /&gt;
          &lt;Route path='/' component={ App } /&gt;
        &lt;/Switch&gt;
      &lt;/div&gt;
  &lt;/ConnectedRouter&gt;
&lt;/Provider&gt;,
document.getElementById('app')
);
</code></pre>

<p>Within App</p>

<pre><code>const RouteWithProps = ({ component: Component, props, ...extraProps})=&gt; {
 return (&lt;Route
  {...extraProps} 
  render={() =&gt; &lt;Component {...props} {...extraProps} /&gt;} 
  /&gt;
 );
}
</code></pre>

<p>and with the  component rendering</p>

<pre><code>{securedRoutes.map((route, i) =&gt; (
    &lt;RouteWithProps key={i} {...route} updateHeader={this.props.updateHeader} location={this.props.location} match={this.props.match} /&gt;
))}
</code></pre>

<p>What is the proper way or a good example of how to structure the app so for all logged in routes the layout is</p>

<pre><code>&lt;App&gt;
  &lt;ContentLayout&gt;
    &lt;Child&gt;
</code></pre>

<p>with App passing props like updateHeader and anything else to all children.</p>
","1072661","","1072661","","2018-01-15 18:57:49","2018-01-15 19:39:28","Trouble migrating to react-router v4","<react-router><react-router-v4>","1","0","","",""
"47823748","1","","","2017-12-14 23:36:37","","0","159","<p>I am trying to test React-intl using enzyme. 
I have 1 languages french and english
My App.js is as follows</p>

<pre><code>import React from 'react'
import PropTypes from 'prop-types'
import LocaleDropDown from './components/LocaleDropDown'
import {FormattedDate, FormattedTime, FormattedNumber, injectIntl} from 'react-intl'
function App ({children}) {
  return (
    &lt;div className=""container-fluid""&gt;
      {children}
      &lt;div className = ""date-time-wrapper""&gt;
        &lt;span&gt;Date: &lt;/span&gt;&lt;FormattedDate value={new Date()}/&gt;&lt;br/&gt;
        &lt;span&gt;Time: &lt;/span&gt;&lt;FormattedTime value={new Date()}/&gt;&lt;br/&gt;
        &lt;span&gt;Number: &lt;/span&gt;&lt;FormattedNumber value={1000}/&gt;&lt;br/&gt;&lt;br/&gt;
      &lt;/div&gt;
      &lt;LocaleDropDown/&gt;
    &lt;/div&gt;
  )
}

App.propTypes = {
  children: PropTypes.node.isRequired
}

export default injectIntl(App)
</code></pre>

<p>My app.spec.js is</p>

<pre><code>    import React from 'react'
    import ReactDOM from 'react-dom'
    import { shallow } from 'enzyme'
    import sinon from 'sinon'
    import { addLocaleData, IntlProvider } from 'react-intl'
    import App from './App'
    import RecipeList from './recipes/RecipeList/RecipeList'
    import {shallowWithIntlForApp} from './recipes/helpers/intl-test'
    import fr from './locales/fr.json'

    describe('App', () =&gt; {
      it('renders without crashing', () =&gt; {
        const div = document.createElement('div')
        ReactDOM.render(&lt;IntlProvider locale=""en""&gt;&lt;App/&gt;&lt;/IntlProvider&gt;, div)
      })

  it('renders french text when locale is french', () =&gt; {

    const locale = 'fr'
    const langData = {'fr': fr}
    const messages = langData[locale]
    const intlProvider = new IntlProvider({ locale: 'fr', messages}, {})
    const { intl } = intlProvider.getChildContext()
    const wrapper = shallowWithIntlForApp(&lt;App/&gt;, { intl }).first().shallow()
    const date1 = wrapper.find('div.date-time-wrapper').childAt(1)
    console.log(date1.render().text())
    })
  })
</code></pre>

<p>My helper function is
intl-test.js</p>

<pre><code>import React from 'react'
import { IntlProvider, intlShape } from 'react-intl'
import { mount, shallow } from 'enzyme'
import Cookie from 'js-cookie'
import en from '../../locales/en.json'
const locale = Cookie.get('locale') || 'en'
const messages = en[locale]
const intlProvider = new IntlProvider({ locale: 'en', messages }, {})
const { intl } = intlProvider.getChildContext()

/**
 * When using React-Intl `inject    Intl` on components, props.intl is required.
 */
function nodeWithIntlProp (node) {
  return React.cloneElement(node, { intl })
}

export function shallowWithIntl (node) {
  return shallow(nodeWithIntlProp(node), { context: { intl } })
}

export function shallowWithIntlForApp (node, {intl}) {
  return shallow(nodeWithIntlProp(node), { context: { intl } })
}

export function mountWithIntl (node) {
  return mount(nodeWithIntlProp(node), {
    context: { intl },
    childContextTypes: { intl: intlShape }
  })
}
</code></pre>

<p>I am expecting the line console.log(date1.render().text()) to give me the date in ""fr"" format but it fails. it says"" Invariant Violation: [React Intl] Could not find required <code>intl</code> object.  needs to exist in the component ancestry."" 
What is wrong here? I was assuming that adding ""first().shallow()"" would fix this particular error but it did not</p>
","4743297","","","","","2017-12-14 23:36:37","react-intl testing using enzyme","<reactjs><enzyme><react-intl>","0","0","","",""
"41794144","1","","","2017-01-22 17:42:30","","1","1692","<p>I am trying to nest routes in a manner that would pre-set the layout for all the child routes of specified routes.</p>

<p>for instance:</p>

<pre><code>&lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
        &lt;Router path=""/"" component={Init}&gt;
            &lt;Router component={LayoutThreeCol}&gt;
                &lt;IndexRoute component={PageContainer}/&gt;
            &lt;/Router&gt;
            &lt;Router component={LayoutTwoCol}&gt;
                &lt;Route path=""/example"" component={Example}/&gt;
                &lt;Route path=""/another"" component={Another}/&gt;
            &lt;/Router&gt;
        &lt;/Router&gt;
    &lt;/Router&gt;
&lt;/Provider&gt;
</code></pre>

<p>In this instance, <code>LayoutThreeCol</code> and <code>ListTwoCol</code> are the two layout components that encapsulate the child container and presentational components.
I need to be able to render as well as pass the props down to the child elements but I have been getting errors. However, think is the problem is caused by having the following line nested in two components child and parent respectively.</p>

<pre><code>`{React.cloneElement({...this.props}.children, {...this.props})}`

So here is the code I am using an init file to instantiate the `mapStateToProps`

import { bindActionCreators } from 'redux'
import { connect } from 'react-redux';
import * as actionCreators from './ActionCreators'
import App from './App';

function mapStateToProps(state, ownProps){
    return{
        Items: state.feedItems,
        universalNav: state.universalNav,
        height: state.height,
        width: state.width,
        isMobile: state.isMobile,
        isTablet: state.isTablet
    };
}

function mapDispatchToProps(dispatch){
    return bindActionCreators(actionCreators, dispatch);
}


const Init = connect(mapStateToProps, mapDispatchToProps)(App);

export default Init;
</code></pre>

<p>Here is the app file that I use as the wrapper </p>

<pre><code>export default class App extends Component {

 render(){
            return(
                &lt;div&gt;
                    &lt;NavContainer /&gt;
                    {React.cloneElement({...this.props}.children, {...this.props})}
                &lt;/div&gt;
            );
    }
}
</code></pre>

<p>Here is an example of a layout file.</p>

<pre><code>export default class LayoutThreeCol extends Component{
    render(){
        return(
            &lt;div className=""layout-3-col""&gt;
                &lt;div className=""layout-3-col-left""&gt;
                    //stuff goes here
                &lt;/div&gt;
                &lt;div className=""layout-3-col-center""&gt;
                    {React.cloneElement({...this.props}.children, {...this.props})}
                &lt;/div&gt;
                &lt;div className=""layout-3-col-right""&gt;
                    //stuff goes here
                &lt;/div&gt;
            &lt;/div&gt;
        )
    }
}
</code></pre>

<p>layout two col
    export default class LayoutTwoCol extends Component{
        render(){
            return(
                
                    //omitted for brevity
                
            )
        }
    }</p>

<p>And the page container is a trivial presentational component.
How do I render multiple nested components as detailed in the above example?
Thanks</p>
","7284360","","7284360","","2017-01-22 18:13:59","2017-01-23 07:49:40","How to create nested layout routing components in react router?","<reactjs><routes><redux><react-router><react-router-redux>","1","2","","",""
"43973589","1","","","2017-05-15 07:22:03","","0","568","<p>I am switching from react-router 3.x to 4.x and I am not able to render nested routes.</p>

<p>I bootstrapped an application using <a href=""https://github.com/facebookincubator/create-react-app"" rel=""nofollow noreferrer"">create-react-app</a></p>

<pre><code>index.js file

import React from 'react';
import ReactDOM from 'react-dom';
import Routes from './routes';
import './index.css';

ReactDOM.render(&lt;Routes /&gt;, document.getElementById('root'));

routes.js file

import React from 'react';
import _ from 'lodash';
import {
  BrowserRouter as Router,
  Route,
} from 'react-router-dom';
import { dojoRequire } from 'esri-loader';
import EsriLoader from 'esri-loader-react';

import App from './components/App';
import Home from './components/Home';

/**
 * Helper component to wrap app
 */
class AppWrapper extends React.Component {
  /**
   * Util function to render the children
   * Whenever a state change happens in react application, react will render the component again
   * and we wish to pass the updated state to the children as props
   */
  renderChildren() {
    const {children} = this.props;
    if (!children) {
      return;
    }

    return React.Children.map(children, c =&gt; React.cloneElement(c, _.omit(this.props, 'children'), { }));
  }

  render() {
    const child = this.renderChildren();
    return (
      &lt;App {...this.props}&gt;
        {child}
      &lt;/App&gt;
    );
  }
}

/**
 * Root Loader component to load esri api
 */
class LoaderComponent extends React.Component {

  constructor(props) {
    super(props);
    this.state = { loaded: false };
  }

  /**
   * Callback fired when arc GIS api is loaded
   * Now load the requirejs modules using dojorequire
   */
  esriReady() {
    dojoRequire(['esri/Map', 'esri/views/MapView'], (Map, MapView) =&gt; {
      this.setState({ Map, MapView, loaded: true });
    });
  }

  render() {
    const options = {
      url: 'https://js.arcgis.com/4.3/',
    };
    return (
      &lt;div&gt;
        &lt;EsriLoader options={options} ready={this.esriReady.bind(this)} /&gt;
        &lt;AppWrapper {...this.state}&gt;
          &lt;Route exact path=""/home"" component={Home} /&gt;
        &lt;/AppWrapper&gt;
      &lt;/div&gt;
    );
  }
};

const Routes = (props) =&gt; (
  &lt;Router {...props}&gt;
    &lt;Route exact path=""/"" component={LoaderComponent} /&gt;
  &lt;/Router&gt;
);

export default Routes;
</code></pre>

<p>App and home components are simple div tags that renders <code>&lt;div&gt;Hello world App&lt;/div&gt;</code> and <code>&lt;div&gt;Hello world Home&lt;/div&gt;</code></p>

<p>The <code>App</code> component renders perfectly, but when I navigate to <code>http://localhost:3000/home</code> component I see an empty page.</p>

<p><strong>What I would like to do is</strong></p>

<p>When the user launched the app the user should be redirected to <code>/home</code> and I would like to define two additional routes for <code>App</code> Component</p>

<pre><code>&lt;Route exact path=""/a"" component={A} /&gt;
&lt;Route exact path=""/b"" component={B} /&gt;
</code></pre>

<p>Currently I am not able to redirect to <code>/home</code> on app load and not able to define nested routes for <code>App</code> Component.</p>

<blockquote>
  <p>NOTE: This above code was working fine for react-router version 3.x. To redirect on page load I would use <code>IndexRedirect</code>.</p>
</blockquote>

<p>I already had a look at <a href=""https://stackoverflow.com/questions/42095600/nested-routes-in-v4"">this</a> and <a href=""https://stackoverflow.com/questions/41474134/nested-routes-with-react-router-v4"">this</a> question and I tried all possible solutions in those questions but none is working.</p>

<p><strong>I would like to have all the route handling in <code>routes.js</code> file</strong>.</p>
","6643502","","-1","","2017-05-23 12:18:02","2017-05-15 09:59:29","react router 4 nested components not working properly","<javascript><reactjs><react-router><react-router-v4>","2","0","1","",""
"40426822","1","40434334","","2016-11-04 15:49:07","","3","1306","<p>Previously in react-router v3.* I passed props to children components via </p>

<pre><code>React.cloneElement(this.props.children, this.props)
</code></pre>

<p>How is this done in react-router v4 with the new <code>&lt;Match /&gt;</code> API</p>

<p>So far the solution I've come up with is to use the <code>render</code> method in the <code>&lt;Match /&gt;</code> API:</p>

<pre><code>&lt;Match pattern=""/"" render={() =&gt; &lt;ChildComponent {...this.props} /&gt;} /&gt;
</code></pre>

<p>using the ES6 spread syntax to pass props to Child Component. Is there a better way which also carries with it all the standard props (location, pattern, pathname, isExact) to the child component?</p>
","2676078","","2676078","","2016-11-04 16:11:47","2016-11-05 03:04:00","Passing props to children components with react-router v4","<javascript><reactjs><react-router><react-router-component>","1","0","4","",""
"41072564","1","","","2016-12-10 05:39:47","","0","822","<p>I am working on my first react application with redux and react-router( also using react-router-redux). I want a way to present two different layouts; one layout when the user has not signed in and another when the user has signed in.</p>

<p>Please I would like to know how to fix this in my code or how to achieve the expected result otherwise.</p>

<p>Below is what I have tried:</p>

<ul>
<li><p>Created the root component App.js that reads the value from the state of the store to know if the user is logged in.</p>

<pre><code>import React, { Component } from 'react'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'

//Import Components
import Main from '../components/Main'

//Import necessary actions
import * as loginActions_ from '../actions/login'

const mapStateToProps = (state) =&gt; {
  return {
    loginStatus: state.loginStatus
  }
}

const mapDispatchToProps = (dispatch) =&gt; {
  const loginActions = bindActionCreators (loginActions_, dispatch)
    return {
      loginActions
    }
}

export default connect(mapStateToProps, mapDispatchToProps)(Main)
</code></pre></li>
<li><p>Created  a presentation(Main.js)  component that uses the loginStatus to render the appropriate layout. </p>

<pre><code>import React, { Component } from 'react'

import { Container } from 'semantic-ui-react'

import MainLayoutOut  from './MainLayoutOut'
import MainLayoutIn  from './MainLayoutIn'

export default class Main extends Component {
   constructor(props){
     super(props)
   }
   render(){
        const child = (this.props.loginStatus? &lt;MainLayoutIn loginStatus={this.props.loginStatus} loginActions={this.props.loginActions} /&gt;
                      : &lt;MainLayoutOut loginStatus={this.props.loginStatus} loginActions= {this.props.loginActions} /&gt; )
     return(
       &lt;Container&gt;
          {child}
       &lt;/Container&gt;
      )
   }
 }
</code></pre></li>
<li><p>The MainLayoutOut.js which renders it's own Menu, Content(the children) and a footer.</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment } from 'semantic-ui-react'

import Footer from './Footer'
import MenuOut from './MenuOut'

export default class MainLayoutOut extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container fluid&gt;
        &lt;MenuOut/&gt;
        &lt;Segment key='contentOut'&gt;
           {React.cloneElement(this.props.children, this.props)}
        &lt;/Segment&gt;
        &lt;Footer/&gt;
      &lt;/Container&gt;
     )
   }
  }
</code></pre></li>
<li><p>Similarly, the MainLayoutIn.js has the structure below:</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment, Header} from 'semantic-ui-react'

export default class MainLayoutIn extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container&gt;
         &lt;Segment key='menuIn'&gt;Header In&lt;/Segment&gt;
         &lt;Segment key='contentIn'&gt;
         &lt;Header as='h1'&gt;Content In&lt;/Header&gt;
           {/*this.props.children*/}
          &lt;/Segment&gt;
         &lt;Segment key='footerIn'&gt;FooterIn&lt;/Segment&gt;
       &lt;/Container&gt;
     )
   }
 }
</code></pre></li>
<li><p>Below is how I created the store.</p>

<pre><code>import { applyMiddleware, createStore } from 'redux'
import createLogger from 'redux-logger'
import ReduxThunk from 'redux-thunk'

import initialState from '../initialState'
import rootReducer from '../reducers'

const logger = createLogger()
const middlewares = [ReduxThunk, logger]

export default function configureStore(initialStateParam = initialState){
    return createStore(rootReducer, {}, applyMiddleware(...middlewares));
}
</code></pre></li>
<li><p>The reducers the root-reducers; reducers/index.js</p>

<pre><code>  import { combineReducers } from 'redux'
  import { routerReducer } from 'react-router-redux'

  import loginStatus from './loginStatus'

  const rootReducer = combineReducers({
    routing: routerReducer,
    loginStatus
  })

 export default rootReducer 
</code></pre>

<p>and the loginStatus reducer for now is like:</p>

<pre><code> export default function loginStatus(state = false, action){
    console.log('Login Status fired!')
    return state
 }
</code></pre></li>
<li><p>Lastly the client.js file that sets up the application.</p>

<pre><code>  import React from 'react'
  import { render } from 'react-dom'
  import { Provider } from 'react-redux'

  import { syncHistoryWithStore } from 'react-router-redux'
  import { Router, Route, IndexRoute, browserHistory } from 'react-router'

  import configureStore from '../src/store/configureStore'

  import App from '../src/containers/App'
  import Main from '../src/components/Main'
  import MainLayoutIn from '../src/components/MainLayoutIn'
  import MainLayoutOut from '../src/components/MainLayoutOut'
  import Blog from '../src/components/Blog'
  import SignUp from '../src/components/SignUp'
  import Login from '../src/components/Login'

  const store = configureStore()
  const history = syncHistoryWithStore(browserHistory, store)

  const router = (
    &lt;Provider store={store}&gt;
      &lt;Router history={history}&gt;
        &lt;Route path='/' component={App}&gt;
          &lt;Route path='/' component={Main}&gt;
            &lt;Route path='/' component={MainLayoutOut}&gt;
             &lt;IndexRoute component={Blog}&gt;&lt;/IndexRoute&gt;
             &lt;Route path='/login' component={Login}/&gt;
            &lt;Route path='/signup' component={SignUp}/&gt;
          &lt;/Route&gt;
          &lt;Route path='/' component={MainLayoutIn}&gt;

          &lt;/Route&gt;
        &lt;/Route&gt;
     &lt;/Route&gt;
   &lt;/Router&gt;
 &lt;/Provider&gt;
 )
 render( router ,document.getElementById('app'))
</code></pre></li>
</ul>

<p>The client.js file is to route the components of the app. I want that when a user login he should land on a page(the purpose MainLayoutOut.js) having a menu (with menu-items to access a list of blogs, sign up, and login) a content and footer. But when the user authenticates and is authorized he is suppose to see completely different layout (the purpose of MainLayoutIn.js) with its own Menu, content, and footer.</p>

<p>Running the above code yields the error message: </p>

<pre><code>   Uncaught TypeError: Cannot read property 'props' of undefined
   at Object.ReactElement.cloneElement    (http://localhost:3000/bundle.js:6362:35)
   at Object.cloneElement (http://localhost:3000/bundle.js:23625:49)
   at MainLayoutOut.render (http://localhost:3000/bundle.js:17164:28)
   at MainLayoutOut.tryRender (http://localhost:3000/bundle.js:3912:32)
   at MainLayoutOut.proxiedMethod (http://localhost:3000/bundle.js:52020:31)
   at http://localhost:3000/bundle.js:44855:22
   at measureLifeCyclePerf (http://localhost:3000/bundle.js:44134:13)
   at     ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (http://localhost:3000/bundle.js:44854:26)
   at ReactCompositeComponentWrapper._renderValidatedComponent (http://localhost:3000/bundle.js:44881:33)
   at ReactCompositeComponentWrapper.performInitialMount (http://localhost:3000/bundle.js:44421:31) 
</code></pre>
","3149524","","3149524","","2016-12-10 06:28:12","2016-12-10 06:28:12","How to use layout components in react.js with react-router","<node.js><reactjs><react-router><react-redux>","0","6","","",""
"40429824","1","","","2016-11-04 18:45:28","","0","36","<p>this might be a dumb question, but I am trying to learn react-native, but since I am new to programming, I just dont understand each sentences and how it works. Could anyone explain to me every each sentences and word that what is going on and how it works? I looked it up and I sort of understand but still I am very confused...This is the code that I am trying to understand right now. I just dont understand renderChildren() function part...</p>

<pre><code>var SliderContainer = React.createClass({

getInitialState() {
return {
  value: DEFAULT_VALUE,
};
},

render() {
var value = this.state.value;

return (
  &lt;View&gt;
  &lt;Text style={{fontSize:15, fontFamily:'Bradley Hand'}}&gt; Distortion &lt;/Text&gt;

    {this.renderChildren()}
  &lt;/View&gt;
);
},

renderChildren() {
return React.Children.map(this.props.children, (child) =&gt; {
  if (child.type === Slider
      || child.type === ReactNative.Slider) {
    var value = this.state.value;
    return React.cloneElement(child, {
      value: value,
      onValueChange: (val) =&gt; this.setState({value: val}),
    });
  } else {
    return child;
  }
});
},
});
</code></pre>
","6623596","","","","","2016-11-05 05:50:23","react-native sentence and word questions for the function","<react-native>","2","0","","",""
"41404232","1","41405917","","2016-12-31 00:03:17","","9","1946","<p>I am following Chang Wang's tutorial for making reusable React transitions with HOCs and <code>ReactTransitionGroup</code>(<a href=""https://medium.com/@cheapsteak/animations-with-reacttransitiongroup-4972ad7da286#.9d0ond1lo"" rel=""noreferrer"">Part 1</a> <a href=""https://medium.com/@cheapsteak/reusing-reacttransitiongroup-animations-with-higher-order-components-1e7043451f91#.jxwmzf8l7"" rel=""noreferrer"">Part 2</a>) in conjunction with Huan Ji's tutorial on page transitions (<a href=""https://medium.com/front-end-hacking/react-page-transition-animations-9d18c90a9831#.ielm852rq"" rel=""noreferrer"">Link</a>).</p>

<p>The problem I am facing is that <code>React.cloneElement</code>does not seem to be passing updated props into one of its children, while other children do properly receive updated props.</p>

<h2><strong>First, some code:</strong></h2>

<p><strong>TransitionContainer.js</strong></p>

<p><code>TransitionContainer</code> is a container component that is akin to <code>App</code> in Huan Ji's tutorial. It injects a slice of the state to it's children.</p>

<p>The children of the <code>TransitionGroup</code> are all an instance of an HOC called <code>Transition</code> (code further down)</p>

<pre><code>import React from 'react';
import TransitionGroup from 'react-addons-transition-group';
import {connect} from 'react-redux';
class TransitionContainer extends React.Component{
  render(){
    console.log(this.props.transitionState);
    console.log(""transitionContainer"");
    return(
      &lt;div&gt;
      &lt;TransitionGroup&gt;
      {
        React.Children.map(this.props.children,
         (child) =&gt; React.cloneElement(child,      //These children are all instances of the Transition HOC
           { key: child.props.route.path + ""//"" + child.type.displayName,
             dispatch: this.props.dispatch,
             transitionState: this.props.transitionState
           }
         )
        )
      }

      &lt;/TransitionGroup&gt;
      &lt;/div&gt;
    )
  }
}
export default connect((state)=&gt;({transitionState:state.transitions}),(dispatch)=&gt;({dispatch:dispatch}))(TransitionContainer)
</code></pre>

<p><strong>Transition.js</strong></p>

<p><code>Transition</code> is akin to Chang Wang's HOC. It takes some options, defines the <code>componentWillEnter</code> + <code>componentWillLeave</code> hooks, and wraps a component. <code>TransitionContainer</code> (above) injects <code>props.transitionState</code> into this HOC. However, sometimes the props do not update even if state changes (see <strong>The Problem</strong> below)</p>

<pre><code>import React from 'react';
import getDisplayName from 'react-display-name';
import merge from 'lodash/merge'
import classnames from 'classnames'
import * as actions from './actions/transitions'
export function transition(WrappedComponent, options) {
  return class Transition extends React.Component {
    static displayName = `Transition(${getDisplayName(WrappedComponent)})`;
    constructor(props) {
      super(props);
      this.state = {
          willLeave:false,
          willEnter:false,
          key: options.key
      };
    }
    componentWillMount(){
      this.props.dispatch(actions.registerComponent(this.state.key))
    }
    componentWillUnmount(){
      this.props.dispatch(actions.destroyComponent(this.state.key))
    }
    resetState(){
      this.setState(merge(this.state,{
        willLeave: false,
        willEnter: false
      }));
    }
    doTransition(callback,optionSlice,willLeave,willEnter){
      let {transitionState,dispatch} = this.props;
      if(optionSlice.transitionBegin){
        optionSlice.transitionBegin(transitionState,dispatch)
      }
      if(willLeave){
        dispatch(actions.willLeave(this.state.key))
      }
      else if(willEnter){
        dispatch(actions.willEnter(this.state.key))
      }
      this.setState(merge(this.state,{
        willLeave: willLeave,
        willEnter: willEnter
      }));
      setTimeout(()=&gt;{
        if(optionSlice.transitionComplete){
          optionSlice.transitionEnd(transitionState,dispatch);
        }
        dispatch(actions.transitionComplete(this.state.key))
        this.resetState();
        callback();
      },optionSlice.duration);
    }
    componentWillLeave(callback){
      this.doTransition(callback,options.willLeave,true,false)
    }
    componentWillEnter(callback){
      this.doTransition(callback,options.willEnter,false,true)
    }
    render() {

      console.log(this.props.transitionState);
      console.log(this.state.key);

      var willEnterClasses = options.willEnter.classNames
      var willLeaveClasses = options.willLeave.classNames
      var classes = classnames(
        {[willEnterClasses] : this.state.willEnter},
        {[willLeaveClasses] : this.state.willLeave},
      )
      return &lt;WrappedComponent animationClasses={classes} {...this.props}/&gt;
    }
  }
}
</code></pre>

<p><strong><em>options</em></strong></p>

<p>Options have the following structure: </p>

<pre><code>{
  willEnter:{
    classNames : ""a b c"",
    duration: 1000,
    transitionBegin: (state,dispatch) =&gt; {//some custom logic.},
    transitionEnd: (state,dispatch) =&gt; {//some custom logic.}
         // I currently am not passing anything here, but I hope to make this a library
         // and am adding the feature to cover any use case that may require it.

  },
  willLeave:{
    classNames : ""a b c"",
    duration: 1000,
    transitionBegin: (state,dispatch) =&gt; {//some custom logic.},
    transitionEnd: (state,dispatch) =&gt; {//some custom logic.}

  }
}
</code></pre>

<p><strong><em>Transition Lifecycle (onEnter or onLeave)</em></strong></p>

<ul>
<li>When the component is mounted, <code>actions.registerComponent</code> is dispatched

<ul>
<li><code>componentWillMount</code></li>
</ul></li>
<li>When the component's <code>componentWillLeave</code> or <code>componentWillEnter</code> hook is called, the corresponding slice of the options is sent to <code>doTransition</code></li>
<li>In doTransition:

<ul>
<li>The user supplied transitionBegin function is called (<code>optionSlice.transitionBegin</code>)</li>
<li>The default <code>action.willLeave</code> or <code>action.willEnter</code> is dispatched</li>
<li>A timeout is set for the duration of the animation (<code>optionSlice.duration</code>). When the timeout is complete: 

<ul>
<li>The user supplied transitionEnd function is called (<code>optionSlice.transitionEnd</code>)</li>
<li>The default <code>actions.transitionComplete</code> is dispatched</li>
</ul></li>
</ul></li>
</ul>

<p>Essentially, optionSlice just allows the user to pass in some options. <code>optionSlice.transitionBegin</code> and <code>optionSlice.transitionEnd</code> are just optional functions that are executed while the animation is going, if that suits a use case. I'm not passing anything in currently for my components, but I hope to make this a library soon, so I'm just covering my bases.</p>

<p><strong><em>Why Am I tracking transition states anyway?</em></strong></p>

<p><a href=""https://i.stack.imgur.com/aBmDg.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/aBmDg.png"" alt=""enter image description here""></a></p>

<p>Depending on the element that is entering, the exiting animation changes, and vice versa. </p>

<p>For example, in the image above, when the blue enters, red moves right, and when the blue exits, red moves left.  However when the green enters, red moves left and when the green exits, red moves right. To control this is why I need to know the state of current transitions.</p>

<h2><strong>The Problem:</strong></h2>

<p>The <code>TransitionGroup</code> contains two elements, one entering, one exiting (controlled by react-router). It passes a prop called <code>transitionState</code> to its children. The <code>Transition</code> HOC (children of <code>TransitionGroup</code>) dispatches certain redux actions through the course of an animation. The <code>Transition</code> component that is entering receives the props change as expected, but the component that is exiting is frozen. It's props do not change. </p>

<p>It is always the one that is exiting that does not receive updated props. I have tried switching the wrapped components (exiting and entering), and the issues is not due to the wrapped components.</p>

<h2><strong>Images</strong></h2>

<p><strong>On-Screen Transition:</strong>
<a href=""https://i.stack.imgur.com/pFVaM.gif"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/pFVaM.gif"" alt=""Transition""></a></p>

<p><strong>Transition in React DOM</strong></p>

<p><a href=""https://i.stack.imgur.com/5BAXE.gif"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/5BAXE.gif"" alt=""Transition2""></a></p>

<p>The exiting component Transition(Connect(Home))), in this case, is not receiving updated props.</p>

<p>Any ideas why this is the case? Thanks in advance for all the help.</p>

<p><strong>Update 1:</strong></p>

<pre><code>import React from 'react';
import TransitionGroup from 'react-addons-transition-group';
import {connect} from 'react-redux';
var childFactoryMaker = (transitionState,dispatch) =&gt; (child) =&gt; {
  console.log(child)
  return React.cloneElement(child, {
    key: (child.props.route.path + ""//"" + child.type.displayName),
    transitionState: transitionState,
    dispatch: dispatch
  })
}

class TransitionContainer extends React.Component{
  render(){
    let{
      transitionState,
      dispatch,
      children
    } = this.props
    return(
      &lt;div&gt;
      &lt;TransitionGroup childFactory={childFactoryMaker(transitionState,dispatch)}&gt;
          {
            children
          }
      &lt;/TransitionGroup&gt;
      &lt;/div&gt;
    )
  }
}

export default connect((state)=&gt;({transitionState:state.transitions}),(dispatch)=&gt;({dispatch:dispatch}))(TransitionContainer)
</code></pre>

<p>I've updated my <code>TransitionContainer</code> to the above. Now, the <code>componentWillEnter</code> and <code>componentWillLeave</code> hooks are not being called. I logged the <code>React.cloneElement(child, {...})</code> in the <code>childFactory</code> function, and the hooks (as well as my defined functions like <code>doTransition</code>) are present in the <code>prototype</code> attribute. Only <code>constructor</code>, <code>componentWillMount</code> and <code>componentWillUnmount</code> are called. I suspect this is because the <code>key</code> prop is not being injected through <code>React.cloneElement</code>. <code>transitionState</code> and <code>dispatch</code> are being injected though. </p>

<p><strong>Update 2:</strong></p>

<pre><code>import React from 'react';
import TransitionGroup from 'react-addons-transition-group';
import {connect} from 'react-redux';
var childFactoryMaker = (transitionState,dispatch) =&gt; (child) =&gt; {
  console.log(React.cloneElement(child, {
    transitionState: transitionState,
    dispatch: dispatch
  }));
  return React.cloneElement(child, {
    key: (child.props.route.path + ""//"" + child.type.displayName),
    transitionState: transitionState,
    dispatch: dispatch
  })
}

class TransitionContainer extends React.Component{
  render(){
    let{
      transitionState,
      dispatch,
      children
    } = this.props
    return(
      &lt;div&gt;
      &lt;TransitionGroup childFactory={childFactoryMaker(transitionState,dispatch)}&gt;
      {
        React.Children.map(this.props.children,
            (child) =&gt; React.cloneElement(child,      //These children are all instances of the Transition HOC
                { key: child.props.route.path + ""//"" + child.type.displayName}
            )
        )
      }
      &lt;/TransitionGroup&gt;
      &lt;/div&gt;
    )
  }
}

export default connect((state)=&gt;({transitionState:state.transitions}),(dispatch)=&gt;({dispatch:dispatch}))(TransitionContainer)
</code></pre>

<p>After further inspection of the TransitionGroup source, I realized that I put the key in the wrong place. All is well now. Thanks so much for the help!!</p>
","3870538","","3870538","","2016-12-31 18:00:55","2016-12-31 18:00:55","React TransitionGroup and React.cloneElement do not send updated props","<reactjs><animation><redux><react-router><reactcsstransitiongroup>","1","0","2","",""
"41476790","1","","","2017-01-05 03:15:57","","2","447","<p>My top level component takes <code>children</code> from <code>react-router</code> like so:</p>

<pre><code>class App extends Component {
  render() {
    return (
      &lt;div&gt;
         {React.cloneElement(children, this.props.widgets)}
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p>I'm trying to write a simple test with <code>jest</code>, like this:</p>

<pre><code>it('renders without crashing', () =&gt; {
  const div = document.createElement('div')
  ReactDOM.render(&lt;App /&gt;, div)
})
</code></pre>

<p>However, this test fails with the following error:</p>

<pre><code> FAIL  src/App.test.js
  ● renders without crashing

    TypeError: Cannot read property 'props' of undefined

      at Object.&lt;anonymous&gt;.ReactElement.cloneElement (node_modules/react/lib/ReactElement.js:271:34)
      at Object.cloneElement (node_modules/react/lib/ReactElementValidator.js:216:48)
      at App.render (src/App.js:50:57)
      at node_modules/react-dom/lib/ReactCompositeComponent.js:796:21
      at measureLifeCyclePerf (node_modules/react-dom/lib/ReactCompositeComponent.js:75:12)
      at ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (node_modules/react-dom/lib/ReactCompositeComponent.js:795:25)
      at ReactCompositeComponentWrapper._renderValidatedComponent (node_modules/react-dom/lib/ReactCompositeComponent.js:822:32)
      at ReactCompositeComponentWrapper.performInitialMount (node_modules/react-dom/lib/ReactCompositeComponent.js:362:30)
      at ReactCompositeComponentWrapper.mountComponent (node_modules/react-dom/lib/ReactCompositeComponent.js:258:21)
      at Object.mountComponent (node_modules/react-dom/lib/ReactReconciler.js:46:35)
      at ReactCompositeComponentWrapper.performInitialMount (node_modules/react-dom/lib/ReactCompositeComponent.js:371:34)
      at ReactCompositeComponentWrapper.mountComponent (node_modules/react-dom/lib/ReactCompositeComponent.js:258:21)
      at Object.mountComponent (node_modules/react-dom/lib/ReactReconciler.js:46:35)
      at mountComponentIntoNode (node_modules/react-dom/lib/ReactMount.js:104:32)
      at ReactReconcileTransaction.perform (node_modules/react-dom/lib/Transaction.js:140:20)
      at batchedMountComponentIntoNode (node_modules/react-dom/lib/ReactMount.js:126:15)
      at ReactDefaultBatchingStrategyTransaction.perform (node_modules/react-dom/lib/Transaction.js:140:20)
      at Object.batchedUpdates (node_modules/react-dom/lib/ReactDefaultBatchingStrategy.js:62:26)
</code></pre>

<p>Is there a way to mock <code>cloneElement</code>? Or to test the component in such a way that it ignores the call to <code>cloneElement</code>?</p>
","5456001","","","","","2017-01-05 07:56:17","How do I write a test for a component that uses React.cloneElement?","<javascript><reactjs><jestjs>","1","3","","",""
"40490826","1","","","2016-11-08 15:36:53","","1","1332","<p>I have the following higher order component that I am trying to wrap in a container element that is supplied as a prop:</p>

<pre><code>import React, { PropTypes } from 'react';

export default (Component) =&gt; {
  return class extends React.Component {
    static propTypes = {
      containerElement: PropTypes.element
    }

    static defaultProps = {
      containerElement: &lt;div /&gt;
    };

    componentDidMount() {
      console.log(this.el);
    }

    render() {
      const containerProps = {
        ref: (el) =&gt; this.el = el
      };

      return React.cloneElement(containerElement, containerProps, Component);
    };
  }
}
</code></pre>

<p>I then wrap a component like this:</p>

<pre><code>export default AnimationComponent(reduxForm({
  form: 'newResultForm',
  validate
})(NewResultForm));
</code></pre>

<p>But when I log the element in <code>componentDidMount</code> it is an empty <code>&lt;div/&gt;</code>.</p>

<p>Why is the passed in component not a child of the newly created container element?</p>
","11755","","","","","2016-11-08 22:54:55","React cloneElement and component instance","<reactjs>","1","0","1","",""
"41481979","1","41482017","","2017-01-05 09:59:46","","0","222","<p>When i use the <code>Link to=""/Home/PageA""</code>   It is work well, but when i refresh the page or typing ""/Home/PageA"" in brower,the bundle will error.</p>

<p>It is has some conflict between WebPack and React-Router?And how to fix it?</p>

<p>Thx in Advance.</p>

<p><strong>here is my pic Explain</strong></p>

<p><a href=""https://i.stack.imgur.com/ym89y.png"" rel=""nofollow noreferrer"">actPic</a>
<a href=""https://i.stack.imgur.com/zMDyX.png"" rel=""nofollow noreferrer"">errorPic</a></p>

<p><strong>here is my code:</strong></p>

<pre><code>import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { Router, Route, IndexRoute, browserHistory, Link } from 'react-router'

    const App = (props) =&gt; {
        console.log(""App"", props);
        const key = 'root';
        return (
            &lt;div&gt;
                {React.cloneElement(props.children || &lt;div /&gt;, { key })}
            &lt;/div&gt;
        );
    };


    const LoginPage = (props) =&gt; {
        console.log(""Login"", props);

        return (
            &lt;div className=""Image""&gt;
                &lt;h1&gt;this is LoginPage&lt;/h1&gt;
            &lt;/div&gt;
        );
    };

    const HomePage = (props) =&gt; {
        console.log(""Home"", props);
        return (
            &lt;div className=""Image""&gt;
                &lt;li&gt;&lt;Link to=""/Home/PageA""&gt;Tab 1&lt;/Link&gt;&lt;/li&gt;
                &lt;h1&gt;this is  Home page&lt;/h1&gt;
                {React.cloneElement(props.children || &lt;div /&gt;, { key: props.pathname })}
            &lt;/div&gt;
        );
    };

    const PageA = (props) =&gt; {
        console.log(""pageA"", props);
        return (
            &lt;div&gt;
                &lt;input type='button' value=""back"" onClick={props.router.goBack}&gt;&lt;/input&gt;
                this is pageA;
            &lt;/div&gt;
        );
    };



    ReactDOM.render((
        &lt;Router history={browserHistory}&gt;
            &lt;Route path=""/"" component={App}&gt;
                &lt;Route path=""Login"" component={LoginPage}&gt;
                &lt;/Route&gt;[enter image description here][1]
                &lt;Route path=""Home"" component={HomePage}&gt;
                    &lt;Route path=""PageA"" component={PageA}&gt;
                    &lt;/Route&gt;
                &lt;/Route&gt;
            &lt;/Route&gt;
        &lt;/Router&gt;

    ), document.getElementById('container'));
</code></pre>

<p><strong>here is my webPack.config</strong></p>

<pre><code>module.exports = {
    devtool: 'source-map', 
    entry: __dirname + ""/app/app.js"", 
    output: {
        path: __dirname + ""/app"", 
        filename: ""bundle.js"" 
    },
    module: { 
        loaders: [
            {
                test: /\.json$/,
                loader: ""json""
            }, {
                test: /\.js$/,
                exclude: /node_modules/,
                loader: 'babel', 
                query: {
                    presets: ['es2015', 'react']
                }
            }, {
                test: /\.css$/,
                loader: 'style!css' 
            }, {
                test: /\.(png|jpg)$/,
                loader: 'url?limit=25000'
            }
        ]
    },
    devServer: {
        port: ""9023"",
        contentBase: ""./app"", 
        colors: true, 
        historyApiFallback: true, 
        inline: true 
    }
}
</code></pre>
","6403160","","","","","2017-01-06 11:32:10","react-Router nested rouths refresh error with webpack","<reactjs><webpack><react-router>","1","1","","",""
"48112685","1","","","2018-01-05 11:27:03","","0","51","<p>I'm having an issue where <code>clientHeight</code> is <code>undefined</code> instead of the actual height of the DOM element.  This code <strong>works as expected in the browser</strong>. </p>

<p><strong>Component</strong></p>

<pre><code>class MyWidget extends React.Component {
    constructor() {
        super();
        this.state = { contentHeight: 0 };
    }

    componentWillReceiveProps(nextProps) {
        this.setState(() =&gt; ({
            contentHeight: nextProps.open ? this.content.firstChild.clientHeight : 0
        }));
    }

    render() {
        const { controlId, open, trigger, children } = this.props;
        return (
            &lt;div&gt;
                &lt;button tabIndex=""0"" aria-controls={controlId}&gt;
                    { cloneElement(trigger, { open }) }
                &lt;/button&gt;
                &lt;div
                    id={controlId}
                    ref={(element) =&gt; {
                        this.content = element;
                    }}
                    aria-hidden={open}
                    style={{ maxHeight: this.state.contentHeight }}
                &gt;
                    { cloneElement(children, { open }) }
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>However, when mounting the component and simulating a prop change, the <code>clientHeight</code> of the child <code>div</code> reports <code>undefined</code>.</p>

<p><strong>Unit Test</strong></p>

<pre><code>// Arrange
const wrapper = mount(
    &lt;MyWidget trigger={&lt;span&gt;click me&lt;/span&gt;} open={false}&gt;
        &lt;div style={{ height: 90, padding: 5 }}&gt;Lorum Ipsum&lt;/div&gt;
    &lt;/MyWidget&gt;
);

// Act
wrapper.setProps({ open: true });

// Assert
expect(wrapper.children('div').prop('style')).to.have.property('maxHeight', 100);

// Result
AssertionError: expected { maxHeight: undefined } to have a property 'maxHeight' of 100, but got undefined
</code></pre>

<p>I'm not entirely convinced that enzyme is the cause of this since it feels like its related to the underlying <code>react-dom/test-tools</code> and/or <code>jsdom</code>.  I've added a note on an <a href=""https://github.com/airbnb/enzyme/issues/1434"" rel=""nofollow noreferrer"">enzyme discussion</a> since I'd appreciate some help in debugging this further.</p>
","2955675","","1215133","","2018-04-17 23:49:49","2018-04-17 23:49:49","Is there a known defect in enzyme, react-dom/test-tools, or jsdom that effects clientHeight?","<javascript><reactjs><enzyme><jsdom><react-dom>","1","0","","",""
"39825567","1","39835526","","2016-10-03 06:23:05","","2","448","<p>Below is a simple component for showing error messages:</p>

<pre><code>// @flow
import styles from 'styles/components/Error';
import React from 'react';
import CSSModules from 'react-css-modules';

type Props = {
  message: string
}

const Error = ({ message }: Props) =&gt; {
  return (
    &lt;div styleName=""error""&gt;
      {message}
    &lt;/div&gt;
  );
};

export default CSSModules(Error, styles);
</code></pre>

<p>Note that it requires <code>message</code> property. Now if I use this component somewhere:</p>

<pre><code>&lt;Error /&gt;;
</code></pre>

<p>Flowtype should warn me that <code>Error</code> is missing required property <code>message</code> but it does not. If I do not wrap my <code>Error</code> component with react-css-modules, Flowtype does work as expected. </p>

<p>I'm thinking that I need to declare a type for Flowtype for it to understand wrapped components but my Google-fu did not yield any results. </p>

<p>What I did found:</p>

<ul>
<li><a href=""https://github.com/facebook/flow/issues/1601"" rel=""nofollow noreferrer"">https://github.com/facebook/flow/issues/1601</a></li>
<li><a href=""https://stackoverflow.com/questions/39044801/flow-type-hoc-with-cloneelement"">Flow Type: HOC with cloneElement</a></li>
</ul>
","701840","","-1","","2017-05-23 11:48:29","2016-10-03 15:59:40","Using Flowtype with react-css-modules decorated components","<javascript><reactjs><flowtype><react-css-modules>","1","0","","",""
"32804901","1","32805005","","2015-09-27 05:26:12","","1","454","<p>I'm using React's undocumented context feature, <a href=""https://blog.jscrambler.com/react-js-communication-between-components-with-contexts/"" rel=""nofollow"">per this article</a>. I noticed there's a caveat, which is that this context feature only works if you explicitly invoke a component:</p>

<pre><code>render() {
  return &lt;div&gt;&lt;SomeComponent /&gt;&lt;/div&gt;
}
</code></pre>

<p>If you clone the item, though, context is not passed down:</p>

<pre><code>render() {
  return &lt;div&gt;{React.cloneElement(this.props.content)}&lt;/div&gt;
}
</code></pre>

<p>Is this a bug? Or is there some way to make this work that I'm not aware of?</p>
","5228806","","","","","2015-09-27 05:50:07","React - How to use cloneElement so it preserves context","<reactjs>","1","0","","",""
"39703913","1","39704292","","2016-09-26 13:14:22","","2","2337","<p>My parent component, basically a form, has a child, an overlay with a loader, which only has to be displayed based on parent's state.</p>

<pre><code>import React from 'react';
import Overlay from './overlay';

export default class RegisterForm extends React.Component {
  constructor {
    this.state = {
      loading: false
    };
  }
  handleSubmit(){
    this.state.loading = true;
    ...
  }

  render(){
    return(
    &lt;form onSubmit={() =&gt; this.handleSubmit()}&gt;
     ...
     &lt;Overlay /&gt;
    &lt;/form&gt;
    );
  }
}
</code></pre>

<p><strong>How can I achieve this?</strong></p>

<p>I tried <code>React.cloneElement(&lt;Overlay /&gt;, {})</code> but I don't know how to re-append this child to the parent and as I understand, it's not the React-way of doing things...</p>

<p>I also tried setting a <code>prop</code> ob <code>Overlay</code> based on <code>state</code> of the parent, like <code>React.cloneElement(&lt;Overlay /&gt;, { visible = this.state.loading })</code> but cannot seem to get it to work...</p>
","813841","","813841","","2016-09-26 15:20:48","2016-09-26 15:20:48","Dynamically render react component based on parent state","<reactjs>","2","0","1","",""
"42122122","1","","","2017-02-08 19:36:33","","0","126","<p>I've been developing an idea but am getting stuck on something unusual (my brain hurts on react-router).</p>

<p>I am trying to dynamically render a list of items using .map from a returned object (of multiple similar objects) and appending them to the <code>render(){return(&lt;div /&gt;)}</code>. </p>

<p>I just dont know another way than call a function then .map the result for this callback.</p>

<p>I think that the way I'm doing this means the rendered items lose context. The react-router <code>&lt;Link /&gt;</code> will function as expected in the normal flow (placed inside the <code>render(){return(&lt;div /&gt;)}</code> ) but not when the item is created from outside of the render. I have posted the error below the code.</p>

<p>I have read Many different ways of getting around this using context and location/history and withRouter. Frankly I'm lost.</p>

<p>I would appreciate if someone could look at my example below and guide me in the right direction.</p>

<p>A few notes:
- main focus appears to be in mystuff
- i have many unnecessary imports i know
- stripped down for clarity, i would get lost otherwise</p>

<p>index</p>

<pre><code>import _ from 'lodash';
import React from 'react';
import { render } from 'react-dom';
import { Router, Route, IndexRoute, browserHistory } from 'react-router';
import { Provider } from 'react-redux';
import { store, history } from './store';

import Main from './Main';
import { routyr } from './Menu';

// remaining paths in Menu.js (routyr) for menu visibility
const router = (
  &lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={Main}&gt;
        {routyr}
      &lt;/Route&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;
)

render (router, document.getElementById('app'));
</code></pre>

<p>Main</p>

<pre><code>import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import * as actionCreators from './actionCreators';

import App from './app';

function mapStateToProps(state){
  return{
    info: state.info,
    myProfile: state.myProfile
  }
}

function mapDispatchToProps(dispatch){
  return { actions: bindActionCreators(actionCreators, dispatch) }
}

const Main = connect(mapStateToProps, mapDispatchToProps)(App);
export default Main;
</code></pre>

<p>routyr</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';
import { Router, Route, IndexRoute, browserHistory } from 'react-router';
import { Provider } from 'react-redux';

import { store, history } from './store';

//pages
import App from './app';
import Landing from './Landing';
import Me from './mystuff';
import ViewStuff from './viewStuff';

//Routes for index.js
export const routyr = (
  &lt;span&gt;
    &lt;IndexRoute component={Landing} /&gt;
    &lt;Route path=""/myStuff"" component={Me} /&gt;
    &lt;Route path=""/viewStuff"" component={ViewStuff} /&gt;
  &lt;/span&gt;
)

//Menu types
//loaded by app.js
export const menuLoggedIn = (
  &lt;div className=""MainMenu""&gt;
    &lt;Link to='/' className=""buttonA green""&gt;Home&lt;/Link&gt;
    &lt;Link to='myStuff' className=""buttonA green""&gt;My Stuff&lt;/Link&gt;
  &lt;/div&gt;
);
export const menuLoggedOut = (
  &lt;div className=""MainMenu""&gt;
    &lt;Link to='/login' className=""buttonA green""&gt;Login&lt;/Link&gt;
  &lt;/div&gt;
);
</code></pre>

<p>app</p>

<pre><code>import React from 'react';
import _ from 'lodash';
import { Link } from 'react-router';
import auth from './auth';
import Landing from './Landing';
import Header from './Header';
import { menuLoggedIn, menuLoggedOut } from './Menu';

export default class App extends React.Component {
  constructor(){
    super();
    this.state={
      auth: auth.loggedIn(),
      menu: null
    };
  }

  componentWillMount(){
    if (this.state.auth==true) {
      this.setState({
        menu: menuLoggedIn
      })
    }else{
      this.setState({
        menu: menuLoggedOut
      });
    }
  }

  render(){
    return (
      &lt;div&gt;
        &lt;Header /&gt;
        {this.state.menu}&lt;br /&gt;
        &lt;div id=""view""&gt;
          {React.cloneElement(this.props.children, this.props)}
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
};
</code></pre>

<p>mystuff</p>

<pre><code>import React, { PropTypes } from 'react';
import { render } from 'react-dom';
import { Link } from 'react-router';
import { withRouter } from 'react-router';
import { Provider } from 'react-redux';

import * from './whacks';

export default class Me extends React.Component{
  constructor(){
    super();
  }
  componentDidMount() {

    function listThem(oio){
      oio.map(function(ducks){
        render(

          &lt;div className=""ListItem""&gt;
            &lt;Link to=""/viewStuff""&gt; _BROKEN_ View Stuff&lt;/Link&gt;
            &lt;div className=""listLabel""&gt;{ducks.type}&lt;/div&gt;
            &lt;h3&gt;{ducks.description.title}&lt;/h3&gt;
            {ducks.description.long}
          &lt;/div&gt;, document.getElementById('fishes').appendChild(document.createElement('div'))

        );
      });
    }

    var some = new Whacks();

    some.thing(more, (close, open) =&gt; {

      if(close){
        console.log(close));
      } else {
        doIt(open);
      }

    });
  }

  render(){
    return(
      &lt;div&gt;
        &lt;Link to=""viewStuff""&gt; _WORKING_ View Stuff&lt;/Link&gt;
        &lt;div id=""fishes""&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p>store</p>

<pre><code>import { createStore, compose } from 'redux';
import { syncHistoryWithStore } from 'react-router-redux';
import { browserHistory } from 'react-router';
import { combineReducers } from 'redux';
import { routerReducer } from 'react-router-redux';

/*-------ROOT REDUCER---------*/
/*-------DEFAULT STATES---------*/
/*-------CREATE STORE---------*/
/*-------INTEGRATE HISTORY---------*/

import me from './reducers/obj';
import myProfile from './reducers/myProfile';

const rootReducer = combineReducers(
  {
    routing: routerReducer,
    me,
    myProfile
  }
);

//TEMP remove harcoded var
const uuidSet = ""fa78d964"";
export const defaultState = {
  uuid: uuidSet,
};

export const store = createStore(rootReducer, defaultState, window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__());
export const history = syncHistoryWithStore(browserHistory, store);
</code></pre>

<p>actionCreators</p>

<pre><code>export function me (obj){
  return {
    type: ""ADD_OBJECTLIST"",
    obj
  }
}

export function myProfile (dump){
  return {
    type: ""MY_DATA"",
    dump
  }
}
</code></pre>

<p>from package.json</p>

<pre><code>""react-redux"": ""^5.0.2"",
""react-router"": ""^3.0.2"",
""react-router-redux"": ""^4.0.7"",
""redux"": ""^3.6.0"",
</code></pre>

<p>error</p>

<blockquote>
  <p>Uncaught Error: s rendered outside of a router context cannot navigate.</p>
</blockquote>

<p>@UG,
I have tried the following in mystuff:</p>

<pre><code>constructor(){
  super();
  this.state={
    oio: {}
  };
}
</code></pre>

<p>and</p>

<pre><code>some.thing(more, (close, open) =&gt; {

      if(close){
        console.log(close));
      } else {
        this.setState({
          oio: open
        });
      }

});
</code></pre>

<p>and </p>

<pre><code>render(){
  let flat = this.state.oio;
  flat.map(function(ducks){
    return (
      &lt;div className=""ListItem""&gt;
        &lt;Link to=""/viewStuff""&gt;View Stuff&lt;/Link&gt;
        &lt;div className=""listLabel""&gt;{ducks.type}&lt;/div&gt;
        &lt;h3&gt;{ducks.description.title}&lt;/h3&gt;
        {ducks.description.long}
      &lt;/div&gt;
    )
  })
}
</code></pre>

<p>and receive</p>

<blockquote>
  <p>Uncaught TypeError: flat.map is not a function
      at Me.render</p>
</blockquote>
","5601989","","5601989","","2017-02-08 22:19:46","2017-02-09 21:26:32","callback render loses router context for child react-router & redux","<javascript><redux><react-router><react-router-redux>","2","0","","",""
"51098355","1","","","2018-06-29 09:18:32","","1","61","<p>I am creating charts using d3 and svg in react native in which i have created an progress bar chart. I would like to use this progress bar chart as speedometer by having a needle shows the current value.
Can anyone tell me how to create a speedometer in react native.</p>

<pre><code>    import React, { PureComponent } from 'react';
import {
  View,
} from 'react-native';
import PropTypes from 'prop-types';
import * as shape from 'd3-shape';
import Path from './animated-path';
import Svg, { G } from 'react-native-svg';

export default class Gauge extends PureComponent {
  state = {
    height: 0,
    width: 0,
  }

  _onLayout(event) {
    const {
      nativeEvent: {
        layout: {
          height,
          width,
        }
      }
    } = event;
    this.setState({height, width});
  }
  render() {
    const {
      style,
      progressColor,
      backgroundColor,
      strokeWidth,
      startAngle,
      endAngle,
      animate,
      animationDuration,
      children,
      cornerRadius,
    } = this.props

    let { progress } = this.props

    const {
      height, width
    } = this.state

    const outerDiameter = Math.min(width, height)

    if (!isFinite(progress) || isNaN(progress)) {
      progress = 0;
    }

    const data = [
      {
        key: 'rest',
        value: 1 - progress,
        color: backgroundColor,
      },
      {
        key: 'progress',
        value: progress,
        color: progressColor,
      }
    ]

    const pieSlices = shape
          .pie()
          .value(d =&gt; d.value)
          .sort((a) =&gt; a.key === 'rest' ? 1 : -1)
          .startAngle(startAngle)
          .endAngle(endAngle)
          (data)

    const arcs = pieSlices.map((slice, index) =&gt; (
      {
        ...data[index],
        ...slice,
        path: shape.arc()
        .outerRadius(outerDiameter / 2)
        .innerRadius((outerDiameter / 2) - strokeWidth)
        .startAngle(index === 0 ? startAngle : slice.startAngle)
        .endAngle(index === 0 ? endAngle : slice.endAngle)
        .cornerRadius(cornerRadius)
        (),
      }
    ))

    const extraProps = {
      width,
      height,
    }

    return (
      &lt;View style={ style } onLayout={event =&gt; this._onLayout(event)}&gt;
        {
          height &gt; 0 &amp;&amp; width &gt; 0 &amp;&amp;
          &lt;Svg style={{height, width}}&gt;
            &lt;G x={width / 2}
              y={height / 2}
              &gt;
              {
                React.Children.map(children, child =&gt; {
                  if (child &amp;&amp; child.props.belowChart) {
                    return React.cloneElement(child, extraProps)
                  }
                  return null
                })
              }
              {
                arcs.map((shape, index) =&gt; {
                  return (
                    &lt;Path
                       key={index}
                       fill={shape.color}
                       d={shape.path}
                       animate={animate}
                       animationDuration={animationDuration}
                    /&gt;
                  )
                })
              }
              {
                React.Children.map(children, child =&gt; {
                  if (child &amp;&amp; !child.props.belowChart) {
                    return React.cloneElement(child, extraProps)
                  }
                  return null
                })
              }
            &lt;/G&gt;
          &lt;/Svg&gt;
        }
      &lt;/View&gt;
    )
  }
}

Gauge.propTypes = {
  progress: PropTypes.number.isRequired,
  style: PropTypes.any,
  progressColor: PropTypes.any,
  backgroundColor: PropTypes.any,
  strokeWidth: PropTypes.number,
  startAngle: PropTypes.number,
  endAngle: PropTypes.number,
  animate: PropTypes.bool,
  cornerRadius: PropTypes.number,
  animationDuration: PropTypes.number,
}

Gauge.defaultProps = {
  progressColor: 'black',
  backgroundColor: '#ECECEC',
  strokeWidth: 5,
  startAngle: 0,
  endAngle: Math.PI * 2,
  cornerRadius: 45,
}
</code></pre>

<p>App.js</p>

<pre><code>&lt;GaugeChartExample /&gt;
</code></pre>

<p>The output which is got is like as follows:</p>

<p><a href=""https://i.stack.imgur.com/6FJ7F.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6FJ7F.png"" alt=""Output""></a></p>
","6737630","","","","","2018-06-29 09:18:32","How to create a speedometer in react native","<react-native><d3.js><svg><charts>","0","1","","",""
"51118575","1","","","2018-06-30 21:20:02","","0","14","<p>i am using this configuration of react</p>

<pre><code>""react"": ""~15.4.0"",
""react-dom"": ""~15.4.0"",
""react-redux"": ""~5.0.4"",
""react-router"": ""~4.1.0"",
""react-router-dom"": ""^4.2.2"",
""react-router-redux"": ""~5.0.0-alpha.6"",
""redux"": ""^4.0.0"",
</code></pre>

<p>And have a router and subrouter that processes requests</p>

<p>the higher order router is this code</p>

<pre><code>const   StupidRouter       =({ children, options }) =&gt; {
                            return    (&lt;div&gt;  {  React.Children.map( ( typeof   children === 'function' ?  { children:[] } :  children ), child =&gt; React.cloneElement(child, {  key: child.props.name,  context: 'registration',  }) )}
                                            &lt;Route path=""/"" render={() =&gt; &lt;Master  options={options }   &gt;  
                                                                            &lt;Switch&gt;
                                                                                {React.Children.map(children, child =&gt;  ( &lt;Route path={'/' + child.props.name  } render={props =&gt;   React.cloneElement(child, { context: 'route',  ...props,  })} key={child.props.name} /&gt;  ))}
                                                                            &lt;/Switch&gt; 
                                                                        &lt;/Master&gt;      
                                                                        } /&gt;
                                    &lt;/div&gt;) 
 }
</code></pre>

<p>The lower order router is like this</p>

<pre><code>&lt;Switch&gt;
 {this.props.list   &amp;&amp; ( &lt;Route exact path={this_.props.match.url                   } render={props =&gt; ...
 {this.props.edit   &amp;&amp; ( &lt;Route exact path={this_.props.match.url + '/:id'          } render={props =&gt; ...
&lt;/Switch&gt;  ) 
</code></pre>

<p>And the calls are made to components that have buttons and other items.(the code below is abbreviated for this post) </p>

<pre><code>return   (&lt;div  &gt;
          &lt;div   style={{ display: 'block' ,paddingTop : 12 }}&gt;
          &lt;IconTexBut text={ this.state.today}  onClick={e=&gt; this.handleClick(e) } /&gt;
        &lt;/div&gt; 
          {   setDay[   props.Day].open  &amp;&amp; ...





         &lt;Popover open={ setDay[  props.Day].open }  coords={props.coords}
           &lt;Tspan type={'div'} width={195} rgb = { [0, 188, 212]}  &gt;  
              { &lt;div style={{ color:'#00bcd4'   }} &gt; {' HR   :  MIN [ OnOff ] '}&lt;/div&gt;}
              { &lt;Tspan &gt;&lt;Tinput value={+this.state.Hour  || 0 } itype ={'number' } onCha
              { &lt;Tspan &gt;&lt;Tinput value={+this.state.Mins  || 0 } itype ={'number' } onCha
              { &lt;IconButton    options={this.props.options}  icon={  this.state.OnOff   
              {&lt;RaisedButton  onClick={e=&gt;{   
                               setDay[  props.Day]. open = f
                              this.handleHM( { Hour :  this.state.Hour, Mins :  this.sta
                              } } primary    label={ 'Yes' }  /&gt; }
              {&lt;RaisedButton  onClick={e =&gt;{ 
                               setDay[  props.Day]. open = f
                              this.setState({open: false }) }}    secondary    label={ '
          &lt;/Tspan&gt;
          &lt;/Popover&gt;  }



        &lt;div style={{ display: 'block' ,paddingTop : 12 }}&gt;
        &lt;table  style={{margin : 0, padding : 0}}&gt;&lt;tbody&gt; 
         &lt;tr&gt;&lt;td&gt; &amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
          &lt;tr&gt;&lt;td&gt;{ this.state.HMCol.length &gt; 0  ? this.getRow(0 ) : &lt;svg   style={{ dis
          &lt;tr&gt;&lt;td&gt;{ this.state.HMCol.length &gt; 1  ? this.getRow(1 ) : &lt;svg   style={{ dis
          &lt;tr&gt;&lt;td&gt;{ this.state.HMCol.length &gt; 2  ? this.getRow(2 ) : &lt;svg   style={{ dis
          &lt;tr&gt;&lt;td&gt;{ this.state.HMCol.length &gt; 3  ? this.getRow(3 ) : &lt;svg   style={{ dis
          &lt;tr&gt;&lt;td&gt;{ this.state.HMCol.length &gt; 4  ? this.getRow(4 ) : &lt;svg   style={{ dis
          &lt;tr&gt;&lt;td&gt;{ this.state.HMCol.length &gt; 5  ? this.getRow(5 ) : &lt;svg   style={{ dis
          &lt;tr&gt;&lt;td&gt;{ this.state.HMCol.length &gt; 6  ? this.getRow(6 ) : &lt;svg   style={{ dis
          &lt;tr&gt;&lt;td&gt;{ this.state.HMCol.length &gt; 7  ? this.getRow(7 ) : &lt;svg   style={{ dis
          &lt;tr&gt;&lt;td&gt;{ this.state.HMCol.length &gt; 8  ? this.getRow(8 ) : &lt;svg   style={{ dis
          &lt;tr&gt;&lt;td&gt;{ this.state.HMCol.length &gt; 9  ? this.getRow(9 ) : &lt;svg   style={{ dis
      &lt;/table&gt;
      &lt;/div&gt;
    &lt;/div&gt;) 
</code></pre>

<p>Within those components i call a locally controlled (within the component) popover that renders fields.  </p>

<p>The problem is that these local components (that are rendered within the popover) are unable to receive onclick events but they can receive  onMouseDown events.</p>

<p>This behavior is so predictably  repeatable in every configuration where either a router calls a sub rout that renders a page( that then does not use the router to render the popovers components ) that I was  certain that it is a bug.( Afterall onMouseDown events are sent but onClick mysteriously disappear??  )</p>

<p>But when I opened a github bug report on it, it was 'declaratively' closed and I was told to take the question here (I am using the word 'declaratively' here as a euphemism for 'summarily' because declaritivey is React-like and summarily implies both rudeness and ignoramus-like behavior :|  ) .</p>

<p>So one of several things are happening.   Either React Router 4.0 has some very serious but known event management problems that are undocumented because they are so egregious that the want to keep it quiet; Or that there are some very arrogant people who are managing their github issues; Or there is some well known requirement to use react router 4.0 for all components ( even if rendered in situ) that is common knowledge; or that I have made some really bone headed mistake that has cost me two weeks of porting time to 4.0.</p>

<p>Incidentally the behavior only started with 4.0.  3.0 works fine.  </p>

<p>I have tried material ui components,  react boot-strap components, and others.  It appears that everyone has given up on this issue and implemented a separate dom instance to manage modal dialogs  (which is tantamount to instantiating a separate html page to solve the problem... which is such a big hack I really cannot imagine that it is the only solution or that react router would be released without some really good examples of how to side step this ahem feature) </p>

<p>Any guidance would be appreciated</p>
","7190532","","","","","2018-06-30 21:20:02","react 4.0 sub components click events not firing","<reactjs><react-router><react-redux>","0","0","","",""
"50726583","1","50727764","","2018-06-06 17:48:37","","2","53","<p>I have a component that will set a <code>required</code> property to all its <code>children</code>, but Flow doesn't seem to understand it.</p>

<pre><code>// @flow
import * as React from 'react';

type BarProps = { required: 'defined' };
const Bar = ({ required }: BarProps) =&gt; &lt;span /&gt;

type FooProps = { children: Array&lt;React.Element&lt;any&gt;&gt; };
const Foo = ({ children }: FooProps) =&gt;
    React.Children.map(
      children,
      child =&gt; React.cloneElement(child, { required: 'defined' })
    );

&lt;Foo children={[&lt;Bar /&gt;]} /&gt;
</code></pre>

<p>Here's the <a href=""https://flow.org/try/#0PTAEAEDMBsHsHcBQBLAtgB1gJwC6gFSgCGAzqAEoCmRAxnpFrKqAORbV0sDciiOAnukqgAQkSwAFRujIBeUAG9Q7AI4BXZOwAmALlZbKkZADtKWlqAC+PGrGMk8YrKHkAKJao3arep1NgyAJQuAHygADwk6ETGoMAhvAJCoABisLD+Mi6KoDQAFsjQWuzGegCCWFhE-OFUtDgAdACi0JSolMY44TH8IWHWiLb2eGmw2e65BUUlPqnpmSTBsgkAkHV0DQDCU8UdDahE6K6IoKdn+YW7xgA0J2enF0WhFByNNHCmLW0dOK6PWtccp5NGY9CwDEZTOYrIE7qdAjxEOFRpNLiVZAoANrhJxxEIAXUseMQQA"" rel=""nofollow noreferrer"">Flow repro</a>, the error it returns is:</p>

<pre><code>14: &lt;Foo children={[&lt;Bar /&gt;]} /&gt;
                     ^ Cannot create `Bar` element because property `required` is missing in props [1] but exists in `BarProps` [2].
References:
14: &lt;Foo children={[&lt;Bar /&gt;]} /&gt;
                    ^ [1]
5: const Bar = ({ required }: BarProps) =&gt; &lt;span /&gt;
                              ^ [2]
</code></pre>

<p>I know the design isn't the best and I should have used a render-prop probably, but this is some old code I'm trying to fix and I can't change the API that easily.</p>

<p>How can I make Flow understand this code?</p>
","2059996","","","","","2018-06-06 19:01:34","How to make Flow understand a component will receive required props by cloneElement?","<reactjs><flowtype>","1","1","","",""