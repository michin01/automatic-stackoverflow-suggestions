Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate
"50185157","1","50185682","","2018-05-05 02:33:33","","3","149","<p>I am working with react 16.3 where <code>componentWillUpdate</code> is deprecated (strict mode). We have a react wrapper around <code>Highcharts</code> and used to update the <code>highchart</code> in <code>componentWillUpdate</code> that runs just before render. </p>

<p>But now in react 16.3 when the input <code>highchartoptions</code> prop updates, there seems to be no way to call <code>Highchart.update</code> before <code>render()</code> is called. Its suggested to use <code>componentDidUpdate</code> but its called only after <code>render()</code> and it doesn't seem to work at all.Any suggestions will help.</p>

<p>Code snippet here:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>export class HighchartReactWrapper extends React.Component {
  constructor(props) {
    super(props);

    // We maintain the user provided options being used by highchart as state
    // inorder to check if chart update is needed.
    this.state = { highChartOptions: this.props.options };
    this.onChartRendered = this.onChartRendered.bind(this);
  }

  componentDidMount() {
    // Create chart
    this.chart = new Highcharts.Chart(this.container, this.state.highChartOptions, this.onChartRendered);
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    if (nextProps.options !== prevState.options) {
      return { highChartOptions: nextProps.options };
    }
  }

  componentDidUpdate() {
    this.chart.update(this.state.highChartOptions, false, true); &lt;---- Doesn't work
  }

  onChartRendered() {
    // Callbacks..
    if (this.props.onChartRenderedCallback !== undefined) {
      this.props.onChartRenderedCallback();
    }
  }

  componentWillUnmount() {
    // Destroy chart
    this.chart.destroy()
  }

  render() {
    return (
      &lt;div className=""react-highchart-wrapper""&gt;
        &lt;div id={container =&gt; this.container = container} /&gt;
      &lt;/div&gt;
    );
  }
}

HighchartReactWrapper.propTypes = {
  /**
   * Chart options to be used in Highcharts library.
   */
  options: PropTypes.object.isRequired,
  onChartRenderedCallback: PropTypes.func
};

HighchartReactWrapper.defaultProps = {
  options: undefined,
  onChartRenderedCallback: undefined
};</code></pre>
</div>
</div>
</p>
","9743947","","6622817","","2018-05-05 02:38:16","2018-05-05 04:23:13","How to update Highchart from inside react a component?","<reactjs><highcharts>","1","3","1","",""
"50219259","1","50652455","","2018-05-07 17:08:23","","3","84","<p>I have this:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import styled from 'react-emotion';

const Box = styled('div')`
  display: flex;
  flex-direction: ${p =&gt; p.direction};
`;

Box.defaultProps = {
  direction: 'column'
};</code></pre>
</div>
</div>
</p>

<p>This works just fine when I use the Box component. The default props are there as expected. </p>

<p>However, when I reuse Box with styled, the default props do not get passed down:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import styled from 'react-emotion';
import Box from './Box';

export const UniqResponsiveBox = styled(Box)`
  // some media queries and other new styles
`;</code></pre>
</div>
</div>
</p>

<p>When I use UniqResponsiveBox, it does not have the defaultProps I declared for Box. The following workaround gets me thru, but seems redundant and I believe Im missing something that accomplishes this only using emotion.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import styled from 'react-emotion';

const BoxContainer = styled('div')`
  display: flex;
  flex-direction: ${p =&gt; p.direction};
`;

function Box(props) {
  return &lt;BoxContainer {...props}/&gt;
}

Box.defaultProps = {
  direction: 'column'
}</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import styled from 'react-emotion';
import Box from './Box';

export const UniqResponsiveBox = styled(Box)`
  // some responsive queries and other uniq styles
`;

// In this scenario, the default props are there because I passed them explicitly. Helppp!</code></pre>
</div>
</div>
</p>
","5420103","","","","","2018-06-02 00:27:20","React-Emotion: pass down defaultProps to in component reuse","<javascript><css><reactjs><styled-components><emotion>","1","0","","",""
"50213278","1","","","2018-05-07 11:35:20","","2","55","<p>I looked at the example project of <code>gl-react</code> for my app and implemented this code which works fine.</p>

<pre><code>import React, { Component } from ""react"";
import { Shaders, Node, GLSL } from ""gl-react"";
import { Surface } from ""gl-react-native"";

const shaders = Shaders.create({
  Saturate: {
    frag: GLSL`
precision highp float;
varying vec2 uv;
uniform sampler2D t;
uniform float contrast, saturation, brightness;
const vec3 L = vec3(0.2125, 0.7154, 0.0721);
void main() {
  vec4 c = texture2D(t, uv);
    vec3 brt = c.rgb * brightness;
    gl_FragColor = vec4(mix(
    vec3(0.5),
    mix(vec3(dot(brt, L)), brt, saturation),
    contrast), c.a);
}
`
  }
});

export const Saturate = ({ contrast, saturation, brightness, children }) =&gt;
  &lt;Node
    shader={shaders.Saturate}
    uniforms={{ contrast, saturation, brightness, t: children }}
  /&gt;;

export default class Example extends Component {
  render() {
    return (
    &lt;Surface width={480} height={300}&gt;
      &lt;Saturate {...this.props}&gt;
        {{image: ""https://i.imgur.com/uTP9Xfr.jpg""}}
        {/* Add overlay stickers or image */}
      &lt;/Saturate&gt;
    &lt;/Surface&gt;
    );
  }
  static defaultProps = {
    contrast: 1,
    saturation: 1,
    brightness: 1,
  };
}
</code></pre>

<p>I want to implement this example along with some stickers in the image. </p>

<p>How can I add overlay Image like sticker in this ?  Or even overlay text .
Any idea about it how to make this happen ??</p>
","8760132","","","","","2018-05-10 10:16:04","gl-react and gl-react-native multiple image like stickers","<reactjs><react-native>","1","0","1","",""
"43554276","1","","","2017-04-22 01:35:06","","0","163","<p>I'm unable to determine how to specify a non-optional component property that is provided via defaultProps if not specified during construction from typescript.</p>

<p>My source:</p>

<pre><code>'use strict';
import * as React from 'react';
import {DOM as dom} from 'react';
import * as ReactDOM from 'react-dom';

interface PropsType {
    requiredString: string,
    optionalString?: string,
};

class MyComponent extends React.Component&lt;PropsType, {}&gt; {
    static defaultProps = {
        requiredString: 'defaultRequiredString',
    };

    render() {
        return dom.div(
            {},
            this.props.requiredString,
            this.props.optionalString || 'defaultOptionalString',
        );
    }
}

ReactDOM.render(React.createElement(MyComponent, {}));
</code></pre>

<p>This gives me:</p>

<pre><code>$ tsc base.ts
base.ts(25,50): error TS2345: Argument of type '{}' is not assignable 
to parameter of type 'Attributes &amp; PropsType'.
  Type '{}' is not assignable to type 'PropsType'.
    Property 'requiredString' is missing in type '{}'.
</code></pre>

<p>Reading through the React docs (<a href=""https://facebook.github.io/react/docs/typechecking-with-proptypes.html"" rel=""nofollow noreferrer"">https://facebook.github.io/react/docs/typechecking-with-proptypes.html</a>), I see the following:</p>

<blockquote>
  <p>The propTypes typechecking happens after defaultProps are resolved, so typechecking will also apply to the defaultProps.</p>
</blockquote>

<p>Which leads me to believe this form should be allowed (and indeed, the large codebase I'm trying to port to typescript has this assumption baked in).  I'd be happy to use a <code>Partial&lt;&gt;</code> type for <code>defaultProps</code> if that in any way helps.</p>

<p>How do get this working properly in typescript?</p>
","7904077","","7904077","","2017-04-24 16:43:23","2017-04-24 16:43:23","Required properties in React component written in Typescript fulfilled by defaultProps","<reactjs><typescript>","0","8","","",""
"34991638","1","","","2016-01-25 11:36:05","","0","978","<p>Im using react and the google-map-react component. im trying to add a skin to my google maps. any idea where i do this? Im trying to use a snazzymap skin, they provide an array of styles.</p>

<p><a href=""https://snazzymaps.com/style/25/blue-water"" rel=""nofollow"">https://snazzymaps.com/style/25/blue-water</a></p>

<p>snazzy maps provides the </p>

<pre><code>import React from 'react';
import ReactDom from 'react-dom';
//import shouldPureComponentUpdate from 'react-pure-render/function';

import GoogleMap from 'google-map-react';
var divStyle = {
  paddingTop: 20,
  paddingLeft: 20,
  paddingRight: 20,
  width:1024,
  height:768
};
const K_WIDTH = 40;
const K_HEIGHT = 40;

const greatPlaceStyle = {
  // initially any map object has left top corner at lat lng coordinates
  // it's on you to set object origin to 0,0 coordinates
  position: 'absolute',
  width: K_WIDTH,
  height: K_HEIGHT,
  left: -K_WIDTH / 2,
  top: -K_HEIGHT / 2,

  border: '5px solid #f44336',
  borderRadius: K_HEIGHT,
  backgroundColor: 'white',
  textAlign: 'center',
  color: '#3f51b5',
  fontSize: 16,
  fontWeight: 'bold',
  padding: 4
};

class MyGreatPlace extends React.Component {

  static propTypes = {
    text: React.PropTypes.string
  };

  static defaultProps = {};

  //shouldComponentUpdate = shouldPureComponentUpdate;

  constructor(props) {
    super(props);
  }

  render() {
    return (
       &lt;div style={greatPlaceStyle}&gt;
          {this.props.text}
       &lt;/div&gt;
    );
  }
}
class SimpleMapPage extends React.Component {

  static defaultProps = {
    defaultCenter: {lat: 59.938043, lng: 30.337157},
    zoom: 12,
    greatPlaceCoords: {lat: 59.724465, lng: 30.080121}
  };

  //shouldComponentUpdate = shouldPureComponentUpdate;

  constructor(props) {
    super(props);
  }

  componentWillReceiveProps(nextProps) {
    // console.log(""test"")
}

  render() {
    return (
       &lt;div style={divStyle}&gt;
       &lt;GoogleMap
        bootstrapURLKeys={{
          key: '312312j3kl12j321random'
        }}
        center={this.props.center}
        zoom={this.props.zoom}
        defaultCenter={this.props.defaultCenter}
        defaultZoom={this.props.zoom}
        &gt;
        &lt;MyGreatPlace lat={this.props.center.lat} lng={this.props.center.lng} text={'Site'} /* Kreyser Avrora */ /&gt;

      &lt;/GoogleMap&gt;
      &lt;/div&gt;
    );
  }
}

export default SimpleMapPage
</code></pre>
","4516676","","","","","2016-02-23 17:26:35","google-map-react custom skins","<javascript><google-maps><reactjs>","1","0","1","",""
"43553359","1","","","2017-04-21 23:17:50","","0","289","<p>I'm currently writing my first react application and my ESLINT is telling me that I shouldn't be using .bind() on JSX props. I understand that this is because bind is creating new functions and therefore negatively affecting performance. However i am not sure how to refactor this to eliminate this error.</p>

<p>How can i pass the element I have clicked to the function without using a bind?</p>

<p>ForecastPage.jsx:</p>

<pre><code>import React from 'react'
import api from '../shared/api'
import ForecastBox from './ForecastBox'
import DropdownSelector from './DropdownSelector'

const regions = [
  {
    name: 'Santa Cruz',
    id: '2958',
    spots:
    [
      { name: 'Steamer Lane', id: '4188' },
      { name: 'Four Mile', id: '5023' },
      { name: 'Waddell Creek', id: '5021' },
      { name: 'Mitchell\'s Cove', id: '5028' },
      { name: '26th Ave', id: '5030' },
    ],
  },
  {
    name: 'North Orange Country',
    id: '2143',
    spots:
    [
      { name: 'Newport', id: '1241' },
      { name: 'HB', id: '3421' },
    ],
  },
]

class ForecastPage extends React.Component {

  constructor(props) {
    super(props)
    this.state = {
      selectedRegion: null,
      selectedSpot: null,
      forecast: null,
    }

    this.regionSpotList = regions
    this.updateSpot = this.updateSpot.bind(this)
    this.updateRegion = this.updateRegion.bind(this)
  }

  updateRegion(region) {
    this.setState({
      selectedRegion: region,
      forecast: null,
    })

    api.fetchSpot(region.id)
    .then((forecast) =&gt; {
      this.setState({
        forecast,
      })
    })
  }

  updateSpot(spot) {
    this.setState({
      selectedSpot: spot,
      forecast: null,
    })

    api.fetchSpot(spot.id)
    .then((forecast) =&gt; {
      this.setState({
        forecast,
      })
    })
  }

  render() {
    return (
      &lt;div&gt;
        &lt;div className=""container-fluid row region-spot-select""&gt;
          &lt;DropdownSelector
            options={this.regionSpotList}
            onSelect={this.updateRegion}
            title={this.state.selectedRegion == null ? 'Select Your Region' : this.state.selectedRegion.name}
            keyName={'region-selector'}
            id={'region-selector-dropdown'}
          /&gt;
          {this.state.selectedRegion != null &amp;&amp;
            &lt;DropdownSelector
              options={this.state.selectedRegion.spots}
              onSelect={this.updateSpot}
              title={this.state.selectedSpot == null ||
              !this.state.selectedRegion.spots.includes(this.state.selectedSpot) ?
              'Select A Spot' :
              this.state.selectedSpot.name}
              keyName={'spot-selector'}
              id={'spot-selector-dropdown'}
            /&gt;
          }
        &lt;/div&gt;
        &lt;div&gt;
          {!this.state.forecast ?
            &lt;div&gt;
              Select A Region
            &lt;/div&gt;
          : &lt;ForecastBox forecast={this.state.forecast} /&gt; }
        &lt;/div&gt;
      &lt;/div&gt;
    )
  }
}

export default ForecastPage
</code></pre>

<p>DropdownSelector.jsx</p>

<pre><code>// @flow

import React from 'react'
import PropTypes from 'prop-types'
import { DropdownButton, MenuItem } from 'react-bootstrap'

type Props = {
  options: Object,
  onSelect: Function,
  title: string,
  keyName: string,
  id: string,
}

const DropdownSelector = ({ title, options, keyName, id, onSelect }: Props) =&gt;
  &lt;div className=""content""&gt;
    &lt;div className=""btn-group""&gt;
      &lt;DropdownButton
        bsStyle={'primary'}
        title={title}
        key={keyName}
        id={id}
      &gt;
        {options.map(element =&gt;
          &lt;MenuItem
            key={element.name}
            eventKey={element.name}
            // eslint-disable-next-line
            onClick={onSelect.bind(null, element)}
          &gt;
            {element.name}
          &lt;/MenuItem&gt;,
          )
        }
      &lt;/DropdownButton&gt;
    &lt;/div&gt;
  &lt;/div&gt;


DropdownSelector.defaultProps = {
  id: null,
}

DropdownSelector.propTypes = {
  options: PropTypes.instanceOf(Object).isRequired,
  title: PropTypes.string.isRequired,
  onSelect: PropTypes.func.isRequired,
  keyName: PropTypes.string.isRequired,
  id: PropTypes.string,
}

export default DropdownSelector
</code></pre>
","3308866","","901387","","2017-04-24 17:47:48","2017-04-24 17:47:48","Passing down onClick Functions: [ESLINT] JSX props should not use .bind() (react/jsx-no-bind)","<javascript><reactjs><eslint><flowtype>","2","0","","",""
"43659597","1","43669906","","2017-04-27 13:39:58","","2","2516","<p>I have followed this great <a href=""https://medium.com/@parkerdan/react-navigation-with-complete-redux-state-management-tab-bar-and-multiple-navigators-ed30a69d9a4d"" rel=""nofollow noreferrer"">tutorial</a> which is Tab Bar with three tabs using redux. Everything works great. Now I am trying to nest this Tab Bar inside Stack Navigator but I have the following error:</p>

<p><a href=""https://i.stack.imgur.com/Nwlwc.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Nwlwc.png"" alt=""enter image description here""></a></p>

<p>I am new to Redux and really cannot find where is the problem. Here is my code:</p>

<p>StackNav.js</p>

<pre><code>import React from 'react';
import { connect } from 'react-redux';
import { addNavigationHelpers } from 'react-navigation';

import { RootNav } from './../navigationConfiguration';

const mapStateToProps = (state) =&gt; {
    return { navigationState: state.nav };
};

class StackNav extends React.Component {
    render() {
        const { dispatch, navigationState } = this.props;
        return (
            &lt;RootNav
                navigation={
                    addNavigationHelpers({
                        dispatch,
                        state: navigationState,
                    })
                }
            /&gt;
        );
    }
}

export default connect(mapStateToProps)(StackNav);
</code></pre>

<p>StackNav's navigationConfiguration.js</p>

<pre><code>import { StackNavigator } from 'react-navigation';
import TabBarNavigation from './../tabBar/views/TabBarNavigation';
import Welcome from './../../Screens/Register/Welcome.js';

const routeConfiguration = {
    Welcome: { screen: Welcome },
    Home: { screen: TabBarNavigation },
};

const stackNavigatorConfiguration = {
    initialRouteName: 'Welcome',
    headerMode: 'screen',
    navigationOptions: {
        header: { visible: false }
    }
};

export const RootNav = StackNavigator(routeConfiguration, stackNavigatorConfiguration);
</code></pre>

<p>Reducers</p>

<pre><code>import { combineReducers } from 'redux';

// Navigation
import { AppNavigator } from './../stackNav/navigationConfiguration';
import { NavigatorTabOne } from './../tabOne/navigationConfiguration';
import { NavigatorTabTwo } from './../tabTwo/navigationConfiguration';
import { NavigatorTabThree } from './../tabThree/navigationConfiguration';

export default combineReducers({
    nav: (state, action) =&gt; AppNavigator.router.getStateForAction(action, state),
    tabOne: (state, action) =&gt; NavigatorTabOne.router.getStateForAction(action, state),
    tabTwo: (state, action) =&gt; NavigatorTabTwo.router.getStateForAction(action, state),
    tabThree: (state, action) =&gt; NavigatorTabThree.router.getStateForAction(action, state),
});
</code></pre>

<p>I also tried with this reducer instead nav: above</p>

<pre><code>import { AppNavigator } from './../stackNav/navigationConfiguration';

const initialState = AppNavigator.router.getStateForAction(AppNavigator.router.getActionForPathAndParams('Welcome'));

export const navReducer = (state = initialState, action) =&gt; {
  const nextState = AppNavigator.router.getStateForAction(action, state);

  return nextState || state;
};
</code></pre>

<p>Start point of the app:</p>

<pre><code>import React from 'react';
import {
    AppRegistry,
    Text
} from 'react-native';

import { Provider } from 'react-redux';

import StackNav from './../App/stackNav/views/StackNav';
import store from './store';

Text.defaultProps.allowFontScaling = false;

class App extends React.Component {
    render() {
        return (
            &lt;Provider store={store}&gt;
                &lt;StackNav /&gt;
            &lt;/Provider&gt;
        );
    }
}

AppRegistry.registerComponent('MyApp', () =&gt; App);
</code></pre>

<p>I will appreciate any help. Thank you in advanced!</p>
","7473544","","7473544","","2017-04-27 13:57:17","2017-04-28 00:11:36","Nested Tab bar inside Stack Navigator using react navigation and redux","<react-native><redux><react-redux><react-navigation>","2","0","1","",""
"44569424","1","","","2017-06-15 13:56:38","","0","84","<p>I'm trying to get <code>componentWillLeave</code> to get called and I'm having no luck.  <code>componentWillAppear</code> gets called, but I'm unable to get the former to call. Most responses I've seen call for making sure the callbacks are being called, which I am doing. I'm also using React router if that makes a difference. Any help would be greatly appreciated.</p>

<pre><code>import React, { Component } from 'react';
import { TweenMax } from 'gsap';
import PropTypes from 'prop-types';

import { Animated } from '../../components/common/Animated';
import NavButton from '../../components/navButton/NavButton';

import './Team.scss';

class Team extends Component {

  componentDidMount() {
    this.el = this.refs.container;
  }

  componentWillAppear(callback) {
    TweenMax.set(this.el, { x: '100%' });
    TweenMax.to(this.el, 1, { x: '0%' });
    callback();
  }

  componentWillLeave(callback) {
    TweenMax.to(this.el, 1, { x: '-100%', onComplete: callback });
  }

  render() {
    const { match } = this.props;
    return (
      &lt;div ref=""container"" className=""teamContainer""&gt;
        &lt;NavButton
          title={'To Interactive'}
          route={`/${match.params.monster}/interactive`}
        /&gt;
      &lt;/div&gt;
    );
  }
}

Team.propTypes = {
  match: PropTypes.shape({
    pathname: PropTypes.shape({
      monster: PropTypes.number.isRequired,
    }),
  }),
};

Team.defaultProps = {
  match: {
    pathname: {
      monster: -1,
    },
  },
};

export default Animated(Team);
</code></pre>
","628872","","","","","2017-09-27 17:33:39","react-transition-group lifecycle method componentWillLeave not being called","<reactjs>","1","0","","",""
"43726814","1","43766651","","2017-05-01 21:30:32","","3","262","<p>I'm getting a warning on the following line on my react component</p>

<pre><code>handleToggle: Function;
</code></pre>

<p>I'm using <a href=""https://github.com/yannickcr/eslint-plugin-react"" rel=""nofollow noreferrer"">eslint-plugin-react</a> and <a href=""https://flow.org/"" rel=""nofollow noreferrer"">Flow</a> and I'm getting a warning ""handleToggle should be placed after constructor"". This is related to rule react/sort-comp. I tried with the following on my .eslintrc.json</p>

<pre><code> ""react/sort-comp"": [1, {
  ""order"": [
    ""static-methods"",
    ""lifecycle"",
    ""everything-else"",
    ""render""
  ],
  ""groups"": {
    ""lifecycle"": [
      ""displayName"",
      ""propTypes"",
      ""contextTypes"",
      ""childContextTypes"",
      ""/^.*: Function$/"",
      ""mixins"",
      ""statics"",
      ""defaultProps"",
      ""state"",
      ""constructor"",
      ""getDefaultProps"",
      ""getInitialState"",
      ""getChildContext"",
      ""componentWillMount"",
      ""componentDidMount"",
      ""componentWillReceiveProps"",
      ""shouldComponentUpdate"",
      ""componentWillUpdate"",
      ""componentDidUpdate"",
      ""componentWillUnmount""
    ]
  }
}]
</code></pre>

<p>But I'm unable to fix the warning. I want the Function Types before constructor the same as the other Type Definition. How can I achieve this?</p>
","5623087","","4076315","","2017-05-03 02:09:47","2017-05-03 17:44:15","How to fix warning caused by Flow Function Types using eslint-plugin-react?","<reactjs><eslint><flowtype>","1","1","","",""
"43863271","1","44692636","","2017-05-09 07:04:25","","0","1852","<p>I have 2 projects: <strong>Project1</strong> and <strong>Project2</strong>.</p>

<p><strong>Project1</strong> uses <strong>react-bootstrap</strong>. <strong>Project1</strong> uses all the components of react-bootstrap and create a wrapper over react-bootstrap components(Don't ask why, it is a requirement). <strong>Project2</strong> is supposed to use <strong>Project1</strong> (when exported) as a wrapper library for react-bootstrap.</p>

<p><strong>Project1</strong> --></p>

<p><em>index.js:</em></p>

<pre><code>import { Bootstrap } from 'bootstrap/dist/css/bootstrap.css';
...
import Glyphicon from './src/components/Glyphicon';
...
export default {
...
Glyphicon,
...
};
</code></pre>

<p><em>src/components/Glyphicon.jsx:</em></p>

<pre><code>import React, { PropTypes } from 'react';
import { RBGlyphicon } from 'react-bootstrap';

const Glyphicon = props =&gt; (
  &lt;RBGlyphicon
    id={props.id}
    bsClass={props.clClass}
    glyph={props.glyph}
  /&gt;
);

Glyphicon.defaultProps = {
  id: undefined,
  clClass: 'glyphicon',
  glyph: undefined,
};

Glyphicon.propTypes = {
  id: PropTypes.string,
  clClass: PropTypes.string,
  glyph: PropTypes.string.isRequired,
};

export default Glyphicon;
</code></pre>

<p><em>webpack.config.js:</em></p>

<pre><code>const webpack = require('webpack');
const path = require('path');

    module.exports = (env = {}) =&gt; {
      const isProduction = env.production === true;
      return {
        entry: './index.js',
        output: {
          path: path.resolve(__dirname, 'dist'),
          filename: 'Project1.js',
          libraryTarget: 'umd',
          library: 'Project1',
        },
        module: {
          rules: [
            {
              test: /.(js|jsx)?$/,
              loader: 'babel-loader',
              exclude: /node_modules/,
            },
            {
              test: /\.css$/,
              loader: 'style-loader!css-loader',
            },
            {
              test: /\.(woff|woff2)(\?v=\d+\.\d+\.\d+)?$/,
              loader: 'url-loader?limit=10000&amp;mimetype=application/font-woff',
            },
            {
              test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/,
              loader: 'url-loader?limit=10000&amp;mimetype=application/octet-stream',
            },
            {
              test: /\.eot(\?v=\d+\.\d+\.\d+)?$/,
              loader: 'file-loader',
            },
            {
              test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
              loader: 'url-loader?limit=10000&amp;mimetype=image/svg+xml',
            },
          ],
        },
        resolve: {
          extensions: ['.js', '.jsx'],
        },
        plugins: [
          new webpack.DefinePlugin({
            'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
          }),
          new webpack.optimize.UglifyJsPlugin(),
        ],
      };
    };
</code></pre>

<blockquote>
  <p>I export this <strong>Project1</strong> as a bundle called Project1 using <strong>webpack</strong> and copy it in <strong>Project2</strong> in <em>src</em> folder. I don't copy the font files generated in this build</p>
</blockquote>

<p>Now the problem starts with <a href=""https://react-bootstrap.github.io/components.html#glyphicons"" rel=""nofollow noreferrer"">Glyphicons</a>.</p>

<p><strong>Project2</strong>--></p>

<p><em>src/App.jsx:</em></p>

<pre><code>import React, { Component } from 'react';
import Project1 from './Project1';
...
export default class App extends Component {
  render() {
    return (
      &lt;div&gt;
...
&lt;Project1.Glyphicon glyph=""camera"" /&gt;Camera
...
&lt;/div&gt;
);
}
}
export default App;
</code></pre>

<p><em>index.js:</em></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import App from './src/App';

ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));
</code></pre>

<p><em>index.html:</em></p>

<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=""utf-8""&gt;
    &lt;title&gt;Demo&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=""root""&gt;
    &lt;/div&gt;
    &lt;script src='/bundle.js'&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>I use <em>webpack-dev-server</em> to build <strong>Project2</strong> and run in the browser. When I use <em>Glyphicon.jsx</em> in <strong>Project2</strong>, the icons don't show up in browser. Here is the errors which show up in Chrome Browser console:</p>

<p><a href=""https://i.stack.imgur.com/PGlAn.png"" rel=""nofollow noreferrer"">Chrome Browser Debug Console errors</a></p>

<p>Now I am aware that the problem is related to fonts.</p>

<blockquote>
  <p>Even if I copy these generated font files and paste in root of <strong>Project2</strong>, I still get same errors.</p>
</blockquote>

<p>What should I do to export these font files from <strong>Project1</strong> so that they can be used in <strong>Project2</strong>?</p>
","5159993","","5159993","","2017-05-09 07:15:10","2017-06-22 07:17:42","How to use Glyphicons when exporting react-bootstap","<fonts><webpack><webpack-dev-server><glyphicons><react-bootstrap>","2","0","","",""
"43474815","1","","","2017-04-18 14:20:42","","1","113","<p>I have a react-redux application, in which i am trying to run test cases for a react component something like below: </p>

<pre><code>class Login extends Component {

  componentWillMount() {
    this.props.checkUserAuth();
  }

  componentDidMount() {
    this.props.getEnvConfig();
  }

  componentDidUpdate() {
    if (!this.props.isAuthenticating &amp;&amp; this.props.isAuthenticated) {
      hashHistory.push('/dashboard');
  }
}

getAbc() {
  return this.props.abc;
}

anotherLogin() {
  return () =&gt; {
    const anotherURL = `${this.props.envConfig.AuthUrl}?response_type=code&amp;client_id=${this.props.envConfig.ClientId}&amp;redirect_uri=${this.props.envConfig.CallbackUri}&amp;state=8.0`;
    /* global window */
    window.location.assign(anotherURL);
  };
}

  myLogin() {
    return () =&gt; {
      const loginUrl = `${this.props.envConfig.AuthUrl}?

     scope=urlScope&amp;client_id=${this.props.envConfig.ClientId}&amp;redirect_uri
        =${this.props.envConfig.RedirectUri}&amp;response_type=token`;
     /* global window */
     window.location.assign(loginUrl);
   };
 }

 render() {
   if (this.props.isAuthenticating &amp;&amp; !this.props.isAuthenticated) {
     return (&lt;div&gt;loading&lt;/div&gt;); // needs to implement and include loading 
     component
   } else if (!this.props.isAuthenticating &amp;&amp; !this.props.isAuthenticated) {
     return (
      &lt;Grid fluid=""true""&gt;
      &lt;Row&gt;
        &lt;Col md={6} bsClass=""xyz""&gt;
          &lt;div className=""left-login-container""&gt;
            &lt;LoginLeft
              logo={logo}
              box={box}
              abc={this.abc()}
            /&gt;
          &lt;/div&gt;
        &lt;/Col&gt;
        &lt;Col md={6} bsClass=""xyz""&gt;
          &lt;div className=""right-login-container""&gt;
            &lt;LoginRight
              myLogin={this.myLogin()}
              anotherLogin={this.anotherLogin()}
            /&gt;
           &lt;/div&gt;
         &lt;/Col&gt;
       &lt;/Row&gt;
     &lt;/Grid&gt;
    );
   }
   return null;
  }
 }

  Login.defaultProps = {
    abc: '0',
    getEnvConfig: () =&gt; {},
    envConfig: {
    sfdcAuthUrl: '',
    sfdcCallbackUri: '',
    sfdcClientId: '',
  },
  isAuthenticating: true,
  isAuthenticated: false,
  checkUserAuth: () =&gt; {},
 };

 Login.propTypes = {
    abc: PropTypes.string.isRequired,
    getEnvConfig: PropTypes.func.isRequired,
    envConfig: PropTypes.shape({
       AuthUrl: PropTypes.string.isRequired,
       CallbackUri: PropTypes.string.isRequired,
       ClientId: PropTypes.string.isRequired,
    }),
    isAuthenticating: PropTypes.bool.isRequired,
    isAuthenticated: PropTypes.bool.isRequired,
    checkUserAuth: PropTypes.func.isRequired,
  };

  function mapDispatchToProps(dispatch) {
     return {
       myLogin: (data) =&gt; {
         dispatch(myLogin(data));
       },
       getEnvConfig: () =&gt; {
         dispatch(getEnvConfig());
       },
       checkUserAuth: () =&gt; {
         dispatch(getUserInfo());
       },
     };
    }

    function mapStateToProps(state, ownProps) {
        return {
          abc: state.Login.Summary.Report,
          envConfig: state.EnvConfig.envConfig,
          isAuthenticating: state.Auth.isAuthenticating,
          isAuthenticated: state.Auth.isAuthenticated,
        };
     }

    export default connect(mapStateToProps, mapDispatchToProps)(Login);
</code></pre>

<p>I am going somewhere wrong in mocking the store and creating the shallow for his login component before even writing a test case i am getting the error ""Uncaught TypeError: <strong>WEBPACK_IMPORTED_MODULE_0__compose</strong>.a.apply(...) is not a function"" Not sure abt the reason behind it. Here is the spec file content:</p>

<pre><code>import React from 'react';
import { createStore, applyMiddleware } from 'redux';
import { shallow, mount } from 'enzyme';
import configureStore from 'redux-mock-store';
import LoginReducer from '../../../reducers/rootReducers';
import thunk from 'redux-thunk'
import Login from './LoginPage';

const mockStore = configureStore([LoginReducer]);
const initialState = {
  SummaryStats: {
    Reports: '0',
  },
  isAuthenticated: false,
  isAuthenticating: true,
  userInfo: {
    firstName: 'Ruchir',
  },
  envConfig: {},
};
const store = mockStore(initialState);
const dummyData = {
  abc: '0',
  getEnvConfig: () =&gt; {},
  envConfig: {
    AuthUrl: '',
    CallbackUri: '',
    ClientId: '',
  },
};

const LoginWrapper = shallow(&lt;Login 
    store={store}
    {...dummyData}
  /&gt;);

describe('&lt;Login /&gt;', () =&gt; {    
  it('check componentDidMount method', () =&gt; {
    LoginWrapper.componentDidMount();
    expect(LoginWrapper.props().getEnvConfig).toHaveBeenCalled();
  });
});
</code></pre>
","617469","","617469","","2017-04-19 07:08:12","2017-04-19 07:08:12","While running react component test in a react-redux app, ""Uncaught TypeError: __WEBPACK_IMPORTED_MODULE_0__compose__.a.apply(...) is not a function""","<unit-testing><reactjs><web-applications><react-redux><enzyme>","0","4","","",""
"51214269","1","","","2018-07-06 16:17:03","","0","19","<p>I am trying to view an InfoWindow everytime the maps is clicked, it will show an input field and a button to add the named location to list. For now, I am just trying to get the text out of the form, the problem that I am having is how to access the form when the button is clicked???!</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import ReactDOM from 'react-dom';
import PopUpForm from './PopUpForm';
import ReactDOMServer from 'react-dom/server'

class Map extends React.Component {
  
  state = {
      infowindow: new google.maps.InfoWindow({}),
  }

  componentDidUpdate(prevProps, prevState) {
    console.log('componentDidUpdate');
    if (prevProps.google !== this.props.google) {
      this.loadMap();
    }
  }

  componentDidMount() {
    console.log('componentDidMount');
    this.loadMap();
  }

  loadMap() {
    console.log('loadMap');
    if (this.props &amp;&amp; this.props.google) {
      // google is available
      const {google} = this.props;
      const maps = google.maps;

      const mapRef = this.refs.map;
      const node = ReactDOM.findDOMNode(mapRef);

      const {initialCenter, zoom} = this.props;
      const {lat, lng} = initialCenter;
      const center = new maps.LatLng(lat, lng);
      const mapConfig = Object.assign({}, {
        center,
        zoom
      })
      this.map = new maps.Map(node, mapConfig);

      // adding markers for corresponding saved places
      const pos = {lat: 59.329113196988345 , lng: 17.966015144369067};
      const marker = new google.maps.Marker({
        position: pos,
        map: this.map,
        title: 'first marker',
      });
      const infowindow = new google.maps.InfoWindow({
        content: `&lt;h3&gt;${marker.title}&lt;/h3&gt;`
      });
      marker.addListener('click', () =&gt; {
        infowindow.open(this.map, marker);
      });

      // pop up  infoWindoW on map
      this.map.addListener('click', (e) =&gt; {
        this.state.infowindow.close();
        const popUp = &lt;PopUpForm onSubmit={this.onSubmit}/&gt;;
        this.showPopupOnMap(e.latLng, popUp);
        google.maps.event.addListener(this.state.infowindow, 'domready', () =&gt; {
          // HOW TO ACCESS THE FORM HERE
        });
      })
      this.forceUpdate();
    }      
}

onSubmit = () =&gt; {
  e.preventDefault();
  window.alert('onSubmit form')
}

showPopupOnMap = (latLng, popUp) =&gt; {
  const contentString = ReactDOMServer.renderToString(popUp)

  const pos = { lat: latLng.lat(), lng: latLng.lng() };

  this.state.infowindow = new google.maps.InfoWindow({
    content: contentString,
    position: pos
  });
  this.state.infowindow.open(this.map)
}

renderChildren() {
  console.log('renderChildren');
  const {children} = this.props;
  if (!children) return;
  return React.Children.map(children, c =&gt; {
    return React.cloneElement(c, {
      map: this.map,
      google: this.props.google,
    });
  })
}

render() {
  console.log('render');
    const style = {
      width: '70vw',
      height: '70vh'
    }

    return (
      &lt;div  ref=""map"" style={style}&gt;
        loading map...
        {this.renderChildren()}
      &lt;/div&gt;
    )
  }
};

Map.defaultProps = {
  zoom: 11,
  initialCenter: {
    lat: 59.3293,
    lng: 18.0686
  }
}

export default Map;</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';

class PopUpForm extends React.Component {
    render() {
        return (
            &lt;div id='iwc' ref='iwc' &gt;
                &lt;b&gt;Add this location&lt;/b&gt;&lt;br /&gt;
                &lt;form ref='mapform' className='map-form' onSubmit={this.onSubmit}&gt;
                    &lt;input type='text' /&gt;
                    &lt;button id='btn'&gt;Add&lt;/button&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        );
    }
}

export default PopUpForm;</code></pre>
</div>
</div>
</p>

<p>inside of this.map.addListner(this.state.infoWindow, 'domready', someFunctionToBeCalled) I do not know how to acces the form in React, I searched about it all I could found is this:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>google.maps.event.addListener(info, 'domready', function() {
    document.id(""map-form"").addEvent(""submit"", function(e) {
        e.stop();
        console.log(""hi!"");
    });
});</code></pre>
</div>
</div>
</p>

<p>is this even possible? Am I missing something??</p>
","7463649","","","","","2018-07-07 07:48:19","How to access a form inside InfoWindow content in React using Google maps api and google-maps-react V2.0.2","<reactjs><google-maps><google-maps-api-3><infowindow><google-maps-react>","1","0","","",""
"45017351","1","45078193","","2017-07-10 16:33:19","","-1","113","<p>I have a very heavily edited version of react-native-slider that i am using to create a slider with custom images. So far i have a background image with two images acting as the thumb of the slider however i want to apply an animation 'onSlidingComplete' to one of the images. </p>

<p>Please note that i have edited the slider.js file within node_modules to get my desired effects and i have managed to get everything working up until now but i cannot for the life of me make any animations work. </p>

<p>slider declaration: </p>

<pre><code>             &lt;Slider

                style={styles.slider}

                trackStyle={styles.trackStyle}

                maximumValue={this.props.max}

                minimumValue={this.props.min}

                step={this.props.step}

                value={this.state.value}

                thumbTouchSize={this.props.thumbTouchSize}

                sliderBg={require('../../images/tank_bg.png')}

                thumbImage={require('../../images/thumb_slider.png')}

                thumbImageBg={require('../../images/thumb_slider_whitebg_line.png')}

                onSlidingComplete={(value) =&gt; this.onSlidingComplete(value)}

                onValueChange={(value) =&gt; this.onValueChange(value)}

                orientation={'horizontal'}

                sliderAnim={this.state.sliderAnim}

            /&gt;
</code></pre>

<p>This is how i have my slider.js set up.</p>

<p>the places to note that i have already tried to implement animations are the _setCurrentValueAnimated function on line 577 and the _animateSlider function on line 240.</p>

<p>What i am looking to do is pass a boolean into the slider through its declaration as a this.state.sliderAnim: proptypes.bool and then have the code execute a scripted animation.</p>

<p>All i am trying to do is make the thumbImageBg animate its height from 0 to 100% once each time onSlidingComplete is called. </p>

<p>Any help is appreciated a lot</p>

<pre><code>                    `
        import React, {
          Component,
        } from ""react"";
        import {
          Animated,
          StyleSheet,
          Image,
          PanResponder,
          View,
          Easing,
          Dimensions,
          LayoutAnimation,
          TouchableWithoutFeedback,
          TouchableOpacity,
          Platform,
          UIManager
        } from ""react-native"";

        import PropTypes from 'prop-types';

        if (Platform.OS === 'android') {
          UIManager.setLayoutAnimationEnabledExperimental(true);
        };
</code></pre>

<p>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>

<p>removed a lot of unnecessary code to fit 30k max char size.</p>

<p>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>

<pre><code>          state = {
            containerSize: {width: 0, height: 0},
            trackSize: {width: 0, height: 0},
            thumbSize: {width: 0, height: 0},
            allMeasured: false,
            value: new Animated.Value(this.props.value),
            imageBGStyle: {
              height: this.props.thumbImageBg.height,
            }
          };

          static defaultProps = {
            value: 0,
            minimumValue: 0,
            maximumValue: 1,
            step: 0,
            minimumTrackTintColor: '#3f3f3f',
            maximumTrackTintColor: '#b3b3b3',
            thumbTintColor: '#343434',
            thumbTouchSize: {width: 80, height: 80},
            debugTouchArea: true,
            animationType: 'timing',
            orientation: 'horizontal',
            sliderAnim: true,
          };

          _animateSlider() { // #################################################################
            // I USED THIS METHOD TO TRY CREATE AN ANIMATION USING LAYOUTANIMATION
            LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);
            this.setState({
              imageBGStyle: {
                height: '100%',
              }
            })
            LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);
            setInterval(function() {this.setState({
              imageBGStyle: {
                height: '0%',
              }
            })}.bind(this),5000)
          }

          componentWillMount() {
            this._panResponder = PanResponder.create({
              onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,
              onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,
              onPanResponderGrant: this._handlePanResponderGrant,
              onPanResponderMove: this._handlePanResponderMove,
              onPanResponderRelease: this._handlePanResponderEnd,
              onPanResponderTerminationRequest: this._handlePanResponderRequestEnd,
              onPanResponderTerminate: this._handlePanResponderEnd,
            });

            if(this.sliderAnim == true)
            {
              this.animatedValue = new Animated.Value(100);
              alert('sliderAnim is true and runs');
              console.log('sliderAnim is true and runs');
            }
          };

          componentWillReceiveProps(nextProps) {
            var newValue = nextProps.value;

            if (this.props.value !== newValue) {
              if (this.props.animateTransitions) {
                this._setCurrentValueAnimated(newValue);
              }
              else {
                this._setCurrentValue(newValue);
              }
            }
          };

          render() {
            var {
              minimumValue,
              maximumValue,
              minimumTrackTintColor,
              maximumTrackTintColor,
              thumbTintColor,
              thumbImage,
              styles,
              style,
              trackStyle,
              thumbStyle,
              debugTouchArea,
              orientation,
              sliderBg,
              thumbImageBg,
              sliderAnim,
              ...other
            } = this.props;
            var {value, containerSize, trackSize, thumbSize, allMeasured} = this.state;
            var mainStyles = styles || defaultStyles;
            var outputRange;
            if (orientation === 'horizontal') {
              outputRange = [0, containerSize.width - thumbSize.width];
            } else {
              outputRange = [containerSize.height - thumbSize.height, 0];
            }
            var thumbStart = value.interpolate({
                inputRange: [minimumValue, maximumValue],
                outputRange: outputRange,
                //extrapolate: 'clamp',
              });
            var valueVisibleStyle = {};
            if (!allMeasured) {
              valueVisibleStyle.opacity = 0;
            }

            var minimumTrackStyle = {
              position: 'absolute',
              // width: Animated.add(thumbStart, thumbSize.width/2),
              backgroundColor: minimumTrackTintColor,
              ...valueVisibleStyle
            };

            if (orientation === 'horizontal') {
              minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);
              minimumTrackStyle.marginTop = -trackSize.height;
            } else {
              minimumTrackStyle.marginLeft = -trackSize.width;
              minimumTrackStyle.top = thumbStart;
              minimumTrackStyle.height = Animated.add(thumbStart, -trackSize.height);
              minimumTrackStyle.height = Animated.multiply(minimumTrackStyle.height, -1);
            }

            var touchOverflowStyle = this._getTouchOverflowStyle();

            let imageBGStyle = [defaultStyles.thumbImgStyleBg, this.state.imageBGStyle];

            return (
              &lt;View {...other} style={[mainStyles.container, style]} onLayout={this._measureContainer}&gt;
                &lt;Image style={defaultStyles.trackImgStyle} source={this.props.sliderBg}&gt;
                  &lt;View
                    style={[{backgroundColor: maximumTrackTintColor,}, mainStyles.track, trackStyle]}
                    renderToHardwareTextureAndroid={true}
                    onLayout={this._measureTrack} /&gt;

                    {/*LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);*/}

                  {/*&lt;Animated.View
                    renderToHardwareTextureAndroid={true}
                    style={[mainStyles.track, trackStyle, minimumTrackStyle]} &gt;
                    &lt;/Animated.View&gt;*/}

                    {/*&lt;TouchableOpacity
                      style={[defaultStyles.touchArea, {zIndex: 100}]}
                      onPress={this.animateSlider.bind(this)}&gt;*/}

                  &lt;Animated.View
                    onLayout={this._measureThumb}
                    renderToHardwareTextureAndroid={true}
                    style={[

                      mainStyles.thumb, thumbStyle,
                      {
                        transform: [
                          { translateX: thumbStart },
                          { translateY: 0 }
                        ],
                        ...valueVisibleStyle
                      }
                    ]} 
                  &gt;


                      &lt;Animated.Image 
                      style={imageBGStyle} 
                      source={this.props.thumbImageBg} &gt;
                        &lt;Animated.Image 
                        style={defaultStyles.thumbImgStyle} 
                        source={this.props.thumbImage}/&gt;
                      &lt;/Animated.Image&gt;
                  &lt;/Animated.View&gt;
                    {/*&lt;/TouchableOpacity&gt;*/}


                  &lt;View
                    renderToHardwareTextureAndroid={true}
                    style={[defaultStyles.touchArea, touchOverflowStyle]}
                    {...this._panResponder.panHandlers}&gt;
                    {debugTouchArea == true &amp;&amp; this._renderDebugThumbTouchRect(thumbStart)}
                  &lt;/View&gt;
                &lt;/Image&gt;
              &lt;/View&gt;
            );
          };

          _animate() { 
            Animated.timing(this.animatedValue,
            {
              toValue: 50,
              duration: 5000,
              easing: Easing.bounce
            }).start()
          };

          _getPropsForComponentUpdate(props) {
            var {
              value,
              onValueChange,
              onSlidingStart,
              onSlidingComplete,
              style,
              trackStyle,
              thumbStyle,
              ...otherProps,
            } = props;

            return otherProps;
          };

          _handleStartShouldSetPanResponder = (e: Object, /*gestureState: Object*/): boolean =&gt; {
            // Should we become active when the user presses down on the thumb?
            return this._thumbHitTest(e);
          };

          _handleMoveShouldSetPanResponder(/*e: Object, gestureState: Object*/): boolean {
            // Should we become active when the user moves a touch over the thumb?
            return false;
          };

          _handlePanResponderGrant = (/*e: Object, gestureState: Object*/) =&gt; {
            this._previousStart = this._getThumbStart(this._getCurrentValue());
            this._fireChangeEvent('onSlidingStart');
          };
          _handlePanResponderMove = (e: Object, gestureState: Object) =&gt; {
            if (this.props.disabled) {
              return;
            }

            this._setCurrentValue(this._getValue(gestureState));
            this._fireChangeEvent('onValueChange');
          };
          _handlePanResponderRequestEnd(e: Object, gestureState: Object) {
            // Should we allow another component to take over this pan?
            return false;
          };
          _handlePanResponderEnd = (e: Object, gestureState: Object) =&gt; {
            if (this.props.disabled) {
              return;
            }


            console.log(""holy fuck"");

            this._setCurrentValue(this._getValue(gestureState));
            this._fireChangeEvent('onSlidingComplete');
            if(this.sliderAnim === true)
            {
              this._animateSlider();
            }
          };

          onSlidingComplete() {
            alert(""nah this works!"");
          }

          _measureContainer = (x: Object) =&gt; {
            this._handleMeasure('containerSize', x);
          };

          _measureTrack = (x: Object) =&gt; {
            this._handleMeasure('trackSize', x);
          };

          _measureThumb = (x: Object) =&gt; {
            this._handleMeasure('thumbSize', x);
          };

          _handleMeasure = (name: string, x: Object) =&gt; {
            var {width, height} = x.nativeEvent.layout;
            var size = {width: width, height: height};

            var storeName = `_${name}`;
            var currentSize = this[storeName];
            if (currentSize &amp;&amp; width === currentSize.width &amp;&amp; height === currentSize.height) {
              return;
            }
            this[storeName] = size;

            if (this._containerSize &amp;&amp; this._trackSize &amp;&amp; this._thumbSize) {
              this.setState({
                containerSize: this._containerSize,
                trackSize: this._trackSize,
                thumbSize: this._thumbSize,
                allMeasured: true,
              })
            }
          };

          _getRatio = (value: number) =&gt; {
            return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);
          };

          _getThumbStart = (value: number) =&gt; {
            var ratio = this._getRatio(value);

            var start = 0;

            if (this.props.orientation === 'horizontal') {
              var length = this.state.containerSize.width - this.state.thumbSize.width;
              start = ratio * length;
            } else {
              var length = this.state.containerSize.height - this.state.thumbSize.height;
              start = length - (ratio * length);
            }

            return start;
          };

          _getValue = (gestureState: Object) =&gt; {
            var length = 0;

            if (this.props.orientation === 'horizontal') {
              length = this.state.containerSize.width - this.state.thumbSize.width;
            } else {
              length = this.state.containerSize.height - this.state.thumbSize.height;
            }

            var thumbStart = this._previousStart;

            var ratio;
            /*
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                THE NEXT STATEMENT IS EDITED TO AUTOMATICALLY TAKE ROTATED INPUTS FROM THE USER. EDIT IF ""ORIENTATION"" WORKS!

              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            */
            if (this.props.orientation === 'horizontal') {
              thumbStart += -gestureState.dy;
              ratio = (thumbStart / length);
            } else {
              thumbStart += gestureState.dy;
              ratio = 1 - (thumbStart / length);
            }

            if (this.props.step) {
              return Math.max(this.props.minimumValue,
                Math.min(this.props.maximumValue,
                  this.props.minimumValue + Math.round(ratio * (this.props.maximumValue - this.props.minimumValue) / this.props.step) * this.props.step
                )
              );
            } else {
              return Math.max(this.props.minimumValue,
                Math.min(this.props.maximumValue,
                  ratio * (this.props.maximumValue - this.props.minimumValue) + this.props.minimumValue
                )
              );
            }
          };

          _getCurrentValue = () =&gt; {
            return this.state.value.__getValue();
          };

          _setCurrentValue = (value: Number) =&gt; {
            this.state.value.setValue(value);
          };

          _setCurrentValueAnimated = (value: Number) =&gt; {
            var animationType   = this.props.animationType;
            var animationConfig = Object.assign(
                  {},
                  DEFAULT_ANIMATION_CONFIGS[animationType],
                  this.props.animationConfig,
                  {toValue : value}
                );
                // #######################################################################################################################
                // I CHANGED THIS THIS.STATE IN THE NEXT LINE SO THAT IT WOULD CHANGE THE HEIGHT OF MY IMAGES STYLE IN AN ANIMATION BUT IT DID NOT WORK
            Animated[animationType](this.state.imageBGStyle.height, animationConfig).start();
          };

          _fireChangeEvent = (event) =&gt; {
            if (this.props[event]) {
              this.props[event](this._getCurrentValue());
            }
          };

          _getTouchOverflowSize = () =&gt; {
            var state = this.state;
            var props = this.props;

            var size = {};
            if (state.allMeasured === true) {

              if (props.orientation === 'horizontal') {
                size.width = Math.max(0, props.thumbTouchSize.width - state.thumbSize.width);
                size.height = Math.max(0, props.thumbTouchSize.height - state.containerSize.height);
              } else {
                size.width = Math.max(0, props.thumbTouchSize.width - state.containerSize.width);
                size.height = Math.max(0, props.thumbTouchSize.height - state.thumbSize.height);
              }
            }

            return size;
          };

          _getTouchOverflowStyle = () =&gt; {
            var {width, height} = this._getTouchOverflowSize();

            var touchOverflowStyle = {};
            if (width !== undefined &amp;&amp; height !== undefined) {
              var verticalMargin = -height / 2;
              touchOverflowStyle.marginTop = verticalMargin;
              touchOverflowStyle.marginBottom = verticalMargin;

              var horizontalMargin = -width / 2;
              touchOverflowStyle.marginLeft = horizontalMargin;
              touchOverflowStyle.marginRight = horizontalMargin;
            }

            if (this.props.debugTouchArea === true) {
              touchOverflowStyle.backgroundColor = 'orange';
              touchOverflowStyle.opacity = 0.5;
            }

            return touchOverflowStyle;
          };

          _thumbHitTest = (e: Object) =&gt; {
            var nativeEvent = e.nativeEvent;
            var thumbTouchRect = this._getThumbTouchRect();

            return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);
          };

          _getThumbTouchRect = () =&gt; {
            var state = this.state;
            var props = this.props;
            var touchOverflowSize = this._getTouchOverflowSize();

            var rect = new Rect(
              0,
              0,
              props.thumbTouchSize.width,
              state.containerSize.height
            );

            if (this.props.orientation === 'horizontal') {
              rect.x = touchOverflowSize.width / 2 + this._getThumbStart(this._getCurrentValue()) + (state.thumbSize.width - props.thumbTouchSize.width) / 2;
              rect.y = touchOverflowSize.height / 2 + (state.containerSize.height - props.thumbTouchSize.height) / 2;
            } else {
              rect.x = touchOverflowSize.width / 2 + (state.containerSize.width - props.thumbTouchSize.width) / 2;
              rect.y = touchOverflowSize.height / 2 + this._getThumbStart(this._getCurrentValue()) + (state.thumbSize.height - props.thumbTouchSize.height) / 2;
            }

            return rect;
          };

          _renderDebugThumbTouchRect = (thumbStart) =&gt; {
            var thumbTouchRect = this._getThumbTouchRect();

            var positionStyle = {
              left: thumbTouchRect.x,
              top: thumbTouchRect.y,
              width: thumbTouchRect.width,
              height: thumbTouchRect.height,
              flex: 1,
              flexDirection: 'column',
              justifyContent: 'center'
            };

            if (this.props.orientation === 'horizontal') {
              positionStyle.left = thumbStart;
            } else {
              positionStyle.top = thumbStart;
            }
            return (
              &lt;Animated.View
                style={[defaultStyles.debugThumbTouchArea, positionStyle]}
                pointerEvents='none'
              /&gt;
            );
          };

          _renderThumbImage = () =&gt; {
            var {thumbImage} = this.props;

            if (!thumbImage) return; 


            return {thumbImage};
          };
        };


        var defaultStyles = StyleSheet.create({
          container: {
            // height: 440,
            justifyContent: 'center',

          },
          track: {
            height: TRACK_SIZE,
            borderRadius: TRACK_SIZE / 2,

          },
          thumb: {
            position: 'absolute',
            width: THUMB_SIZE,
            height: '100%',
            borderRadius: THUMB_SIZE / 2,

          },
          thumbImgStyle: {
            resizeMode: 'contain',
            width: '100%',
            height: '100%',
            backgroundColor:'transparent'
          },
          thumbImgStyleBg: {
            resizeMode: 'contain',
            width: '100%',
            height: '100%',
            backgroundColor:'transparent'
          },
          trackImgStyle: {
            resizeMode: 'contain',
            flex: 1,
            width: '100%',
            height: '100%',
          },
          touchArea: {
            position: 'absolute',
            backgroundColor: 'transparent',
            top: '-40%',
            left: 0,
            right: 0,
            bottom: '-40%',
          },
          debugThumbTouchArea: {
            position: 'absolute',
            backgroundColor: 'green',
            opacity: 0.5,

          }
        });`
</code></pre>
","8221399","","","","","2017-07-13 10:36:28","How do i make my own animations within react-native-slider","<reactjs><animation><react-native><react-native-android>","1","0","","",""
"34677234","1","","","2016-01-08 12:32:04","","4","3103","<p>i am making VideoPlayer react component with jwpalyer and i am using webpack es6 for loading module
webpack support npm module loading &amp; there is no npm for jwplayer</p>

<p>so am trying to include jwplayer.js using es6 import but it giving me error 
ReferenceError: window is not defined</p>

<p>so any one can help me to properly setup jwplayer with webpack</p>

<pre><code>  import React, { PropTypes, Component } from 'react';
  import $ from 'jquery';
  import Player from ""./lib/jwplayer/jwplayer.js"";
  import styles from './VideoPayer.css';
  import withStyles from '../../decorators/withStyles';
  import Link from '../Link';

  @withStyles(styles)
  class VideoPlayer extends Component {

    static propTypes = {
      className: PropTypes.string,
    };

    static defaultProps = {
      file: '',
      image: ''
    };

    constructor(props) {
      super(props);
      this.playerElement = document.getElementById('my-player');
    }


    componentDidMount() {
      if(this.props.file) {
        this.setupPlayer();
      }
    }

    componentDidUpdate() {
      if(this.props.file) {
        this.setupPlayer();
      }
    }

    componentWillUnmount() {
       Player().remove(this.playerElement);
    }

    setupPlayer() {
      if(Player(this.playerElement)) {
        Player(this.playerElement).remove();
      }

      Player(this.playerElement).setup({
        flashplayer: require('./lib/player/jwplayer.flash.swf'),
        file: this.props.file,
        image: this.props.image,
        width: '100%',
        height: '100%',
      });
    }

    render() {
      return (
        &lt;div&gt;
          &lt;div id=""my-player"" className=""video-player""&gt;&lt;/div&gt;
        &lt;/div&gt;
      )
    }
  }

export default VideoPlayer;
</code></pre>
","1353052","","","","","2018-06-16 06:50:41","Proper way to implement jwplayer in react component using webpack (react-starter-kit)","<reactjs><jwplayer><webpack><jwplayer6><es6-module-loader>","2","0","1","",""
"49999997","1","","","2018-04-24 10:59:35","","3","123","<p>Example1 below with type interference works but my attempts to declare the export to improve type checking fails (see Example2 and Example3).</p>

<pre><code>// @flow

import * as React from 'react'
import { connect } from 'react-redux'

// flow errors below will be the same if Props is an exact type {|...|}
type Props = {
    prop1: number,
    prop2: number,
}

class ExampleClass extends React.Component&lt;Props&gt; {
    static defaultProps = { prop2: 1 }

    render() {
        return this.props.prop1 + this.props.prop2
    }
}

// works, but what is the type of Example1?
export const Example1 = connect(null, null)(ExampleClass)

// Cannot assign connect(...)(...) to Example2 because undefined [1] is incompatible with number [1] in property prop2 of type argument P [2].
export const Example2: React.ComponentType&lt;Props&gt; = connect(null, null)(ExampleClass)
export const example2 = &lt;Example2 prop1={1} /&gt;

// Cannot assign connect(...)(...) to Example3 because
// property prop1 is read-only in Props [1] but writable in object type [2] in type argument P [3].
// property prop2 is read-only in Props [1] but writable in object type [2] in type argument P [3].
export const Example3: React.ComponentType&lt;React.ElementConfig&lt;React.ComponentType&lt;Props&gt;&gt;&gt; = connect(null, null)(ExampleClass)
export const example3 = &lt;Example3 prop1={1} /&gt;

// Note that this works but I'm looking for a way to declare 
// the type without repeating the list of properties
export const Example2a: React.ComponentType&lt;{prop1: number, prop2?: number}&gt; = connect(null, null)(ExampleClass)
</code></pre>

<p>Reference the code here <a href=""https://github.com/jacobwallstrom/FlowTypeExampleIssue"" rel=""nofollow noreferrer"">https://github.com/jacobwallstrom/FlowTypeExampleIssue</a></p>
","173157","","173157","","2018-05-14 12:27:41","2018-05-14 12:27:41","How to declare the type in flow of a react redux component with defaultProps?","<javascript><react-redux><flowtype><flow-typed>","1","0","2","",""
"43942544","1","43942653","","2017-05-12 16:33:07","","1","224","<p>I have this code at my react component:</p>

<pre><code>componentDidMount() {
    this.setState({
      audioContainer: document.getElementById('audio'),
    });
  }
</code></pre>

<p>And when needed I run some action:</p>

<pre><code>this.state.audioContainer.start()
</code></pre>

<p>I think that this is not the best option to do that.</p>

<p>Following the solution above I did this:</p>

<p>import React from 'react';
import PropTypes from 'prop-types';</p>

<pre><code>class AudioControl extends React.Component {

  componentDidMount() {
    if (this.props.start) {
      this.start();
    }
  }

  componentWillReceiveProps({ start }) {
    if (start !== this.props.start &amp;&amp; start === true) {
      this.start();
    }
  }

  start() {
    this._audio.start();
  }

  render() {
    return (
      &lt;audio ref={a =&gt; this._audio = a}&gt;
        &lt;source src=""url"" type=""audio/mp3"" /&gt;
      &lt;/audio&gt;
    );
  }
}

AudioControl.defaultProps = {
  start: false,
};

AudioControl.propTypes = {
  start: PropTypes.bool,
};


export default AudioControl;
</code></pre>

<p>I imported at Parent Component:</p>

<pre><code>&lt;AudioControl start /&gt;
</code></pre>

<p>I and got this error:
Dynamic page loading failed TypeError: this._audio.start is not a function</p>
","4197747","","4197747","","2017-05-12 18:07:09","2017-05-12 18:16:11","Control audio tag via react state","<reactjs>","1","3","","",""
"51220042","1","51220518","","2018-07-07 04:55:34","","5","54","<p>How to allow <code>*.js</code> files to import <code>*.ts</code> files in <code>react-native</code> but <strong>without rename of any of two files</strong>?</p>

<p>we want to import below <code>src/lib/setGlobalStyle</code><strong>.ts</strong> file from the <code>src/App</code><strong>.js</strong></p>

<pre><code>//MIT LICENSE from: https://github.com/Ajackster/react-native-global-props

import React from 'react'
import { StyleProp, ViewStyle } from 'react-native'


export function setGlobalStyle(obj, customProps) {
 const oldRender = obj.prototype.render;
  const initialDefaultProps = obj.prototype.constructor.defaultProps;
  obj.prototype.constructor.defaultProps = {
    ...initialDefaultProps,
    ...customProps,
  }
  obj.prototype.render = function render() {
    let oldProps = this.props;
    this.props = { ...this.props, style: [customProps.style, this.props.style] };
    try {
      return oldRender.apply(this, arguments);
    } finally {
      this.props = oldProps;
    }
  };
}
</code></pre>

<p>but below import which is inside <code>App</code><strong>.js</strong> only works when we rename the <code>setGlobalStyle</code><strong>.ts</strong> file to <code>setGlobalStyle</code><strong>.js</strong>:</p>

<pre><code>import * as Utils from './lib/setGlobalStyle'
</code></pre>

<p>and of course the <code>setGlobalStyle</code><strong>.ts</strong> currently does not contain any <code>TypeScript</code> types, that is because we had to remove all and rename it to <strong>.js</strong> so we can continue on the project until this gets an answer.</p>

<p><strong>note</strong>: the reason why we need <code>TypeScript</code> is to allow <code>IDE</code> autocomplete of the parameters (i.e. the <code>customProps</code> argument).</p>
","8740349","","8740349","","2018-07-07 05:26:16","2018-07-07 06:37:20","react-native - *.js importing *.ts file","<javascript><typescript><react-native>","1","2","1","",""
"42348072","1","42348148","","2017-02-20 15:12:39","","0","89","<p>When I look at this page, I can see a table containing the propTypes and defaultProps for a component : <a href=""http://styleguide.pivotal.io/react_components_alerts.html"" rel=""nofollow noreferrer"">http://styleguide.pivotal.io/react_components_alerts.html</a></p>

<p>I want to do the same thing for a library I am doing.</p>

<p>I have a list of component that I can access using </p>

<pre><code>import { A, B, C, D } from 'mylib';
</code></pre>

<p>Is there a way to access propTypes and defaultProps so I can format the same table automatically ?</p>
","2127277","","","","","2017-02-20 15:16:37","Is there a way to access propTypes and defaultProps of an imported component?","<javascript><reactjs><reactive-programming>","1","0","","",""
"34112110","1","","","2015-12-05 23:20:09","","10","1462","<p>I upgraded my app from react-native 0.15 to 0.16 but after that I'm getting an error and I don't know how to solve it.</p>

<p><a href=""https://i.stack.imgur.com/zbRhi.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zbRhi.png"" alt=""enter image description here""></a></p>

<pre><code>TypeError:undefined is not an object (evaluating 'GLOBAL.Text={
get defaultProps(){
throw getInvalidGlobalUseError('Text')}}')
</code></pre>

<p>In Chrome Debugger:</p>

<pre><code>Uncaught Error: Uncaught TypeError: Cannot set property 'Text' of undefined
</code></pre>

<p>Thanks</p>

<p><strong>OBS:</strong> I'm running on Android. </p>

<p>I notice that changing app name solves the problem, I'm using Evently as app name today. I tried to recreate my virtual machine but didn't solve it.</p>
","4300032","","4300032","","2015-12-06 19:45:22","2016-02-22 21:55:05","Upgrade to react-native 0.16 error","<react-native>","3","1","4","",""
"43149844","1","45478727","","2017-03-31 21:21:15","","2","121","<p>I've got a templated TextAreaField that uses <code>FormControl</code> from <code>react-bootstrap</code> to give it the nice bootstrap look and feel. </p>

<p>I'm wanting to be able to use internationalised messages via <code>react-intl</code>. It works for all the components outside the <code>FormControl</code>, but not in the props. When I try and pass a <code>FormattedMessage</code> to the <code>placeholder</code> it just displays <code>[object Object]</code></p>

<p>Any ideas?</p>

<p><strong>TextAreaField.js</strong></p>

<pre><code>import React, {PropTypes} from 'react';
import Help from './Help';
import {FormGroup, ControlLabel, FormControl } from 'react-bootstrap';

const TextAreaField = ({ input, label, tooltip, rows, meta }) =&gt; {
    const { touched, warning, error} = meta;
    let currentState = null;
    if (touched) currentState = (error ? ""error"" : warning ? ""warning"" : null);
    return (
        &lt;FormGroup controlId={input.name} validationState={currentState}&gt;
            {tooltip &amp;&amp; &lt;Help input={input.name} text={tooltip}/&gt;}
            &lt;FormControl
                componentClass=""textarea""
                style={{height: rows * 2 + ""em""}}
                placeholder={label}
                {...input}
            /&gt;
            {currentState &amp;&amp; &lt;ControlLabel className={currentState}&gt;{error || warning}&lt;/ControlLabel&gt;}
        &lt;/FormGroup&gt;
    );
};

TextAreaField.propTypes = {
    input: PropTypes.object.isRequired,
    label: PropTypes.object.isRequired,
    tooltip: PropTypes.object,
    meta: PropTypes.object,
    rows: PropTypes.number,
};

TextAreaField.defaultProps = {
    rows: 3
};

export default TextAreaField;
</code></pre>

<p><strong>The redux-form that uses the TextAreaField</strong></p>

<pre><code>&lt;Field name=""text"" label={&lt;FormattedMessage id=""Order.Text"" /&gt;} validate={required}
             warn={bigJob} component={TextAreaField} rows={5}/&gt;
</code></pre>
","449045","","","","","2017-08-03 08:24:15","Using react-intl with react-bootstrap","<twitter-bootstrap><reactjs><react-bootstrap><react-intl>","1","0","","",""
"43653334","1","","","2017-04-27 09:06:00","","1","681","<p>First of all here is my code:</p>

<p>Routes.js:</p>

<pre><code>import React from 'react';
import PropTypes from 'prop-types';
import { Redirect, Route } from 'react-router-dom';
import { PUBLIC_ROUTE, LOGIN_ROUTE } from './utils/constants';

const routes = ({ component: Component, ...rest }) =&gt; {
    let { requireAuth, isAuthenticated } = rest;

    if (!requireAuth) {
        requireAuth = false;
    }

    // If user authenticated
    if (isAuthenticated) {
        // If page need auth
        if (requireAuth === true) {
            return (
                &lt;Route {...rest} render={props =&gt; &lt;Component {...props} /&gt;} /&gt;
            );
        } else if (requireAuth === 'partial') { // If the page is doesn't require auth but can't be access if auth true
            return &lt;Redirect to={PUBLIC_ROUTE} /&gt;;
        }

        // If page doesn't need auth
        return &lt;Route {...rest} render={props =&gt; &lt;Component {...props} /&gt;} /&gt;;
    }

    // If user not authenticated //

    // page doesn't require Auth
    if (requireAuth === false || requireAuth === 'partial') {
        return &lt;Route {...rest} render={props =&gt; &lt;Component {...props} /&gt;} /&gt;;
    }
    // If page require Auth redirect user to login routes
    return (
        &lt;Route
            {...rest}
            render={props =&gt; (
                &lt;Redirect
                    to={{
                        pathname: `${LOGIN_ROUTE}`,
                        state: { from: props.location },
                    }}
                /&gt;
            )}
        /&gt;
    );
};

routes.propTypes = {
    component: React.PropTypes.oneOfType([
        React.PropTypes.element,
        React.PropTypes.func,
    ]),
};

export default routes;
</code></pre>

<p>App.js:</p>

<pre><code>const history = createHistory();

const mapStateToProps = state =&gt; {
    const { auth, global } = state;
    const { authenticated, user } = auth;
    const { loading } = global;

    return { authenticated, user, loading };
};

const reduxConnector = connect(mapStateToProps, { ping });

class App extends Component {
    state = {
        isAuthenticated: false,
    };
    static propTypes = {
        authenticated: PropTypes.bool.isRequired,
    };

    componentWillReceiveProps(nextProps) {
        this.setState({ isAuthenticated: nextProps.authenticated });
    }

    render() {
        const { authenticated, user, loading } = this.props;
        const { isAuthenticated } = this.state;

        if (loading) {
            return (
                &lt;div style={style.center}&gt;
                    &lt;MDSpinner /&gt;
                &lt;/div&gt;
            );
        }

        return (
            &lt;ConnectedRouter history={history}&gt;
                &lt;div&gt;
                    &lt;NotificationsSystem theme={theme} /&gt;
                    &lt;Header isAuthenticated={isAuthenticated} user={user} /&gt;
                    &lt;NavMobile /&gt;
                    &lt;SideMenu /&gt;
                    &lt;Nav /&gt;

                    &lt;Switch&gt;
                        &lt;Routes
                            requireAuth={false}
                            isAuthenticated={isAuthenticated}
                            exact
                            path=""/""
                            component={Welcome}
                        /&gt;

                        &lt;Routes
                            requireAuth={true}
                            isAuthenticated={isAuthenticated}
                            path=""/point""
                            component={Point}
                        /&gt;

                        &lt;Routes
                            requireAuth=""partial""
                            isAuthenticated={isAuthenticated}
                            path=""/login""
                            component={Login}
                        /&gt;

                        &lt;Routes render={() =&gt; &lt;h3&gt;No Match&lt;/h3&gt;} /&gt;
                    &lt;/Switch&gt;
                    &lt;Footer /&gt;

                &lt;/div&gt;
            &lt;/ConnectedRouter&gt;
        );
    }
}

export default reduxConnector(App);
</code></pre>

<p>Login.js: </p>

<pre><code>import React from 'react';
import PropTypes from 'prop-types';
import { withRouter, Link, Redirect } from 'react-router-dom';
import { Field, reduxForm } from 'redux-form';
import { connect } from 'react-redux';
import cookie from 'react-cookie';

import { Headline, Section, renderField } from 'components';
import { ping } from 'redux/modules/auth';

function mapStateToProps(state) {
    const { authenticated } = state.auth;

    return { authenticated };
}

const reduxConnector = connect(mapStateToProps, { ping });
const token = cookie.load('_t');

class Login extends React.Component {
    static defaultProps = {
        loggingIn: false,
        authenticated: false,
    };

    componentDidMount(){
        if(cookie.load('_t')){
            this.props.ping();
        }
    }

    render() {
        const { handleSubmit } = this.props;

        const { from } = this.props.location.state || {
            from: { pathname: '/' },
        };


        if (this.props.authenticated) {
            return &lt;Redirect to={from} /&gt;;
        }

        return  &lt;div&gt;
                &lt;Headline title=""Login"" /&gt;
            &lt;/div&gt;;
    }
}

export default withRouter(reduxConnector(reduxFormDecorator(Login)));
</code></pre>

<p>Here is the problem:</p>

<p>Let say I already login to my app. And i want to navigate to <code>/point</code> (need auth to be access), app will <code>redirect</code> to <code>/login</code> after check the token (<code>this.props.ping()</code>):
1. If the token is valid: it will redirect me back to <code>point</code> page.
2. If the token is invalid: it will redirect me to <code>login</code> page.</p>

<p>The problem:</p>

<ol>
<li><p>After checking and token is valid, the app always redirect to <code>/</code>. 
I've <code>console.log</code> my <code>const {from}</code> the result is <code>{pathname: ""/point"", search: """", hash: """", state: undefined, key: undefined}</code>. It never return back to previous page (in this situation <code>/point</code> page). </p></li>
<li><p>If I access '/' it never redirect to login to call <code>ping</code>. I need this because I've header that show user full name. So I need set the state to redux. </p></li>
</ol>

<p>Any solution?</p>
","4115426","","","","","2017-04-28 07:14:24","react router v4 authentication token keep redirecting to /","<reactjs><react-router><react-router-redux>","1","0","1","",""
"48377657","1","","","2018-01-22 08:48:26","","0","113","<p>I have such a React Component:</p>

<pre><code>import Rect from 'react';
import Hammer from 'react-hammerjs';
import { DIRECTION_ALL } from 'hammerjs';
import AnSvg from '!svg-react-loader?name=AnSvg!../../../assets/svg/an-svg.svg';

class MyComponent extends React.Component {
  construct(props) {
    super(props);
  }

  render () {
    const
      instance = AnSvg(AnSvg.defaultProps),

      clone = React.cloneElement(instance, /*adding some css classes here*/)
    ;

    return (
      &lt;Hammer
        onPanStart={e =&gt; console.log('start')}
        onPan={e =&gt; console.log('panning)}
        onPanEnd={e =&gt; console.log('end')}
        onPanCancel={e =&gt; console.log('cancel')}
        options={{
          touchAction:'compute',
            recognizers: {
            pan: {
              direction: DIRECTION_ALL,
              threshold: 10
            }
          }
       }}&gt;{clone}&lt;/Hammer&gt;
    );
  }
}
</code></pre>

<p>The <code>pan-end</code> event is never triggered, but the <code>pan-cancel</code> instead, even if the target does not change. So the output looks like that:</p>

<pre><code>start
(6) panning
cancel &lt;-- also missing sometimes
</code></pre>

<p>What causes Hammerjs to trigger the <code>pan-cancel</code> event?</p>
","687901","","","","","2018-01-22 08:48:26","react-hammerjs — pan always cancels","<reactjs><hammer.js><pan>","0","0","","",""
"51432061","1","51432890","","2018-07-19 21:35:23","","0","18","<p>I have a static three static properties (<code>Header</code>, <code>Body</code>, and <code>Footer</code>) set to a <code>Dialog</code> component. However, typescript throws the following error after wrapping the <code>Dialog</code> component in styled-components.</p>

<p><code>Property 'Header' does not exist on type 'StyledComponentClass...</code></p>

<p>Here is my <code>/Dialog.tsx</code>:</p>

<pre><code>import { Dialog as BlueprintDialog, IDialogProps } from '@blueprintjs/core';
import * as React from 'react';
import styled from 'styled-components';

import Body from './Dialog.Body';
import Footer from './Dialog.Footer';
import Header from './Dialog.Header';

/** ************************************************************************* */

type DefaultProps = {
  className: string;
};

export interface DialogProps extends IDialogProps {
  children?: React.ReactNode;
  className?: string;
  primary?: boolean;
}

class Dialog extends React.PureComponent&lt;DialogProps&gt; {
  static displayName = 'UI.Dialog';
  static defaultProps: DefaultProps = {
    className: '',
  };
  static Body: typeof Body;
  static Footer: typeof Footer;
  static Header: typeof Header;
  render() {
    return &lt;BlueprintDialog {...this.props} /&gt;;
  }
}

/** ************************************************************************* */

export default styled(Dialog)``;
</code></pre>

<p>And here is my <code>index.ts</code> where I piece it all together:</p>

<pre><code>import Dialog from './Dialog';
import DialogBody from './Dialog.Body';
import DialogFooter from './Dialog.Footer';
import DialogHeader from './Dialog.Header';

Dialog.Body = DialogBody; // TS Compilation Error :/
Dialog.Footer = DialogFooter; // TS Compilation Error :/
Dialog.Header = DialogHeader; // TS Compilation Error :/
export default Dialog;
</code></pre>

<p>I've tried doing the following, which works, but now interpolation fails for the root <code>Dialog</code> component:</p>

<pre><code>import { Dialog as BlueprintDialog, IDialogProps } from '@blueprintjs/core';
import * as React from 'react';
import styled from 'styled-components';

import Body from './Dialog.Body';
import Footer from './Dialog.Footer';
import Header from './Dialog.Header';

/** ************************************************************************* */

type DefaultProps = {
  className: string;
};

export interface DialogProps extends IDialogProps {
  children?: React.ReactNode;
  className?: string;
  primary?: boolean;
}

class Dialog extends React.PureComponent&lt;DialogProps&gt; {
  static displayName = 'UI.Dialog';
  static defaultProps: DefaultProps = {
    className: '',
  };
  render() {
    return &lt;BlueprintDialog {...this.props} /&gt;;
  }
}

/** ************************************************************************* */

const Styled = styled(Dialog)``;

class WithSubmodules extends Styled {
  static Body: typeof Body;
  static Footer: typeof Footer;
  static Header: typeof Header;
}

export default WithSubmodules;
</code></pre>

<p>An example of interpolation that throws the <code>Cannot call a class as a function</code> error:</p>

<pre><code>export default styled(InterpolationExample)`
  ${Dialog.Header} { /* WORKS :) */
    border: 1px solid green;
  }
  ${Dialog} { { /* Throws Error :/ */
    border: 1px solid pink;
  }
`;
</code></pre>
","1828780","","1828780","","2018-07-19 23:17:29","2018-07-19 23:17:29","How to hoist non react statics with typescript and styled-components?","<javascript><reactjs><typescript><styled-components>","1","0","","",""
"42423662","1","","","2017-02-23 18:39:08","","2","382","<p>I'm trying to replicate the <a href=""https://strml.github.io/react-grid-layout/examples/0-showcase.html"" rel=""nofollow noreferrer"">0-showcase</a> example of <a href=""https://github.com/STRML/react-grid-layout"" rel=""nofollow noreferrer"">react-grid-layout</a>, everything is working fine except that, the main HTML element which contains the grid and its components, isn't scrollable. I've tried giving <strong>overflow-y scroll</strong> to body and to subsequent elements, but to no avail. I'm using Gastsby Static Site Generator to speed up development. So inside my <strong>pages</strong> directly in the Gastby folder structure, I created a <strong>grid.js</strong> file which contains the following react code. Almost everything is as defined in the <a href=""https://github.com/STRML/react-grid-layout/blob/master/test/examples/0-showcase.jsx"" rel=""nofollow noreferrer"">example code here</a>. This might a small CSS fix that I'm not getting, but I'm really not understanding what I'm missing here. Thanks in advance!</p>

<pre><code>import React, {PropTypes} from 'react'
import {Responsive, WidthProvider} from 'react-grid-layout';
import lomap from 'lodash.map'
import loresult from 'lodash.result'
import lorange from 'lodash.range'
import lorandom from 'lodash.random'

import ""../node_modules/react-grid-layout/css/styles.css""
import ""../node_modules/react-resizable/css/styles.css""

const ResponsiveReactGridLayout = WidthProvider(Responsive)

// const originalLayouts = getFromLS('layouts') || {}

function generateLayout() {
  return lomap( lorange(0, 25), function (item, i) {
    var y = Math.ceil(Math.random() * 4) + 1;
    return {
      x: lorandom(0, 5) * 2 % 12,
      y: Math.floor(i / 6) * y,
      w: 2,
      h: y,
      i: i.toString(),
      static: Math.random() &lt; 0.05
    };
  });
}

export default class MyLayout extends React.Component {

  // static propTypes = {
  //   onLayoutChange: PropTypes.func.isRequired
  // }

  static defaultProps = {
    className: ""layout"",
    rowHeight: 30,
    cols: {lg: 12, md: 10, sm: 6, xs: 4, xxs: 2},
    initialLayout: generateLayout()
  }

  state = {
    currentBreakPoint: 'lg',
    mounted: false,
    layouts: {lg: this.props.initialLayout}
  }

  constructor(props, context){
    super(props, context)
  }

  componentDidMount() {
    this.setState({
      mounted: true
    })
  }

  generateDOM() {

    const styles = {
      background: ""#eee""
    }

    return lomap(this.state.layouts.lg, (l, i) =&gt; {
      return (
        &lt;div style={styles} key={i} className={l.static ? 'static': ''}&gt;
          {
            l.static ? 
              &lt;span className=""text"" title=""This item is static and can't be removed or resized""&gt;
                static - {i}
              &lt;/span&gt; :
              &lt;span className=""text""&gt;{i}&lt;/span&gt; 
          }
        &lt;/div&gt;
      )
    })
  }

  onBreakPointChange(breakpoint) {
    this.setState({
      currentBreakPoint: breakpoint
    })
  }

  onLayoutChange(layout, layouts) {
    // this.props.onLayoutChange(layout, layouts)
    console.log(layout, layouts);
  }

  onNewLayout() {
    this.setState({
      layouts: {
        lg: generateLayout()
      }
    })
  }

  render() {
    return (
      &lt;div&gt;
        &lt;div&gt;Current Breakpoint: {this.state.currentBreakpoint} ({this.props.cols[this.state.currentBreakpoint]} columns)
        &lt;/div&gt;
        &lt;button onClick={this.onNewLayout}&gt;Generate New Layout&lt;/button&gt;
        &lt;ResponsiveReactGridLayout
          {...this.props}
          layouts={this.state.layouts}
          onBreakpointChange={this.onBreakpointChange}
          onLayoutChange={this.onLayoutChange}
          // WidthProvider option
          measureBeforeMount={false}
          // I like to have it animate on mount. If you don't, delete `useCSSTransforms` (it's default `true`)
          // and set `measureBeforeMount={true}`.
          useCSSTransforms={this.state.mounted}&gt;
          {this.generateDOM()}
        &lt;/ResponsiveReactGridLayout&gt;
      &lt;/div&gt;
    )
  }
} 
</code></pre>
","5106072","","","","","2017-02-24 08:16:17","Scroll Not Working: react-grid-layout: 0-showcase example","<css><reactjs><layout><scroll><gatsby>","1","0","","",""
"48940307","1","","","2018-02-23 02:42:45","","0","104","<p>I started to use the recompose library, and it works great. But I am having some issues passing a default props of react elements.</p>

<p>flow error: call of mapOptions Function cannot be called on array type</p>

<pre><code>    /* @flow */
import Input, { InputLabel } from 'material-ui/Input';
import Select from 'material-ui/Select';
import * as React from 'react';
import {withHandlers, withState, defaultProps, compose, withProps, mapProps} from 'recompose';
import { FormControl, FormHelperText } from 'material-ui/Form';
import {terms} from './Data/index'
import type { HOC } from 'recompose'

type Props ={
  // options: Array&lt;React.Element&lt;string&gt;&gt;,
}

const mapOptions = Object.keys(terms).map(key=&gt;
  &lt;option value={key}&gt;{terms[key]}&lt;/option&gt;
)

const BaseComponent = ({options})=&gt;
        &lt;FormControl&gt;
           &lt;InputLabel htmlFor=""terms""&gt;Terms and Interest Rate&lt;/InputLabel&gt;
           &lt;Select
             native&gt;
             {options}
           &lt;/Select&gt;
       &lt;/FormControl&gt;

const TermComponent: HOC&lt;*, Props&gt; = compose(
  defaultProps({
    options: mapOptions()
  })
)(BaseComponent)


export default TermComponent;
</code></pre>
","6387188","","2622314","","2018-03-17 11:54:05","2018-03-17 11:54:05","Recompose passing prop of an array of react elements","<reactjs><flowtype><recompose>","1","0","","",""
"41980966","1","","","2017-02-01 13:25:34","","0","44","<p>I use WebStorm and I have this plugin: <a href=""https://github.com/idok/react-templates-plugin"" rel=""nofollow noreferrer"">https://github.com/idok/react-templates-plugin</a></p>

<p>Having it installed in my WebStorm I can type for example <code>rcls</code> and immediately have:</p>

<pre><code>import React, {
    Component,
    PropTypes,
} from 'react';

class LocalizedText extends Component {
    render() {
        return (
            &lt;div&gt;&lt;/div&gt;
        );
    }
}

LocalizedText.propTypes = {};
LocalizedText.defaultProps = {};

export default LocalizedText;
</code></pre>

<p>I wonder if it is possible to find some file on my computer and make some changes (new lines and so on) manually?</p>

<p>Sorry if it's a silly question but I can't find the answer in google.</p>
","5601155","","783119","","2017-02-01 16:22:54","2017-02-01 16:22:54","WebStorm, How can I edit templates in react-templates?","<webstorm><react-templates>","0","2","","",""
"49721921","1","49722149","","2018-04-08 19:33:13","","0","138","<p>I'd like to set PropTypes validation for my React component to warn if there are no children. But when I follow the PropTypes syntax <a href=""https://reactjs.org/docs/typechecking-with-proptypes.html#requiring-single-child"" rel=""nofollow noreferrer"">recommended by the React docs</a>, I get this error thrown: </p>

<blockquote>
  <p>prop type <code>children</code> is invalid; it must be a function, usually from the <code>prop-types</code> package, but received <code>undefined</code>.</p>
</blockquote>

<p>When I step through in the Chrome debugger, I see that <code>children</code> is <code>undefined</code> when the validation is performed. But I specifically set <code>children</code> in <code>defaultProps</code>, so why is it <code>undefined</code>?  I've tried several different values for <code>defaultProps.children</code>, including <code>[]</code> and <code>''</code>. All of them produced the same error. </p>

<p>Note that my app works OK. It's only <code>PropTypes</code> validation that is failing.</p>

<p>Below is a simplified version of the problematic code. Note that I'm using static properties to define <code>defaultProps</code> (as <a href=""https://github.com/facebook/react/issues/3725#issuecomment-355965170"" rel=""nofollow noreferrer"">recommended by Dan Abramaov</a>). I'm using <code>create-react-app</code> so I have the Babel transform to enable the default class properties syntax.</p>

<pre><code>import React, { Fragment } from 'react';
import PropTypes from 'prop-types'
import { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';
import classnames from 'classnames';

export class Tab extends React.Component {

  static propTypes = {
    name: PropTypes.string.isRequired,
    children: PropTypes.node.required,
  }

  static defaultProps = {
    name: null,
    children: ''
  }

  render () { 
    return (
      &lt;Fragment&gt;
        {this.props.children}
      &lt;/Fragment&gt;
    )
  }
}

export default class TabSet extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      activeTab: 0
    };
  }

  // TODO: limit to only Tab child elements. 
  static propTypes = {
    children: PropTypes.node.required,
  }

  static defaultProps = {
    children: ''
  }

  toggle = (tab) =&gt; {
    if (this.state.activeTab !== tab) {
      this.setState({
        activeTab: tab
      });
    }
  }

  render() { 
    return (
      &lt;Fragment&gt;
        &lt;Nav tabs&gt;
          {this.props.children.map((tab,i) =&gt; 
            &lt;NavItem key={i} style={{cursor: 'pointer'}}&gt;
              &lt;NavLink
                className={classnames({ active: this.state.activeTab === i })}
                onClick={() =&gt; { this.toggle(i); }}
              &gt;
                { tab.props.name }
              &lt;/NavLink&gt;
            &lt;/NavItem&gt;
          )}
        &lt;/Nav&gt;
        &lt;TabContent activeTab={this.state.activeTab}&gt;
          {this.props.children.map((tab,i) =&gt; 
            &lt;TabPane key={i} tabId={i}&gt;
              {tab}
            &lt;/TabPane&gt;
          )}
        &lt;/TabContent&gt;
      &lt;/Fragment&gt;
    );
  }
}
</code></pre>

<p>If it matters, here's a simplified example of how these components are used: </p>

<pre><code>import React from 'react';
import TabSet, {Tab} from './TabSet';
import HomeTab from './HomeTab';
import FriendsTab from './FriendsTab';
import HangTimesTab from './HangTimesTab';

export default class MainContainer extends React.Component {

  render() {
    return (
      &lt;div&gt;
        &lt;TabSet&gt;
          &lt;Tab name=""Home""&gt;
            &lt;HomeTab /&gt; 
          &lt;/Tab&gt;
          &lt;Tab name=""Hang Times""&gt;
            &lt;HangTimesTab /&gt;
          &lt;/Tab&gt;
          &lt;Tab name=""Friends""&gt;
            &lt;FriendsTab /&gt;
          &lt;/Tab&gt;
        &lt;/TabSet&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>
","126352","","126352","","2018-04-08 19:57:33","2018-04-08 19:57:33","Why is children prop undefined, despite setting it in defaultProps?","<reactjs><ecmascript-6><react-proptypes>","1","2","","",""
"50393230","1","50407652","","2018-05-17 13:52:17","","1","50","<p><strong>Background:</strong> </p>

<ol>
<li><p>Flow's documentation on typing higher-order components describes <a href=""https://flow.org/en/docs/react/hoc/#toc-injecting-props-with-a-higher-order-component"" rel=""nofollow noreferrer"">props injection</a> and the way of <a href=""https://flow.org/en/docs/react/hoc/#toc-supporting-defaultprops-with-react-elementconfig"" rel=""nofollow noreferrer"">supporting defaultProps</a>, but the suggested code examples use different approaches, and there is no example of combining the two.</p></li>
<li><p>Since version 0.72, Flow has deprecated the inferred type <code>*</code> (asterisk).</p></li>
</ol>

<p><strong>Problem</strong></p>

<p>I am trying to combine the recipes from Flow's documentation, and type a function that injects a certain property from the redux store into a supplied component. Here is my code:</p>

<pre><code>import React, { Component, type ComponentType, type ElementConfig } from 'react';
import { connect } from 'react-redux';

import type { State } from 'client/types/redux';

export type InjectedProps = {
  xs: string[]
}

export default function injector&lt;Props, Com: ComponentType&lt;Props&gt;&gt;(
  DecoratedComponent: Com
) : ComponentType&lt;$Diff&lt;ElementConfig&lt;Com&gt;, InjectedProps&gt;&gt; {

  class Decorator extends Component&lt;ElementConfig&lt;Com&gt;&gt; {

    render() {
      return (
        &lt;DecoratedComponent
          {...this.props} // the props will now contain xs from redux
        /&gt;
      );
    }

  }

  return connect((state: State)  =&gt; ({
    xs: state.xs
  }))(Decorator);
}
</code></pre>

<p>Here is a simplified version of this code (without redux) that gives the same error as the code above in <a href=""https://flow.org/try/#0JYWwDg9gTgLgBAJQKYEMDGMA0cDecDCE4EAdkiVnDAJ5hIFGRkUAqtS2NdcAogDZIQ5GIRIAzYAHM4AXzhioROAHIoqDMoDcAKG1d6ASRIArJBiQATAAqKwAZzgBeXNrhwAHnYBccOzCjAJJIA2gC62jK6SO6QsHAWSGIoAK588GLJJBjApHCBphjQADw2EPbYhCA+lUzCbHQltnYAfM0AFK5wACJm0CgwljWkwtVE2gCUcKPEzDD1SEUAJF3AYmJF-ILCohKSRZXN2EYFA9ZNrS6dnWowyVAk8pnZuQlofTDQbWBNPqX2kzhdG4AJBuN4kPweBzOYLKMQQCDKcJuFFwG53B4dVGooo9N5QfqDRjDCidbEonAAOmp3zKdki5NRnkcOE8DMZAHpmmSUeMdJ1IhEgA"" rel=""nofollow noreferrer"">Try Flow</a>.</p>

<p>Notice that the <a href=""https://flow.org/try/#0JYWwDg9gTgLgBAJQKYEMDGMA0cDecDCE4EAdkiVnDAJ5hIFGRkUAqtS2NdcAogDZIQ5GIRIAzYAHM4AXzhioROAHIoqDMoDcAKG1d6ASRIArJBiQATAAqKwAZzgBeXNrhwAHnYBccOzCjAJJIA2gC62jK6SO6QsHAWSGIoAK588GLJJBjApHCBphjQADw2EPbYhCA+lUzCbHRFAFQAfM0AFK5wACJm0CgwljWkwtVE2gCUcKPEzDD1SEUAJF3AYmJF-ILCohKSRZXN2EYFA9a2dq0unZ1qMMlQJPKZ2bkJaH0w0G1g5z6l9pMcLo3ABINzvEh+DwOZzBZRiCAQZThNyouC3e6PDpotFFHrvKD9QaMYYUTo41E4AB0NJ+ZTskQpaM8jhwnkZTIA9M1yajxjpOpEIkA"" rel=""nofollow noreferrer"">error disappears</a> if the <code>*</code> type is used for the <code>ComponentType</code>.</p>

<p>Could you please suggest how to properly type this higher-order function without using the deprecated <code>*</code> type</p>
","3925302","","","","","2018-05-18 09:05:52","Flow-typing higher-order components for props injection (while preserving the optionality of defaultProps)","<reactjs><flowtype><higher-order-components>","1","0","","",""
"50110766","1","","","2018-05-01 02:46:50","","0","49","<p>I am trying to give the users the ability to move panes around the ui by dragging a tab within the pane to another pane and dropping it there. I am creating a mock in story book right now for R&amp;D purposes so my example will not connect to a store but pass to the app level and adjust the state to trigger the change down the pipe.</p>

<p>The packages in question are:</p>

<pre><code>""react-dnd"": ""2.5.4"",
""react-dnd-multi-backend"": ""3.1.2"",
</code></pre>

<p>I am using React 16.2 with ES6 rules</p>

<p>Here is the offending code as follows:</p>

<p>Story Demo/App Level:</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import uuidv4 from 'uuid/v4';
import HTML5Backend from 'react-dnd-html5-backend';
import TouchBackend from 'react-dnd-touch-backend';
import MultiBackend, { TouchTransition } from 'react-dnd-multi-backend';
import { DragDropContext } from 'react-dnd';

// Components
import Ne8DropTargetPane from './Ne8DropTargetPane';

// Styles
import './Ne8PortablePanes.demo.less';

const HTML5toTouch = {
    backends: [
        {
            backend: HTML5Backend,
        },
        {
            backend: TouchBackend({ enableMouseEvents: true }),
            preview: true,
            transition: TouchTransition,
        },
    ],
};

function collect(connect, monitor) {
    return {
        highlighted: monitor.canDrop(),
        hovered: monitor.isOver(),
        connectDropTarget: connect.dropTarget(),
    };
}

class Ne8PortablePanes extends Component {
    static defaultProps = {
        panes: [ {
            paneId: 'left',
            tabs: [
                {
                    id: 'entities',
                    dragType: 'supplemental',
                    name: 'Entities',
                },
                {
                    id: 'systems',
                    dragType: 'supplemental',
                    name: 'Systems',
                },
            ],
        }, {
            paneId: 'center',
            tabs: [
                {
                    id: 'networkDiagram',
                    dragType: 'diagram',
                    name: 'Network Diagram',
                },
                {
                    id: 'deploymentDiagram',
                    dragType: 'diagram',
                    name: 'Deployment Diagram',
                },
            ],
        }, {
            paneId: 'right',
            tabs: [
                {
                    id: 'properties',
                    dragType: 'supplemental',
                    name: 'Properties',
                },
            ],
        }, {
            paneId: 'bottom',
            tabs: [
                {
                    id: 'options',
                    dragType: 'supplemental',
                    name: 'Options',
                },
            ],
        } ],
    }

    static propTypes = {
        panes: PropTypes.array,
    }

    state = {
        // panes: this.props.panes,
    }

    render() {
        // const { panes } = this.state;

        return (
            &lt;div className=""container"" &gt;
                &lt;div className=""header"" &gt;
                    &lt;h1&gt;Header&lt;/h1&gt;
                &lt;/div&gt;
                &lt;div className=""workspace"" &gt;
                    &lt;div className=""stage""&gt;
                        &lt;div className=""left-pane""&gt;
                            { this.renderPane('left') }
                        &lt;/div&gt;
                        &lt;div className=""center-pane""&gt;
                            { this.renderPane('center') }
                        &lt;/div&gt;
                        &lt;div className=""right-pane""&gt;
                            { this.renderPane('right') }
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div className=""bottom-pane""&gt;
                        { this.renderPane('bottom') }
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div className=""footer"" &gt;
                    &lt;h1&gt;Footer&lt;/h1&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

    renderPane(paneId) {
        const { panes } = this.props;

        const tabs = panes.reduce((result, pane) =&gt; {
            if (pane.paneId === paneId) {
                if (pane.tabs) {
                    pane.tabs.forEach(tab =&gt; {
                        result.push(tab);
                    });
                }
            }

            return result;
        }, []);

        return (
            &lt;Ne8DropTargetPane
                key={ uuidv4() }
                paneId={ paneId }
                tabs={ tabs } /&gt;
        );
    }
    /*
    handleTabRef = (el) =&gt; {
        if (!this.tabRefs) {
            this.tabRefs = [];
        }

        if (el) {
            this.tabRefs.push(el);
        }
    }
    */
}

export default DragDropContext(MultiBackend(HTML5toTouch))(Ne8PortablePanes);
</code></pre>

<p>The Pane Level:</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
// import { findDOMNode } from 'react-dom';
import uuidv4 from 'uuid/v4';
import { DropTarget } from 'react-dnd';

// Components
import Ne8DraggableTab from './Ne8DraggableTab';

const Types = {
    PANE: 'pane',
};

const targetPaneAcquired = {
    canDrop(props, monitor) {
        // const item = monitor.getItem();
        // console.log('dropped item', item);

        return true; // return bool if Types match or not
    },
    hover(props, monitor) {
        // console.log('monitor', monitor);
        // const clientOffset = monitor.getClientOffset();
        // const componentRect = findDOMNode(component).getBoundingClientRect(); // Get Pane by REF instead of findDOMNode
        // const isJustOverThisOne = monitor.isOver({ shallow: true });
        // const canDrop = monitor.canDrop();
        // console.log('clientOffset', clientOffset);
        // console.log('componentRect', componentRect); // Get Pane by REF instead of findDOMNode
        // console.log('isJustOverThisOne', isJustOverThisOne);
        // console.log('canDrop', canDrop);
    },
    drop(props, monitor) {
        return monitor.getItem();

        if (monitor.didDrop()) {
            // If you want, you can check whether some nested
            // target already handled drop
            return;
        }
        // Obtain the dragged item
        // const item = monitor.getItem();
        // console.log('drop function', item);
        // Call the updatePanes handler
    },
};

function collect(connect, monitor) {
    return {
        connectDropTarget: connect.dropTarget(),
        isOver: monitor.isOver(),
        isOverCurrent: monitor.isOver({ shallow: true }),
        canDrop: monitor.canDrop(),
    };
}

class Ne8DropTargetPane extends Component {
    componentWillReceiveProps(nextProps) {
        console.log('componentWillReceiveProps');
        const { isOver } = this.props;

        if (!isOver &amp;&amp; nextProps.isOver) {
            console.log('You can use this as enter handler');
        }

        if (isOver &amp;&amp; !nextProps.isOver) {
            console.log('You can use this as leave handler');
        }
    }

    render() {
        // const { paneId, tabs, isOver, canDrop, connectDropTarget } = this.props;
        const { paneId, tabs, isOver, canDrop, connectDropTarget } = this.props;

        if (isOver &amp;&amp; !canDrop) { // TRUE, FALSE
            console.log('TRUE, FALSE', paneId);

            return connectDropTarget(
                &lt;div className={ `pane undroppable ${paneId}` } &gt;
                    &lt;div className=""tabs""&gt;
                        { tabs.map((tab) =&gt; this.renderTab(tab)) }
                    &lt;/div&gt;
                    &lt;div className=""content""&gt;
                        &lt;h2&gt;{ paneId } content...&lt;/h2&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            );
        } else if (!isOver &amp;&amp; canDrop) { // FALSE, TRUE
            console.log('FALSE, TRUE', paneId, tabs);

            return connectDropTarget(
                &lt;div className={ `pane available ${paneId}` } &gt;
                    &lt;div className=""tabs""&gt;
                        { tabs.map((tab) =&gt; this.renderTab(tab)) }
                    &lt;/div&gt;
                    &lt;div className=""content""&gt;
                        &lt;h2&gt;{ paneId } content...&lt;/h2&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            );
        } else if (isOver &amp;&amp; canDrop) {
            console.log('TRUE, TRUE', paneId);

            return connectDropTarget(
                &lt;div className={ `pane targetReady ${paneId}` } &gt;
                    &lt;div className=""tabs""&gt;
                        { tabs.map((tab) =&gt; this.renderTab(tab)) }
                    &lt;/div&gt;
                    &lt;div className=""content""&gt;
                        &lt;h2&gt;{ paneId } content...&lt;/h2&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            );
        }
        console.log('FALSE, FALSE', paneId);

        return connectDropTarget(
            &lt;div className={ `pane unavailable ${paneId}` } &gt;
                &lt;div className=""tabs""&gt;
                    { tabs.map((tab) =&gt; this.renderTab(tab)) }
                &lt;/div&gt;
                &lt;div className=""content""&gt;
                    &lt;h2&gt;{ paneId } content...&lt;/h2&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

    renderTab = (tab) =&gt; {
        return (
            &lt;Ne8DraggableTab
                key={ uuidv4() }
                tab={ tab } /&gt;
        );
    }

    handleDrop = (e) =&gt; {
        console.log('handleDrop', e);
    }
}

const propTypes = {
    paneId: PropTypes.string.isRequired,
    tabs: PropTypes.array.isRequired,
    connectDropTarget: PropTypes.func.isRequired,
    isOver: PropTypes.bool.isRequired,
    canDrop: PropTypes.bool.isRequired,
    isOverCurrent: PropTypes.bool.isRequired,
};

Ne8DropTargetPane.propTypes = propTypes;

export default DropTarget(Types.PANE, targetPaneAcquired, collect)(Ne8DropTargetPane);
</code></pre>

<p>The Tab/Content Level:</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { DragSource } from 'react-dnd';

const Types = {
    TAB: 'pane',
};

const cardSource = {
    beginDrag(props) {
        const { tab } = props;
        const item = { id: tab.id };

        return item;
    },
    endDrag(props, monitor) {

        if (!monitor.didDrop()) {
            return;
        }

        // When dropped on a compatible target, do something
        const item = monitor.getItem();
        const dropResult = monitor.getDropResult();
    },
};

function collect(connect, monitor) {
    return {
        connectDragSource: connect.dragSource(),
        isDragging: monitor.isDragging(),
    };
}

class Ne8DraggableTab extends Component {
    render() {
        const { isDragging, connectDragSource, tab } = this.props;
        const { tabId, name } = tab;

        return connectDragSource(
            &lt;div
                className=""tab""
                id={ tabId }
                style={ { opacity: isDragging ? 0.5 : 1 } }
                ref={ this.handleTabRef }&gt;
                { name }
            &lt;/div&gt;
        );
    }
}

const propTypes = {
    tab: PropTypes.object.isRequired,
    isDragging: PropTypes.bool.isRequired,
    connectDragSource: PropTypes.func.isRequired,
};

Ne8DraggableTab.propTypes = propTypes;

export default DragSource(Types.TAB, cardSource, collect)(Ne8DraggableTab);
</code></pre>

<p>CSS/LESS:</p>

<pre><code>@import '~styles/globals/mixins.less';

.container {
    .flex-column;
    width: 600px;
    height: 400px;
    border: 1px solid #000;
    margin: 0 auto;

    h1, h2 {
        font-size: 1.4rem;
        line-height: 1.4;
        padding: 5px 10px;
    }

    h2 {
        font-size: 0.9rem;
        line-height: 0.9;
    }

    .header, .workspace, .footer {
        flex: 0 0 auto;
        border: 1px solid #000;
    }

    .header h1, .footer h1 {
        padding: 3px 15px;
    }

    .workspace {
        .flex-column;
        flex: 1 1 auto;

        .stage, .bottom-pane {
            .flex-row;
            flex: 0 0 auto;
            border: 1px solid #000;
        }

        .stage {
            height: 100%;
            flex: 1 1 auto;

            .left-pane, .center-pane, .right-pane {
                .flex-column;
                flex: 0 0 auto;
                border: 1px solid #000;
            }

            .center-pane {
                flex: 1 1 auto;
            }
        }

        .pane {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;

            .tabs {
                display: flex;
                flex: 0 0 auto;
                border-bottom: 1px solid #000;

                .tab {
                    border: 1px solid #000;
                    padding: 3px 6px;
                    font-size: 0.75rem;
                    line-height: 0.75;
                }
            }

            .content {
                flex: 1 1 auto;
            }
        }

        .targetReady {
            background: green;
        }

        .undroppable {
            background: red;
        }

        .available {
            background: lightblue;
        }

        .unavailable {
            background: none;
        }
    }
}
</code></pre>

<p>The error:</p>

<p>OffsetUtils.js:45 Uncaught TypeError: Cannot read property 'nodeName' of undefined
    at isImageNode (OffsetUtils.js:45)
    at getDragPreviewOffset (OffsetUtils.js:63)
    at HTML5Backend.handleTopDragStart (HTML5Backend.js:420)</p>

<p>Here is the offending Function in OffsetUtils.js:</p>

<pre><code>function isImageNode(node) {
// Here nodeName doesn't exist
    return node.nodeName === 'IMG' &amp;&amp; ((0, _BrowserDetector.isFirefox)() || !document.documentElement.contains(node));
}
</code></pre>
","2140496","","2140496","","2018-05-01 02:56:21","2018-05-01 02:56:21","react-dnd, react-dnd-multi-backend, monitor.getItem() causes Uncaught TypeError: Cannot read property 'nodeName' of undefined","<reactjs><drag-and-drop><monitor><react-dnd><storybook>","0","0","","",""
"49066218","1","","","2018-03-02 09:28:16","","0","79","<p>Hi I am creating an SPFX weather webpart and i am getting this error:</p>

<p><a href=""https://i.stack.imgur.com/x0GQn.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/x0GQn.jpg"" alt=""enter image description here""></a></p>

<p>there are no errors when i run gulp build. i am not sure how to debug my issue. this is the snippet of the proptypes.shape() where i am getting my issue:</p>

<pre><code>import * as React from 'react';
import PropTypes from 'prop-types';
    export const Day: React.SFC&lt;any&gt; = props =&gt; {
      const date = props.day.dt;
      const icon = getIcon(props.day.weather[0].id);
      const animate = true;
      const iconSize = 64;
      const iconColor = 'black';
      return (
        &lt;div className={appClasses.dayContainer} onClick={props.onClick} role=""link""&gt;
            &lt;h2 className={appClasses.date}&gt;{(new Date(date * 1000)).toDateString()} - {(new Date(date * 1000)).toLocaleTimeString()}&lt;/h2&gt;
           &lt;ReactAnimatedWeather
                icon={icon}
                color={iconColor}
                size={iconSize}
                animate={animate}
            /&gt;
        &lt;/div&gt;
      );
    };

    Day.defaultProps = {
      onClick: () =&gt; {},
    };

    Day.propTypes = {
      day: PropTypes.shape({
        dt: PropTypes.number.isRequired,
        weather: PropTypes.array.isRequired,
      }).isRequired,
      onClick: PropTypes.func,
    };
</code></pre>

<p>I'd like to note that i created the webpart first using react and it is working perfectly, but when i created an SPFX app, and transferred my existing codes into it. I had encountered these errors.</p>

<p>This is my package.json</p>

<pre><code>{
  ""name"": ""spfx-weather-2"",
  ""version"": ""0.0.1"",
  ""private"": true,
  ""engines"": {
    ""node"": ""&gt;=0.10.0""
  },
  ""dependencies"": {
    ""@microsoft/sp-core-library"": ""~1.1.0"",
    ""@microsoft/sp-webpart-base"": ""~1.1.1"",
    ""@types/react"": ""0.14.46"",
    ""@types/react-addons-shallow-compare"": ""0.14.17"",
    ""@types/react-addons-test-utils"": ""0.14.15"",
    ""@types/react-addons-update"": ""0.14.14"",
    ""@types/react-dom"": ""0.14.18"",
    ""@types/webpack-env"": ""&gt;=1.12.1 &lt;1.14.0"",
    ""prop-types"": ""^15.6.1"",
    ""react"": ""15.4.2"",
    ""react-animated-weather"": ""^1.0.3"",
    ""react-dom"": ""15.4.2"",
    ""react-router-dom"": ""^4.2.2""
  },
  ""devDependencies"": {
    ""@microsoft/sp-build-web"": ""~1.1.0"",
    ""@microsoft/sp-module-interfaces"": ""~1.1.0"",
    ""@microsoft/sp-webpart-workbench"": ""~1.1.0"",
    ""gulp"": ""~3.9.1"",
    ""@types/chai"": ""&gt;=3.4.34 &lt;3.6.0"",
    ""@types/mocha"": ""&gt;=2.2.33 &lt;2.6.0""
  },
  ""scripts"": {
    ""build"": ""gulp bundle"",
    ""clean"": ""gulp clean"",
    ""test"": ""gulp test""
  }
}
</code></pre>
","2621562","","2621562","","2018-03-02 10:05:35","2018-05-08 15:34:49","SPFx react cannot read property 'shape' of undefined","<reactjs><typescript><spfx>","1","0","","",""
"49020527","1","49020784","","2018-02-28 01:16:19","","0","69","<p>I am using a lot of react-native TextInputs in my app and I am manually changing the selectionColor of each one by adding:</p>

<pre><code>&lt;TextInput
  //various settings
  selectionColor={white}
  //more settings
 /&gt;
</code></pre>

<p>into every TextInput. After some investigation into how I could change this globally I discovered defaultProps and I believe something like</p>

<pre><code>TextInput.defaultProps={selectionColor: 'white'}
</code></pre>

<p>should be enough to change it once and for all. However I'm not sure that I have the syntax right as putting this code inside my first TextInput does not work. Additionally I'm not sure where the best place in my app would be to change these defaultProps would be, as perhaps doing this change in the first TextInput that appears is the wrong spot.</p>

<p>Has anyone had experience changing the defaultProps of a react-native TextInput like this before?</p>
","7259824","","","","","2018-02-28 01:51:49","Is it possible to change the defaultProps on a react-native TextInput?","<react-native>","1","2","","",""
"49596632","1","49597241","","2018-04-01 09:24:37","","1","49","<p>I am trying to plot pie chart using react and chartjs. </p>

<p>i am calling an API like this:-</p>

<pre><code>const border ={
    border:'1px solid blue',
    borderRadius: '25px',
    padding:'15px',
    marginTop:'20px'
}

class ScreenView extends Component {



constructor(){
    super();
    this.state = {
        newUsers:'',
        allUsers:'',
        totalApplication:'',
        chartData:{},
            newuserstoday:'',
            candidatesOnliveAdvt:'',
            totalsignuptilltoday:'',
            genderDetails:{
                male:'',
                female:'',
                other:''
            }
        }

    }


componentDidMount(){

    const newChartData = {...this.state.chartData}

    let url4 =""http://localhost:7080/getGenderAgainstAdvt"";

    getAllData(url4).then(
       response =&gt; this.setState({genderDetails:response.data},()=&gt;{
        console.log(""male gender count: ""+this.state.genderDetails.male);
        console.log(""female gender count: ""+this.state.genderDetails.female);
        console.log(""other gender count: ""+this.state.genderDetails.others);
       })

    );

}
componentWillMount(){

    this.getChartData();
}

getChartData(){
    // Ajax calls here

    let maleCount = this.state.genderDetails.male;
    let femaleCount = this.state.genderDetails.female;
    let otherCount = this.state.genderDetails.other;

    console.log(""male count is "" +maleCount);


    this.setState({
      chartData:{
        labels: ['Male', 'Female', 'Other'],
        datasets:[
          {
            label:'Population',
            data:[
            maleCount,femaleCount,otherCount
            ],
            backgroundColor:[
              'rgba(255, 99, 132, 0.6)',
              'rgba(54, 162, 235, 0.6)',
              'rgba(255, 206, 86, 0.6)'
            ],
            borderWidth:1,
            hoverBorderWidth:3,
            hoverBorderColor:'green'
          }
        ]
      }
    });
  }


render(){
    return(
    &lt;div&gt;
        &lt;div className=""container""&gt;
            &lt;div className=""row"" style={border}&gt;
                &lt;div className=""col-sm-8""&gt;
                    &lt;Chart chartData={this.state.chartData}/&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    );
}
}

export default ScreenView;
</code></pre>

<p>and my other component Chart looks like this:-</p>

<pre><code>class Chart extends Component {

    constructor(props){
        super(props);
        this.state = {
          chartData:props.chartData
        }
        //console.log(""chart data is here....""+ props.chartData.datasets[0].data[0].male);
      }

      static defaultProps = {
        displayTitle:true,
        displayLegend: true,
        legendPosition:'right',
        location:'16530-16536/2074-75'
      }

      render(){
        return (
          &lt;div className=""chart""&gt;
            &lt;Pie
              data={this.state.chartData}
              options={{
                title:{
                  display:this.props.displayTitle,
                  text:'Pie Chart for Advertisement Code '+this.props.location,
                  fontSize:25
                },
                legend:{
                  display:this.props.displayLegend,
                  position:this.props.legendPosition
                }
              }}
            /&gt;
          &lt;/div&gt;
        )
      }
}
</code></pre>

<p>my API returns very simple JSON which looks like this:-</p>

<pre><code>{
    ""male"": 74433,
    ""female"": 51442,
    ""others"": 183
}
</code></pre>

<p>i need to fetch this API data and plot the pie chart according to it. my problem here is i cannot send the API returned data to chart dataset. </p>

<p>if i send some manual data to the chart i.e </p>

<pre><code>datasets:[
          {
            label:'Population',
            data:[
           12345,54758,2154
            ],
}]
</code></pre>

<p>then it successfully plots data. but when now i have to use API fetched data instead of manually inserted data. how can i do it ?</p>

<p><strong>update:-</strong></p>

<p>my chart component was not receiving data. so i changed <code>this.state.chartData</code> to <code>this.props.chartData</code> and it half working. half working in a sense that i am now able to plot the chart but it only plots two given value out of three.</p>

<p>please see photos.</p>

<p><a href=""https://i.stack.imgur.com/hM9aM.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hM9aM.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/W1LGe.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/W1LGe.png"" alt=""enter image description here""></a></p>
","7629068","","7629068","","2018-04-01 10:49:16","2018-04-01 10:49:16","plotting pie chart using reactJs with chartjs","<javascript><reactjs><api>","1","0","","",""
"50309157","1","50309717","","2018-05-12 17:54:22","","0","67","<p>I'm trying to get the current position on google map. The code is working fine when I get the coordinates, but these coordinates I want to get and google map toom because right now, coordinates are static for google map.</p>

<pre><code> import React, { Component } from 'react';
import GoogleMapReact from 'google-map-react';
import { withGoogleMap, GoogleMap, Marker } from ""google-map-react""
import { InfoWindow } from 'google-map-react';
import Geolocation from 'react-geolocation'


const AnyReactComponent = ({ text }) =&gt; &lt;div&gt;{ text }&lt;/div&gt;;



export default class Map extends Component {


  static defaultProps = {
    center: { lat: 40.7446790, lng: -73.9485420 },
    zoom: 11
  }
render() {
    return (
      &lt;Geolocation
  render={({
    fetchingPosition,
    position: { coords: { latitude, longitude } = {} } = {},
    error,
    getCurrentPosition
  }) =&gt;
    &lt;div&gt;
      &lt;button onClick={getCurrentPosition}&gt;Get Position&lt;/button&gt;
      {error &amp;&amp;
        &lt;div&gt;
          {error.message}
        &lt;/div&gt;}
      &lt;pre&gt;
        latitude: {latitude}
        longitude: {longitude}
      &lt;/pre&gt;
      &lt;div className='google-map' style={{ height: '80vh', width: '100%' }}&gt;

        &lt;GoogleMapReact

          defaultCenter={ this.props.center }
          defaultZoom={ this.props.zoom }&gt;
          &lt;AnyReactComponent
            lat={ latitude }
            lng={ longitude }
            text={ 'Wheres Waldo?' }
          /&gt;
        &lt;/GoogleMapReact&gt;
      &lt;/div&gt;
    &lt;/div&gt;}
/&gt;
    )
  }
}
</code></pre>

<p>With Geolocation I get very well coordinates, but these coordinates want to set in: </p>

<pre><code>static defaultProps = {
    center: { lat: 40.7446790, lng: -73.9485420 },
    zoom: 11
  }
</code></pre>
","9378116","","","","","2018-05-16 18:02:10","Google map coordinates in react","<reactjs>","1","0","","",""
"50440951","1","","","2018-05-21 01:37:29","","0","109","<p>TypeScript: 2.8.3<br>
@types/react: 16.3.14</p>

<hr>

<p>The type of return in function component is <code>JSX.Element</code>, when I declare the component to <code>React.SFC</code>(alias of  <code>React.StatelessComponent</code>).</p>

<p>There are three errors occured： </p>

<ol>
<li><p><code>TS2322: Type 'Element' is not assignable to type 'StatelessComponent&lt;{}&gt;', Type 'Element' provides no match for the signature '(props: { children?: ReactNode; }, context?: any): ReactElement&lt;any&gt;'</code></p></li>
<li><p><code>TS2339: Property 'propTypes' does not exist on type '(props: LayoutProps) =&gt; StatelessComponent&lt;{}&gt;'</code></p></li>
<li><p><code>TS2339: Property 'defaultProps' does not exist on type '(props: LayoutProps) =&gt; StatelessComponent&lt;{}&gt;'</code></p></li>
</ol>

<hr>

<pre><code>interface ItemInterface {
  name: string,
  href: string,
  i18n?: string[]
}

interface LayoutHeaderItemProps extends ItemInterface{
  lang: string,
  activeHref: string,
}
function LayoutHeaderItem (props: LayoutHeaderItemProps): React.SFC{
  const {name, href, lang, activeHref, i18n} = props
  const hrefLang = /\//.test(href) ? `/${lang}` : ''
  if (!i18n.includes(lang)) return null
  return (
    &lt;a
      className={`item${href === activeHref ? ' active' : ''}`}
      key={href}
      href={hrefLang + href}
    &gt;&lt;span&gt;{name}&lt;/span&gt;&lt;/a&gt;
  )
}

LayoutHeaderItem.propTypes = {
  lang: string,
  activeHref: string,
  name: string,
  href: string,
  i18n: array
}
LayoutHeaderItem.defaultProps = {i18n: ['cn', 'en']}
</code></pre>
","5343123","","","","","2018-05-21 01:37:29","Using typescript in react，stateless component not assignable to type 'React.SFC'","<reactjs><typescript>","0","3","","",""
"41288965","1","41528086","","2016-12-22 17:41:59","","0","319","<p>I'm new in React and I'm using Semantic-ui-react. I'm trying to use the Dropdown.</p>

<p>When I want to get my value from the dropdown and call my function. My event get some proxy object.</p>

<pre><code>  handleTagChange(e) {
    console.log(""handleTagChange"");
    console.log(e);
  }
</code></pre>

<p>But if I add something else like test in the function, the e.target.value works and test is the proxy object. Why is that?</p>

<pre><code>  handleTagChange(test, e) {
    console.log(""handleTagChange"");
    console.log(test);
    console.log(e);
  }
</code></pre>

<p>TagFilter.js</p>

<pre><code>import React, { PropTypes } from 'react';
import { Dropdown } from 'semantic-ui-react'

export default class TagFilter extends React.PureComponent {
  render() {
  console.log(this.props);
    const options = [
      { ""text"": ""Admin stuff"", ""value"": ""admin stuff"" },
      { ""text"": ""Frontend"", ""value"": ""frontend"" },
      { ""text"": ""JS"", ""value"": ""js"" },
      { ""text"": ""Mucking about"", ""value"": ""mucking about"" },
      { ""text"": ""React"", ""value"": ""react"" }
    ];

    return (
      &lt;Dropdown placeholder='Skills' fluid selection options={options} onChange={this.props.handleTagChange} /&gt;
    );

  }

}
</code></pre>

<p>Employee.js</p>

<pre><code>import React, { PropTypes } from 'react';
import { Image, List } from 'semantic-ui-react';

import TagFilter from './TagFilter';
import ProductFilter from './ProductFilter';
import MyModal from './Modal';

export default class Employees extends React.Component {
  //static defaultProps = {
  //}

  constructor() {
    super();
    this.closeModal = this.closeModal.bind(this);
    this.handleTagChange = this.handleTagChange.bind(this);
    this.handleProductChange = this.handleProductChange.bind(this);
  }

  state = {
    tagsFilterValue: null,
    productsFilterValue: null,
    employeeDetails: null,
    openModal: false
  }

  handleTagChange(e) {
    console.log(""handleTagChange"");
    console.log(e);
  }

  handleProductChange(e) {
    let productValue = e.target.value;
    this.setState({productsFilterValue: productValue});
  }

  handleEmployeeClick(name, e) {
    this.setState({employeeDetails: name});
    this.setState({openModal: true});
  }

  closeModal() {
    this.setState({openModal: false});
  }

  render() {
    let filteredEmployees = this.props.data.filter(
      (employee) =&gt; {
        // If state tagsFilterValue and productsFilterValue is not null
        if (this.state.tagsFilterValue &amp;&amp; this.state.productsFilterValue) {
          return employee.tags.indexOf(this.state.tagsFilterValue) !== -1 &amp;&amp; employee.products.indexOf(this.state.productsFilterValue) !== -1;
        }
        // If state tagsFilterValue is not null
        else if (this.state.tagsFilterValue) {
          return employee.tags.indexOf(this.state.tagsFilterValue) !== -1;
        }
        // If state productsFilterValue is not null
        else if (this.state.productsFilterValue) {
          return employee.products.indexOf(this.state.productsFilterValue) !== -1;
        }
        else {
          return employee;
        }
      }
    );


    let employeeDetails = this.props.data.filter(
      (employee) =&gt; {
          return employee.name.indexOf(this.state.employeeDetails) !== -1;
      }
    );


    return (
      &lt;div&gt;
        { employeeDetails.map((employee) =&gt; (
          &lt;MyModal employeeDetails={employee} closeModal={this.closeModal} openModal={this.state.openModal} /&gt;
        ))}

        &lt;div className=""ui grid""&gt;
          &lt;TagFilter handleTagChange={this.handleTagChange} tagsFilterValue={this.state.tagsFilterValue} /&gt;
          &lt;ProductFilter handleProductChange={this.handleProductChange} productsFilterValue={this.state.productsFilterValue} /&gt;
        &lt;/div&gt;

        &lt;List&gt;
        { filteredEmployees.map((employee) =&gt; (
          &lt;List.Item key={employee.name}&gt;
          &lt;div className=""ui card""&gt;
            &lt;div className=""image""&gt;
              &lt;img alt=""User avatar"" src={employee.image}/&gt;
            &lt;/div&gt;
            &lt;div className=""content""&gt;
              &lt;a className=""header"" onClick={this.handleEmployeeClick.bind(this, employee.name)}&gt;{employee.name}&lt;/a&gt;
              &lt;div className=""meta""&gt;{employee.title}&lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;/List.Item&gt;
        ))}
        &lt;/List&gt;

      &lt;/div&gt;
    );
  }
}
</code></pre>
","7201446","","6488546","","2017-06-07 13:12:18","2017-06-07 13:12:18","React and Semantic-ui-react, proxy event","<reactjs><semantic-ui-react>","1","1","","",""
"43937887","1","43938322","","2017-05-12 12:33:06","","3","2504","<p>What I wan't to do is to show the location picked from some mobile devices on the Map.
Data about the locations are there.. </p>

<p>What I need here is to add Markers on the map depending on the data received from the server. </p>

<p>Assume I have set the location data <strong>({Lat,Lang})</strong> to the <strong>state markers</strong> 
Then How can I add this to show in Map.</p>

<p>My Map Code is as follows!</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>import React, { Component } from 'react';
import GoogleMapReact from 'google-map-react';

const AnyReactComponent = ({ text }) =&gt; &lt;div&gt;{text}&lt;/div&gt;;

class MyClass extends Component {
  constructor(props){
    super(props);

  }

  render() {
    return (
      &lt;GoogleMapReact
        defaultCenter={this.props.center}
        defaultZoom={this.props.zoom}
        style={{height: '300px'}}
      &gt;
        &lt;AnyReactComponent
          lat={59.955413}
          lng={30.337844}
          text={'Google Map'}
        /&gt;
      &lt;/GoogleMapReact&gt;
    );
  }
}
MyClass.defaultProps = {
  center: {lat: 59.95, lng: 30.33},
  zoom: 11
};

export default MyClass;</code></pre>
</div>
</div>
</p>

<p>This Code is from the answer <a href=""https://stackoverflow.com/questions/43580092/implementing-google-maps-with-react"">Implementing google maps with react</a> </p>

<p>Used npm package :- google-map-react</p>
","4950185","","4652706","","2018-04-04 11:44:36","2018-04-04 11:44:36","Dynamically Adding Markers on react-google-map","<javascript><reactjs><google-maps>","2","0","1","",""
"49656942","1","49657112","","2018-04-04 17:23:57","","0","54","<p>If i use marker tag then my component not working and it throwing an error some thing like this</p>

<p><a href=""https://i.stack.imgur.com/FK30L.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FK30L.png"" alt=""enter image description here""></a></p>

<p><strong>my code is:</strong></p>

<pre><code>import React, { Component } from 'react';
import GoogleMap, { Marker } from 'google-map-react';

class Maps extends Component {
  static defaultProps = {
    center: {lat: 22.741033, lng: 81.102441},
    zoom: 5
  };
  render() {
    return (
      &lt;GoogleMap
        bootstrapURLKeys={{ key: ['AIzaSyAA1WZznnpeoP6hZz26UiARGNOhZhYLZek'] }}
        defaultCenter={this.props.center}
        defaultZoom={this.props.zoom}
        style={{height: '300px'}}
      &gt;
      &lt;Marker
        position={this.props.center}
      /&gt;
      &lt;/GoogleMap&gt;
    );
  }
}

export default Maps;
</code></pre>
","4652706","","4652706","","2018-04-04 19:19:22","2018-04-04 20:24:35","google-map-react: Element type is invalid: expected a string","<javascript><reactjs><google-maps><google-maps-markers><google-map-react>","2","2","","",""
"44406350","1","44406983","","2017-06-07 07:34:24","","0","942","<p>How can I get value from bootstrap modal? I'm using <code>reacstrap</code>  <a href=""https://github.com/reactstrap"" rel=""nofollow noreferrer"">https://github.com/reactstrap</a></p>

<p>Here is my page that call the modal</p>

<pre><code>import { ButtonGroup, Button, Input, Row, Col } from 'reactstrap';
import RegisterLookup from '../lookup/RegisterLookup';

&lt;RegisterLookup
  isOpen={this.state.register}
  toggle={this.toggleRegister}
  className={''}
/&gt;
</code></pre>

<p>and here is my modal component:</p>

<pre><code>  register() {
    console.log(""da"")
  }

render() {
    return (
      &lt;div&gt;
        &lt;Modal isOpen={this.props.isOpen} toggle={this.props.toggle} className={this.props.className} size=""lg""&gt;
          &lt;ModalHeader toggle={this.props.toggle}&gt;Register&lt;/ModalHeader&gt;
          &lt;ModalBody&gt;
            &lt;div className=""row mb-2""&gt;
              &lt;div className=""col-sm-12""&gt;
                &lt;Row&gt;
                  &lt;Col md=""6"" xs=""12""&gt;
                    &lt;FormGroup row&gt;
                      &lt;Label sm=""4""&gt;Enter your name &lt;span className=""text-danger""&gt;*&lt;/span&gt;&lt;/Label&gt;
                      &lt;Col&gt;
                        &lt;Input /&gt;
                      &lt;/Col&gt;
                    &lt;/FormGroup&gt;
                  &lt;/Col&gt;
                &lt;/Row&gt;
              &lt;/div&gt;
            &lt;/div&gt;

          &lt;/ModalBody&gt;
          &lt;ModalFooter&gt;
            &lt;Button className=""pull-right"" type=""button"" color=""primary"" onClick={() =&gt; { this.register(); }}&gt;
              &lt;span className=""hidden-xs-down""&gt;Register &lt;/span&gt;
            &lt;/Button&gt;
          &lt;/ModalFooter&gt;
        &lt;/Modal&gt;
      &lt;/div&gt;
    );
  }
}

RegisterLookup.defaultProps = {
  isOpen: PropTypes.bool,
  toggle: PropTypes.func,
  className: PropTypes.string,
};

RegisterLookup.propTypes = {
  isOpen: PropTypes.bool,
  toggle: PropTypes.func,
  className: PropTypes.string,
};
</code></pre>

<p>It show the modal : 
<a href=""https://i.stack.imgur.com/ONpoK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ONpoK.png"" alt=""enter image description here""></a></p>

<p>but how can I get the value I enter in modal to my page that call the modal? Thanks in advance.</p>
","894470","","","","","2017-06-07 08:11:50","How can I get value from react modal bootstrap?","<twitter-bootstrap><reactjs><modal-dialog><bootstrap-4><reactstrap>","1","0","","",""
"45196387","1","45238592","","2017-07-19 16:42:24","","0","241","<p>I'm using the <a href=""https://github.com/tomchentw/react-google-maps"" rel=""nofollow noreferrer""><code>react-google-maps</code></a> package for react, and for some reason when it renders it's just grey. If the responsive state changes then it does appear weirdly.</p>

<p><a href=""https://i.stack.imgur.com/c24BD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/c24BD.png"" alt=""when rendered""></a></p>

<p>I've wrapped the package in a custom component for re-usablility, and the code is:</p>

<pre><code>import _ from 'lodash';
import exact from 'prop-types-exact';
import propTypes from 'prop-types';
import withScriptjs from 'react-google-maps/lib/async/withScriptjs';
import { GoogleMap as GMap, withGoogleMap } from 'react-google-maps';
import React, { Component } from 'react';

const apiKey = 'api_key';

const AsyncMap = _.flowRight(
    withScriptjs,
    withGoogleMap,
    )(props =&gt; (
        &lt;GMap
            defaultCenter={props.defaultCenter}
            defaultZoom={props.defaultZoom}
            onClick={props.onClick}
            ref={props.onMapLoad}
        &gt;
            {props.children}
        &lt;/GMap&gt;
    ));

class GoogleMap extends Component {
    render() {
        return (
            &lt;AsyncMap
                googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&amp;key=${apiKey}`}
                loadingElement={&lt;div&gt;{'loading...'}&lt;/div&gt;}
                {...this.props}
            /&gt;
        );
    }
}

GoogleMap.propTypes = exact({
    containerElement: propTypes.object,
    defaultCenter: propTypes.object.isRequired,
    defaultZoom: propTypes.number,
    mapElement: propTypes.object,
    onClick: propTypes.func,
});

GoogleMap.defaultProps = {
    containerElement: (&lt;div style={{ height: '250px' }} /&gt;),
    mapElement: (&lt;div style={{ height: '250px' }} /&gt;),
    defaultZoom: 5,
    onClick: _.noop,
};

export default GoogleMap;
</code></pre>

<p>And it's called like so:</p>

<pre><code>&lt;GoogleMap
    containerElement={&lt;div className={'overnight-storage-map'} style={{ height: '250px' }} /&gt;}
    defaultCenter={storageLocation}
    defaultZoom={3}
&gt;
    &lt;Marker
        defaultAnimation={2}
        key={`marker-${s.id}`}
        position={storageLocation}
    /&gt;
&lt;/GoogleMap&gt;
</code></pre>
","1509611","","","","","2017-07-21 13:10:55","Google Maps element is just grey in react app","<google-maps><reactjs>","1","4","","",""
"36588059","1","36614209","","2016-04-13 03:34:01","","1","3670","<p>I a using webpack and reactjs in my project and now I want to integrate google map api. First I added ""react-google-maps"": ""^4.9.1"" on my package.json file. Below is my component class.</p>

<pre><code>import React, {PropTypes, Component} from 'react';

import { GoogleMap, Marker, SearchBox } from ""react-google-maps"";
import shouldPureComponentUpdate from 'react-pure-render/function';

const greatPlaceStyle = {
  // initially any map object has left top corner at lat lng coordinates
  // it's on you to set object origin to 0,0 coordinates
  position: 'absolute',
  width: 512,
  height: 512,
  left: 512 / 2,
  top: 512 / 2,

  border: '5px solid #f44336',
  borderRadius: 512,
  backgroundColor: 'white',
  textAlign: 'center',
  color: '#3f51b5',
  fontSize: 16,
  fontWeight: 'bold',
  padding: 4
};

export default class SimpleMapPage extends Component {
  static defaultProps = {
    center: {lat: 59.938043, lng: 30.337157},
    zoom: 1,
    greatPlaceCoords: {lat: 59.724465, lng: 30.080121}
  };

  shouldComponentUpdate = shouldPureComponentUpdate;

  constructor(props) {
    super(props);
  }

  render() {
    return (
       &lt;GoogleMap&gt;

        defaultCenter={this.props.center}
        defaultZoom={this.props.zoom}&gt;

        &lt;MyGreatPlace lat={59.955413} lng={30.337844} text={'A'} /&gt;
        &lt;MyGreatPlace {...this.props.greatPlaceCoords} text={'B'} /&gt;

      &lt;/GoogleMap&gt;
    );
  }
}

export default class MyGreatPlace extends Component {
  static propTypes = {
    text: PropTypes.string
  };

  static defaultProps = {};

  //shouldComponentUpdate = shouldPureComponentUpdate;

  constructor(props) {
    super(props);
  }

  render() {
    return (
       &lt;div style={greatPlaceStyle}&gt;
          {this.props.text}
       &lt;/div&gt;
    );
  }
}
</code></pre>

<p>In my index.html file, I added below javascripts. The first one is goold map api dependency. The second one is the bundle.js which is packaged by webpack. When I access my application, the google map didn't show up. I think the problem would be failed to import google map api on my component class. What is the correct way to import googleapis? </p>

<pre><code>&lt;script src=""https://maps.googleapis.com/maps/api/js?key=AIzaSyA2sDQZ-36NLlY4iMvoiuQ7mS1n-v8iq2M"" async defer&gt;&lt;/script&gt;
    &lt;script type=""text/javascript"" src=""bundle.js"" charset=""utf-8""&gt;&lt;/script&gt;
</code></pre>
","5421539","","","","","2016-09-14 16:08:29","How to import google map in react project","<javascript><google-maps><reactjs><webpack>","2","0","1","",""
"48968025","1","","","2018-02-24 21:55:48","","0","176","<p>i'm using:</p>

<ul>
<li>react 15.6.2</li>
<li>redux-form 7.2.0</li>
<li>react-select 1.2.1</li>
</ul>

<p>i don't have a codepen set up for this yet, it's complicated. hoping someone will see the problem from the source alone.  i can dream, can't i?</p>

<p>i have a <code>redux-form</code> displaying a <code>invoice</code> object:</p>

<pre><code>invoice = { client: { email: 'someguy@somewhere.com' } }
</code></pre>

<p>summary: i'm using <code>react-select.creatable</code> as an autocomplete component for an email dropdown.  selecting an <code>email</code> sets the <code>client</code> on the <code>invoice</code>.</p>

<p><a href=""https://i.stack.imgur.com/8BGV6.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8BGV6.png"" alt=""typing and hitting enter creates and selects the new option""></a></p>

<p>when i create a new email address and select it, then blur out of the input field, the input value gets cleared.  </p>

<p><a href=""https://i.stack.imgur.com/mbChJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mbChJ.png"" alt=""enter image description here""></a></p>

<p>the new <code>client</code> on the <code>invoice</code> form still gets set correctly in the redux store, it just gets cleared from the Field's input value.  why?</p>

<ul>
<li><p>please note i am already manually calling input.onBlur() from the <code>Select</code> with the correct value, as per other answers.  i think this has something to do with creating a new option.</p>

<p>// redux-form field wrapping the custom autocomplete component</p>

<p>const clientOptions = clients.map(client => ({ label: client.email, value: client }))
const isValidNewOption = ({ label }) => email.REG_EMAIL.test(label)
const promptTextCreator = (label) => (<code>Send to ${label}</code>)
const newOptionCreator = ({label, labelKey, valueKey}) => {
  return { label: label, value: { email: label } }
}</p>

<p></li>
</ul>

<p>// RFReactSelect, a react-select Creatable to act as an autocomplete with the ability to create a new option</p>

<pre><code>import React, { PropTypes } from 'react';
import Select from 'react-select';
import 'react-select/dist/react-select.css';

RFReactSelect.defaultProps = {
  multi: false,
  className: """"
};

RFReactSelect.propTypes = {
  input: PropTypes.shape({
    name: PropTypes.string.isRequired,

    onBlur: PropTypes.func.isRequired,
    onChange: PropTypes.func.isRequired,
    onFocus: PropTypes.func.isRequired,
  }).isRequired,
  options: PropTypes.array.isRequired,
  multi: PropTypes.bool,
  className: PropTypes.string,
  onNewOptionClick: PropTypes.func,
};

export default function RFReactSelect(props) {
  const { input , options, multi, className,
    newOptionCreator, promptTextCreator, isValidNewOption } = props
  const { name, value, onBlur, onChange, onFocus } = input;
  const transformedValue = transformValue(value, options, multi);

  return (
    &lt;Select.Creatable
      className={className}
      isValidNewOption={isValidNewOption}
      name={name}
      multi={multi}
      newOptionCreator={newOptionCreator}
      onSelectResetsInput={false}
      onBlurResetsInput={false}
      options={options}
      onChange={multi
        ? multiChangeHandler(onChange)
        : singleChangeHandler(onChange)
      }
      onBlur={() =&gt; onBlur(value)}
      onFocus={onFocus}
      promptTextCreator={promptTextCreator}
      value={transformedValue}
      valueKey='value'
    /&gt;
  );
}

/**
 * onChange from Redux Form Field has to be called explicity.
 */
function singleChangeHandler(func) {
  return function handleSingleChange(value) {
    func(value ? value.value : '');
  };
}

/**
 * onBlur from Redux Form Field has to be called explicity.
 */
function multiChangeHandler(func) {
  return function handleMultiHandler(values) {
    func(values.map(value =&gt; value.value));
  };
}

/**
 * For single select, Redux Form keeps the value as a string, while React Select
 * wants the value in the form { value: ""grape"", label: ""Grape"" }
 *
 * * For multi select, Redux Form keeps the value as array of strings, while React Select
 * wants the array of values in the form [{ value: ""grape"", label: ""Grape"" }]
 */
function transformValue(value, options, multi) {
  if (multi &amp;&amp; typeof value === 'string') return [];

  const filteredOptions = options.filter(option =&gt; {
    return multi
      ? value.indexOf(option.value) !== -1
      : option.value === value;
  });

  return multi ? filteredOptions : filteredOptions[0];
}
</code></pre>
","1475758","","","","","2018-02-24 23:36:22","with redux-form and react-select.creatable why does a blur event clear the input?","<reactjs><autocomplete><redux-form><react-select>","1","0","","",""
"44267295","1","44281768","","2017-05-30 16:18:30","","0","138","<p>I'm new to react and trying to manage the navigation in my web app with react-router.
I must be doing something wrong though, because my whole DOM is disappearing. Everything's fine while I set up the router:</p>

<p><strong>Container.js</strong></p>

<pre><code>import React, {Component} from 'react';
import SideBar from ""./sidebar/SideBar"";
import Pagina from ""./content/Pagina"";
import {
    BrowserRouter as Router,
    NavLink
} from 'react-router-dom'
import NavRoutes from ""./NavRoutes"";

class Container extends Component {
    render() {
        return (
            &lt;div id=""MyLearningContainer"" className =""container-fluid""&gt;
                &lt;SideBar/&gt;
                &lt;Pagina/&gt;
                &lt;Router&gt;
                    {NavRoutes}
                &lt;/Router&gt;
            &lt;/div&gt;
        );
    }
}


export default Container;
</code></pre>

<p><strong>NavRoutes.js</strong></p>

<pre><code>import React from 'react';
import {
    Route
} from 'react-router-dom';

import Dashboard from ""./content/Dashboard"";
import Utenti from ""./content/Utenti"";

const navRoutes = (
    &lt;Route path=""/"" component= {Dashboard}&gt;
        &lt;Route path=""utenti"" component = {Utenti} /&gt;
    &lt;/Route&gt;
);

export default navRoutes;
</code></pre>

<p>The problem arises when I make my SideBarItem generate a <code>&lt;NavLink&gt;</code> inside its usual <code>&lt;li&gt;</code>:</p>

<p><strong>SideBarItem.js</strong></p>

<pre><code>import React, {Component} from 'react';
import {
    NavLink
} from 'react-router-dom'


const defaultClass = {
    color: '#00338D',
    paddingTop: 10,
    paddingBottom: 10,
    paddingLeft: 20,
    paddingRight: 20
};

const activeClass = {
    color: '#fff',
    backgroundColor: '#428bca',
    paddingTop: 10,
    paddingBottom: 10,
    paddingLeft: 20,
    paddingRight: 20
};

class SideBarItem extends Component {
    render() {
        return (
            &lt;li&gt;
                &lt;NavLink to={(""/"" + this.props.title).toLowerCase()}&gt;
                    &lt;span className={this.props.glyph}&gt;&lt;/span&gt; {this.props.title}
                &lt;/NavLink&gt;
            &lt;/li&gt;
        );
    }
}

SideBarItem.defaultProps = {
    title: 'Undefined',
    glyph: 'glyphicon-home'
}


export default SideBarItem;
</code></pre>

<p>When I save this, the whole DOM just disappears and nothing gets rendered anymore!</p>

<hr>

<p><strong>Update</strong></p>

<p>I edited the Container.js so that SideBar is now a child of Router.</p>

<pre><code>class Container extends Component {
    render() {
        return (
            &lt;div id=""MyLearningContainer"" className=""container-fluid""&gt;
                &lt;Router&gt;
                    &lt;div&gt;
                        &lt;SideBar/&gt;
                        {NavRoutes}
                    &lt;/div&gt;
                &lt;/Router&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>Now the DOM renders just fine, but clicking on the NavLink won't make the route change: it stays on Dashboard...</p>
","7424745","","7424745","","2017-05-31 09:55:38","2017-05-31 10:06:01","react-router: whole DOM disappears when inserting NavLink","<javascript><reactjs><dom>","1","2","1","",""
"45297518","1","45479351","","2017-07-25 08:11:54","","0","314","<p>I have a bunch of functional react UI components. I want to set defaultProps to those components. However, it seems that my components do not apply those default props. Here is an example code:</p>

<pre><code>// @flow
import React from 'react'
import classNames from 'classnames/bind'

type LabelType = 'default' | 'narrow' | 'wide'

const Label = (
  props: {
    text: string,
    type: LabelType,
  }
) =&gt; {
  const { text, type } = props
  const labelClass = classNames(
    'c-label',
    `c-label--${type}`
  )

  return (
    &lt;div className={labelClass}&gt;
      {text}
    &lt;/div&gt;
  )
}

Label.defaultProps = {
  type: 'narrow',
}

export default Label
</code></pre>

<p>The result that I get is CSS class <code>c-label--undefined</code>. 
If I pass default values during object destructuring, <code>const { type = 'narrow' }</code> it works fine. The above code works also when I convert functional component to a class-based component. </p>

<p>I have researched this issue a lot but I haven't been able to find a solution. Of course, I could pass the default values during destructuring but it is harder to read and my company would like to adopt the pattern that I have described. 
I've seen some articles describing that it is possible to pass defaultProps to functional components but perhaps that has changed? I would appreciate any suggestions. </p>
","6751838","","","","","2017-08-03 08:52:34","Setting defaultProps on functional component in React","<javascript><reactjs>","2","3","0","",""
"49958129","1","","","2018-04-21 16:58:22","","0","42","<p>I'm working on uploading images on my react app, the idea is to save the images in my object, send it to my back end and upload them to clodinary but right now i cant seem to put the files in my object array:</p>

<p>Component:</p>

<pre><code>import React, {Component} from 'react';
import {connect} from 'react-redux';
import PropTypes from 'prop-types';
import Dropzone from 'react-dropzone';
import {
    Grid,
    Row,
    Col,
    FormControl,
    FormGroup,
    Button,
    ButtonToolbar,
    Label
} from 'react-bootstrap';

import {Dwelling} from '../../../model';
import {requestSaveDwelling} from '../../../actions';

class New3 extends Component {
    static propTypes = {
        requestSaveDwelling: PropTypes.func.isRequired,
        history: PropTypes.shape({
            push: PropTypes.func.isRequired
        }).isRequired,
        dwelling: PropTypes.shape({})
    };

    static defaultProps = {
        dwelling: new Dwelling()
    };

    constructor(props) {
        super(props);
        this.state = {dwelling: new Dwelling()};
        if (this.props.dwelling) {
            this.state = this.props;
        }
    }

    handleChange({target: {id, value}}) {
        this.setState(
            state =&gt; ({
                dwelling: (Object.assign(state.dwelling, {[id]: value}))
            })
        );
    }

    handleDrop(file) {
        this.setState(
            state =&gt; ({
                dwelling: (Object.assign(state.dwelling.images, file))
            })
        );
    }


    handleSubmit() {
        const {dwelling} = this.state;
        this.props.requestSaveDwelling(dwelling);
        this.props.history.push('/dwellings/latest');
    }

    render() {
        const {dwelling} = this.state;
        console.log(dwelling);
        return (
            &lt;Grid className=""animated fadeIn""&gt;
                &lt;Row&gt;
                    &lt;Col sm={12}&gt;
                        &lt;h2&gt;Carga de Imágenes&lt;/h2&gt;

                        &lt;Dropzone
                            onDrop={this.handleDrop}
                            multiple
                            accept=""image/*""
                        &gt;
                            &lt;p&gt;Arrastre Imagenes aquí, o haga click para seleccionar imagenes.&lt;/p&gt;
                        &lt;/Dropzone&gt;
                        {this.state.dwelling.images.length &gt; 0 ?
                            &lt;div&gt;
                                &lt;h2&gt;Uploading {this.state.dwelling.images.length} files...&lt;/h2&gt;
                                &lt;div&gt;{this.state.dwelling.images.map(file =&gt; &lt;img src={file.preview}/&gt;)}&lt;/div&gt;
                            &lt;/div&gt; : null}
                    &lt;/Col&gt;
                &lt;/Row&gt;
                &lt;Row&gt;
                    &lt;Col sm={12}&gt;
                        &lt;FormGroup controlId=""occupationStatus""&gt;
                            &lt;Label&gt;Estado Ocupacional&lt;/Label&gt;
                            &lt;FormControl
                                componentClass=""select""
                                value={dwelling.occupationStatus}
                                placeholder=""Seleccione""
                                onChange={e =&gt; this.handleChange(e)}
                            &gt;
                                &lt;option disabled label=""Seleccione""/&gt;
                                &lt;option value=""Disponible"" label=""Disponible""/&gt;
                                &lt;option value=""Alquilada"" label=""Alquilada""/&gt;
                                &lt;option value=""Vendida"" label=""Vendida""/&gt;
                                &lt;option value=""Reservada"" label=""Reservada""/&gt;
                                &lt;option value=""Suspendida"" label=""Suspendida""/&gt;
                            &lt;/FormControl&gt;
                        &lt;/FormGroup&gt;
                    &lt;/Col&gt;
                &lt;/Row&gt;
                &lt;Row&gt;
                    &lt;Col sm={12}&gt;
                        &lt;h2&gt;Descripción General&lt;/h2&gt;
                        &lt;FormGroup controlId=""generalDescription""&gt;
                            &lt;FormControl
                                componentClass=""textarea""
                                value={dwelling.generalDescription}
                                onChange={e =&gt; this.handleChange(e)}
                                placeholder=""Escriba una Descripcion general""
                            /&gt;
                        &lt;/FormGroup&gt;
                    &lt;/Col&gt;
                &lt;/Row&gt;
                &lt;Row&gt;
                    &lt;Col sm={12}&gt;
                        &lt;h2&gt;Descripción Privada&lt;/h2&gt;
                        &lt;FormGroup controlId=""privateDescription""&gt;
                            &lt;FormControl
                                componentClass=""textarea""
                                value={dwelling.privateDescription}
                                onChange={e =&gt; this.handleChange(e)}
                                placeholder=""Escriba una Descripcion privada""
                            /&gt;
                        &lt;/FormGroup&gt;
                    &lt;/Col&gt;
                &lt;/Row&gt;
                &lt;Row&gt;
                    &lt;Col sm={6}&gt;
                        &lt;ButtonToolbar className=""pull-left""&gt;
                            &lt;Button href=""#/dwellings/new2""&gt;Atrás&lt;/Button&gt;
                        &lt;/ButtonToolbar&gt;
                    &lt;/Col&gt;
                    &lt;Col sm={6}&gt;
                        &lt;ButtonToolbar className=""pull-right""&gt;
                            &lt;Button onClick={() =&gt; this.handleSubmit()}&gt;Guardar&lt;/Button&gt;
                        &lt;/ButtonToolbar&gt;
                    &lt;/Col&gt;
                &lt;/Row&gt;
            &lt;/Grid&gt;
        );
    }
}

export default connect(
    state =&gt; ({
        dwelling: state.dwelling.dwelling
    }),
    dispatch =&gt; ({
        requestSaveDwelling: dwelling =&gt; dispatch(requestSaveDwelling(dwelling))
    })
)(New3);
</code></pre>

<p>object model:</p>

<pre><code>export default class Dwelling {
    _id = undefined;
    publicationType = '';
    address = {
        address: '',
        latitude: null,
        longitude: null
}
    images = [];
constructor(obj) {
        Object.assign(this, obj);
    }
}
</code></pre>

<p>when i try to upload an image i get this error: 
New3.js:51 Uncaught TypeError: Cannot read property 'images' of undefined
    at Dropzone. (New3.js:51)</p>
","7124925","","7124925","","2018-04-21 17:55:08","2018-04-24 08:56:20","Uploading images to state in react","<image><reactjs><dropzone>","1","7","","",""
"41340676","1","41340921","","2016-12-27 07:13:12","","3","1075","<p>I use the React to write this demo. I use the Webpack to build this demo.When I start this demo, the error will show me.</p>

<blockquote>
  <p>ERROR in ./src/app.js
  Module build failed: SyntaxError: Unexpected token (8:24)  </p>
</blockquote>

<pre><code> import React, {Component} from 'react';
    import ReactDOM from 'react-dom';
class Button extends Component {
    constructor(props){
        super(props);

    }
    static defaultProps = {
        color:'blue',
        text: 'Confirm',
    }
    render (){
        return (
            &lt;button className={'btn btn-${color}'}&gt;
                &lt;em&gt;{text}&lt;/em&gt;
                &lt;p&gt;This is a button.&lt;/p&gt;
            &lt;/button&gt;
        );
    }
}
ReactDOM.render(&lt;Button /&gt;, document.getElementById('app'));
</code></pre>

<p>I read this demo from a book. Due to the book is probably print the wrong code. So I ask this question now.  </p>

<p>The error show <code>static defaultProps = {</code> is not  right. The book is also written with this form.  Do you know the right code? </p>
","4952106","","","","","2017-01-01 02:11:07","ReactJs, the SyntaxError with `static defaultProps`","<reactjs>","2","0","","",""
"36752184","1","36752883","","2016-04-20 18:27:42","","0","1703","<p>I am developing a React component that contains some child components. I would like it to have a default set of children, if its element is created without specifying children (i.e. <code>&lt;MyContainerComponent ... /&gt;</code> should be equivalent to <code>&lt;MyContainerComponent ...&gt;&lt;!-- some default child elements --&gt;&lt;/MyContainerComponent&gt;</code>).</p>

<p>From <a href=""https://github.com/facebook/react/blob/v0.14.8/src/isomorphic/classic/element/ReactElement.js#L135"" rel=""nofollow"">https://github.com/facebook/react/blob/v0.14.8/src/isomorphic/classic/element/ReactElement.js#L135</a>, I understand that <code>props.children</code> will be <code>undefined</code> if no children are specified. Thus, I would like to rely on this and set <code>children</code> in the <code>defaultProps</code> of <code>MyContainerComponent</code>. </p>

<p>I am not sure, however, if I am coupling my decision too much with React's implementation (i.e. by design, as a user of React, is it acceptable to treat <code>children</code> just like any other prop that would be undefined if you did not explicitly define it). All other materials I read on <code>children</code> treat is as either a single element, or an array, but not potentially <code>undefined</code>.</p>

<p>I'd really appreciate a more experienced opinion.</p>
","5460231","","","","","2016-04-20 19:02:39","Setting children in defaultProps","<reactjs>","2","0","1","",""
"44873836","1","","","2017-07-02 18:14:57","","0","198","<p><strong>Overview</strong>
I have tried to use flex box on android for an hour now, and could not seem to get it to work. So I have taken a simple snippet from the react-native site to demonstrate my issue.</p>

<p><strong>Main Issue</strong></p>

<p><code>exampleContainer: { flex: 1 }</code></p>

<p>will not account for android screen space.</p>

<p><strong>Picture Proof</strong></p>

<p><a href=""https://i.stack.imgur.com/rPZoz.png"" rel=""nofollow noreferrer"">ios vs Android</a></p>

<p><strong>Code Snippet</strong></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>export default class App extends Component {
  constructor(props){
    super(props);
    this.state = {
      environment: props.environment,
      message: `Environment: ${props.environment}`
    }
  }

  static defaultProps() {
    return {environment: ""Unknown""}
  }

  render(){
    return (
          // Try setting `alignItems` to 'flex-start'
          // Try setting `justifyContent` to `flex-end`.
          // Try setting `flexDirection` to `row`.
          &lt;View style={{
            flex: 1,
            alignSelf: 'stretch',
            flexDirection: 'column',
            justifyContent: 'center',
            alignItems: 'center'
          }}&gt;
            &lt;View style={{width: 50, height: 50, backgroundColor: 'powderblue'}} /&gt;
            &lt;View style={{width: 50, height: 50, backgroundColor: 'skyblue'}} /&gt;
            &lt;View style={{width: 50, height: 50, backgroundColor: 'steelblue'}} /&gt;
          &lt;/View&gt;
        );
  }
}</code></pre>
</div>
</div>
</p>

<p><strong>UPDATE</strong>
I fixed this issue by giving root node (./index..js) a flex style.</p>

<p><a href=""https://i.stack.imgur.com/qPd3j.png"" rel=""nofollow noreferrer"">Solution and Picture</a></p>
","8244630","","8244630","","2017-07-02 19:56:10","2017-07-02 19:57:46","react native flexbox issue on Android","<react-native><flexbox><react-native-android>","1","0","","",""
"44824667","1","44824777","","2017-06-29 12:05:09","","5","69","<p>I recently started using react and I tend to define default values like this:</p>

<pre><code>class TextInput extends Component {
    render() {
        return (
            &lt;input 
                type=""text"" 
                name={ this.props.inputName || 'inputName' } 
                style={ this.props.inputStyle || {} } 
                className={ this.props.inputClass || '' } 
            /&gt;
        );
     }
}
</code></pre>

<p>instead of:</p>

<pre><code>class TextInput extends Component {
    render() {
        return (
            &lt;input 
                type=""text"" 
                name={ this.props.inputName} 
                style={ this.props.inputStyle} 
                className={ this.props.inputClass} 
            /&gt;
        );
     }
}

TextInput.defaultProps = {
    inputName: 'inputName',
    inputStyle: {},
    inputClass: ''
}
</code></pre>

<p>What disadvantages does this approach have in contrast to using <code>defaultProps</code>?</p>
","8231452","","2030321","","2017-06-29 12:25:57","2017-06-29 12:44:31","defaultProps vs logical OR","<javascript><reactjs>","2","0","","",""
"44978461","1","","","2017-07-07 19:34:04","","1","39","<p>I'm trying to write a utility function to get the (first) <code>title</code> propery of the current component (of the route).</p>

<p>I can get the tile property of the route:</p>

<pre><code>function getPageTitleByRoutes(routes) {
  for (let i = routes.length - 1; i &gt;= 0; i -= 1) {
    if (routes[i].hasOwnProperty('title')) {
      return routes[i].title;
    }
  }

  return null;
}
</code></pre>

<p>But now I want move the title prop to my components:</p>

<pre><code>function getPageTitle(props) {
  // ?? Iterate recurively ?? Context ok on render ??
  React.Children.forEach(props.children, (child, i) =&gt; {
    console.log(child + ' at index: ' + i);
    // If it has title
    // ??
    // ??
    if(title) return title;
    return getPageTitle(child.props);
  });

  return null;
}
</code></pre>

<p>I have a component setup like this under react router:</p>

<pre><code>&lt;Router&gt;
  &lt;Route path=""/"" title=""App Title"" component={App}&gt;
    &lt;Route path=""page1"" title=""Comp A"" component={Comp1} /&gt;
    &lt;Route path=""page2"" title=""Comp B"" component={Comp2} /&gt;
  &lt;/Route&gt;
  &lt;Route path=""/login"" title=""Login Comp"" component={Login} /&gt;
&lt;/Router&gt;


var NavBar = React.createClass({
  render() {
    const someTitle = getPageTitleByRoutes(this.props.routes);
    // Line above works but now want to get 'title' (defaultProps)
    // from ""active/routed"" component:
    const someTitle = getPageTitle(this.props);
    return (
      &lt;div&gt;
        &lt;h2&gt;{someTitle}&lt;/h2&gt;
        &lt;ul&gt;
          &lt;a onClick={() =&gt; history.push('page1') }&gt;Page 1&lt;/a&gt;
          &lt;a onClick={() =&gt; history.push('page2') }&gt;Page 2&lt;/a&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    )
  }
});
</code></pre>

<p>Then I create my app like this:</p>

<pre><code>var App = React.createClass({
  render() {
    return (
      &lt;div&gt;
        &lt;NavBar /&gt;
        {this.props.children}
      &lt;/div&gt;
    )
  }
});
</code></pre>

<p>Maybe there is another approach? I also have react-redux connected...</p>
","39114","","","","","2017-07-08 15:29:07","Recursively scanning for a child propery or state via script in reactjs","<reactjs><react-router>","1","0","","",""
"44980723","1","44980724","","2017-07-07 22:49:53","","1","411","<p><strong>My Component:</strong> </p>

<pre><code>// @flow
import React from 'react'

type Props = {
  close: Function,
  name: string
}

const MyComponent = ({ close, name }: Props) =&gt; (
  &lt;div className='click' onClick={close}&gt;
    {name}
  &lt;/div&gt;
)

export default MyComponent
</code></pre>

<p><strong>My Enzyme Test:</strong></p>

<pre><code>// @flow
import React from 'react'
import assert from 'assert'
import { shallow } from 'enzyme'
import sinon from 'sinon'

import MyComponent from 'client/apps/spaces/components/slideouts/record-settings/myc'

const defaultProps = {
  close: () =&gt; {},
  name: 'My Name'
}

const render = (props) =&gt; shallow(&lt;MyComponent {...defaultProps} {...props} /&gt;)

describe('&lt;MyComponent /&gt;', () =&gt; {
  it('renders the name', () =&gt; {
    const component = render()

    assert.equal(component.find('.click').text(), 'My Name')
  })

  it('calls close on Click', () =&gt; {
    const close = sinon.spy()
    const component = render({ close })
    const clickableDiv = component.find('.click')
    clickableDiv.simulate('click')

    assert(close.calledOnce)
  })
})
</code></pre>

<p>The tests pass, but it is giving me the following flow error on my 'MyComponent' declaration which refers to the rendering line in my test, despite <code>name</code> definitely being passed in as part of the <code>defaultProps</code> object that is passed into the component:</p>

<blockquote>
  <p>property 'name' Property not found in props of react element
  'MyComponent'</p>
</blockquote>
","5574258","","901387","","2017-07-10 15:35:36","2017-07-10 15:35:36","'flow property not found in props of react element' when is present for enzyme rendering of component","<javascript><reactjs><flowtype><enzyme>","1","0","1","",""
"44516973","1","44518917","","2017-06-13 09:06:18","","0","286","<p>Basically I want to add an static HTML to a react component from external script.</p>

<p>So I'm saving the reference of <code>this</code> to window variable as follows:</p>

<pre><code>let { PropTypes } = React;

export default class Body extends React.Component {
  constructor(){
    super();
    let frmTrgt={};
    frmTrgt.refff=this;
    console.log(""tthis: "",this);
    window.bdyRefrence=frmTrgt;
  }
  static defaultProps = {
    items: []
  };

  static propTypes = {
    items: PropTypes.array.isRequired
  };

  render() {
    return (
      &lt;div className={styles.body}&gt;
        &lt;h1 className={styles.header}&gt;React Seed&lt;/h1&gt;
        &lt;p&gt;This is an example seed app, powered by React, ES6 &amp;amp; webpack.&lt;/p&gt;
        &lt;p&gt;Here is some example data:&lt;/p&gt;
        &lt;Menu items={this.props.items} /&gt;
        &lt;div&gt;
          &lt;h1&gt;Dynamic Content&lt;/h1&gt;
          &lt;div id=""myDynamicContent""&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p>and in my script tag in INDEX.html( Outside Script) I'm doing like following:</p>

<pre><code>function addPHtml() {
      try {
        window.bdyRefrence.refff.refs.formTarget.insertAdjacentHTML(""&lt;p id='mhere'&gt;paragraph 2&lt;/p&gt;"");
      }catch (err){
        console.log(""err: "",err);
      }
    }
</code></pre>

<p>but when I'm calling addPHtml it is giving following error:</p>

<pre><code>err:  TypeError: Cannot read property 'insertAdjacentHTML' of undefined
    at addPHtml ((index):19)
    at &lt;anonymous&gt;:1:1
</code></pre>
","4655241","","","","","2017-06-14 06:10:39","Apanding external HTML to a react component is not working","<javascript><reactjs><components>","1","3","","",""
"45812907","1","","","2017-08-22 08:44:09","","1","656","<p>I'm trying to give my google map a different look. I'm taking this code as an instruction on how to do it: <a href=""https://github.com/wuct/react-google-maps/blob/21d70d0afd03aa802cdc69028c8ead2f35b3c1ce/examples/gh-pages/scripts/components/basics/StyledMap.js#L40-L43"" rel=""nofollow noreferrer"">https://github.com/wuct/react-google-maps/blob/21d70d0afd03aa802cdc69028c8ead2f35b3c1ce/examples/gh-pages/scripts/components/basics/StyledMap.js#L40-L43</a></p>

<p>My code looks like this so far:</p>

<pre><code>import ""./UserReportsMap.css""

import React, { Component } from 'react'
import { connect } from 'react-redux'
import { withGoogleMap, GoogleMap, Marker } from 'react-google-maps'

const Map = withGoogleMap(props =&gt; (
    &lt;GoogleMap
        defaultZoom={8}
        defaultCenter={{ lat: 53.55, lng: 10.00 }}
        defaultOptions={{
            scrollwheel: false,
            streetViewControl: false
        }}
        &gt;
        {props.markers.map((marker, index) =&gt; (
            &lt;Marker
                {...marker}
            /&gt;
        ))}
    &lt;/GoogleMap&gt;
    )
)

class UserReportsMap extends Component {

static getCloudEmoji(report) {
    return ""/img/noto/"" + report.info.clouds + "".png""}

mapReportsToMarkers = reports =&gt; (
    reports.map(report =&gt; ({
        position: {
            lat: report.info.position.latitude,
            lng: report.info.position.longitude
        },
        defaultAnimation: 2,
        key: report.id,
        options: {
            icon: UserReportsMap.getCloudEmoji(report)
        }
    }))
)

render() {
    return (
        &lt;div className=""report-map""&gt;
            &lt;Map
                containerElement={
                    &lt;div style={{ height: '100%' }} /&gt;
                }
                mapElement={
                    &lt;div style={{ height: '100%' }} /&gt;
                }
                markers={this.mapReportsToMarkers(this.props.reports)}
                styles={mapStyles}
                /&gt;
        &lt;/div&gt;
    )
     }
}

StyledMap.defaultProps = {
// The style is copy from https://snazzymaps.com/style/2/midnight-commander
mapStyles: [{""featureType"":""all"",""elementType"":""labels.text.fill"",""stylers"":[{""color"":""#ffffff""}]},{""featureType"":""all"",""elementType"":""labels.text.stroke"",""stylers"":[{""color"":""#000000""},{""lightness"":13}]},{""featureType"":""administrative"",""elementType"":""geometry.fill"",""stylers"":[{""color"":""#000000""}]},{""featureType"":""administrative"",""elementType"":""geometry.stroke"",""stylers"":[{""color"":""#144b53""},{""lightness"":14},{""weight"":1.4}]},{""featureType"":""landscape"",""elementType"":""all"",""stylers"":[{""color"":""#08304b""}]},{""featureType"":""poi"",""elementType"":""geometry"",""stylers"":[{""color"":""#0c4152""},{""lightness"":5}]},{""featureType"":""road.highway"",""elementType"":""geometry.fill"",""stylers"":[{""color"":""#000000""}]},{""featureType"":""road.highway"",""elementType"":""geometry.stroke"",""stylers"":[{""color"":""#0b434f""},{""lightness"":25}]},{""featureType"":""road.arterial"",""elementType"":""geometry.fill"",""stylers"":[{""color"":""#000000""}]},{""featureType"":""road.arterial"",""elementType"":""geometry.stroke"",""stylers"":[{""color"":""#0b3d51""},{""lightness"":16}]},{""featureType"":""road.local"",""elementType"":""geometry"",""stylers"":[{""color"":""#000000""}]},{""featureType"":""transit"",""elementType"":""all"",""stylers"":[{""color"":""#146474""}]},{""featureType"":""water"",""elementType"":""all"",""stylers"":[{""color"":""#021019""}]}]
 }

function mapStateToProps(state) {
    return {
         reports: state.reports.all
     }
}

export default connect(mapStateToProps, null)(UserReportsMap)
</code></pre>

<p>I keep getting the error </p>

<pre><code>./src/page/weather/UserReportsMap/UserReportsMap.js
Line 55:  'mapStyles' is not defined  no-undef
Line 62:  'StyledMap' is not defined  no-undef
</code></pre>

<p>Can anybody help? What am I doing wrong?</p>
","5860541","","","","","2018-07-15 04:14:40","Custom styled Google map in react-google-maps","<google-maps><reactjs>","3","0","","",""
"37061887","1","37062094","","2016-05-05 23:28:19","","5","3323","<h2>The Issue</h2>

<p>I am just getting started with enzyme and react testing. I am trying to get enzyme working with karma and webpack on a trivial react component. My issue is that <code>prop()</code> on the wrapper returns null and I am not sure why. </p>

<p><strong>Greeter.js</strong></p>

<pre><code>import React from 'react';

/*
 * A trivial component we added while trying to get the react testing  working
 * */

export default class Greeter extends React.Component {
constructor(props) {
    super(props);
    this.state = { name: props.initialName };

    this.greeterText = this.greeterText.bind(this);
}

greeterText() {
    return (&lt;p&gt;Hello, {this.state.name}!&lt;/p&gt;);
}

render() {
    return (&lt;div className=""greeter""&gt;
        {this.greeterText()}
    &lt;/div&gt;);
  }
}

Greeter.defaultProps = { initialName: ""World"" };

Greeter.propTypes = {
  initialName: React.PropTypes.string
};
</code></pre>

<p><strong>greeter.spec.js</strong></p>

<pre><code>import Greeter from '../../components/test/Greeter';
import React from 'react';
import { shallow } from 'enzyme';


describe(""Simple testing with shallow rendering"", () =&gt; {
  beforeEach(function() {
    let initialName = ""joe"";
    this.wrapper = shallow(&lt;Greeter initialName={initialName} /&gt;);
  });

  it(""renders default Greeter"", function() {
    console.log(this.wrapper.find("".greeter"").text());
    console.log(this.wrapper.debug());
    console.log(this.wrapper.state('name'));
    expect(this.wrapper.state('name')).to.equal(""joe"");
    expect(this.wrapper.prop('initialName')).to.equal(""joe"");
   });
 });
</code></pre>

<p><strong>Result</strong></p>

<blockquote>
  <p>Simple testing with shallow rendering
     × renders default Greeter
       Chrome 50.0.2661 (Windows 10 0.0.0)
     AssertionError: expected undefined to equal 'joe'
         at Assertion.assertEqual >>(F:/web/forms/node_modules/chai/chai.js:776:12)
         at Assertion.ctx.(anonymous function) [as equal] (F:web/forms/node_modules/chai/chai.js:4192:25)
         at Context. (F:web/forms/spec/components/greeter.spec.js:9:2932 &lt;- webpack:///spec/components/greeter.spec.js:18:52)</p>
</blockquote>

<p><strong>Stack</strong></p>

<ul>
<li>react 0.14.8</li>
<li>karma</li>
<li>webpack</li>
<li>enzyme 2.2.0</li>
</ul>
","207550","","","","","2016-05-06 00:00:48","Enzyme returns null for prop on shallow rendered react component","<javascript><reactjs><enzyme>","1","2","","",""
"37679530","1","37679801","","2016-06-07 12:33:38","","3","512","<p>I just followed those explantions: <a href=""https://babeljs.io/blog/2015/06/07/react-on-es6-plus"" rel=""nofollow"">https://babeljs.io/blog/2015/06/07/react-on-es6-plus</a></p>

<p>where it mentions:</p>

<pre><code>// The ES6+ way
class Video extends React.Component {
  static defaultProps = {
    autoPlay: false,
    maxLoops: 10,
  }
  static propTypes = {
    autoPlay: React.PropTypes.bool.isRequired,
    maxLoops: React.PropTypes.number.isRequired,
    posterFrameSrc: React.PropTypes.string.isRequired,
    videoSrc: React.PropTypes.string.isRequired,
  }
  state = {
    loopsRemaining: this.props.maxLoops,
  }
}
</code></pre>

<p>But if I do:</p>

<pre><code>class AddUserGeolocation extends React.Component {

  static propTypes = {
    alreadyAsked: React.PropTypes.bool.isRequired
  }

  componentDidMount {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition((position) =&gt; {
        dispatcher(addUser('You', position.coords.latitude, position.coords.longitude))
      });
      dispatcher(askedForUserLocation())
    }
  };

  render() {
    let result = this.props.alreadyAsked ? 'Asked' : 'Not yet'
    return (
      &lt;div&gt;
        {result}
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p>I get:</p>

<pre><code>ERROR in ./js/containers/AddUserGeolocation.js
Module build failed: SyntaxError: /home/augustin/Workspace/myapp/js/containers/AddUserGeolocation.js: Unexpected token (13:19)
  11 | class AddUserGeolocation extends React.Component {
  12 | 
&gt; 13 |   static propTypes = {
     |                    ^
  14 |     alreadyAsked: React.PropTypes.bool.isRequired
  15 |   }
  16 | 
</code></pre>

<p>What is wrong here?</p>

<p>I'm so confused about ES6, ES7, ES2015, Babel etc... </p>

<p>Using:</p>

<p>""</p>

<pre><code>dependencies"": {
    ""express"": ""^4.13.4"",
    ""babel-polyfill"": ""^6.3.14"",
    ""react"": ""^0.14.7"",
    ""react-dom"": ""^0.14.7"",
    ""react-redux"": ""^4.1.2"",
    ""redux"": ""^3.1.2""
  },
  ""devDependencies"": {
    ""autoprefixer"": ""^6.3.6"",
    ""autoprefixer-loader"": ""^3.2.0"",
    ""babel-core"": ""^6.9.1"",
    ""babel-loader"": ""^6.2.0"",
    ""babel-preset-es2015"": ""^6.3.13"",
    ""babel-preset-react"": ""^6.5.0"",
    ""babel-preset-react-hmre"": ""^1.1.1"",
    ""babel-register"": ""^6.3.13"",
    ""css-loader"": ""^0.23.1"",
    ""extract-text-webpack-plugin"": ""^1.0.1"",
    ""node-sass"": ""^3.7.0"",
    ""sass-loader"": ""^3.2.0"",
    ""style-loader"": ""^0.13.1"",
    ""webpack"": ""^1.13.1"",
    ""webpack-dev-middleware"": ""^1.6.1"",
    ""webpack-hot-middleware"": ""^2.10.0""
  }
</code></pre>
","1620081","","","","","2016-06-07 12:46:19","Babel Syntax error in component definition react","<reactjs><ecmascript-6><babeljs>","1","0","","",""
"45867568","1","","","2017-08-24 17:19:59","","0","611","<pre><code>interface PageProps {
    foo?: Function;
    bar: number;
}

export class PageComponent extends React.Component&lt;PageProps, {}&gt; {
    public static defaultProps: Partial&lt;PageProps&gt; = {
        foo: () =&gt; alert('Did foo')
    };

    private doFoo() {
        this.props.foo(); // Typescript Error: Object is possibly 'undefined'
    }

    public render(): JSX.Element {
        return (
            &lt;div&gt;
                &lt;span&gt;Hello, world! The number is {this.props.bar}&lt;/span&gt;
                &lt;button onClick={() =&gt; this.doFoo()}&gt;Do the Foo&lt;/button&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p><strong>Is there a way to tell Typescript that <code>props.foo</code> will <em>always</em> be defined?</strong></p>

<p>There is a very good <a href=""https://stackoverflow.com/questions/37282159/default-property-value-in-react-component-using-typescript"">SO question and answer</a> that discusses how to properly define the types for props on a component. It even discusses how you would let TS know about <code>defaultProps</code> on a <em>stateless</em> component.</p>

<p>However Typescript will still complain inside a regular component definition that your props might be undefined (as illustrated in my example above).</p>

<p>You can call it using a bang (<code>this.props.foo!()</code>) and that prevents TS from throwing an error, but it also prevents any kind of type checking on whatever you've passed in. In the example above, not a big deal. In more complex code, it has already bitten me.</p>

<p>So I am currently implementing things like this instead: </p>

<pre><code>private doFoo() {
    if (this.props.foo) this.props.foo();
}
</code></pre>

<p>That has one drawback, which I think is rather important: It makes my code a little confusing. In reality, I <em>always</em> want to call <code>this.props.foo()</code>, but it seems like, without investigating the class more closely, there are cases where nothing will happen inside the <code>doFoo</code> method. (Yes I could add a comment explaining that the <code>if</code> is only for Typescript to be happy, but I'd rather my code speak for itself when it can.)</p>

<p>My code becomes even more unnecessarily complex when I actually need to return something from <code>this.props.foo()</code>.</p>

<p>I am currently using @types/react for my type definitions.</p>
","1386201","","","","","2017-08-24 17:28:45","Typescript and React defaultProps are still being treated as possibly undefined","<reactjs><typescript>","1","0","","",""
"45637699","1","","","2017-08-11 14:30:42","","0","90","<p>I'm trying to implement some react components for a grid system.
The current implementation uses jQuery, so I need to completely reimplement the JS functionality...
The grid system adds a class to all elements that wrap to row 2 or more.</p>

<p>I also want to identify if the element is in the rows first and/or last column..</p>

<p>I'm currently using <code>ReactDOM.findDOMNode(this)</code> to get the <code>offsetTop</code> and <code>parentElement.offsetTop</code></p>

<pre><code>export default class Cell extends Component {
  static propTypes = {
    children: PropTypes.node,
  };

  static defaultProps = {
    children: '',
  };

  constructor(props){
    super(props);
    this.checkMargin = this.checkMargin.bind(this)
  }

  checkMargin() {
    this.newRow = false
    const _elm = ReactDOM.findDOMNode(this)
    this.newRow = (_elm.offsetTop &gt; _elm.parentElement.offsetTop)
  }

  componentDidMount() {
    window.addEventListener('resize', this.checkMargin)
    this.checkMargin()
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.checkMargin)
  }

  render() {
    const { children } = this.props
    return (&lt;div className={this.newRow ? 'margin-top' : ''}&gt;{children}&lt;/div&gt;)
  }
}
</code></pre>

<p>The wrapping parent looks as follows:</p>

<pre><code>export default class Grid extends Component {

  static propTypes = {
    children: PropTypes.node,
    className: PropTypes.string,
  }

  static defaultProps = {
    children: '',
    className: '',
  }

  static childContextTypes = {
    cell: PropTypes.object.isRequired,
  }

  render() {
    const className = classNames(
        'grid-wrapper',
        this.props.className
    )
    const { children } = this.props

    return (
      &lt;div className={className}&gt;
        {children}
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p>The columns can be specified with classes on either the parent or the individual cell with a <code>child-width-1-3</code> on the parent or <code>width-2-3</code> on the cell.
There are a number of issues with this implementation though...</p>

<p>The question is Two-fold:</p>

<ul>
<li>It uses findDOMNode - I haven't found a case that shows to use <code>ref</code> in this context, but the recommendation is to use ref instead of <code>findDOMNode</code>.. but all examples I have seen relates to referencing other elements.</li>
<li>It wont actually update on resize .. since the <code>margin-top</code> class adds to the offset, and thus causes the element to still have a greater offset than it's parent, even if it have moved to the first row. Is there any way I can solve this without hardcoding the css values for the margin-top in to the component, or have the user supply it each time they want to use the component (as the user might change the value of <code>margin-top</code> in their less code variable).</li>
</ul>
","1203957","","1203957","","2017-08-11 21:44:01","2017-08-11 21:44:01","Get react component offset to direct parent","<javascript><reactjs><react-dom>","0","1","","",""
"50393724","1","","","2018-05-17 14:14:35","","0","24","<p>I'm trying to implement react-transition-group in my project using the new react-router, but I'm not making it work and I do not find very clear documentation, or at least I can understand, if someone can give me a hand to see what I'm doing wrong very thankful :)</p>

<p>I only can do that with CSS Transition of react-transition-group, but i need the js animations instead of css animations.</p>

<p>Here my component</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import { Route, Switch, withRouter } from 'react-router-dom';
import { TransitionGroup, Transition } from 'react-transition-group';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import Landing from '../../pages/Landing/Landing';
import Example from '../../pages/Example/Example.js';
import { AsyncNotFound, AsyncAbout } from '../../util/async-section-handler';

import './Pages.css';

import checkProps from '../../util/check-props';

const duration = 300;

const defaultStyle = {
  transition: `opacity ${duration}ms ease-in-out`,
  opacity: 0
};

const transitionStyles = {
  entering: { opacity: 0 },
  entered: { opacity: 1 }
};

class Pages extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = { in: false };
  }

  // toggleEnterState = () =&gt; {};

  componentDidMount() {
    this.setState({ in: true });
  }

  componentWillReceiveProps(nextProps) {}

  render() {
    return (
      &lt;main className={classnames(`Pages`, this.props.className)} role=""main""&gt;
        &lt;TransitionGroup&gt;
          &lt;Transition in={this.state.in} timeout={duration}&gt;
            {state =&gt; (
              &lt;div
                style={{
                  ...defaultStyle,
                  ...transitionStyles[state]
                }}
              &gt;
                &lt;Switch location={this.props.location}&gt;
                  &lt;Route exact={true} path=""/"" component={Landing} /&gt;
                  &lt;Route exact={true} path=""/about"" component={AsyncAbout} /&gt;
                  &lt;Route exact={true} path=""/example"" component={Example} /&gt;
                  &lt;Route component={AsyncNotFound} /&gt;
                &lt;/Switch&gt;
              &lt;/div&gt;
            )}
          &lt;/Transition&gt;
        &lt;/TransitionGroup&gt;
      &lt;/main&gt;
    );
  }
}

Pages.propTypes = checkProps({
  className: PropTypes.string
});

Pages.defaultProps = {
  className: ''
};

export default withRouter(Pages);</code></pre>
</div>
</div>
</p>
","7033304","","","","","2018-05-17 14:14:35","How to implement react-transition-group?","<javascript><reactjs>","0","0","","",""
"44670595","1","","","2017-06-21 08:22:37","","2","239","<p>I try to implement simple LoginScreen with two input fields, LogIn button and Forgot password button. Navigation between the screens is implemented with the help of ""react-navigation"": ""1.0.0-beta.11"". So, when I click on Forgot password at my LoginScreen and then turn back to the LoginScreen and then click on any of the input fields - TypeError: expected dynamic type double', but had typenull' (constructing arguments for UiManager.dispatchViewManagerCommand at argument index 0) appears.
It seems that findNodeHandle returns null. But how to fix this issue??</p>

<p>React Native version: 0.44
React version: 16.0.0-alpha.6
Platform: Android</p>

<p>LoginScreen render method:</p>

<pre><code>render() {
    const passInputContainerStyle = this.state.passwordError === I18n.t('error.password.invalid')
      ? styles.inputContainerLarge : styles.inputContainer;
    if (this.props.isLoggedIn) {
      Keyboard.dismiss();
      NavigationUtils.navigateTo(this.props.navigation, 'Settings');
    }
    let errorGuy = this.verifyInputFieldsErrors();
    return (
      &lt;DismissKeyboardView style={styles.container}&gt;
        &lt;View style={styles.mainContainer}&gt;
          &lt;View style={styles.logoContainer}&gt;
            &lt;Image
              style={styles.logo}
              source={images.logo} /&gt;
          &lt;/View&gt;
          &lt;View style={styles.inputContainer}&gt;
            &lt;EditTextWithError
              hint={I18n.t('hint.email')}
              errorMsg={errorGuy.emailErrorMessage}
              errorMsgVisibility={errorGuy.emailErrorVisibility}
              keyboardType='email-address'
              eyeVisibility={false}
              eyeHidePassModeEnabled={false}
              isNextMode={true}
              nextRef={this.state.refNextInput}
              onEndEditing={() =&gt; this.onEndEditingEmail()}
              onTextChanged={(text) =&gt; this.onEmailTextChanged(text)} /&gt;
          &lt;/View&gt;
          &lt;View style={passInputContainerStyle}&gt;
            &lt;EditTextWithError
              hint={I18n.t('hint.password.common')}
              errorMsg={errorGuy.passwordErrorMessage}
              errorMsgVisibility={errorGuy.passwordErrorVisibility}
              eyeVisibility={true}
              eyeHidePassModeEnabled={true}
              isNextMode={false}
              ref={(input) =&gt; this.passInput = input}
              onEndEditing={() =&gt; this.onEndEditingPassword()}
              onTextChanged={(text) =&gt; this.onPasswordTextChanged(text)} /&gt;
          &lt;/View&gt;
          &lt;TouchableOpacity style={styles.btnContainer} onPress={() =&gt; this.onLogInPressed()}&gt;
            &lt;Text style={styles.btnText}&gt;{I18n.t('login.btnLogIn')}&lt;/Text&gt;
          &lt;/TouchableOpacity&gt;
          &lt;TouchableOpacity style={styles.fupContainer} onPress={() =&gt; this.onForgotPasswordPressed()}&gt;
            &lt;Text style={styles.fupText}&gt;{I18n.t('login.forgotPass')}&lt;/Text&gt;
          &lt;/TouchableOpacity&gt;
          {this.renderFooter()}
        &lt;/View&gt;
      &lt;/DismissKeyboardView&gt;
    );
  }
</code></pre>

<p><strong>EditTextWithError code:</strong> </p>

<pre><code>import React, { Component, PropTypes } from 'react';
import {
  Text,
  View,
  TextInput,
  Image,
  TouchableHighlight
} from 'react-native';
import images from '../../config/images';

const styles = require('./styles').default;

export default class EditTextWithError extends Component {
  state = {
    hideInput: false
  };

  static propTypes = {
    hint: PropTypes.string,
    errorMsg: PropTypes.string,
    errorMsgVisibility: PropTypes.bool,
    keyboardType: PropTypes.any,
    eyeVisibility: PropTypes.bool,
    eyeHidePassModeEnabled: PropTypes.bool,
    isNextMode: PropTypes.bool,
    nextRef: PropTypes.any,
    onTextChanged: PropTypes.func,
    onEndEditing: PropTypes.func
  };

  static defaultProps = {
    keyboardType: 'default',
    errorMsgVisibility: false,
    eyeVisibility: false,
    eyeHidePassModeEnabled: false,
    isNextMode: false,
    onTextChanged: (smth) =&gt; { },
    onEndEditing: () =&gt; { }
  }

  getFocus() {
    this.editText.focus();
  }

  componentWillMount() {
    this.state.hideInput = this.props.eyeHidePassModeEnabled;
  }

  render() {
    const { hint, errorMsg, errorMsgVisibility, keyboardType, eyeVisibility, eyeHidePassModeEnabled, isNextMode, nextRef, onTextChanged, onEndEditing }
      = this.props;
    let icon = this.state.hideInput ? images.eye.on : images.eye.off;
    const isErrored = errorMsgVisibility ? styles.errorBorder : styles.normalBorder;
    let returnKeyType = isNextMode ? ""next"" : ""go"";
    return (
      &lt;View style={styles.container}&gt;
        &lt;TextInput style={[styles.input, isErrored]}
          placeholder={hint}
          underlineColorAndroid='transparent'
          autoCorrect={false}
          secureTextEntry={this.state.hideInput}
          multiline={false}
          keyboardType={keyboardType}
          placeholderTextColor='rgb(153, 153, 153)'
          returnKeyType={returnKeyType}
          onSubmitEditing={() =&gt; isNextMode ? nextRef.getFocus() : {}}
          onChangeText={(text) =&gt; onTextChanged(text)}
          onEndEditing={() =&gt; onEndEditing()}
          ref={(textEdit) =&gt; this.editText = textEdit} /&gt;
        {
          errorMsgVisibility &amp;&amp;
          &lt;Text style={styles.errorText}&gt;{errorMsg}&lt;/Text&gt;
        }
        {
          eyeVisibility &amp;&amp;
          &lt;TouchableHighlight style={styles.eyeContainer} underlayColor='transparent'
            onPress={() =&gt; this.setState({ hideInput: !this.state.hideInput })} &gt;
            &lt;Image source={icon} style={styles.eye} /&gt;
          &lt;/TouchableHighlight&gt;
        }
      &lt;/View&gt;
    );
  }
}
</code></pre>

<p><strong>Navigation code:</strong></p>

<pre><code>export const LoginStack = StackNavigator({
  Splash: {
    screen: SplashScreen,
    navigationOptions: {
      header: null,
    }
  },
  Login: {
    screen: LoginScreen,
    navigationOptions: {
      header: null,
    }
  },
  forgotPass: {
    screen: ForgotPasswordScreen,
    navigationOptions: ({ navigation }) =&gt; ({
      headerLeft: &lt;BackIcon nav={navigation} /&gt;,
      headerTitle: I18n.t('forgotPass.screenTitle'),
      headerStyle: styles.toolbar,
      headerTitleStyle: styles.toolbarTitle
    }),
  },
  Settings: {
    screen: SettingsScreen,
    navigationOptions: ({ navigation }) =&gt; ({
      headerLeft: &lt;BackIcon nav={navigation} /&gt;,
      headerTitle: I18n.t('settings.screenTitle'),
      headerStyle: styles.toolbar,
      headerTitleStyle: styles.toolbarTitle
    }),
  }
});

const BackIcon = ({ nav }) =&gt; (
  &lt;TouchableOpacity onPress={() =&gt; nav.goBack()} style={styles.backIconContainer}&gt;
    &lt;Image source={images.backArrow} style={styles.backIcon} /&gt;
  &lt;/TouchableOpacity&gt;
);


import { NavigationActions } from 'react-navigation';

export default class NavigationUtils {

    static navigateWithoutAnAbilityToGoBackTo(navigation, _routeName) {
        const actionToDispatch = NavigationActions.reset({
            index: 0,
            actions: [NavigationActions.navigate({ routeName: _routeName })]
        })
        navigation.dispatch(actionToDispatch);
    }

    static navigateTo(navigation, _routeName) {
        navigation.navigate(_routeName);
    }
}
</code></pre>
","7095156","","","","","2017-06-21 08:22:37","react-native: TypeError: expected dynamic type `double', but had type `null' (UiManager.dispatchViewManagerCommand)","<javascript><android><react-native><react-navigation>","0","1","","",""
"46479654","1","","","2017-09-28 23:22:44","","0","157","<p>This feels like a real noob question, but then I'm still a noob at this. I'm using react-boostrap's Modal, and want to run it through the enzyme snapshot.</p>

<p>What I get is a ""null"", despite including the show={true} on the Modal itself.</p>

<p>This is the component:</p>

<pre><code>import React from 'react'
import PropTypes from 'prop-types'
// import styled from 'styled-components'
import {Modal, Button} from 'react-bootstrap'

const ConfirmJobDeleteModal = props =&gt; {

  const clickCancel = () =&gt; props.handleDelete(false)
  const clickDelete = () =&gt; props.handleDelete(true)

  return (
    &lt;Modal
      id={`job-details-${props.job.job_number}-confirm-delete`}
      show={props.showModal}
    &gt;
      &lt;Modal.Header&gt;
        &lt;Modal.Title&gt;Delete this {props.job.which}&lt;/Modal.Title&gt;
      &lt;/Modal.Header&gt;
      &lt;Modal.Body&gt;
        Are you sure you want to delete {props.job.which === 'job' ? 'Job' : 'Opportunity'} #{props.job.job_number}?
      &lt;/Modal.Body&gt;
      &lt;Modal.Footer&gt;
        &lt;Button type=""button"" onClick={clickCancel} bsStyle=""default""&gt;Cancel&lt;/Button&gt;
        &lt;Button type=""button"" onClick={clickDelete} bsStyle=""danger""&gt;Delete&lt;/Button&gt;
      &lt;/Modal.Footer&gt;
    &lt;/Modal&gt;
  )
}

ConfirmJobDeleteModal.propTypes = {
  job: PropTypes.object.isRequired,
  showModal: PropTypes.bool.isRequired,
  handleDelete: PropTypes.func.isRequired,
}
ConfirmJobDeleteModal.defaultProps = {}

export default ConfirmJobDeleteModal
</code></pre>

<p>This is the test:</p>

<pre><code>import React from 'react'
import { render } from 'enzyme'
import ConfirmJobDeleteModal from './ConfirmJobDeleteModal'

test(""It should render the ConfirmJobDeleteModal"", () =&gt; {
    const actual = render(
      &lt;ConfirmJobDeleteModal
        job={ {id: 1, job_number: 1, which: 'job'} }
        showModal={true}
        handleDelete={ confirm =&gt; confirm }
      /&gt;
    )
    expect(actual).toMatchSnapshot()
})
</code></pre>

<p>And this is the snapshot:</p>

<pre><code>// Jest Snapshot v1, https:// goo.gl /fbAQLP

exports[`It should render the ConfirmJobDeleteModal 1`] = `null`;
</code></pre>

<p>The Modal tries to mount to the document body, so I'm not surprised the render doesn't return anything, but <em>how</em> can I test this?</p>
","742446","","","","","2017-09-28 23:22:44","Is it possible to enzyme snapshot test a react-bootstrap Modal?","<reactjs><enzyme><react-bootstrap><jest>","0","1","","",""
"49060982","1","","","2018-03-02 00:33:48","","0","62","<p>I have a array and I want to render the this array into a few redux forms. I found out that all the forms are rerendered. the code looks like the following:</p>

<p>Form.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link, Events, scrollSpy } from 'react-scroll';
import styles from './Form.css';
import MultipleForm from './MultipleForm';

class Form extends Component {
  constructor(props) {
    super(props);
    const {
      workflows,
    } = this.props;
    this.state = {
      curTab: workflows.length &gt; 0 ? workflows[0] : '',
      curForm: '',
    };
  }

  componentDidMount() {
    Events.scrollEvent.register('begin');
    Events.scrollEvent.register('end');
    scrollSpy.update();
  }
  componentWillReceiveProps(nextProps) {
    const {
      workflows,
    } = nextProps;
    if (workflows &amp;&amp; workflows.length &gt; this.props.workflows) {
      this.setState({
        curTab: workflows[0],
      });
    }
  }
  componentWillUnmount() {
    Events.scrollEvent.remove('begin');
    Events.scrollEvent.remove('end');
  }
  handleChangeTab = (value) =&gt; {
    this.setState({
      curTab: value,
    });
  }

  handleActiveTab = (workflow) =&gt; {
    console.log(workflow);
  }


  render() {
    const {
      workflows,
      schemaNames,
      ...rest
    } = this.props;
    return (
      &lt;div className={styles.container}&gt;
        &lt;header&gt;
          &lt;PerspectiveBar
            value={this.state.curTab}
            onChange={this.handleChangeTab}
            style={{
              position: 'fixed',
              left: '0',
              top: '48px',
              width: '100vw',
              zIndex: '1380',
            }}
          &gt;
            {workflows.map(wf =&gt; (
              &lt;PerspectiveTab
                key={wf}
                label={wf}
                value={wf}
                onActive={() =&gt; this.handleActiveTab(wf)}
              /&gt;
          ))}
          &lt;/PerspectiveBar&gt;
        &lt;/header&gt;
        &lt;div className={styles.formContainer}&gt;
          &lt;Paper className={styles.paperContainer}&gt;
            &lt;MultipleForm
              workflow={this.state.curTab}
              schemaNames={schemaNames}
              {...rest}
            /&gt;
          &lt;/Paper&gt;
        &lt;/div&gt;
        &lt;Drawer className={styles.drawer} containerStyle={{ height: 'calc(100% - 104px)', top: '104px' }}&gt;
          &lt;div className={styles.drawerContainer}&gt;
            {schemaNames.map(schemaName =&gt; (
              &lt;Link
                onSetActive={(to) =&gt; {
                  this.setState({
                    curForm: to,
                  });
                }}
                to={schemaName}
                duration={500}
                offset={-104}
                spy
                smooth
              &gt;
                &lt;MenuItem
                  checked={this.state.curForm === schemaName}
                &gt;
                  {schemaName}
                &lt;/MenuItem&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        &lt;/Drawer&gt;
      &lt;/div&gt;

    );
  }
}

Form.propTypes = {
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  workflows: PropTypes.arrayOf(PropTypes.string),
  fetchSchemaNames: PropTypes.func.isRequired,
};

Form.defaultProps = {
  schemaNames: [],
  workflows: [],
};

export default Form;
</code></pre>

<p>MultipleForm.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FlatButton from 'material-ui/FlatButton';
import { Element } from 'react-scroll';
import SchemaForm from './SchemaForm';

class MultipleForm extends Component {
  componentDidMount() {
    console.log('MultipleForm Mounted');
    const {
      workflow,
      fetchSchemaNames,
    } = this.props;
    if (workflow) fetchSchemaNames(workflow);
  }

  componentWillReceiveProps(nextProps) {
    const {
      workflow,
      fetchSchemaNames,
    } = nextProps;
    if (workflow &amp;&amp; this.props.workflow !== workflow) fetchSchemaNames(workflow);
  }

  componentDidUpdate() {
    const {
      schemaNames,
      schemas,
      initialValues,
      fetchSchemas,
      fetchInitialValues,
    } = this.props;
    const schemasNeedToFetch = this.remainingSchemas(schemaNames, schemas);
    if (schemasNeedToFetch.length !== 0) fetchSchemas(schemasNeedToFetch);
    const initialValuesNeedToFetch = this.remainingInitialValues(schemaNames, initialValues);
    if (initialValuesNeedToFetch.lenght !== 0) fetchInitialValues(initialValuesNeedToFetch, 1);
  }

  remainingSchemas = (schemaNames, schemas) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in schemas === false).sort();

  remainingInitialValues = (schemaNames, initialValues) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in initialValues === false).sort();

  handleSubmitAll = (event) =&gt; {
    event.preventDefault();
    const {
      submit,
      schemas,
      schemaNames,
    } = this.props;
    schemaNames
      .map(schemaName =&gt; schemas[schemaName].title)
      .forEach((title) =&gt; {
        submit(title);
      });
  }

  render() {
    const {
      schemaNames,
      schemas,
      initialValues,
      postForm,
    } = this.props;
    schemaNames.sort((a, b) =&gt; a.localeCompare(b));
    return (
      &lt;div&gt;
        {schemaNames.map(schemaName =&gt; (
          &lt;Element name={schemaName}&gt;
            &lt;SchemaForm
              key={schemaName}
              schema={schemas[schemaName]}
              initialValue={initialValues[schemaName]}
              schemaName={schemaName}
              postForm={postForm}
            /&gt;
          &lt;/Element&gt;
        ))}
        &lt;div&gt;
          &lt;FlatButton
            label=""Submit""
          /&gt;
          &lt;FlatButton label=""Deploy"" /&gt;
        &lt;/div&gt;
      &lt;/div&gt;);
  }
}

MultipleForm.propTypes = {
  workflow: PropTypes.string.isRequired,
  submit: PropTypes.func.isRequired,
  fetchSchemaNames: PropTypes.func.isRequired,
  schemas: PropTypes.object,
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  initialValues: PropTypes.object,
  fetchSchemas: PropTypes.func.isRequired,
  fetchInitialValues: PropTypes.func.isRequired,
  postForm: PropTypes.func.isRequired,
};

MultipleForm.defaultProps = {
  schemaNames: [],
};

export default MultipleForm;
</code></pre>

<p>SchemaForm</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Liform from 'liform-react';
import theme from './NokiaTheme';
import styles from './Form.css';

class SchemaForm extends Component {
  componentDidMount() {
    console.log('schema mounted');
  }

  shouldComponentUpdate() {
    return false;
  }
  handleSubmit = (value) =&gt; {
    const {
      postForm,
      schemaName,
    } = this.props;
    postForm(value, schemaName, 1);
  }


  render() {
    const {
      schema,
      initialValue,
    } = this.props;
    console.log('props', this.props);
    return (
      &lt;div&gt;
        &lt;h3 id={schema.$id} className={styles.formTitle}&gt;
          {schema.title}
        &lt;/h3&gt;
        &lt;Liform
          schema={schema}
          onSubmit={value =&gt; this.handleSubmit(value)}
          destroyOnUnmount={false}
          theme={theme}
          initialValues={initialValue}
        /&gt;
      &lt;/div&gt;
    );
  }
}

SchemaForm.propTypes = {
  schema: PropTypes.shape({
    $id: PropTypes.string,
  }),
  initialValue: PropTypes.object,
  schemaName: PropTypes.string,
  postForm: PropTypes.func.isRequired,
};

SchemaForm.defaultProps = {
  schema: {},
  initialValue: null,
  schemaName: '',
};

export default SchemaForm;
</code></pre>

<p>the schemaNames will be changed only by adding or deleting some element. for example: the schemaNames will change from <code>['A', 'B', 'C']</code> to <code>['A', 'B', 'D']</code>.  I get the schemaNames from the redux. which I fetch online.</p>

<p>But when I check the ConnectedReduxForm, when I change the schemaNames, the SchemaForm will be unmounted and the react will mount the form again. I have tried with setting the ConnectedReduxForm to be PureComponent. It is not helpful.</p>

<p>Could someone help me with that? I have spent a lot of time of this and nothing helps.</p>

<p><strong>Update</strong>: I have found the problem, the reason of it is that for each time that I for each time I update the workflow, I need to fetch the schemaNames from the server. But I still do not know why this happended. Could someone explain that?</p>
","4812854","","4812854","","2018-03-02 22:05:39","2018-03-02 22:05:39","How to avoid rerendering element in the array in react?","<javascript><reactjs><redux-form>","0","11","","",""
"35689302","1","35803242","","2016-02-28 22:52:13","","7","3481","<p>Is there a way to programmatically change <code>w</code> and <code>h</code> of an item's layout? The use case is to have a ""collapse"" button which reduces the height to a constant height, enough to leave the header of the item. To do this my original idea was to keep <code>layouts</code> in the state of the component and manually change the height of the collapsed item/s to another constant height.</p>

<p>However it seems as though the library will ignore changes to <code>layout</code> after initial rendering. Is this the case or is it a bug on my end? And if it's normal behavior, is there another way to change heights programmatically?</p>

<p>Here's a standalone component that implements the <code>react-grid-layout</code>. It's two ""widgets"" that have an onClick handler to ""collapse"" them. By setting the state, it triggers the re-render and recalculates layouts so that any collapsed items have a reduced height. The console log statments show that the rendered components have the correct new layout but it does not get reflected on the screen, leading me to believe there is another reference to the height.</p>

<p><a href=""http://jsfiddle.net/dj0s3fwb/"" rel=""nofollow noreferrer"">jsFiddle example</a></p>

<pre><code>import React, { Component } from 'react';

import GridLayout, { WidthProvider } from 'react-grid-layout';
const Grid = WidthProvider(GridLayout);

// # WidgetsContainer
// Container WidgetsContainer component.
class WidgetsContainer extends Component {

    static defaultProps = {
        isDraggable: true,
        isResizable: true,
        rowHeight: 1,
        cols: 12,
    }

    constructor(props) {
        super(props);
        this.state = {
            layouts: [
                {
                    i: 'item_1',
                    x: 0,
                    y: 0,
                    w: 5,
                    h: 25,
                }, {
                    i: 'item_2',
                    x: 5,
                    y: 0,
                    w: 7,
                    h: 30,
                },
            ],
            collapsedWidgets: {},
        };
    }

    toggleWidget(id) {
        return () =&gt; {
            const newState = {...this.state.collapsedWidgets};
            const collapsed = typeof newState[id] === 'boolean' ? newState[id] : false;

            newState[id] = !collapsed;
            this.setState({
                collapsedWidgets: newState,
            });
        }

    }

    onResize(layouts) {
        this.setState({
            layouts,
        });
    }

    getModifiedLayouts() {
        const { layouts, collapsedWidgets } = this.state;

        const newLayouts = layouts.map(layout =&gt; {
            const newLayout = { ...layout };
            if (collapsedWidgets[newLayout.i]) {
                newLayout.h = 5;
            }
            return newLayout;
        });

        return newLayouts;
    }

    getWidgets() {
        const widgets = [{
            component: &lt;div style={{ height: '250px', background: 'lightgray' }}&gt;Content&lt;/div&gt;,
            title: 'Item 1',
            id: 'item_1',
        }, {
            component: &lt;div style={{ height: '310px', background: 'lightgray' }}&gt;Content 2&lt;/div&gt;,
            title: 'Item 2',
            id: 'item_2',
        }];
        return widgets;
    }

    generateDOM() {
        const widgets = this.getWidgets();

        const modifiedLayouts = this.getModifiedLayouts();

        return widgets.map((widget, i) =&gt; {
            return (&lt;div key={i} _grid={modifiedLayouts[i]}&gt;
                &lt;div style={{ background: 'gray' }} onClick={::this.toggleWidget(widget.id)}&gt;
                    {widget.title}
                    {widget.component}
                &lt;/div&gt;
            &lt;/div&gt;);
        });
    }

    render() {
        const widgets = this.generateDOM();
        console.log(widgets[0].props._grid)
        return (&lt;div style={{ marginTop: '15px' }}&gt;
                {widgets ? &lt;Grid className=""layout""
                  {...this.props}
                  onResizeStop={::this.onResize}
                &gt;
                    {widgets}
                &lt;/Grid&gt; : null}
            &lt;/div&gt;);
    }
}

export default WidgetsContainer;
</code></pre>
","2578042","","1033581","","2017-11-21 08:20:12","2017-11-21 08:20:12","Programmatically change height/width of items in react-grid-layout","<reactjs>","1","0","4","",""
"45062117","1","45074297","","2017-07-12 15:36:59","","0","316","<p>I'm following braintree tutorial to setup PayPal but the problem is I keep on getting this error <code>Uncaught ReferenceError: PayPal is not defined</code>. Here is the link to the tutorial that I'm following to setup Paypal <a href=""https://developers.braintreepayments.com/guides/paypal/client-side/javascript/v3"" rel=""nofollow noreferrer"">https://developers.braintreepayments.com/guides/paypal/client-side/javascript/v3</a>. </p>

<p>I tried to include the <code>checkout.js</code> file but it kept on giving me an error. I then tried to include <code>Braintree.paypall</code> but that also keeps on giving me an error. Can somebody tell me what is it that I'm doing wrong?</p>

<pre><code>import React, { PropTypes, Component } from 'react';
import { browserHistory } from 'react-router';
import moment from 'moment';
import Gravatar from 'react-gravatar';
import { injectIntl, defineMessages } from 'react-intl';
import CSSModules from 'react-css-modules';
import styles from './index.sass';
import BrainTree from 'braintree-web';


const messages = defineMessages({
    // some messages over here
});

@CSSModules(styles, { allowMultiple: true })
export class Payment extends Component {
    state = {
        paymentValue: 10,
        paymentMethodNounce: '',
        isPopUpShown: false,
    };

    componentWillMount() {
        this.props.getClientTokenForPayment();
    }

   // certain code over here 

    componentWillReceiveProps(nextProps) {

        const token = nextProps.user.clientToken;

        if (token &amp;&amp; token != null &amp;&amp; token !== this.props.user.clientToken) {
            debugger;
            console.log(BrainTree.paypalCheckout.isSupported());
            BrainTree.client.create({
                authorization: token
            }, function (clientErr, clientInstance) {

                // Stop if there was a problem creating the client.
                // This could happen if there is a network error or if the authorization
                // is invalid.
                if (clientErr) {
                    console.error('Error creating client:', clientErr);
                    return;
                }

                // Create a PayPal Checkout component.
                BrainTree.paypalCheckout.create({
                    client: clientInstance
                }, function (paypalCheckoutErr, paypalCheckoutInstance) {

                    // Stop if there was a problem creating PayPal Checkout.
                    // This could happen if there was a network error or if it's incorrectly
                    // configured.
                    if (paypalCheckoutErr) {
                        console.error('Error creating PayPal Checkout:', paypalCheckoutErr);
                        return;
                    }

                    // Set up PayPal with the checkout.js library
                    paypal.Button.render({ // THIS IS WHERE THE ERROR IS COMING
                        env: 'sandbox', // or 'sandbox'

                        payment: function () {
                            return paypalCheckoutInstance.createPayment({
                                // Your PayPal options here. For available options, see
                                // http://braintree.github.io/braintree-web/current/PayPalCheckout.html#createPayment
                            });
                        },

                        onAuthorize: function (data, actions) {
                            return paypalCheckoutInstance.tokenizePayment(data)
                                .then(function (payload) {
                                    // Submit `payload.nonce` to your server.
                                });
                        },

                        onCancel: function (data) {
                            console.log('checkout.js payment cancelled', JSON.stringify(data, 0, 2));
                        },

                        onError: function (err) {
                            console.error('checkout.js error', err);
                        }
                    }, '#paypal-button').then(function () {
                        // The PayPal button will be rendered in an html element with the id
                        // `paypal-button`. This function will be called when the PayPal button
                        // is set up and ready to be used.
                    });

                });

            });
        }
    }
    handleChange = (field, value) =&gt; {
        this.setState({
            [field]: value,
        });
    };

    render() {

        return (
                &lt;div id=""paypal-button""&gt;&lt;/div&gt;
        );
    }
}

Payment.propTypes = {};

Payment.defaultProps = {};

export default injectIntl(Payment);
</code></pre>

<p>The error that I'm receiving is at <code>Braintree.paypal.button.render</code>.</p>
","4468132","","4468132","","2017-07-13 07:36:35","2017-07-13 07:37:52","Uncaught ReferenceError: paypal is not defined (in reactjs)","<reactjs><paypal><braintree><braintree-sandbox>","1","1","","",""
"45508541","1","","","2017-08-04 13:48:11","","1","247","<p>This has been asked before but a few things still confuse me.</p>

<h1>Questions</h1>

<p>I am creating a component which will be consumed by my create-react-app template. Therefore the component will be built twice. Once on creating the component and once by create-react-app. This works fine for my js but for css I'm not sure how I should bundle my css? </p>

<ol>
<li><p>Should I use css-loader/style-loader with uglification and minimisation in my component? But this will then put a separate css style tag for each component I add to create-react-app. </p></li>
<li><p>Should I use inline styles with my react components so there is no style sheets at all? <strong>Can the react inline styles do everything a normal css style sheet can do?</strong></p></li>
<li><p>Should I just add a require(my.css) to my published component which is ignored by the first web pack build but then will be processed by create-react-app? <strong>How do I do this. I tried the ignore plugin with web pack but this just removes the require? How do I keep it i the code but not process it with webpack</strong></p></li>
</ol>

<p>This next thing which confuses me is installing the component. It seems when I do: </p>

<pre><code>npm install --save @mortonprod/react-product-component
</code></pre>

<p>It will pull all my files and then create the dist folder on my computer. </p>

<ol>
<li><p>How does npm know how to build my package? Does it default to the build script in package.json?</p></li>
<li><p>Should I build my component this way? Should I not just publish my dist folder so npm install just pulls the dist directory? </p></li>
<li><p>Does npm pull directly from GitHub or does it have it's own repository? </p></li>
</ol>

<p><strong>Thanks in advance and my setup is below</strong></p>

<h1>Setup</h1>

<p>So I have a react component which contains css/svg. I build it with webpack using the config:</p>

<pre><code>'use strict';
const webpack = require('webpack');
const path = require('path');
module.exports =  {
  entry: {
        bundle: ""./product.js""
    },
//  plugins: [""transform-react-jsx""],
  module:{
  loaders: [
    {
      test: /\.js$/,
      exclude: /(node_modules)/,
      loader: 'babel-loader'
    },
        { test: /\.css$/, loader: 'css-loader' },
    {
        test: /\.svg$/,
        loader: 'svg-inline-loader'
    }
  ]
  },
    output:{
    libraryTarget: 'umd',
    filename: 'index.js',   
        path: path.resolve(__dirname, 'dist')
    },
  resolve: {
    extensions: ['.js', '.jsx']
  },
} 
</code></pre>

<p>I also can publish it using my package.json</p>

<pre><code>{
  ""name"": ""@mortonprod/react-product-component"",
  ""version"": ""1.2.0"",
  ""description"": ""This is a small react component to display product information"",
  ""main"": ""dist/index.js"",
  ""scripts"": {
    ""test"": ""npm run tests"",
    ""build"": ""./node_modules/.bin/webpack --progress""
  },
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""git+https://github.com/mortonprod/react-product-component.git""
  },
  ""keywords"": [
    ""react""
  ],
  ""author"": ""Alexander Morton"",
  ""license"": ""MIT"",
  ""bugs"": {
    ""url"": ""https://github.com/mortonprod/react-product-component/issues""
  },
  ""homepage"": ""https://github.com/mortonprod/react-product-component#readme"",
  ""dependencies"": {
    ""react"": ""^15.6.1"",
    ""react-router-dom"": ""^4.1.2""
  },
  ""devDependencies"": {
    ""babel-core"": ""^6.25.0"",
    ""babel-loader"": ""^7.1.1"",
    ""babel-plugin-transform-react-jsx"": ""^6.24.1"",
    ""babel-preset-env"": ""^1.6.0"",
    ""babel-preset-es2015"": ""^6.24.1"",
    ""babel-preset-react"": ""^6.24.1"",
    ""css-loader"": ""^0.28.4"",
    ""style-loader"": ""^0.18.2"",
    ""svg-inline-loader"": ""^0.8.0"",
    ""webpack"": ""^3.4.1""
  }
}
</code></pre>

<p>My component</p>

<pre><code>import React from 'react';
import {Link} from 'react-router-dom'
import ""./product.css"";
/**
    This is a product. It is composed of images which shows the product and information about that product. 
    Product information is passed to component to render.
    The main function of this component is to correctly render variable size images. We want to be able to display variables aspect ratio photos.
    All photos must have the same height or they will leave large gaps when grouped together. They also must be about 300px width for mobile.
    The product component must also have padding which is can expand into and centre into parent div.
    To achieve these needs set padding to 30px for product to expand into and margin auto by default. If device width is less than 500px then reduce height of
    image to 250px with max-width 300(This might leave some images with broken aspect ratio).
    -------------------------
    Must set product css to 100% width/height otherwise largest image will set the height of all other image. Strange?
    @function
*/
export default function Product(props){
    let price = null;
    if(props.price !== null &amp;&amp; props.price !== """"){
        price = (
            &lt;Link to={{
                    pathname: '/buy',
                    state: { 
                        title: props.title,
                        description:props.description,
                        img:props.src,
                        price:props.price,
                        info:props.info 
                    }
                }} 
                className={""product__link""} &gt;
                &lt;span&gt; 
                    {props.price} 
                &lt;/span&gt; 
            &lt;/Link&gt;
        )
    }

    return (
        &lt;div className={""product""}&gt;
            &lt;img src={props.src} className=""product__image"" alt=""logo"" /&gt;
            &lt;div className={""product__info""}&gt;
                 &lt;h1 className={""product__name""}&gt;{props.title} &lt;/h1&gt;
                 &lt;h4 className=""product__description""&gt;{props.description} &lt;/h4&gt;
                 &lt;p className=""product__descriptionLong""&gt;{props.info.description} &lt;/p&gt;
                 {price}
            &lt;/div&gt;
        &lt;/div&gt;
    )
}

Product.defaultProps={
    title:""Test title"",
    description:""This is the test description"",
    img:null,
    price:""test price"",
    info:{size:""test size"",weight:""test weight""}
}
</code></pre>
","6402081","","","","","2017-08-04 13:48:11","How to bundle a react component with assets ready to publish on npm?","<reactjs><web><npm><pack><create-react-app>","0","1","","",""
"37433800","1","","","2016-05-25 10:02:24","","2","449","<p>I am using <code>Animated.Image</code> inside a <code>scrollView</code>. I apply a pan <code>responder</code> to the <code>Animated.Image</code>.</p>

<p>The problem: when I move the image for big distance, it disappears.</p>

<p>The question: how can I adjust the <code>Animated.Image</code> to stay within specific boundaries when i move it?</p>

<p>My code:</p>

<pre><code>import React, { Component } from 'react';
import {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    Image,
    Animated,
    PanResponder,
    ScrollView
} from 'react-native';
var xPosition, yPosition;
var position;
export default class AvatarEditor extends Component {
    constructor(props) {
        super(props);
        this.state = {
            pan: new Animated.ValueXY(), // inits to zero
            image: this.props.image,
            border: this.props.border,
            width: this.props.width,
            height: this.props.height,
            viewWidth: this.props.width + 2 * this.props.border,
            viewHeight: this.props.height + 2 * this.props.border,
            first: true,
            left: 0,
            top: 0,
            xPosition: 0,
            yPosition: 0,
            translateX: 0,
            translateY: 0
        };
    }

    componentWillMount() {
        this._animatedValueX = 0;
        this._animatedValueY = 0;
        this.state.pan.x.addListener((value) =&gt; this._animatedValueX = value.value);
        this.state.pan.y.addListener((value) =&gt; this._animatedValueY = value.value);
        this._panResponder = PanResponder.create({
            onMoveShouldSetResponderCapture: () =&gt; true, //Tell iOS that we are allowing the movement
            onMoveShouldSetPanResponderCapture: () =&gt; true, // Same here, tell iOS that we allow dragging
            onPanResponderGrant: (e, gestureState) =&gt; {
                this.state.pan.setOffset({ x: this._animatedValueX, y: this._animatedValueY });
                this.state.pan.setValue({ x: 0, y: 0 }); //Initial value
            },
            onPanResponderMove: (evt, gestureState) =&gt; {
                // Animated.event([
                //     null, { dx: this.state.pan.x, dy: this.state.pan.y }
                // ]) // Creates a function to handle the movement and set offsets

                newdx = gestureState.dx;
                newdy = gestureState.dy;
                Animated.event([
                    null, { dx: this.state.pan.x, dy: this.state.pan.y },
                ])(evt, { dx: newdx, dy: newdy });

            },
            onPanResponderRelease: () =&gt; {
                this.state.pan.flattenOffset(); // Flatten the offset so it resets the default positioning
            }
        });
    }
    componentDidMount() {

    }

    componentWillUnmount() {
        this.state.pan.x.removeAllListeners();
        this.state.pan.y.removeAllListeners();
    }

    render() {

        var imageStyle = {
            width: this.state.width,
            height: this.state.height,
            resizeMode: 'stretch',
            top: this.state.top,
            left: this.state.left,
            transform: [
                { translateX: this.state.pan.x },//this.state.pan.x
                { translateY: this.state.pan.y },
                { scale: this.props.scale }
            ]
        };
        return (
            &lt;View
                style={[this.props.style, { backgroundColor: 'gray' }]}
                &gt;
                &lt;ScrollView
                    style={{
                        width: this.state.viewWidth,
                        height: this.state.viewHeight,
                        borderWidth: this.state.border,
                        borderColor: 'rgba(100, 100, 100, 0.5)',
                        overflow: 'hidden',
                    }}
                    scrollEnabled={false}
                    &gt;
                    &lt;Animated.Image
                        style={imageStyle}
                        source={{ uri: this.state.image }}
                        {...this._panResponder.panHandlers}
                        &gt;
                    &lt;/Animated.Image&gt;
                &lt;/ScrollView&gt;
            &lt;/View&gt;
        );
    }
}

AvatarEditor.propTypes = {
    scale: React.PropTypes.number,
    image: React.PropTypes.string,
    border: React.PropTypes.number,
    width: React.PropTypes.number,
    height: React.PropTypes.number,
    style: React.PropTypes.object
};

AvatarEditor.defaultProps = {
    scale: 1,
    border: 25,
    width: 200,
    height: 200,
    style: {
        top: 50,
        left: 25,
        position: 'absolute',
    },
    image: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQesv5ucRQ1KUNtDipnrhS6Gn9yMn7GOqFdQGTeLMG1fCKGvudEUji_Aw',
};
</code></pre>
","6380499","","5520354","","2016-05-25 11:41:27","2016-05-25 11:41:27","Animated.Image with PanResponder 'react-native","<react-native>","0","1","1","",""
"37442271","1","37448168","","2016-05-25 15:57:19","","1","532","<p>I create my typescript definitions for some <code>reactJS</code> components and I see that in react.d.ts file there is 2 interfaces:</p>

<pre><code>interface ComponentClass&lt;P&gt; {
    new(props?: P, context?: any): Component&lt;P, ComponentState&gt;;
    propTypes?: ValidationMap&lt;P&gt;;
    contextTypes?: ValidationMap&lt;any&gt;;
    childContextTypes?: ValidationMap&lt;any&gt;;
    defaultProps?: P;
    displayName?: string;
}
</code></pre>

<p>and:</p>

<pre><code>interface ClassicComponentClass&lt;P&gt; extends ComponentClass&lt;P&gt; {
    new(props?: P, context?: any): ClassicComponent&lt;P, ComponentState&gt;;
    getDefaultProps?(): P;
}
</code></pre>

<p>I see that ClassicComponentClass extends ComponentClass, but when I should use one of these? (when creating definition for component) Does this depends on how the component was created?</p>
","3914072","","3914072","","2016-05-25 16:22:40","2016-05-28 13:46:43","difference between ClassicComponentClass and ComponentClass in reactJS","<javascript><reactjs><interface><typescript><definition>","1","4","","",""
"45874911","1","45928925","","2017-08-25 05:24:49","","1","83","<p>I am building an application that dynamically renders react components from json definitions. Some of the components need to be rendered with a data context. These components then need to fetch external data. I had a naive solution before to wrap these components with a DataComponent that fires a request during mount then sets the state. This approach works.</p>

<pre><code>componentWillMount = () =&gt;
  provider
    .get()
    .then(data =&gt; this.setState({data}))
</code></pre>

<p>Now, I tried to come up with a solution using redux, such that all data schema will have a reducer, and each component does not need to manage its own data (which might come from the same source as other components). The store is initialized properly, and I can see that the store state is updated properly whenever an action is dispatched (I'm using redux devtools to validate, no state is mutated). However, the component is not updated with the new data. The <code>render</code> function is not reinvoked after the initial call. </p>

<p>Here's a similar code to what I came up with:</p>

<pre><code>import React from 'react'
import {connect} from 'react-redux'
import PropTypes from 'prop-types'

// Component: React.Component
// store: redux-store
// schema: String
export default function connectedComponent(Component, store, schema) {

    class DataComponent extends React.Component {

        static propTypes = {
            // eslint-disable-next-line react/forbid-prop-types
            data: PropTypes.any
        }

        static defaultProps = {
            data: null
        }

        render = () =&gt; {
            if (this.props.data) {
                return this.renderComponent(Component, this.props.data)
            }
            return (&lt;span&gt;empty&lt;/span&gt;)
        }

    }

    renderComponent = (Component, data) =&gt; ...

    // eslint-disable-next-line react/no-multi-comp,react/display-name
    return (props) =&gt; {
        const ConnectedData = connect(mapStateToProps(schema))(DataComponent)
        return (
            &lt;ConnectedData {...props}
                           store={store}/&gt;)
    }
}

const mapStateToProps = (schema) =&gt; (state) =&gt; ({
    data: state[schema][schema]
})
</code></pre>

<p>Here's the code for the store</p>

<pre><code>import {createStore} from 'redux'
import {combineReducers} from 'redux'
import reduce from 'lodash/reduce'
import has from 'lodash/has'

export default (schemas) =&gt; createStore(
    createReducers(schemas),
    window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()
)

const createReducers = (schemas) =&gt; combineReducers(reduce(schemas, accumulateReducers, {}))

const accumulateReducers = (reducers, schema) =&gt; ({...reducers, [schema.id]: createReducer(schema)})

const createReducer = (schema) =&gt; {
    return (state = getDefault(schema), {type, response}) =&gt; {
        switch (type) {
            case `${schema.id}_GET_SUCCESS`:
                return {...state, [schema.id]: response}
            default:
                return state
        }
    }
}

const getDefault = (schema) =&gt; ({
    [schema.id]: getDefaultValue(schema)
})

const getDefaultValue = (schema) =&gt; {
    if (has(schema, 'defaultValue')) {
        return schema.defaultValue
    }

    switch (schema.type) {
        case 'array':
            return []
        case 'object':
            return {}
        default:
            return null
    }
}
</code></pre>

<p>Inside the application, there's also another redux store to manage the renderer state. </p>

<p>Edit 1:
Adding github repo to demo the problem
<a href=""https://github.com/clydeespeno/redux-custom-store"" rel=""nofollow noreferrer"">https://github.com/clydeespeno/redux-custom-store</a></p>

<p>Edit 2:
react-redux version was 5.0.2, found that there was a bug related to subscription against custom provided store, which was already fixed at least on 5.0.6</p>
","2053112","","2053112","","2017-08-29 00:10:11","2017-08-29 00:12:27","Component not rerendering when passing store manually to components (react-redux)","<reactjs><react-redux>","1","0","1","",""
"46030915","1","","","2017-09-04 05:44:18","","3","205","<p>Folks, Need some ideas and thoughts around Reactjs. Agenda is to launch an url in popup or an iframe and track the url while moving forward in popped out window. I have implemented <a href=""https://www.npmjs.com/package/react-popout"" rel=""nofollow noreferrer"">React Poput</a> but unable to track the window URL. </p>

<p>The url in popup is supposed to be of third party application.</p>

<p>Code:</p>

<pre><code>&lt;Popout url='/hiddenFormSubmit' ref={popoutRef =&gt; this.popoutRef = popoutRef} containerId='hiddenContainer' options={{height:'650px'}} title='Window title' onClosing={this.popoutClosed}&gt;
&lt;/Popout&gt;
</code></pre>

<p>Functions:</p>

<pre><code>constructor(props){
    super(props);
    this.state = {
      isPoppedOut: false
    };

 popout() {
    console.log("" Popout URL::"");
    this.setState({isPoppedOut: true });
  }


 popoutClosed() {
   this.setState({isPoppedOut: false});
  }
</code></pre>

<p>My Hidden Form Component opening in popout</p>

<pre><code>import React, { Component } from 'react';
import classnames from 'classnames';
export default class Perfios extends Component {
  static propTypes = {}
  static defaultProps = {}
  state = {}
constructor(props){
  super(props);

}
componentDidMount(){
  this.myform.submit();
}

  render() {
    const { className, ...props } = this.props;
    return(
    &lt;form ref={myform =&gt; this.myform = myform} method=""POST"" action=""https://xyz.in/abc/url-third-party""&gt;
         &lt;input ref=""inputField"" name=""id"" type=""hidden"" value=""11"" /&gt;
         &lt;input name=""adminId"" type=""hidden"" value=""123"" /&gt;
         &lt;input name=""surname"" type=""hidden"" value=""xyz"" /&gt;
         &lt;button className=""hidden"" type=""submit""&gt;SUBMIT&lt;/button&gt;
         &lt;/form&gt;
       );
   }
}
</code></pre>

<p>In above code, form is getting submitted on component mount &amp; redirecting to third party url.</p>

<p>Find the <a href=""http://jake.ginnivan.net/react-popout/"" rel=""nofollow noreferrer"">Demo</a>. How to track the popped window's url in parent container? Any leads would be appreciated.</p>
","5648627","","5648627","","2017-09-04 06:13:56","2017-09-04 06:21:32","Best way to open a third party url in popup/webview and track the same url using react js","<javascript><node.js><reactjs><react-native><react-router>","0","1","","",""
"38004703","1","38004748","","2016-06-24 02:22:23","","3","20281","<p>I want my app component has a default props , and use that props in  <code>mapStateToProps</code>.</p>

<p>my code:</p>

<p>containers/App.js</p>

<pre><code>import React, { Component, PropTypes } from 'react';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import Footer from '../components/Footer';
import TreeNode from '../containers/TreeNode';
import Home from '../containers/Home';
import * as NodeActions from '../actions/NodeActions'

export default class App extends Component {

  constructor(props, context) {
    super(props, context)
    this.props = {
      info:{
        path:'/'
      }
    }
  }

  componentWillMount() {
    // this will update the nodes on state
    this.props.actions.openNode('/');
  }

  render() {
    const { node , actions} = this.props
    console.log(this.props)

    return (
      &lt;div className=""main-app-container""&gt;
        &lt;Home /&gt;
        &lt;div className=""main-app-nav""&gt;Simple Redux Boilerplate&lt;/div&gt;
        {node.childNodes &amp;&amp;
          &lt;div&gt;{node.childNodes.map(node =&gt; &lt;TreeNode key={info.path} info={node} tree={tree} actions={actions} /&gt;)}&lt;/div&gt;
        }
        {!node.childNodes &amp;&amp;
          &lt;div&gt;no children&lt;/div&gt;
        }
        {/*&lt;Footer /&gt;*/}
      &lt;/div&gt;
    );
  }
}

App.defaultProps = {
    info:{
      path:'/'
    }
};

function mapStateToProps(state, ownProps) {
  console.log('state')
  console.log(state)
  console.log('ownProps')
  console.log(ownProps)
  return {
    node: ownProps.info.path? state.TreeNodeReducer.tree[ownProps.info.path] : {}
  };
}


function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(NodeActions, dispatch)
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(App);
</code></pre>

<p>reducers/TreeNodeReducer.js</p>

<pre><code>import { OPEN_NODE, CLOSE_NODE, GET_NODES } from '../constants/NodeActionTypes';
import UUID from ""node-uuid""

const initialState = {
  open: false,
  info: {} 
}

class NodeModel {
    constructor(path, type, right) {
        this.name = path;
        this.path = path;
        this.type = type;
        this.right = right;
    }
}

let lastId = 0;

function getFileList() {
  var testNodes = []
  for (var i=0; i&lt; 3; i++) {
    testNodes.push(new NodeModel(lastId,'d', i.toString()))
    lastId++;
  }

  return testNodes
}


const getNodes = (state, action) =&gt; {
  var { path } = action
  var tree = state.tree ? state.tree : {}
  tree[path] = getFileList(path)
  return {
    ...state,
    tree:tree
  };
};

export default function (state = initialState, action) {
  switch (action.type) {
    case OPEN_NODE:
      return { ...getNodes(state, action), open:true };
    case GET_NODES:
      return getNodes(state, action);
    case CLOSE_NODE:
      return {
        ...state,
        open:false
      };
    default:
      return state;
  }
}
</code></pre>

<p>I have tried :</p>

<p>1:constructor</p>

<pre><code>  constructor(props, context) {
    super(props, context)
    this.props = {
      info:{
        path:'/'
      }
    }
  }
</code></pre>

<p>2:defaultProps:</p>

<pre><code>App.defaultProps = {
    info:{
      path:'/'
    }
};
</code></pre>

<p>but none of them work...</p>

<p>log always is :</p>

<p><a href=""https://i.stack.imgur.com/Hxu9e.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Hxu9e.png"" alt=""enter image description here""></a></p>

<p><code>state</code> has right default value, but <code>ownProps</code> empty...</p>

<p>PS:Project is <a href=""https://github.com/eromoe/simple-redux-boilerplate"" rel=""nofollow noreferrer"">here </a>.</p>
","1637673","","1637673","","2016-06-24 03:24:44","2016-06-24 07:04:24","Set default props for a react Component","<javascript><reactjs><ecmascript-6><redux>","2","0","1","",""
"46237299","1","","","2017-09-15 10:22:06","","0","63","<p>Below is the code which I used to perform gesture from right to left.I am using <a href=""https://github.com/wix/react-native-interactable"" rel=""nofollow noreferrer"">react-native-interactable</a> library. When I swipe from right to left <code>love</code>, <code>share</code> and <code>block</code> symbols should be visible. But when screen loads all the symbols are showing. How can I achieve this ?</p>

<p>am I doing anything wrong here ? Please help me. Thanks in advance.</p>

<pre><code>import PropTypes from 'prop-types'
import React from 'react'
import { StyleSheet, View, Text, TouchableHighlight } from 'react-native'
import Interactable from 'react-native-interactable'
import Colors from '@assets/colors' // eslint-disable-line

const Item = ({
  title,
  content,
  circleColor,
  circleUpperText,
  circleUpperTextStyle,
  circleLowerText,
  circleLowerTextStyle,
  circleTopRightIcon,
  circleBottomIcon,
  onPress,
  actions
}) =&gt; (
  &lt;View style={styles.container}&gt;

&lt;View style={styles.background}&gt;
      {actions}
    &lt;/View&gt;

    &lt;Interactable.View
      horizontalOnly = {true}

      snapPoints={[{ x: 0 }, { x: -250 }]}
      onSnap={this.onDrawerSnap}
      boundaries={{ left: -250, right: 0 }}
    &gt;
      &lt;TouchableHighlight onPress={() =&gt; onPress()}&gt;
        &lt;View style={styles.foreground}&gt;
          &lt;View
            style={[
              styles.leftCircle,
              { backgroundColor: circleColor }
            ]}
          &gt;
            &lt;View style={styles.circleUpperIcon}&gt;
              {circleTopRightIcon}
            &lt;/View&gt;
            &lt;View style={styles.circleUpperSection}&gt;
              &lt;Text style={[styles.circleUpperText, circleUpperTextStyle]}&gt;{circleUpperText}&lt;/Text&gt;
            &lt;/View&gt;
            &lt;View style={styles.circleLowerSection}&gt;
              &lt;Text style={[styles.circleLowerText, circleLowerTextStyle]}&gt;{circleLowerText}&lt;/Text&gt;
              &lt;View style={styles.circleLowerIcon}&gt;
                {circleBottomIcon}
              &lt;/View&gt;
            &lt;/View&gt;
          &lt;/View&gt;
          &lt;View style={styles.rightContent}&gt;
            &lt;Text style={styles.title} numberOfLines={1}&gt;{title.toUpperCase()}&lt;/Text&gt;
            &lt;Text style={styles.content} numberOfLines={2}&gt;{content}&lt;/Text&gt;
          &lt;/View&gt;
        &lt;/View&gt;

      &lt;/TouchableHighlight&gt;
    &lt;/Interactable.View&gt;


  &lt;/View&gt;
)

Item.propTypes = {
  title: PropTypes.string,
  content: PropTypes.string,
  circleColor: PropTypes.string,
  circleUpperText: PropTypes.string,
  circleUpperTextStyle: PropTypes.object, // eslint-disable-line
  circleLowerText: PropTypes.string,
  circleLowerTextStyle: PropTypes.object, // eslint-disable-line
  circleTopRightIcon: PropTypes.element,
  circleBottomIcon: PropTypes.element,
  onPress: PropTypes.func,
  actions: PropTypes.arrayOf(PropTypes.element)
}

Item.defaultProps = {
  title: '',
  content: '',
  circleColor: Colors.Base.white,
  circleUpperText: '',
  circleUpperTextStyle: {},
  circleLowerText: '',
  circleLowerTextStyle: {},
  circleTopRightIcon: null,
  circleBottomIcon: null,
  onPress: () =&gt; console.log('item press default action'),
  actions: []
}

const styles = StyleSheet.create({
  container:{
    flex: 1,
    flexDirection:'row',
    backgroundColor:'black'
  },
  background: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center',
    position: 'absolute',
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
    padding: 15,
    paddingRight: 33
  },
  foreground: {
    flexDirection: 'row',
    padding: 15,
    borderColor: Colors.Base.grey,
    borderWidth: 0.5,
    backgroundColor: Colors.Base.white
  },
  leftCircle: {
    justifyContent: 'center',
    alignItems: 'stretch',
    width: 60,
    height: 60,
    borderRadius: 60 / 2,
    marginRight: 10
  },
  circleUpperIcon: {
    position: 'absolute',
    top: 0,
    right: 0
  },
  circleUpperSection: {
    marginLeft: 10,
    marginRight: 10,
    borderColor: Colors.Base.white,
    borderBottomWidth: 0.8,
    flex: 0.5,
    justifyContent: 'center'
  },
  circleUpperText: {
    textAlign: 'center',
    fontFamily: 'Teko-Medium',
    color: Colors.Base.white,
    top: 3,
    backgroundColor: 'transparent',
    fontSize: 15
  },
  circleLowerSection: {
    flex: 0.5
  },
  circleLowerText: {
    textAlign: 'center',
    color: Colors.Base.white,
    backgroundColor: 'transparent',
    fontFamily: 'Montserrat-Medium',
    fontSize: 10
  },
  circleLowerIcon: {
    flexDirection: 'row',
    justifyContent: 'center',
    top: 0
  },
  rightContent: {
    flex: 0.8,
    marginLeft: 10,
    justifyContent: 'center'
  },
  title: {
    fontFamily: 'Montserrat-Medium',
    color: Colors.Base.greyishBrown,
    fontSize: 16
  },
  content: {
    fontFamily: 'Montserrat-Light',
    color: Colors.Base.greyishBrown,
    fontSize: 14
  }
})

export default Item
</code></pre>

<p>Below is the code for actions :</p>

<pre><code>actions={[

            &lt;ItemAction
              key='favorite'
              imageSource={
                isFavorited(item.objectId)
                  ? Images.favoriteIconLargeFilled(item.color)
                  : Images.favoriteIconLarge(item.color)
              }
              onPress={() =&gt; onFavoritePressed(item.objectId)}
            /&gt;,
            &lt;ItemAction
              key='share'
              imageSource={Images.shareIconLarge(item.color)}
              onPress={() =&gt; shareCampaign(item)}
            /&gt;,
            &lt;ItemAction
              key='block'
              imageSource={
                isBlocked(item.objectId)
                  ? Images.blockIconLargeFilled(item.color)
                  : Images.blockIconLarge(item.color)
              }
              onPress={() =&gt; setLocalSetting('blocked', addOrRemove(blocked, item.objectId))}
            /&gt;
          ]}
</code></pre>

<p>Reference Image is </p>

<p><a href=""https://i.stack.imgur.com/LwbOv.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/LwbOv.png"" alt=""Reference Image""></a></p>
","4198076","","","","","2017-09-15 10:22:06","Unable to swipe from right to left using react-native-interactable library?","<ios><react-native><react-native-ios>","0","0","","",""
"46529328","1","","","2017-10-02 16:04:42","","1","295","<p>I'm tasked with refactoring out an overuse of unneeded dependency injection using ReactJS/Redux.</p>

<p>The dependencies are injected using props within JSX markup like so:</p>

<pre><code>&lt;CardContainer
  addCountry={actions.addCountry}
  addDateRange={actions.addDateRangeFilter}
  addDistributor={actions.addDistributor}
  addListFilterItem={actions.addListFilterItem}
  addListFilterWithOneItem={actions.addListFilterWithOneItem}
  {/* ...other props removed for brevity */}
/&gt;
</code></pre>

<p>These props are repeated in several places all over the codebase (and for multiple components like this one).</p>

<p>I'm going through and removing the need to pass these functions as props to the <code>CardContainer</code> class and in its place using <strong>connect()</strong> (from the <code>react-redux</code> npm package) like so:</p>

<pre><code>export default connect(undefined, dispatch =&gt; ({
  actions: bindActionCreators(MyActions, dispatch),
}))(class DistributorFilterPaneCards extends Component {
  static propTypes = {
    addCountry: PropTypes.func,
    addDateRange: PropTypes.func,
    addDistributor: PropTypes.func,
    addListFilterItem: PropTypes.func,
    addListFilterWithOneItem: PropTypes.func,
</code></pre>

<p>What I've found though is that <strong>very rarely</strong> there is a prop, <strong>addCountry</strong> for example, that is passed a different function than all the others.</p>

<p>Basically, I want to have <strong>connect()</strong> work like the <strong>static defaultProps</strong> object. Is there a graceful way to allow <strong>connect()</strong> to be overridden by props passed through JSX so I can refactor it as needed instead of all over the codebase at once?</p>
","1107290","","","","","2017-10-02 16:17:08","Can props be written to override connect() in react-redux?","<javascript><node.js><reactjs><refactoring><react-redux>","1","0","","",""
"38121955","1","","","2016-06-30 11:35:46","","2","662","<p>I'm creating a small component library for react. Something that can be required like <code>var Components = require('components')</code>. This will have individual components, much like <code>react-bootstrap</code> does. I'm trying to use webpack with babel to compile this into an <code>index.js</code> file. The compilation went well. I published this to my local npm registry and installed it in one of my other projects. When I require it - <code>require('components')</code> - the require returns an empty object. Below is my folder structure</p>

<pre><code>root
 |- components
 |   |- ImageEditor.js
 |
 |- lib
 |   |- index.compiled.js (file compiled by webpack)
 |
 |- index.js (requires ./components/ImageEditor.js, entry point for webpack)
 |- webpack.config.js
</code></pre>

<p><strong>ImageEditor.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import Canvas from './utils/canvas';
import '../stylesheets/imageeditor.scss';

class ImageManipulation extends React.Component {
    static propTypes = {};
    state = {
        height: 200,
        width: 200,
        scale: 1.25
    };

    static defaultProps = {
        color: [213, 214, 217, 0.6],
        image: """"
    };

    ...

    render() {
        return (
            &lt;div className=""_react-image-manipulation""&gt;
                &lt;div className=""_cover-box""&gt;
                    { this.loadComponent() }
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }
}

export default ImageManipulation;
</code></pre>

<p><strong>index.js</strong></p>

<pre><code>import ImageEditor from './components/ImageEditor';

export default {
    ImageEditor
};
</code></pre>

<p><strong>webpack.config.js</strong></p>

<pre><code>var path = require('path');
var NODE_ENV = process.env.NODE_ENV || 'development';
var WebpackNotifierPlugin = require('webpack-notifier');
var UglifyJSPlugin = require(""webpack/lib/optimize/UglifyJsPlugin"");
var CleanWebpackPlugin = require(""clean-webpack-plugin"");

var commonPlugins = [
    new WebpackNotifierPlugin({
        title: 'Contour Components'
    })
];

function getPlugins() {
    if (NODE_ENV == 'prod') {
        commonPlugins.push(new CleanWebpackPlugin(['lib/*']));
        commonPlugins.push(new UglifyJSPlugin({
            compress: {
                warnings: false
            }
        }));
    }
    return commonPlugins;
}

module.exports = {
    devtool: 'sourcemap',
    entry: {
        index: './index.js'
    },
    output: {
        path: path.join(__dirname, 'public'),
        filename: '[name].compiled.js'
    },
    plugins: getPlugins(),
    module: {
        loaders: [{
            test: /\.js$/,
            loader: 'babel',
            query: {
                cacheDirectory: true,
                presets: ['es2015', 'stage-0', 'react'],
                plugins: ['add-module-exports', ""transform-class-properties""]
            },
            exclude: /node_modules/
        }, {
            test: /\.json$/,
            loader: 'json-loader'
        }, {
            test: /\.png$/,
            loader: ""url-loader?limit=100000&amp;mimetype=image/png""
        }, {
            test: /(\.scss|\.css)$/,
            include: /components/,
            loader: 'style!css!sass'
        }]
    },
    resolve: {
        extensions: ['', '.scss', '.js', '.json', '.png'],
        modulesDirectories: [
            'node_modules',
            'components'
        ]
    }
};
</code></pre>

<p>Any idea what I'm doing wrong here?</p>
","843241","","","","","2016-07-01 07:45:24","Unable to expose a component library in react with webpack and babel","<javascript><reactjs><ecmascript-6><webpack><babel>","1","4","","",""
"46666036","1","46666266","","2017-10-10 11:49:52","","1","714","<p>In this basic example of typescript react (create-react-app) I am trying to change the state.name by a user input.</p>

<p>Could someone show me a working example (which I didn't found) or better: where the documentation is?</p>

<p>The (second) error of the linter is : </p>

<blockquote>
  <p>(54,24): error TS2322: Type '{ onChange: (e: Event) => void; }' is not
  assignable to type
  'DetailedHTMLProps,
  HTMLInputElement>'.   Type '{ onChange: (e: Event) => void; }' is not
  assignable to type 'InputHTMLAttributes'.
      Types of property 'onChange' are incompatible.
        Type '(e: Event) => void' is not assignable to type 'EventHandler> | undefined'.
          Type '(e: Event) => void' is not assignable to type 'EventHandler>'.
            Types of parameters 'e' and 'event' are incompatible.
              Type 'ChangeEvent' is not assignable to type 'Event'.
                Property 'cancelBubble' is missing in type 'ChangeEvent'.</p>
</blockquote>

<pre><code>import * as React from 'react';
import './Hello.css';

interface Props {
    name: string;
}

interface State {
    name: string;
}

class Hello extends React.Component&lt;Props, State&gt; {

public static defaultProps = {
    name: 'John',
};

constructor(props: Props) {
    super(props);
    this.state = {
        name: props.name,
    };
    this.handleChange = this.handleChange.bind(this);
}

handleChange(e: Event): void {
    this.setState({
        name: e.target.value //Error : property 'value' does not exist on type 'EventTarget'
    });
}

render(): JSX.Element {
    return (
        &lt;div className=""hello""&gt;
            Hello {this.state.name}
            &lt;input onChange={(e: Event) =&gt; this.handleChange(e)} /&gt; //error is at this line
        &lt;/div&gt;
      );
   }
}

export default Hello;
</code></pre>
","6661258","","","","","2017-10-10 12:01:41","typescript react setState with user input","<reactjs><typescript>","1","0","","",""
"46701623","1","","","2017-10-12 04:50:01","","0","192","<p>I am unit testing react component. One component imports other component and use its props. Here are jsx files :</p>

<pre><code>class First extends React.PureComponent {
    render() {
        const { name, isSelected, onClick } = this.props;
        const activeClass = isSelected ? styles.active : '';
        return (
            &lt;div
                className={`${styles.first} ${activeClass}`}
                role=""button""
                tabIndex={0}
                onClick={() =&gt; onClick(name)}
            &gt;
                {name}
            &lt;/div&gt;
        );
    }
}

First.propTypes = {
    name: PropTypes.string.isRequired,
    isSelected: PropTypes.bool,
    onClick: PropTypes.func,
};

export default First;
</code></pre>

<p>Here is my second class that imports this class :
i</p>

<pre><code>mport First from '../First/First';

const Second = ({ values, passedVal, onClick }) =&gt; {
    const second = values.map(vlaue =&gt;
        &lt;First
            key={value}
            name={value}
            isSelected={value === passedVal}
            onClick={onClick}
        /&gt;,
    );

    return (
        &lt;div &gt;
            {Second}
        &lt;/div&gt;
    );
};

Second.propTypes = {
    values: PropTypes.arrayOf(PropTypes.string),
    passedVal: PropTypes.string,
    onClick: PropTypes.func,
};

export default FilterList;
</code></pre>

<p>Here is my test. I want to test isSelected condition in my test :</p>

<pre><code>describe('Second - Unit test', () =&gt; {
    let props;
    let secondComponent;

    const second = () =&gt; {
        if (!secondComponent) {
            secondComponent = shallow(&lt;Second {...props} /&gt;);
        }
        return secondComponent;
    };
      beforeEach(() =&gt; {
        props = Second.defaultProps;
        secondComponent = undefined;
    });

   it('verify value of isSelected ', () =&gt; {
             props.passedVal='value01';
             props.value=['value01'];
            console.log(props.isSelected);
           });
</code></pre>

<p>It gives me undefined as this is prop of First class. How can i verify this logic here. Need to make instance of first and then check?</p>
","8322878","","379008","","2017-10-12 07:15:54","2017-10-12 07:15:54","unit test a react component- jest, enzyme","<javascript><reactjs><enzyme><jest>","2","0","","",""
"44711549","1","44938877","","2017-06-23 01:06:31","","0","1648","<blockquote>
  <p>How to prevent react component click event from bubble up to document ?</p>
</blockquote>

<p><strong>I can sure that there must be something was wrong with it!</strong></p>

<p>So, may be I should help myself fix it!</p>

<p>I just have a box component which has a click event listener, and there are some link components in that box which are effected by a document click event. How can I remove this document click event?</p>

<p>Can someone do me a favor?</p>

<h2>More details info can be found in following links!</h2>

<p>Here is the code link : <a href=""https://github.com/ant-design/ant-design/issues/6576"" rel=""nofollow noreferrer"">https://github.com/ant-design/ant-design/issues/6576</a></p>

<ol>
<li>Click has no effect, it should link to <code>item3</code>!</li>
</ol>

<p><a href=""https://i.stack.imgur.com/IInwd.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IInwd.png"" alt=""https://user-images.githubusercontent.com/29531779/27420431-6ae3eb5a-5758-11e7-9a36-1af944cd616a.png""></a></p>

<ol start=""2"">
<li>Remove <code>document</code>'s click event</li>
</ol>

<p><a href=""https://i.stack.imgur.com/fqdos.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fqdos.png"" alt=""https://user-images.githubusercontent.com/29531779/27420435-6c0438fa-5758-11e7-9144-65aca59956cb.png""></a></p>

<ol start=""3"">
<li>After that, it works!</li>
</ol>

<p><a href=""https://i.stack.imgur.com/UpZS6.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UpZS6.png"" alt=""https://user-images.githubusercontent.com/29531779/27420561-012899c6-5759-11e7-8376-43c5939148a8.png""></a></p>

<h1>What's wrong with this?</h1>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';

import logo from './logo.svg';
import './App.css';

// import SideBox from './SideBox.js';

// import ContentBox from './ContentBox.js';

/*import SidebarExample from './test.js';*/

// import ReactDOMServer from 'react-dom/server';

import {
    BrowserRouter as Router,
    Route,
    Link
} from 'react-router-dom';

import Item1 from './components/Item1.js';
import Item2 from './components/Item2.js';
import Item3 from './components/Item3.js';


import {Menu, Icon} from 'antd';

import 'antd/dist/antd.css';

const SubMenu = Menu.SubMenu;


const element = &lt;h1&gt;Hello, world&lt;/h1&gt;;


const elements = () =&gt; {
    return(
        &lt;h1&gt;Hello, world&lt;/h1&gt;
    );
};

const routes = [
    {
        path: '/',
        exact: true,
        sidebar: () =&gt; &lt;div&gt;item1&lt;/div&gt;,
        main: () =&gt; &lt;div&gt;&lt;Item1 /&gt;&lt;/div&gt;
    },
    {
        path: '/item2',
        sidebar: () =&gt; &lt;div&gt;item2&lt;/div&gt;,
        main: () =&gt; &lt;div&gt;&lt;Item2 /&gt;&lt;/div&gt;
    },
    {
        path: '/item3',
        sidebar: () =&gt; &lt;div&gt;item3&lt;/div&gt;,
        main: () =&gt; &lt;div&gt;&lt;Item3 /&gt;&lt;/div&gt;
    }
]

class App extends Component {
    constructor(props) {
        super(props);
        this.state = {
            message: props.message,
            styles: props.styles,
            Any: props.any,
            width: props.width,
            theme: 'dark',
            current: '1'
        };
        this.handleMenuClick = this.handleMenuClick.bind(this);
        this.handleClick = this.handleClick.bind(this);
    };
    handleClick(e) {
        console.log('click ', e);
        this.setState({
            current: e.key,
        });
    };
    // ES7 property initializer syntax
    handleMenuClick = (e) =&gt; {
        e.preventDefault();
        // e.stopPropagation();
        // e.nativeEvent.stopImmediatePropagation();
        console.log('this is:', this);
        console.log(""clicked === \n"", e);
        if(this.state.styles === ""App-SideBox-init""){
            this.setState({
                message: ""e.key"",
                styles: ""App-SideBox-New"",
                width: ""width: 40px;""
            });
        }
        if(this.state.styles === ""App-SideBox-New""){
            this.setState({
                message: ""Hello!"",
                styles: ""App-SideBox-init"",
                width: ""width: 300px;""
            });
        }
        console.log(""this.state.message === "", this.state.message);
        console.log(""this.state.styles === "", this.state.styles);
    };
    componentDidMount() {
        /*window.addEventListener('scroll', this.onScroll.bind(this), false);*/
        // window.removeEventListener('click', this.handleMenuClick.bind(this), false);
        // window.removeEventListener('click', this.handleClick.bind(this), false);
    };
    render() {
        return (
            &lt;div className=""App""&gt;
                &lt;div className=""App-header""&gt;
                    &lt;img id=""img"" src={logo} className=""App-logo"" alt=""logo"" style={this.props.width}/&gt;
                    &lt;h2&gt;Welcome to React&lt;/h2&gt;
                &lt;/div&gt;
                &lt;div className=""App-SideBox""&gt;
                    &lt;div className={this.state.styles}&gt;
                        &lt;Router&gt;
                                &lt;div&gt;
                                    &lt;div style={{ display: 'flex' }}&gt;
                                        &lt;div style={{
                                                padding: '10px',
                                                width: '30%',
                                                background: '#f0f0f0'
                                            }}&gt;
                                            &lt;div className=""SideBox-body"" style={{ display: 'flex' }}&gt;
                                                &lt;Menu
                                                        theme={this.state.theme}
                                                        onClick={this.handleClick}
                                                        style={{ width: 240 }}
                                                        defaultOpenKeys={['sub1']}
                                                        selectedKeys={[this.state.current]}
                                                        mode=""inline""
                                                    &gt;
                                                    &lt;SubMenu
                                                            key=""sub1""
                                                            title={
                                                                &lt;span&gt;
                                                                    &lt;Icon type=""mail"" /&gt;
                                                                    &lt;span&gt;Navigation One&lt;/span&gt;
                                                                &lt;/span&gt;
                                                            }
                                                        &gt;
                                                        &lt;Menu.Item key=""1""&gt;
                                                            &lt;Link to=""/""&gt; item1&lt;/Link&gt;
                                                        &lt;/Menu.Item&gt;
                                                        &lt;Menu.Item key=""2""&gt;
                                                            &lt;Link to=""/item2""&gt;item2&lt;/Link&gt;
                                                        &lt;/Menu.Item&gt;
                                                        &lt;Menu.Item key=""3""&gt;
                                                            &lt;Link to=""/item3""&gt;item3&lt;/Link&gt;
                                                        &lt;/Menu.Item&gt;
                                                    &lt;/SubMenu&gt;
                                                &lt;/Menu&gt;
                                            &lt;/div&gt;
                                        &lt;/div&gt;
                                    &lt;/div&gt;
                                &lt;/div&gt;
                            &lt;/Router&gt;
                    &lt;/div&gt;
                    {/*onClick={this.handleMenuClick}*/}
                    &lt;div onClick={this.handleMenuClick} className=""App-SideBox-btn""&gt;
                        &lt;span&gt;icon&lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div className=""App-body""&gt;
                    &lt;Router&gt;
                        &lt;div&gt;
                            &lt;div&gt;
                                &lt;div style={{ flex: 1, padding: '10px' }}&gt;
                                    {
                                        routes.map((route, index) =&gt; (
                                            &lt;Route
                                                key={index}
                                                path={route.path}
                                                exact={route.exact}
                                                component={route.main}
                                            /&gt;
                                        ))
                                    }
                                &lt;/div&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/Router&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }
};

App.defaultProps = {
    message: 'Hello!',
    styles: 'App-SideBox-init'
};

App.propTypes = {
    message: PropTypes.string.isRequired,
    styles: PropTypes.string.isRequired,
    width: PropTypes.string
};

export default App;</code></pre>
</div>
</div>
</p>
","","user8202629","","user8202629","2017-06-23 09:48:23","2017-08-09 16:13:40","How to prevent react component click event bubble to document?","<javascript><reactjs><click>","1","5","2","",""
"45344764","1","","","2017-07-27 08:03:47","","1","114","<p>I know that it is considered the best practice to have stateless components most of the time and the logic and state of that components should be kept in their parent. But the problem here is that if another parent component needs to have the same child components (or some of them), we have to recreate the same logic and state in that parent component too. So this is why we have state and stateful components, so that they could manage their own state and manage their own behaviour to avoid code duplication.</p>

<p>A good example of such a component is a <a href=""https://facebook.github.io/react/docs/forms.html#controlled-components"" rel=""nofollow noreferrer"">Controlled input component</a>. So far so good, but I need to have a way to control its state from a parent component, if for example I want to empty its value or autocorrect it. For this we have <a href=""https://facebook.github.io/react/docs/react-component.html#componentwillreceiveprops"" rel=""nofollow noreferrer"">componentWillReceiveProps()</a>.</p>

<pre><code>class Input extends React.Component {
  static propTypes = {
    value: PropTypes.string,
    label: PropTypes.string,
  };

  static defaultProps = {
    value: '',
    label: '',
  };

  constructor(props) {
    super(props);
    this.state = { value: props.value };

    this.handleChange = this.handleChange.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    this.setState({ value: nextProps.value });
  }

  handleChange(event) {
    this.setState({value: event.target.value});
  }

  render() {
    return (
      &lt;label&gt;
        {this.props.label}:
        &lt;input type=""text"" value={this.state.value} onChange={this.handleChange} /&gt;
      &lt;/label&gt;
    );
  }
}
</code></pre>

<p>So the <code>Parent</code> passes down a new value to its <code>Input</code> component and <code>Input</code> updates its state in its <code>componentWillReceiveProps</code> function. The problem here is that now we have to keep <code>Input</code> value in the <code>Parent</code> all the time. Because if we don't pass it down, then it will be taken from <code>Input</code> <code>defaultProps</code> and it will be impossible to modify <code>Input</code> value anymore.</p>

<p>What I would like to achieve is that if the <code>Parent</code> passes down the value to <code>Input</code>, then <code>Input</code> should use it and update its state. But when it doesn't, but passes down other props, then <code>Input</code> should keep its own value.</p>

<p>The thing is that it is impossible to tell in <code>componentWillReceiveProps</code> function whether the prop was passed as <code>undefined</code> or it was equal to the value of the <code>defaultProps</code>. A possible solution could be not to use <code>defaultProps</code> at all. But not using such a core feature of ReactJS seems wrong to me.</p>
","8374037","","3595565","","2017-07-27 08:55:08","2017-07-27 08:55:08","How to manage stateful components in reactjs","<reactjs>","0","3","","",""
"38027177","1","38028049","","2016-06-25 09:54:30","","1","549","<p>I am using react-router and react-router-redux to handle navigation on my page. I need change my url programmatically inside component. I was trying to use this method: history.push to achieve this but this method is only change the url and component associated with this url is not updated. This app is simple list with pagination so when i switch to the next page url is changing for example /posts/1 to /posts/2 but view is not updated. I think this should work like this:</p>

<ol>
<li>User click pagination item and click handler is called passing
page number as argument</li>
<li>Inside click handler i call history.push(/posts/[page]). I could
use Link component but i want to be able to do something when user
click pagination item</li>
<li>I expect that my ObjectList component will be mounted again and
componentDidMount will be called</li>
</ol>

<p>This is probably not the best aproach so i will be greatfull for tips
links are hardcoded especially first argument
My source code:</p>

<p>client.js</p>

<pre><code>import React from ""react"";
import ReactDOM from ""react-dom"";
import {Router, Route, IndexRoute, browserHistory} from ""react-router"";
import Results from ""./views/Results"";
import Home from ""./views/Home"";
import App from './components/App'
import { Provider } from 'react-redux';
import store, { history } from './store';


const app = document.getElementById('app');

ReactDOM.render(
  &lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
        &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={Home} /&gt;
        &lt;Route path=""/:category/:cityId/:pageNum"" component={Results}&gt;&lt;/Route&gt;
    &lt;/Route&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;,
  app
);
</code></pre>

<p>store.js</p>

<pre><code>import { createStore, compose, applyMiddleware } from 'redux'
import { syncHistoryWithStore } from 'react-router-redux'
import thunkMiddleware from 'redux-thunk'
import { browserHistory } from 'react-router'
import rootReducer from './reducers/index'
import createLogger from 'redux-logger'
import categories from './data/categories'

const loggerMiddleware = createLogger()

const defaultState = {
    categories,
    resultsList: {
      objects: [],
      counters: [],
      isFetching: false
    }
};

const store = createStore(
  rootReducer,
  defaultState,
  compose (
    applyMiddleware(
      thunkMiddleware,
      loggerMiddleware
    ),
    window.devToolsExtension ? window.devToolsExtension() : f =&gt; f
  )
);
export const history = syncHistoryWithStore(browserHistory, store)
export default store
</code></pre>

<p>ObjectList.js</p>

<pre><code>import React from ""react"";
import ObjectItem from ""../components/ObjectItem""
import Loader from ""../components/Loader""
import fetchObjects from ""../actions/actionCreators"";
import switchUrl from ""../actions/actionCreators"";
import PaginationPanel from ""../components/PaginationPanel""
import classNames from 'classnames'
import { push } from 'react-router-redux';
import { browserHistory } from 'react-router'
import store, { history } from '../store';


export default class ObjectList extends React.Component {
  static defaultProps = {
      objectsPerPage: 20,
      objectContainerClassName: 'object_list_items'
  }

  constructor(props) {
      super(props);
  }

  componentDidMount() {
    this.props.fetchObjects(this.props.params.pageNum);
  }

  paginateHandler(page) {
      this.props.history.push('/hotele/1/'+page)
  }

  render() {
    const { resultsList } = this.props

    if(resultsList.items.length &gt; 0) {
      const ObjectComponents = resultsList.items.map((item) =&gt; {
          return &lt;ObjectItem key={item.post_id} {...item}/&gt;;
      });

      const paginationComponent =
        &lt;PaginationPanel
            {...this.props}
            pageNum={Math.ceil(resultsList.counters.allPosts/this.props.objectsPerPage)}
            pageClickedHandler={this.paginateHandler.bind(this)}
            currentPage={parseInt(this.props.params.pageNum)}
        /&gt;

      return (
        &lt;div className=""object-lists""&gt;
            &lt;div className={this.props.objectContainerClassName}&gt;
                &lt;div&gt;{ObjectComponents}&lt;/div&gt;
            &lt;/div&gt;
            {paginationComponent}
        &lt;/div&gt;
      )
    }
    else if(!resultsList.isFetching || resultsList.items.length === 0) {
      return &lt;Loader /&gt;;
    }
  }
}
</code></pre>

<p>Home.js</p>

<pre><code>import React from ""react""
import { Link } from ""react-router""


const Home = React.createClass({
  render() {
    return (
      &lt;div&gt;
          Strona główna &lt;br /&gt;
      &lt;Link to={`/hotele/1/1`}&gt;Lista wyszukiwania&lt;/Link&gt;
      &lt;/div&gt;
    )
  }
})

export default Home
</code></pre>

<p>Results.js</p>

<pre><code>import React from ""react"";
import ObjectList from ""../components/ObjectList""
import CategoryTabs from ""../components/CategoryTabs""
import fetchObjects from ""../actions/actionCreators""


export default class Results extends React.Component{
  constructor(props) {
    super(props);
  }

  render() {
      return (
          &lt;div&gt;
              &lt;CategoryTabs { ...this.props } /&gt;
              &lt;ObjectList { ...this.props } /&gt;
          &lt;/div&gt;
      );
  }
}
</code></pre>

<p>reducers/index.js</p>

<pre><code>import { combineReducers } from 'redux'
import { routerReducer } from 'react-router-redux'

import objects from './objects'
import categories from './categories'

const rootReducer = combineReducers({objects, categories, routing: routerReducer})

export default rootReducer
</code></pre>

<p>reducers/objects.js</p>

<pre><code>function objects(state = {
  isFetching: false,
  items: [],
  counters: []
}, action) {
  switch (action.type) {
    case 'RECEIVE_OBJECTS':
      return Object.assign({}, state, {
        isFetching: false,
        items: action.objects.posts,
        counters: action.objects.counters
      })
    default:
      return state;
  }
}

export default objects
</code></pre>

<p>app.js</p>

<pre><code>import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'
import * as actionCreators from '../actions/actionCreators';
import Main from '../components/Main';


function mapStateToProps(state) {
  return {
    resultsList: state.objects,
    categories: state.categories
  }
}

function mapDispatchToProps(dispatch) {
  return bindActionCreators(actionCreators, dispatch);
}

const App = connect(mapStateToProps, mapDispatchToProps)(Main);

export default App;
</code></pre>

<p>actionCreators.js</p>

<pre><code>import fetch from 'isomorphic-fetch'
import { push } from 'react-router-redux';


function receiveObjects(objects, json) {
  return {
    type: 'RECEIVE_OBJECTS',
    objects
  }
}

function requestObject(pageNum) {
  return {
    type: 'REQUEST_OBJECTS',
    pageNum
  }
}

export function fetchObjects(pageNum) {
  return dispatch =&gt; {
      dispatch(requestObject(pageNum));

      let url = 'http://localhost:8080/posts?city=986283&amp;type=hotel&amp;page='+pageNum;

      return fetch(url)
        .then(response =&gt; response.json())
        .then(json =&gt; dispatch(receiveObjects(json)));
  }
}
</code></pre>
","873425","","708635","","2016-06-25 14:06:41","2016-06-25 14:06:41","How to handle navigation using reactjs and redux","<reactjs><redux><react-router><react-router-redux>","1","0","","",""
"47141735","1","","","2017-11-06 16:39:54","","1","111","<p>With the following code I expect Flow to complain about the default prop <code>foo</code> that is not a <code>string</code> but a <code>number</code>.</p>

<pre><code>// @flow

import React from 'react'

type Props = {
  foo: string
}

class ClassComponent extends React.Component&lt;Props&gt; {
  static defaultProps = {
    foo: 23
  }
  render () {
    return &lt;div&gt;foo: {this.props.foo}&lt;/div&gt;
  }
}
</code></pre>

<p>(Code can be used on <a href=""https://flow.org/try/"" rel=""nofollow noreferrer"">https://flow.org/try/</a>)</p>

<p>With <code>v0.52</code> this worked as expected but since <code>v0.53</code> Flow does not care about defaultProps anymore.</p>

<pre><code>// @flow

import React from 'react'

type Props = {
  foo: string
}

class ClassComponent extends React.Component&lt;Props&gt; {
  static defaultProps = {
    foo: 23
  }
  render () {
    this.props.foo = 23 // Flow complains now with the expected error
    return &lt;div&gt;foo: {this.props.foo}&lt;/div&gt;
  }
}
</code></pre>

<p>Behaves the same with <code>v0.58</code>.</p>

<p>Is this a bug or do I miss something?</p>
","1120481","","","","","2017-11-06 16:39:54","Does Flow ignore defaultProps since v0.53?","<javascript><ecmascript-6><flowtype>","0","1","","",""
"38941360","1","","","2016-08-14 10:33:51","","0","1518","<p>I am trying to build a web app where I am trying to call a function on button click. I am using react-engine as templating engine using JSX pages. Below is my layout.jsx page</p>

<pre><code>import React from 'react';
import Success from ""./components/success.jsx""; 
import ReactDOM from 'react-dom'; 

class Layout extends React.Component {
    constructor(props) {
        super(props);
        this.displayName = 'Layout';
        this.state = {data:[]};
        //this.arrayHandler = this.arrayHandler.bind(this);
        this.forceUpdateHandler = this.forceUpdateHandler.bind(this);
        this.printHandler = this.printHandler.bind(this);

    }

    /*function submitter(){
        //console.log(""in submitter function"", user.value);
    },*/
    /*arrayHandler(){
        var item = ""first item"";
        var myArray = this.state.data;
        myArray.push(item);
        this.setState({data:myArray})
    }*/

    forceUpdateHandler(){
        return this.forceUpdate();
    }

    printHandler(){
        return this.displayName = ""Sourav"";
    }

    render() {
        return (
            &lt;html&gt;
                &lt;head&gt;
                    &lt;title&gt;JSX&lt;/title&gt;
                &lt;/head&gt;

                &lt;body&gt;
                    &lt;h1&gt;Welcome to React JSX Page&lt;/h1&gt;
                    &lt;div id = ""maincontent""&gt;

                        &lt;Message msg = ""Displaying message""/&gt; 
                        &lt;p id = ""para""&gt;&lt;/p&gt; 
                        &lt;Success successMsg = ""Transaction successful""/&gt;
                        &lt;h2&gt;Arrays: {this.props.propArray}&lt;/h2&gt;
                        &lt;h2&gt;Objects: {this.props.propObject.objectName1}&lt;/h2&gt;

                        &lt;input type = ""button"" onClick = {this.props.propHandler} value = ""Add items""/&gt;
                        &lt;h3&gt;State Arrays: {this.state.data}&lt;/h3&gt;

                        &lt;button onClick = {this.forceUpdateHandler}&gt;FORCE UPDATE&lt;/button&gt;
                        &lt;h4&gt;Random number: {Math.random()}&lt;/h4&gt;

                        &lt;button onClick = {this.printHandler}&gt;Show name&lt;/button&gt;
                        &lt;p&gt;{this.displayName}&lt;/p&gt;

                    &lt;/div&gt;
                &lt;/body&gt;

            &lt;/html&gt;
            );
    }
}

Layout.propTypes = {
    propArray: React.PropTypes.array.isRequired,
    propObject: React.PropTypes.object,
    propHandler: React.PropTypes.func
}

Layout.defaultProps = {
    propArray: [1,2,3,4,5],
    propHandler: function arrayHandler(){
                    var item = ""first item"";
                    var myArray = this.state.data;
                    myArray.push(item);
                    this.setState({data:myArray})
                },
    propObject: {
      objectName1:""objectValue1"",
      objectName2: ""objectValue2"",
      objectName3: ""objectValue3""
   }
}

class Message extends React.Component{
    render(){
        return(
            &lt;div&gt;
                &lt;h2&gt;{this.props.msg}&lt;/h2&gt;
            &lt;/div&gt;
            )
    }
}



//ReactDOM.render(&lt;Layout/&gt;, );


export default Layout;
</code></pre>

<p>i have tried calling the function using both this.props as well as calling directly after binding this to it. However, both the approaches did not work.</p>

<p>Could you please help me with this. I am totally stuck here.</p>
","5568862","","","","","2016-08-14 13:06:57","onClick button event handler not working when using react.js JSX pages","<javascript><node.js><reactjs><react-jsx><react-engine>","1","3","1","",""
"47552487","1","","","2017-11-29 12:07:11","","1","133","<p>I am a redux beginner and stuck at passing redux props to route render problem. </p>

<pre><code>×
TypeError: Cannot read property 'quantity' of undefined
PageLayout._this.render
src/components/controls/PageLayoutRoute/PageLayoutRoute.js:135
  132 |     to: routes.checkout,
  133 |     withArrow: true,
  134 |     bold: true,
&gt; 135 |     disabled: (this.props.nonFrameDisplay.quantity == 0 &amp;&amp; this.props.frameDisplay.quantity == 0) ? true : false
  136 |   };
  137 | }
  138 | 
</code></pre>

<p>PageLayoutRoute looks like this.</p>

<pre><code>const PageLayoutRoute = ({component: Component, ...rest }) =&gt; {
  return (
  &lt;Route
    {...rest}
    render={props =&gt;
      &lt;PageLayout {...props}&gt;
        &lt;Component /&gt;
      &lt;/PageLayout&gt;}
  /&gt;
  )
};

PageLayoutRoute.propTypes = {
  component: PropTypes.func.isRequired,
};
const mapStateToProps = state =&gt; ({
  nonFrameDisplay: state.app.nonFrameDisplay,
  frameDisplay: state.app.frameDisplay,
});
const mapDispatchToProps = {
};
export default withRouter(connect(mapStateToProps, mapDispatchToProps)(PageLayoutRoute));
</code></pre>

<p>PageLayout component is contained within PageLayoutRout. Looks like this.</p>

<pre><code>class PageLayout extends React.Component {
  static propTypes = {
    children: PropTypes.node.isRequired,
    hideTopNav: PropTypes.bool,
    hideBottomNav: PropTypes.bool,
    ...bottomNavProps
  };

  static defaultProps = {
    hideTopNav: false,
    hideBottomNav: false
  };
</code></pre>

<p>How can I pass nonFrameDisplay, FrameDisplay props from redux store via Route render using react-router-dom ? Thanks in advance!</p>
","6062109","","","","","2017-11-29 12:29:27","How to pass redux store props via Route render using react-router?","<reactjs><redux><react-redux><react-router-v4><react-router-dom>","1","1","","",""
"39885009","1","39888356","","2016-10-05 23:05:15","","0","1012","<p>When I look at the following line in this <a href=""https://github.com/clauderic/react-sortable-hoc"" rel=""nofollow"">example</a>:</p>

<p><code>const SortableItem = SortableElement(({value}) =&gt; &lt;li&gt;{value}&lt;/li&gt;);</code></p>

<p>then I don't understand <strong>where is the lambda function</strong> <code>({value}) =&gt; &lt;li&gt;{value}&lt;/li&gt;</code> <strong>used</strong> in <a href=""https://github.com/clauderic/react-sortable-hoc/blob/master/src/SortableElement/index.js"" rel=""nofollow"">SortableElement</a> ?</p>

<p>Can someone please enlighten me ?</p>

<p>SortableElement's code:</p>

<pre><code>import React, {Component, PropTypes} from 'react';
import {findDOMNode} from 'react-dom';
import invariant from 'invariant';

// Export Higher Order Sortable Element Component
export default function SortableElement (WrappedComponent, config = {withRef: false}) {
    return class extends Component {
        static displayName = (WrappedComponent.displayName) ? `SortableElement(${WrappedComponent.displayName})` : 'SortableElement';
        static WrappedComponent = WrappedComponent;
        static contextTypes = {
            manager: PropTypes.object.isRequired
        };
        static propTypes = {
            index: PropTypes.number.isRequired,
            collection: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
            disabled: PropTypes.bool
        };
        static defaultProps = {
            collection: 0
        };
        componentDidMount() {

            let {collection, disabled, index} = this.props;

            if (!disabled) {
                this.setDraggable(collection, index);
            }
        }
        componentWillReceiveProps(nextProps) {
            const {index} = this.props;
            if (index !== nextProps.index &amp;&amp; this.node) {
                this.node.sortableInfo.index = nextProps.index;
            }
            if (this.props.disabled !== nextProps.disabled)
            {
                let {collection, disabled, index} = nextProps;
                if (disabled) {
                    this.removeDraggable(collection);
                }
                else {
                    this.setDraggable(collection, index);
                }
            }
        }
        componentWillUnmount() {
            let {collection, disabled} = this.props;

            if (!disabled) this.removeDraggable(collection);
        }
        setDraggable(collection, index){
            let node = this.node = findDOMNode(this);

            node.sortableInfo = {index, collection};

            this.ref = {node};
            this.context.manager.add(collection, this.ref);
        }
        removeDraggable(collection) {
            this.context.manager.remove(collection, this.ref);
        }
        getWrappedInstance() {
            invariant(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableElement() call');
            return this.refs.wrappedInstance;
        }
        render() {
            const ref = (config.withRef) ? 'wrappedInstance' : null;
            return (
                &lt;WrappedComponent ref={ref} {...this.props} /&gt;
            );
        }
    }
}
</code></pre>
","1198559","","","","","2016-10-06 08:47:16","function argument in component's constructor in react.js","<reactjs>","3","0","","",""
"48177861","1","","","2018-01-09 22:55:52","","1","285","<p>I've got a component that creates a field with list of Radio inputs. The created component seems to work, it is rendered correctly, dispatches the proper redux actions, and update it's state properly. However the selected radio input never gets checked in the UI.</p>

<pre><code>import React from 'react';
import Immutable from 'immutable';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { Field } from 'react-redux-form/immutable';

const RadioField = ({ fieldId, label, model, hasError, options }) =&gt; {
  const error = hasError ? 'has-error' : '';
  return (
    &lt;div className={`form-group ${error}`}&gt;
      &lt;label className=""control-label"" htmlFor={fieldId}&gt;{label}&lt;/label&gt;
      &lt;Field model={model} id={fieldId} &gt;
        {options.map(option =&gt; (
          &lt;label
            key={`${fieldId}-${option.get('id')}`}
            htmlFor={`radio-${fieldId}-${option.get('value')}`}
            className=""radio-inline""
          &gt;
            &lt;input
              id={`radio-${fieldId}-${option.get('value')}`}
              value={`${option.get('value')}`}
              type=""radio""
            /&gt;
            {option.get('display')}
          &lt;/label&gt;
        ))}
      &lt;/Field&gt;
    &lt;/div&gt;
  );
};

RadioField.defaultProps = {
  fieldId: 'radio-field-id',
  label: 'Radio Field:',
  model: '.radio',
  hasError: false,
  options: Immutable.List(),
};

RadioField.propTypes = {
  fieldId: PropTypes.string.isRequired,
  label: PropTypes.string.isRequired,
  model: PropTypes.string.isRequired,
  hasError: PropTypes.bool,
  options: ImmutablePropTypes.listOf(
    ImmutablePropTypes.shape({
      id: PropTypes.number,
      display: PropTypes.string,
      value: PropTypes.any,
    }),
  ).isRequired,
};

export default RadioField;
</code></pre>

<p>My gut tells me it has something to do with the <code>Field</code> not being able to properly locate the input that has the selected value or the redux state isn't getting passed properly to the <code>Field</code>'s children <code>Control</code> components.</p>

<p>Any help would be greatly appreciated. Thanks!</p>
","2934581","","","","","2018-01-10 15:32:09","react-redux-form Radio Field not updating checked prop","<javascript><reactjs><redux><immutable.js><react-redux-form>","1","0","","",""
"37262047","1","","","2016-05-16 19:46:04","","10","3239","<p>I'm using React with TypeScript and I've created stateless function. I've removed useless code from the example for readability.</p>

<pre><code>interface CenterBoxProps extends React.Props&lt;CenterBoxProps&gt; {
    minHeight?: number;
}

export const CenterBox = (props: CenterBoxProps) =&gt; {
    const minHeight = props.minHeight || 250;
    const style = {
        minHeight: minHeight
    };
    return &lt;div style={style}&gt;Example div&lt;/div&gt;;
};
</code></pre>

<p>Everything is great and this code is working correctly. But there's my question: how can I define <code>defaultProps</code> for <code>CenterBox</code> component?</p>

<p>As it is mentioned in <a href=""https://facebook.github.io/react/docs/reusable-components.html#stateless-functions"" rel=""noreferrer"">react docs</a>:</p>

<blockquote>
  <p>(...) They are pure functional transforms of their input, with zero
  boilerplate. However, you may still specify .propTypes and
  <strong>.defaultProps</strong> by setting them as properties on the function, just as
  you would set them on an ES6 class. (...)</p>
</blockquote>

<p>it should be easy as:</p>

<pre><code>CenterBox.defaultProps = {
    minHeight: 250
}
</code></pre>

<p>But this code generates TSLint error: <code>error TS2339: Property 'defaultProps' does not exist on type '(props: CenterBoxProps) =&gt; Element'.</code></p>

<p>So again: how can I correctly define <code>defaultProps</code> in my above stack (React + TypeScript)?</p>
","382971","","382971","","2016-05-16 20:05:41","2017-06-06 02:34:00","React with TypeScript - define defaultProps in stateless function","<reactjs><typescript>","2","0","3","",""
"46001210","1","46733414","","2017-09-01 13:21:47","","0","207","<p>Implementing React from couple of months. I used '<a href=""https://www.npmjs.com/package/react-predictive-input"" rel=""nofollow noreferrer"">react-predictive-input</a>' for predicting items from the pre-defined list on <strong>onchange</strong> event. </p>

<p>With ""large"" data sets (500/1000 items) the AutoComplete component becomes very slow especially when typing the first 3 characters because it will render many items in the dropdown slowing the entire interface, even using a maxHeight for the component.</p>

<p>Do we have any attribute as 'max-items' to show from the list?</p>

<p>Below is the snippet of code :</p>

<pre><code> &lt;Autocomplete
         id=""items""
         placeholder=""My Items""
         data={this.props.items}
         onSelected={this.onItemSelected.bind(this)} /&gt;
</code></pre>

<p>Function is invoked if item is selected</p>

<pre><code> onItemSelected(value){
         console.log(`${value} was selected`);
     }
</code></pre>

<p>List of items</p>

<pre><code>static defaultProps = {
  items:[
   'car','Bicycle','Truck','Green Van'............................1000items]
};
</code></pre>

<p>Text prediction works fine, speed and display are becoming an issue to handle.</p>
","5648627","","","","","2017-10-13 15:36:10","To limit number of items to be displayed in react predictive input","<javascript><jquery><reactjs><react-native>","1","0","1","",""
"38774914","1","","","2016-08-04 18:32:46","","2","1194","<p>I have a React component which also makes use of its children using <code>this.props.children</code>:</p>

<pre><code>import classnames from 'classnames';
import React from 'react';

export default function Toolbar(props) {
    return &lt;ul className=""sulu-Toolbar""&gt;{props.children}&lt;/ul&gt;;
}

Toolbar.Item = class extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            open : false
        };
    }

    static propTypes = {
        title: React.PropTypes.string,
        isChild: React.PropTypes.bool
    };

    static defaultProps = {
        title: '',
        isChild: false
    };

    render() {
        var classNames = classnames({
            'sulu-Toolbar-Item': !this.props.isChild,
            'sulu-Toolbar-Item-Dropdown-Item': this.props.isChild
        });

        return &lt;li className={classNames} onClick={this.onClick}&gt;
            {this.props.title} {this.props.children ? &lt;span className=""sulu-Toolbar-Item-Arrow""/&gt; : ''}
            {!!this.props.children ? this.getChildren() : ''}
        &lt;/li&gt;;
    }

    getChildren = () =&gt; {
        var children = null;

        if (!!this.state.open) {
            children = &lt;ul className=""sulu-Toolbar-Item-Dropdown""&gt;
                {
                    this.props.children.map((child) =&gt; {
                        return &lt;Toolbar.Item {...child.props} key={child.key} isChild={true}/&gt;;
                    })
                }
            &lt;/ul&gt;;
        }

        return children;
    };

    onClick = () =&gt; {
        !!this.props.children ? this.toggleOpen() : this.props.onClick();
    };

    toggleOpen = () =&gt; {
        this.setState({open: !this.state.open});
    };
};
</code></pre>

<p>This works great so far in a browser, but when I want to test it using enzyme I get a strange error. This is the test:</p>

<pre><code>import {mount, shallow} from 'enzyme';
import React from 'react';
import test from 'tape';

import Toolbar from '../src/toolbar';

import './setup.js';

test('Toolbar item should open and close', (t) =&gt; {
    const toolbarItem = mount(&lt;Toolbar.Item&gt;&lt;Toolbar.Item/&gt;&lt;/Toolbar.Item&gt;);

    t.test('Toolbar item should open', (t) =&gt; {
        t.plan(1);
        toolbarItem.find('li').simulate('click');
        t.equals(toolbarItem.find('p').length, 1);
    });

    t.test('Toolbar item should close', (t) =&gt; {
        t.plan(1);
        toolbarItem.find('li').simulate('click');
        t.equals(toolbarItem.find('p').length, 0);
    });
});

test('Toolbar item should execute onclick handler', (t) =&gt; {
    t.plan(1);

    const toolbarItem = shallow(&lt;Toolbar.Item onClick={() =&gt; {t.ok(true)}}/&gt;);

    toolbarItem.find('li').simulate('click');
});

test ('Toolbar item should show title', (t) =&gt; {
    t.plan(1);

    const toolbarItem = shallow(&lt;Toolbar.Item title=""Test""/&gt;);

    t.ok(toolbarItem.contains('Test'));
});
</code></pre>

<p>When I want to execute that test I get the following error message:</p>

<pre><code>&gt; @ test /Users/daniel/Development/personal/react-playground
&gt; tape -r ./test/babel-register-setup test/*-test.js

TAP version 13
# Toolbar item should open and close
# Toolbar item should open
/Users/daniel/Development/personal/react-playground/src/toolbar.js:54
                    _this.props.children.map(function (child) {
                                         ^

TypeError: _this.props.children.map is not a function
    at _class._this.getChildren (toolbar.js:45:41)
    at _class.render (toolbar.js:35:43)
    at ReactCompositeComponentMixin._renderValidatedComponentWithoutOwnerOrContext (/Users/daniel/Development/personal/react-playground/node_modules/react/lib/ReactCompositeComponent.js:785:34)
    at ReactCompositeComponentMixin._renderValidatedComponent (/Users/daniel/Development/personal/react-playground/node_modules/react/lib/ReactCompositeComponent.js:811:32)
    at ReactCompositeComponentMixin._updateRenderedComponent (/Users/daniel/Development/personal/react-playground/node_modules/react/lib/ReactCompositeComponent.js:735:36)
    at ReactCompositeComponentMixin._performComponentUpdate (/Users/daniel/Development/personal/react-playground/node_modules/react/lib/ReactCompositeComponent.js:715:10)
    at ReactCompositeComponentMixin.updateComponent (/Users/daniel/Development/personal/react-playground/node_modules/react/lib/ReactCompositeComponent.js:634:12)
    at ReactCompositeComponentMixin.performUpdateIfNecessary (/Users/daniel/Development/personal/react-playground/node_modules/react/lib/ReactCompositeComponent.js:548:12)
    at Object.ReactReconciler.performUpdateIfNecessary (/Users/daniel/Development/personal/react-playground/node_modules/react/lib/ReactReconciler.js:165:22)
    at runBatchedUpdates (/Users/daniel/Development/personal/react-playground/node_modules/react/lib/ReactUpdates.js:151:21)

npm ERR! Darwin 15.4.0
npm ERR! argv ""/usr/local/Cellar/node/6.3.1/bin/node"" ""/usr/local/bin/npm"" ""run"" ""test""
npm ERR! node v6.3.1
npm ERR! npm  v3.10.3
npm ERR! code ELIFECYCLE
npm ERR! @ test: `tape -r ./test/babel-register-setup test/*-test.js`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the @ test script 'tape -r ./test/babel-register-setup test/*-test.js'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the  package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     tape -r ./test/babel-register-setup test/*-test.js
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /Users/daniel/Development/personal/react-playground/npm-debug.log
</code></pre>

<p>I have tried to do that with <code>mount</code> and <code>shallow</code>, although I would prefer <code>shallow</code> of course. But both functions don't work as I expect. For <code>mount</code> I am also using jsdom, with the following <code>setup.js</code> script which is included in the test:</p>

<pre><code>import jsdom from 'jsdom';

if (typeof document === 'undefined') {
    global.document = jsdom.jsdom('&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;');
    global.window = document.defaultView;
    global.navigator = window.navigator;
}
</code></pre>

<p>And ideas what I am doing wrong?</p>

<p>UPDATE:</p>

<p>When I am adding a <code>console.log(this.props.children)</code> to the code I get the following structure in the test:</p>

<pre><code>{ '$$typeof': Symbol(react.element),
  type:
   { [Function: _class]
     propTypes: { title: [Object], isChild: [Object] },
     defaultProps: { title: '', isChild: false } },
  key: null,
  ref: null,
  props: { title: '', isChild: false },
  _owner: null,
  _store: {} }
</code></pre>
","1292378","","1292378","","2016-08-05 05:13:02","2017-08-03 15:53:31","this.props.children.map is not a function when testing react component with enzyme","<testing><reactjs><jsdom><enzyme>","0","4","","",""
"38493178","1","38512175","","2016-07-21 00:57:52","","1","43","<p>So there have been a couple of times now where I have needed to set the state of a component based on properties that are computed at render. As a result, the component is rerendered sometimes. This isn't a huge concern, but it feels hacky and not the ""react-way"". So I am wondering if someone has a better solution. </p>

<p>So the most recent example is an expandable text component. Similar to the review element on airbnb</p>

<p><a href=""https://i.stack.imgur.com/FTc0I.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FTc0I.png"" alt=""enter image description here""></a></p>

<p>This was fairly easy. But the last part was to detect whether there was any overflow and not display the ""More"" option if it is unnecessary. The solution I came up with was to check if the scrollHeight was greater than the clientHeight and set some state based on that. This is a simplified version of my solution. </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, { Component, PropTypes } from 'react';
import classNames from 'classnames'

function isOverflowed(element) {
  return element.scrollHeight &gt; element.clientHeight;
}

export default class ExpandableText extends Component {
  static propTypes = {
    content: PropTypes.string,
    maxHeight: PropTypes.number,
  };

  static defaultProps = {
    isOpen: false,
    maxHeight: 10,
  }

  constructor(props) {
    super(props);

    this.handleOpen = this.handleOpen.bind(this);
    this.handleClose = this.handleClose.bind(this);

    this.state = {
      isOpen: props.isOpen,
      isOverFlowed: true,
    };
  }

  componentDidMount() {
    if (!isOverflowed(this.refs.content)) {
      this.setState({ isOpen: true, isOverFlowed: false });
    }
  }

  handleOpen() {
    this.setState({ isOpen: true });
  }

  handleClose() {
    this.setState({ isOpen: false });
  }

  render() {
    const { content, maxHeight } = this.props;
    const { isOpen, isOverFlowed } = this.state;
    const contentClassName = classNames('expandable-text', {
      'expandable-text__content--closed': !isOpen,
      'expandable-text__content--open': isOpen,
    });
    const actionsClassName = classNames('expandable-text__actions', { hide: !isOverFlowed })
    return (
      &lt;div className=""expandable-text""&gt;
        &lt;div
          ref=""content""
          className={contentClassName}
          style={{
            maxHeight: isOpen ? 'none' : `${maxHeight}rem`,
          }}
        &gt;
			&lt;p&gt;{content}&lt;/p&gt;
        &lt;/div&gt;
        &lt;div className={actionsClassName}&gt;
          &lt;button onClick={isOpen ? this.handleClose : this.handleOpen}&gt;{isOpen ? 'Close': 'Open'}&lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}</code></pre>
</div>
</div>
</p>

<p>So there is a decent amount going on, but the important thing is in <code>componentDidMount</code> I am checking the overflow and then setting state (potentially) based on that. </p>

<p>Now I realize that this could probably be accomplished by allowing a limit on number of characters instead of height, or some other solution. But if we assume the solution is similar to this, is there a more react-way to do this? (That doesn't require a rerender)</p>
","1775222","","","","","2016-07-21 18:49:37","What is the react-way to handle state that will be impacted by refs","<javascript><reactjs>","1","0","","",""
"40182155","1","","","2016-10-21 17:13:50","","0","213","<p>When I ran the jasmine as a gulp task, the test seems runs well, though first one is always considered failed. I am not sure where the problem is.</p>

<p>React Component</p>

<pre><code>import React, { PropTypes } from 'react';

const propTypes = {};

const defaultProps = {};

class Foo extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      &lt;div className=""foo""&gt; &lt;/div&gt;
    );
  }
}

Foo.propTypes = propTypes;
Foo.defaultProps = defaultProps;

export default Foo;
</code></pre>

<p>Spec File</p>

<pre><code>import React from 'react';
import { shallow, mount, render } from 'enzyme';
import Foo from './foo.react';
import jsDom from 'jsdom';

global.document = jsDom.jsdom('');
global.window = document.defaultView;
Object.keys(document.defaultView).forEach((property) =&gt; {
  if (typeof global[property] === 'undefined') {
    global[property] = document.defaultView[property];
  }
});

global.navigator = {
  userAgent: 'node.js'
};


describe(""A suite"", function() {
  it(""contains spec with an expectation"", function() {
    console.log(shallow(&lt;Foo /&gt;));
    expect(shallow(&lt;Foo /&gt;).contains(&lt;div className=""foo"" /&gt;)).toBe(true);//.toBe(true)
  });

  it(""contains spec with an expectation"", function() {
    expect(shallow(&lt;Foo /&gt;).is('.foo')).toBe(true);
  });

  it(""contains spec with an expectation"", function() {
    expect(mount(&lt;Foo /&gt;).find('.foo').length).toBe(1);
  });
});
</code></pre>

<p>Result</p>

<p><a href=""https://i.stack.imgur.com/3CanP.png"" rel=""nofollow""><img src=""https://i.stack.imgur.com/3CanP.png"" alt=""enter image description here""></a></p>
","2646226","","","","","2016-10-21 20:34:07","Expected false to be true when test react component with jasmine jsdom and enzyme","<unit-testing><reactjs><jasmine><jsdom><enzyme>","2","0","","",""
"46763037","1","","","2017-10-16 04:38:00","","0","26","<p>I have 2 buttons each with its own React-Native <code>Animated.View</code> and <code>new Animated.Value(0)</code> respectively. However, both the buttons are activating all at once when I press either of them with onPress. How can I make them invoke separately? 
Please see below pictures for example <br>
<a href=""https://i.stack.imgur.com/XLAzJ.jpg"" rel=""nofollow noreferrer"">My Buttons Unclicked</a> <br>
<a href=""https://i.stack.imgur.com/MSnZq.jpg"" rel=""nofollow noreferrer"">Clicked</a> <br></p>

<p>My Code below.</p>

<pre><code>import React from 'react';
import { Animated, Text, View, TouchableWithoutFeedback } from 'react-native';
import { compose, withState, lifecycle } from 'recompose';
import styles from './AnimatedButtonStyles';
import PropTypes from 'prop-types';

const AnimatedButton = (props) =&gt; {
  const backgroundColor = props.fadeAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ['yellow', 'purple'],
  });

  const borderWidth = props.fadeAnim.interpolate({
    inputRange: [0, 1],
    outputRange: [2, 0],
  });

  const onPressIn = () =&gt; {
    Animated.timing(props.fadeAnim, {
      toValue: 1,
      duration: 0,
    }).start();
  };

  const onPressOut = () =&gt; {
    Animated.timing(props.fadeAnim, {
      toValue: 0,
      duration: 200,
    }).start();
  };

  return (
    &lt;TouchableWithoutFeedback onPressIn={onPressIn} onPressOut={onPressOut} onPress={props.onPress} &gt;
      &lt;Animated.View
        style={{
          ...props.style,
          backgroundColor,
          borderWidth,
          borderColor: 'red',
          justifyContent: 'center',
          alignItems: 'center',
          }}
      &gt;
        &lt;Text style={[styles.number, props.numberStyle]}&gt; {props.number} &lt;/Text&gt;
      &lt;/Animated.View&gt;
    &lt;/TouchableWithoutFeedback&gt;

  );
};

AnimatedButton.defaultProps = {
  numberStyle: {},
};

export default compose(withState('fadeAnim', 'updateFadeAnim', new Animated.Value(0)))(AnimatedButton);
</code></pre>

<p>I run it with 2 separate invocations of <code>AnimatedButton</code></p>

<pre><code> &lt;View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}&gt;
      &lt;AnimatedButton
        style={{ width: 250, height: 50 }}
        onPress={action('textClicked')}
        number={4}
      /&gt;
      &lt;AnimatedButton
        style={{ width: 250, height: 50 }}
        onPress={action('textClicked')}
        number={5}
      /&gt;
 &lt;/View&gt;
</code></pre>

<p><br>
Thanks</p>
","8558943","","","","","2017-10-16 04:38:00","How to handle react-native animations seperately","<javascript><react-native><react-native-android><react-animated>","0","0","","",""
"47302724","1","","","2017-11-15 08:35:17","","0","204","<p>I am facing some error while integrating the Paypal checkout button on the page. When I click on the Button, a pop of PayPal should open, but here in my case I don't know why the popup is not showing properly, it opens and getting closed. Can anyone tell me what I am doing wrong?</p>

<blockquote>
  <p>Error in console: index.js:1193 Warning: Failed prop type: The prop
  <code>client</code> is marked as required in <code>PaypalButton</code>, but its value is
  <code>undefined</code>.
      in PaypalButton (created by ScriptLoader)
      in ScriptLoader (created by MyApp)
      in MyApp</p>
</blockquote>

<p>Here is my code.</p>

<h1>PaypalExpressCheckOut.js</h1>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import scriptLoader from 'react-async-script-loader';
import PropTypes from 'prop-types';

class PaypalButton extends React.Component {
  constructor(props) {
    super(props);
    window.React = React;
    window.ReactDOM = ReactDOM;
    this.state = {
      showButton: false,
      env: 'sandbox', // Or 'sandbox'
      client: {
        sandbox: 'AVYr65d7UewdrCT5k8sa5ywOSHCsTEZOuYT5eJJhTIW9IAyUXZltXmWeYLn_qaFYr7_Iq44kSJrReuMT', // sandbox client ID
        production: 'AZPD3t-x0T3zF5-8TgZKhkIcWPAirBEEGE5xxk14ejRPhgiUwpnIxBtnC9BnrxGJCoMof9Gr2iXYhSNs' // production client ID
      },
      commit: true, // Show a 'Pay Now' button
    };
  }
  componentDidMount() {
    const { isScriptLoaded, isScriptLoadSucceed } = this.props;
    if (isScriptLoaded &amp;&amp; isScriptLoadSucceed) {
      this.setState({ showButton: true });
    }
  }
  componentWillReceiveProps({ isScriptLoaded, isScriptLoadSucceed }) {
    if (!this.state.show) {
      if (isScriptLoaded &amp;&amp; !this.props.isScriptLoaded) {
        if (isScriptLoadSucceed) {
          this.setState({ showButton: true });
        } else {
          console.log('Cannot load Paypal script!');
          this.props.onError();
        }
      }
    }
  }

  render() {
    const payment = () =&gt; paypal.rest.payment.create(this.props.env, this.props.client, {
      transactions: [
                    { amount: { total: this.props.total, currency: this.props.currency } },
      ],
    });

    const onAuthorize = (data, actions) =&gt; actions.payment.execute().then(() =&gt; {
      const payment = Object.assign({}, this.props.payment);
      payment.paid = true;
      payment.cancelled = false;
      payment.payerID = data.payerID;
      payment.paymentID = data.paymentID;
      payment.paymentToken = data.paymentToken;
      payment.returnUrl = data.returnUrl;
      this.props.onSuccess(payment);
    });

    let ppbtn = '';
    if (this.state.showButton) {
      ppbtn = (&lt;paypal.Button.react
        env={this.state.env}
        client={this.state.client}
        payment={payment}
        commit
        onAuthorize={onAuthorize}
        onCancel={this.props.onCancel}
      /&gt;);
    }
    return &lt;div&gt;{ppbtn}&lt;/div&gt;;
      // console.log('client', client)
  }
}

PaypalButton.propTypes = {
  currency: PropTypes.string.isRequired,
  total: PropTypes.number.isRequired,
  client: PropTypes.object.isRequired,
};

PaypalButto.log('The payment was succeeded!', payment);
  },
  onCancel: (data) =&gt; {
    console.log('The payment was cancelled!', data);
  },
  onError: (err) =&gt; {
    console.log('Error loading Paypal script!', err);
  },
};

export default scriptLoader('https://www.paypalobjects.com/api/checkout.js')(PaypalButton);n.defaultProps = {
  env: 'sandbox',
  onSuccess: (payment) =&gt; {
    console.log('The payment was succeeded!', payment);
  },
  onCancel: (data) =&gt; {
    console.log('The payment was cancelled!', data);
  },
  onError: (err) =&gt; {
    console.log('Error loading Paypal script!', err);
  },
};

export default scriptLoader('https://www.paypalobjects.com/api/checkout.js')(PaypalButton);
</code></pre>

<h1>App.jsx</h1>

<pre><code>import React from 'react';
import PaypalExpressBtn from './PayPalExpressCheckOut';

export default class MyApp extends React.Component {
    render() {    
        const onSuccess = (payment) =&gt; {
            console.log(""Your payment was succeeded!"", payment);
        }         
        const onCancel = (data) =&gt; {
            // User pressed ""cancel"" or close Paypal's popup! 
            console.log('You have cancelled the payment!', data);
        }         
        const onError = (err) =&gt; {
 // The main Paypal's script cannot be loaded or somethings block the loading of that script! 
            console.log(""Error!"", err);
// Since the Paypal's main script is loaded asynchronously from ""https://www.paypalobjects.com/api/checkout.js"" 
// =&gt; sometimes it may take about 0.5 second for everything to get set, or for the button to appear      
        }               
        let currency = 'USD'; // or you can set this value from your props or state   
        let total = 1.00; // same as above, this is the total amount (based on currency) to be paid by using Paypal express checkout 
 return (
    console.log(currency),
    console.log(total),
            &lt;PaypalExpressBtn 
currency={currency}
total={total}
onError={onError}
onSuccess={onSuccess}
onCancel={onCancel}
 /&gt;
        );
    }  
 }
</code></pre>

<h1>main.js</h1>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import MyApp from './App.jsx';

ReactDOM.render(&lt;MyApp /&gt;, document.getElementById('app'));
</code></pre>

<h1>index.html</h1>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang = ""en""&gt;

   &lt;head&gt;
      &lt;meta charset = ""UTF-8""&gt;
      &lt;title&gt;React App&lt;/title&gt;
      &lt;link rel = ""stylesheet"" type = ""text/css"" href = ""css/style.css""&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div id = ""app""&gt;&lt;/div&gt;
      &lt;!-- &lt;link rel = ""stylesheet"" type = ""text/css"" href = ""/css/style.css""&gt; --&gt;
      &lt;script src = ""index.js""&gt;&lt;/script&gt;
   &lt;/body&gt;

&lt;/html&gt;
</code></pre>
","7200192","","","","","2017-11-15 08:35:17","Paypal Checkout Button with react js and jsx","<javascript><reactjs><paypal>","0","4","","",""
"47349942","1","47350802","","2017-11-17 11:46:32","","0","229","<p>I have been trying to use react-select-fast-filter-options by passing props.options, but the filtering does not happen. All the options are getting rendered but the filter doesn't work.</p>

<p>I am also getting a warning:
Warning: getDefaultProps is only used on classic React.createClass definitions. Use a static property named <code>defaultProps</code> instead.</p>

<p>This is how I am trying to use the fast-filter:</p>

<pre><code>import React, { Component } from 'react';
import VirtualizedSelect, { Value } from 'react-virtualized-select';
import createFilterOptions from 'react-select-fast-filter-options';
import 'react-select/dist/react-select.css';
import styles from './CategoryDropdown.less';
import CategoryDropdownOption from './CategoryDropdownOption';
import CategoryDropdownValue from './CategoryDropdownValue';

class CategoryDropdown extends Component {

  constructor(props, context) {
    super(props, context);
    **const filterOptions = createFilterOptions({
      labelKey: 'code',
      options: props.options
    });**
    this.sortOptions = this.sortOptions.bind(this);
    this.setValue = this.setValue.bind(this);
    this.clearValue = this.clearValue.bind(this);
    const dValue = props.defaultValue ? props.defaultValue : {};
    this.state = { value: dValue, options: [], selectedOption:{}, filterOptions };
  }

  componentDidMount() {
    this.sortOptions(this.props.options);
    this.setValue('');
  }

  componentWillReceiveProps(nextProps) {
    this.sortOptions(nextProps.options);
  }

  clearValue() {
    this.setState({ value: '' });
    this.setState({selectedOption:{}});
  }

    return (
      &lt;div
        key={key}
        className={classNames.join(' ')}
        onClick={() =&gt; {
          focusOption(option);
          selectValue(option);
        }}
        onMouseDown={(e) =&gt; {
          e.preventDefault();
          e.stopPropagation();
          focusOption(option);
          selectValue(option);
        }}
        onMouseEnter={() =&gt; { focusOption(option); }}
        style={style}
        title={option.label}&gt;
        &lt;div className=""categoryOptionType""&gt;
          &lt;span className={option.categoryName}&gt;{option.categoryDisplayName}&lt;/span&gt;
        &lt;/div&gt;
        &lt;div className=""optionLabelContainer""&gt;
          &lt;span className=""optionLabel""&gt;{value}&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }

  render() {
    const {filterOptions} = this.state;
    return (
      &lt;VirtualizedSelect
        simpleValue
        clearable={true}
        label='code'
        name=""form-field-name""
        multi={this.props.multi}
        optionHeight={20}
        onChange={this.setValue}
        **filterOptions={filterOptions}**
        options={this.state.options}
        searchable={true}
        value={this.state.selectedOption}
        optionRenderer={this.virtualOptionRenderer}
        valueComponent={this.props.emptyValueComponent ? Value : CategoryDropdownValue}
        className={this.props.className || 'categoryDropdown'}
        optionClassName={this.props.optionClassName || 'categoryOption'}
        placeholder={this.props.placeholder || 'Start typing to search'}
        autosize={this.props.autosize !== false}
        //matchProp=""label""
      /&gt;

    );
  }
}

export default CategoryDropdown;
</code></pre>
","8957388","","","","","2017-11-17 12:35:45","react-select-fast-filter-options filter does not work","<reactjs><filter><react-redux><react-select>","1","2","","",""
"47641714","1","47642246","","2017-12-04 20:47:54","","2","812","<p>Here is the carousel I am using: <a href=""https://github.com/akiran/react-slick"" rel=""nofollow noreferrer"">react-slick</a></p>

<p>I want to be able to scroll through each slide using the mouse scroll up or down event. </p>

<p>Scroll up to increment, scroll down to decrement. </p>

<p>Found an example online of exactly what I need - just unsure of how to convert this into a react solution.</p>

<p>Example: <a href=""https://codepen.io/Grawl/pen/mMLQQb"" rel=""nofollow noreferrer"">https://codepen.io/Grawl/pen/mMLQQb</a></p>

<p>What would be the best way to achieve this in a ""react"" component based approach? </p>

<p>Here is my react component: </p>

<pre><code>import React from 'react';
import PropTypes from 'prop-types';
import styles from './styles.css';
import ReactSVG from 'react-svg';
import Slider from 'react-slick';


import MobileSVG from '../../../assets/svg/icons/Mobile_Icon_Option2.svg';
import TabletSVG from '../../../assets/svg/icons/Tablet_Icon_Option2.svg';
import DesktopSVG from '../../../assets/svg/icons/Desktop_Icon_Option2.svg';

const deviceIcons = {'mobile': MobileSVG, 'tablet': TabletSVG, 'desktop': DesktopSVG};

import BackToTopButton from '../BackToTopButton';

export default class ProductComponent extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
        };

    }

    render() {
        const {productData} = this.props

        //Slider settings
        const settings = {
            dots: true,
            infinite: false,
            speed: 500,
            fade: true,
            arrows: false,
            centerMode: true,
            slidesToShow: 1,
            slidesToScroll: 1
        }

        //Slider items
        const sliderItems = productData.map((obj, i) =&gt; {
            return (
                &lt;div className=""product-component row"" key={i}&gt;
                    &lt;div className=""product-component-image-wrap col-xs-12 col-sm-8""&gt;
                        &lt;span className=""product-heading""&gt;{obj.category}&lt;/span&gt;
                        &lt;div className=""product-detail-wrap""&gt;
                            &lt;img className=""product-component-image"" src={`${process.env.DB_URL}${obj.image}`} /&gt;
                            &lt;ul className=""list-device-support""&gt;
                                {obj.categoryDeviceSupport.map((obj, i) =&gt; {
                                    return (&lt;li key={i}&gt;
                                        &lt;span className=""svg-icon""&gt;
                                            &lt;ReactSVG path={deviceIcons[obj.value]} /&gt;
                                        &lt;/span&gt;
                                        &lt;span className=""product-label""&gt;{obj.label}&lt;/span&gt;
                                    &lt;/li&gt;)
                                })}
                            &lt;/ul&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div className=""product-component-info col-xs-12 col-sm-3""&gt; 
                        &lt;span className=""align-bottom""&gt;{obj.title}&lt;/span&gt;
                        &lt;p className=""align-bottom""&gt;{obj.categoryBrief}&lt;/p&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            )
        });
        return (
            &lt;div className=""product-component-wrap col-xs-12""&gt;
                &lt;Slider {...settings}&gt;
                    {sliderItems}
                &lt;/Slider&gt;
                &lt;BackToTopButton scrollStepInPx=""50"" delayInMs=""7"" /&gt;
            &lt;/div&gt;
        )
    }
}

ProductComponent.propTypes = {
    productData: PropTypes.array
};

ProductComponent.defaultProps = {
    productData: []
};
</code></pre>
","665312","","","","","2018-01-11 06:47:05","react-slick carousel cycle through slides with scroll-event - react js, javascript","<javascript><reactjs><react-slick>","2","0","","",""
"46468300","1","46469313","","2017-09-28 11:44:12","","0","174","<p>is the the correct way to define <strong>proptypes</strong> for flow in <strong>react-native</strong>? I am looking for some guidelines.</p>

<pre><code>// @flow

import React from 'react';
import { TouchableOpacity, Image, StyleSheet } from 'react-native';

type Props = {
  style?: StyleSheet.Styles,
  onPress: () =&gt; mixed,
  source: Image.propTypes.source
};

const IconButton = (props: Props) =&gt; (
   &lt;TouchableOpacity onPress={props.onPress}&gt;
     &lt;Image style={props.style} source={props.source} /&gt;
   &lt;/TouchableOpacity&gt;
);

IconButton.defaultProps = {
  style: {}
};
</code></pre>

<p>export default IconButton;</p>

<p>How I use it is like this as an example:</p>

<pre><code>&lt;IconButton
    onPress={()=&gt;{}}
    style={this.props.style}
    source={require('./assets/images/circle.png')}
 /&gt;
</code></pre>
","642769","","544779","","2017-10-01 10:16:12","2017-10-01 10:16:12","Using react native prop type with flow","<react-native><flowtype>","1","0","","",""
"39480399","1","","","2016-09-13 23:27:23","","0","3750","<p>React 0.14 introduced <a href=""https://facebook.github.io/react/docs/reusable-components.html#stateless-functions"" rel=""nofollow"">stateless functional components</a>.</p>

<blockquote>
  <p>you may still specify <code>.propTypes</code> and <code>.defaultProps</code> by setting them as properties on the function</p>
</blockquote>

<p>However, I want to initialize one of the props to a random value (per instance) if it's not set. I can't do that if <code>defaultProps</code> only accepts an object. Is there a way to initialize it using a function, or do I have to create a full React component?</p>
","65387","","65387","","2016-09-13 23:39:33","2016-09-14 08:31:48","React stateless functional components defaultProps function","<reactjs>","2","2","1","",""
"46948736","1","","","2017-10-26 07:56:29","","1","427","<p>I'm using react-native v0.49 and i have error when i run qrcode scanner.</p>

<pre><code> cannot read property oneOftype undefined
</code></pre>

<p>scanpage component</p>

<pre><code>    import React, { Component } from 'react';
import {
    View,
    Text,
    TouchableOpacity,
    Linking,
    StyleSheet,
} from 'react-native';
// styles
import { style } from './style';
import { globalStyle } from '../../../assets/styles/globalStyle';

// redux
import { connect } from 'react-redux';
import * as actions from '../../../actions';


//third party library
import QRCodeScanner from 'react-native-qrcode-scanner';


class ScanPage extends Component {
    constructor(props) {
        super(props);
        this.state = {
            barcodeText: ''
        }

    }
    onSuccess(e) {
        this.setState({ barcodeText: e.data });
        console.log(e);
    }

    render() {
        const { } = style;


        return (
            &lt;QRCodeScanner
                onRead={this.onSuccess.bind(this)}
                topContent={(
                    &lt;Text style={styles.centerText}&gt;
                        Go to &lt;Text style={styles.textBold}&gt;wikipedia.org/wiki/QR_code&lt;/Text&gt; on your computer and scan the QR code.
          &lt;/Text&gt;
                )}
                bottomContent={(
                    &lt;TouchableOpacity style={styles.buttonTouchable}&gt;
                        &lt;Text style={styles.buttonText}&gt;OK. Got it!&lt;/Text&gt;
                    &lt;/TouchableOpacity&gt;
                )}
            /&gt;
        );
    }
}

const mapStateToProps = () =&gt; {

}
const styles = StyleSheet.create({
    centerText: {
      flex: 1,
      fontSize: 18,
      padding: 32,
      color: '#777',
    },

    textBold: {
      fontWeight: '500',
      color: '#000',
    },

    buttonText: {
      fontSize: 21,
      color: 'rgb(0,122,255)',
    },

    buttonTouchable: {
      padding: 16,
    },
  });

export default connect(null, actions)(ScanPage);
</code></pre>

<p>I checked into the node_modules the react-native-qcode-scanner folder into examples and I did exaclty the example. in addition in index.js of this folder of the plugin I see the oneOfType property but I don't see any wrong from my side. that's the index.js of the node_modules-> react-native-qrcode-scanner</p>

<pre><code> 'use strict';

    import React, { Component } from 'react';
    import PropTypes from 'prop-types';

    import {
      StyleSheet,
      Dimensions,
      Vibration,
      Animated,
      Easing,
      View,
      Text,
      Platform,
    } from 'react-native';

    import Camera from 'react-native-camera'


    export default class QRCodeScanner extends Component {
      static propTypes = {
        onRead: PropTypes.func.isRequired,
        reactivate: PropTypes.bool,
        reactivateTimeout: PropTypes.number,
        fadeIn: PropTypes.bool,
        showMarker: PropTypes.bool,
        customMarker: PropTypes.element,
        containerStyle: PropTypes.any,
        cameraStyle: PropTypes.any,
        topViewStyle: PropTypes.any,
        bottomViewStyle: PropTypes.any,
        topContent: PropTypes.oneOfType([
          PropTypes.element,
          PropTypes.string,
        ]),
        bottomContent: PropTypes.oneOfType([
          PropTypes.element,
          PropTypes.string,
        ]),
        notAuthorizedView: PropTypes.element,
      }

      static defaultProps = {
        onRead: () =&gt; (console.log('QR code scanned!')),
        reactivate: false,
        reactivateTimeout: 0,
        fadeIn: true,
        showMarker: false,
        notAuthorizedView: (
          &lt;View style={{
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center',
          }}&gt;
            &lt;Text style={{
              textAlign: 'center',
              fontSize: 16,
            }}&gt;
              Camera not authorized
            &lt;/Text&gt;
          &lt;/View&gt;
        ),
      }

      constructor(props) {
        super(props);
        this.state = {
          scanning: false,
          fadeInOpacity: new Animated.Value(0),
          isAuthorized: false,
        }

        this._handleBarCodeRead = this._handleBarCodeRead.bind(this);
      }

      componentWillMount() {
        if (Platform.OS === 'ios') {
          Camera.checkVideoAuthorizationStatus().then(isAuthorized =&gt; {
            this.setState({ isAuthorized })
          })
        }
        else {
          this.setState({ isAuthorized: true })
        }
      }


      componentDidMount() {
        if (this.props.fadeIn) {
          Animated.sequence([
            Animated.delay(1000),
            Animated.timing(
              this.state.fadeInOpacity,
              {
                toValue: 1,
                easing: Easing.inOut(Easing.quad),
              },
            )
          ]).start();
        }
      }

      _setScanning(value) {
        this.setState({ scanning: value });
      }

      _handleBarCodeRead(e) {
        if (!this.state.scanning) {
          Vibration.vibrate();
          this._setScanning(true);
          this.props.onRead(e)
          if (this.props.reactivate) {
            setTimeout(() =&gt; (this._setScanning(false)), this.props.reactivateTimeout);
          }
        }
      }

      _renderTopContent() {
        if (this.props.topContent) {
          return this.props.topContent;
        }
        return null;
      }

      _renderBottomContent() {
        if (this.props.bottomContent) {
          return this.props.bottomContent;
        }
        return null;
      }

      _renderCameraMarker() {
        if (this.props.showMarker) {
          if (this.props.customMarker) {
            return this.props.customMarker;
          } else {
            return (
              &lt;View style={styles.rectangleContainer}&gt;
                &lt;View style={styles.rectangle} /&gt;
              &lt;/View&gt;
            );
          }
        }
        return null;
      }

      _renderCamera() {
        const { notAuthorizedView } = this.props
        const { isAuthorized } = this.state
        if (isAuthorized) {
          if (this.props.fadeIn) {
            return (
              &lt;Animated.View
                style={{
                  opacity: this.state.fadeInOpacity,
                  backgroundColor: 'transparent'
                }}&gt;
                &lt;Camera style={[styles.camera, this.props.cameraStyle]} onBarCodeRead={this._handleBarCodeRead.bind(this)}&gt;
                  {this._renderCameraMarker()}
                &lt;/Camera&gt;
              &lt;/Animated.View&gt;
            )
          }
          return (
            &lt;Camera style={[styles.camera, this.props.cameraStyle]} onBarCodeRead={this._handleBarCodeRead.bind(this)}&gt;
              {this._renderCameraMarker()}
            &lt;/Camera&gt;
          )
        } else {
          return notAuthorizedView
        }
      }

      reactivate() {
        this._setScanning(false);
      }

      render() {
        return (
          &lt;View style={[styles.mainContainer, this.props.containerStyle]}&gt;
            &lt;View style={[styles.infoView, this.props.topViewStyle]}&gt;
              {this._renderTopContent()}
            &lt;/View&gt;
            {this._renderCamera()}
            &lt;View style={[styles.infoView, this.props.bottomViewStyle]}&gt;
              {this._renderBottomContent()}
            &lt;/View&gt;
          &lt;/View&gt;
        )
      }
    }

    const styles = StyleSheet.create({
      mainContainer: {
        flex: 1
      },
      infoView: {
        flex: 2,
        justifyContent: 'center',
        alignItems: 'center',
        width: Dimensions.get('window').width,
      },

      camera: {
        flex: 0,
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: 'transparent',
        height: Dimensions.get('window').width,
        width: Dimensions.get('window').width,
      },

      rectangleContainer: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: 'transparent',
      },

      rectangle: {
        height: 250,
        width: 250,
        borderWidth: 2,
        borderColor: '#00FF00',
        backgroundColor: 'transparent',
      },
    })
</code></pre>
","6455516","","","","","2017-10-26 07:56:29","react-native-qrcode-scanner cannot read property oneOftype undefined","<react-native><qr-code>","0","0","","",""
"39248429","1","39249197","","2016-08-31 11:29:35","","1","70","<p>I'm not sure why I'm getting the switch from controlled to uncontrolled input warning. <code>this.state.lineItemName</code> is defined in my constructor which seems to be the main mistake from other SO questions I've read.</p>

<p>This is very similar to the <a href=""https://github.com/tastejs/todomvc/blob/gh-pages/examples/react/js/app.jsx"" rel=""nofollow"">todoMVC</a> implementation for React.</p>

<pre><code>class LineItemForm extends React.Component {
  constructor(props) {
    super(props);
      this.state = {
        newLineItem: """"
      }
  }

  render() {
    return(
      &lt;tr&gt;
        &lt;td&gt;
          &lt;input type=""text""
            onChange={this.handleChange.bind(this)}
            onKeyDown={this.handleKeyDown.bind(this)}
            value={this.state.newLineItem}
            placeholder=""Search for an item...""
            autoFocus={true}
          /&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    );
  }

  handleChange(e) {
    this.setState({newLineItem: event.target.value});
  }

  handleKeyDown(e) {
    if (e.keyCode === this.props.ENTER_KEY_CODE || e.keyCode === this.props.TAB_KEY_CODE) {
      e.preventDefault();

      let name = e.target.value.trim();

      if (name) {
        let lineItem = {
          name: name
        };
        this.props.createLineItem(lineItem, this.props.sectionId)
        this.setState({newLineItem: """"})
      }
    } else {
      return;
    }
  }
}

LineItemForm.defaultProps = {
    ENTER_KEY_CODE: 13,
    TAB_KEY_CODE: 9
}
</code></pre>
","2317064","","2259144","","2016-08-31 12:25:40","2016-08-31 12:25:40","Why am I switching from controlled to uncontrolled input in react","<javascript><reactjs><ecmascript-6>","2","0","","",""
"47711075","1","","","2017-12-08 09:16:20","","0","106","<p>I am learning react the hard way. I would like to add business listings on google maps as markers and as list on a sidebar as per <a href=""https://www.fullstackreact.com/articles/react-tutorial-cloning-yelp"" rel=""nofollow noreferrer"">this</a> google maps clone.How can i add the place name with lat/lng from a json file to be rendered as a listing and as marker on the map. </p>

<p><strong>Listing Component:</strong></p>

<pre><code>import React, { PropTypes as T } from 'react'
import classnames from 'classnames'

import Item from './Item';
import styles from './styles.module.css'

export class Listing extends React.Component {
  render() {
    return (
      &lt;div className={classnames(styles.container)}&gt;
      {this.props.places.map(place =&gt; {
        return (
          &lt;Item place={place}
                onClick={this.props.onClick}
                onHighlight={this.props.onHighlight}
                offHighlight={this.props.offHighlight}
                key={place.id} /&gt;
        )
      })}
      &lt;/div&gt;
    )
  }
}

Listing.propTypes = {
  places: T.array.isRequired,
  onHighlight: T.func,
  offHighlight: T.func,
  onClick: T.func
}

Listing.defaultProps = {
  onHighlight: () =&gt; {},
  offHighlight: () =&gt; {},
  onClick: () =&gt; {},
}

export default Listing
</code></pre>

<p><strong>MapComponent:</strong></p>

<pre><code>export class MapComponent extends React.Component {
  _renderMarkers() {
    if (!this.props.places) {
      return;
    }
    return this.props.places.map(p =&gt; {
      return Marker&gt;
                key={p.id}
                name={p.id}
                place={p}
                label={p.name}
                onClick={this.props.onMarkerClick.bind(this)}
                map={this.props.map}
                position={p.geometry.location} /&gt;
    });
  }
</code></pre>
","4317594","","","","","2017-12-08 09:16:20","How to add listings to google maps react component","<json><reactjs><google-maps><react-redux>","0","0","","",""
"46758643","1","","","2017-10-15 18:39:36","","0","155","<p>I tried to find some more info about <code>contextTypes</code>, <code>propTypes</code> and <code>defaultProps</code>  at the <strong>OFFICIAL</strong> <em>React Native</em>  doc but I failed, could one tell me where we can find a doc for them on <strong>React Native</strong> page?</p>

<p>At React page, it says about it <a href=""https://reactjs.org/docs/react-component.html#defaultprops"" rel=""nofollow noreferrer"">here</a>
but if you use:</p>

<pre><code>CustomButton.defaultProps
</code></pre>

<p>for react native, it doesn't work.</p>

<p>P.S. I know how to use them as I found it from other developers web-pages </p>

<pre><code>import React, { PropTypes, Component } from 'react';

export default class ExampleComponent extends Component {
   static contextTypes = {
      // some context types
   };

   static propTypes = {
      prop1: PropTypes.object
   };

   static defaultProps = {
      prop1: { foobar: 'foobar' }
   };

   ...

}
</code></pre>

<p>but wonder where they got the information first,</p>
","7411107","","","","","2017-10-15 20:36:48","i need info about `contextTypes`, `propTypes` and `defaultProps` at the **OFFICIAL** *React Native* doc","<reactjs><react-native><ecmascript-6>","1","1","1","",""
"47808553","1","47808953","","2017-12-14 08:05:54","","0","475","<p>I am trying to integrate D3 with react, Please find the code snippet below.</p>

<p>In the code I am trying to implement a simple line in D3 and react. But I end up getting <code>Error: &lt;path&gt; attribute d: Expected number, ""MNaN,191.94630872…</code></p>

<p>There are similar questions on stackoverflow, but they are not helping either.</p>

<p><a href=""https://stackoverflow.com/questions/44447509/attribute-d-expected-number-mnan-nanlnan-nanl-react-with-d3"">attribute d: Expected number, &quot;MNaN,NaNLNaN,NaNL…&quot;. react with d3</a></p>

<p><a href=""https://stackoverflow.com/questions/44846158/error-path-attribute-d-expected-number-mnan-nanlnan-nanl-error-with"">&quot;Error: &lt;path&gt; attribute d: Expected number, &quot;MNaN,NaNLNaN,NaNL…&quot;. &quot; Error with D3</a></p>

<p>A Couple of things I tried doing.</p>

<p>A: Initially I thought there is some problem with the date parsing, So I changed my <code>day</code> key to <code>number</code> and removed date parse, I ended up having the same error.</p>

<p>B: A assumed there is some problem with the domain declaration for x and y. I removed extend and gave a discrete value, still facing the same error.</p>

<pre><code>import React, { Component } from 'react';
import * as d3 from ""d3"";

class LineChart extends Component {
    constructor(props) {
      super(props);
      this.state = {selected: props.width || null};
    }

    componentWillMount() {
    }

    componentWillReceiveProps(nextProps) {
    }

    render() {
        let data=[
            {day:'02-11-2016',count:180},
            {day:'02-12-2016',count:250},
            {day:'02-13-2016',count:150},
            {day:'02-14-2016',count:496},
            {day:'02-15-2016',count:140},
            {day:'02-16-2016',count:380},
            {day:'02-17-2016',count:100},
            {day:'02-18-2016',count:150}
        ];

        let margin = {top: 5, right: 50, bottom: 20, left: 50},
            w = this.state.width - (margin.left + margin.right),
            h = this.props.height - (margin.top + margin.bottom);

        let parseDate = d3.timeParse(""%m-%d-%Y"");
        data.forEach(function (d) {
            d.date = parseDate(d.day);
        });

        let x = d3.scaleTime()
            .domain(d3.extent(data, function (d) {
                return d.date;
            }))
            .range([0, w]);

        let y = d3.scaleLinear()
            .domain([ 0 , d3.max( data, function(d) {
                return d.count + 100;
            })])
            .range([ h, 0 ]);

        let line = d3.line()
            .x(function (d) {
                return x(d.date);
            })
            .y(function (d) {
                return y(d.count);
            }).curve(d3.curveCardinal);

        let transform = 'translate(' + margin.left + ',' + margin.top + ')';
        return (
            &lt;div&gt;
                &lt;p&gt;LineChart&lt;/p&gt;
                &lt;svg id={this.props.chartId} width={this.state.width} height={this.props.height}&gt;
                    &lt;g transform={transform}&gt;
                        &lt;path className=""line shadow"" d={line(data)} strokeLinecap=""round""/&gt;
                    &lt;/g&gt;            
                &lt;/svg&gt;
            &lt;/div&gt;
      )
    }
  }

  LineChart.defaultProps = {
    width: 800,
    height: 300,
    chartId: 'v1_chart'
  }
  export default LineChart;
</code></pre>
","3232918","","","","","2017-12-14 08:31:16","Error: <path> attribute d: Expected number, ""MNaN,191.94630872…"". error with d3 and react","<javascript><reactjs><d3.js>","1","1","","",""
"46761715","1","","","2017-10-16 01:18:26","","1","449","<p>I made a page by using nodejs+react+redux.
I made a edit button in the page and want to edit my data.</p>

<p>Now I select KUMAMOTO-CTI and change the priority from 5 to 10.I use ajax to get data from database to fill the blank.Before I submit it I can get the right data from database.But when I change priority and click to edit it again.The filled data will be wrong.I have to refresh it to get the right data.</p>

<p>And sometimes it will become like this:<a href=""https://i.stack.imgur.com/0O90j.png"" rel=""nofollow noreferrer"">Error</a></p>

<p>Could anybody tell me how to solve it?</p>

<p>Here is the pic:<a href=""https://i.stack.imgur.com/KDRD8.png"" rel=""nofollow noreferrer"">progress</a></p>

<p>Here is my code.</p>

<p>server.js</p>

<pre><code>const Koa = require('koa')
const Router = require('koa-router')
const cors = require('koa2-cors')
const app = new Koa()
const router = new Router()
import { createStore } from 'redux'
import { Provider } from 'react-redux'
import serversReducer from '../client/reducers/reducer'
import { renderToString } from 'react-dom/server'

const store = createStore(serversReducer)

const views = require('koa-views')
const co = require('co')
const convert = require('koa-convert')
const json = require('koa-json')
const onerror = require('koa-onerror')
const bodyparser = require('koa-bodyparser')
const logger = require('koa-logger')
const debug = require('debug')('koa2:server')
const path = require('path')
//const ReactDOMServer = require('react-dom/server')
const React = require('react')
const config = require('./config')
const routes = require('./routes')
const mongoose = require('mongoose')
const stateSchema = require('./models/State')
const mission = require('./models/port')
const port = process.env.PORT || config.port

import Main from '../client/containers/Main'

mongoose.connect('mongodb://127.0.0.1:27017/monitor', {
    useMongoClient: true
});
mongoose.Promise = global.Promise;

var State = mongoose.model(""State"", stateSchema);

// error handler
onerror(app)
// middlewares
app.use(bodyparser())
    .use(json())
    .use(logger())
    .use(cors())
    .use(require('koa-static')(__dirname + '/public'))
    .use(views(path.join(__dirname, '/views'), {
        options: {
            settings: {
                views: path.join(__dirname, 'views')
            }
        },
        map: {
            'ejs': 'ejs'
        },
        extension: 'ejs'
    }))
    .use(router.routes())
    .use(router.allowedMethods())

// logger
app.use(async(ctx, next) =&gt; {
    const start = new Date()
    await next()
    const ms = new Date() - start
    console.log(`${ctx.method} ${ctx.url} - $ms`)
})

router.get('/', async(ctx, next) =&gt; {

    const staticMarkup = await renderToString(
        &lt;Provider store={store}&gt;
            &lt;Main /&gt;
        &lt;/Provider&gt;
    )

    const preloadedState = store.getState();
    //console.log(preloadedState);

    await ctx.render('index', {
        reduxData: preloadedState,
        helloComponentMarkup: staticMarkup
    })
})

router.post('/show', async(ctx, next) =&gt; {

    ctx.body = 'ok';
    let newArray = [];

    await State.find({}, function(err, doc) {
        if (err) {
            return;
        }
        doc.forEach(function(element, index) {
            newArray.push(element);
        })
        ctx.response.body = JSON.stringify(newArray);
    }).sort({
        priority: 1
    })
})

router.post('/edit', async(ctx, next) =&gt; {

    ctx.body = 'ok'

    await State.update({
        _id: ctx.request.body.querymark
    }, {
        $set: {
            server_name: ctx.request.body.servername,
            jp_name: ctx.request.body.jpname,
            ip_address: ctx.request.body.ipaddress,
            port: ctx.request.body.port,
            priority: ctx.request.body.priority
        }
    }, function(err, doc) {
        if (err) {
            return;
        }
    })
})

router.post('/create', async(ctx, next) =&gt; {

    ctx.body = 'ok'

    await new State({
        server_name: ctx.request.body.servername,
        jp_name: ctx.request.body.jpname,
        ip_address: ctx.request.body.ipaddress,
        port: ctx.request.body.port,
        priority: ctx.request.body.priority
    }).save(function(err) {
        if (err)
            console.log(err.toString());
    })
})

router.post('/delete', async(ctx, next) =&gt; {

    ctx.body = 'ok'

    await State.remove({
        _id: ctx.request.body.id
    }, function(err, doc) {
        if (err) {
            return;
        }
    });
})

routes(router)

app.on('error', function(err, ctx) {
    console.log(err)
    logger.error('server error', err, ctx)
})

module.exports = app.listen(config.port, () =&gt; {
    console.log(`Listening on http://localhost:${config.port}`)
    console.log(__dirname);
})
</code></pre>

<p>ListContainer.js</p>

<pre><code>import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { Router, Route, hashHistory } from 'react-router'
import { Segment, Icon, Table, Modal, Button, Form } from 'semantic-ui-react'
const axios = require('axios')
class ListContainer extends Component {
    static propTypes = {
        test_data: PropTypes.object.isRequired,
        post_data: PropTypes.object.isRequired,
        onDeleteServer: PropTypes.func,
        onEditServer: PropTypes.func,
        initServers: PropTypes.func,
        index: PropTypes.number
    }

    constructor(props) {
        super(props)
        this.state = ({
            servername: props.post_data.server_name,
            jpname: props.post_data.jp_name,
            ipaddress: props.post_data.ip_address,
            port: props.post_data.port,
            priority: props.post_data.priority
        })
    }

    static defaultProps = {
        servers: []
    }

    handleDeleteServer(index) {
        if (this.props.onDeleteServer) {
            this.props.onDeleteServer(this.props.index)
        } else {
            console.log(""error"")
        }
    }

    /*handleEditServer(index) {
        if (this.props.onEditServer) {
            this.props.onEditServer(this.props.index)
        } else {
            console.log(""error"")
        }
        this.setState({
            open: false
        })
    }*/

    handleServerNameChange(event) {
        this.setState({
            servername: event.target.value
        })
    }

    handleJPNameChange(event) {
        this.setState({
            jpname: event.target.value
        })
    }

    handleIPChange(event) {
        this.setState({
            ipaddress: event.target.value
        })
    }

    handlePORTChange(event) {
        this.setState({
            port: event.target.value
        })
    }

    handlePriorityChange(event) {
        this.setState({
            priority: event.target.value
        })
    }

    handleSubmit(index) {
        axios.post('/edit', {
            querymark: this.props.post_data._id,
            servername: this.state.servername,
            jpname: this.state.jpname,
            ipaddress: this.state.ipaddress,
            port: this.state.port,
            priority: this.state.priority
        }).then((response) =&gt; {
            var new_data;
            if (response.data.success === false) {
                alert(""error"")
            } else {
                window.location.reload();
                //console.log(this.props.post_data)
                dispatch(onEditServer(index, {
                    querymark: this.props.post_data._id,
                    servername: this.state.servername,
                    jpname: this.state.jpname,
                    ipaddress: this.state.ipaddress,
                    port: this.state.port,
                    priority: this.state.priority
                }))
            }
        }).catch(() =&gt; {
        })
        this.setState({
            open: false
        })
    }

    state = {
        open: false
    }

    show = (size, dimmer) =&gt; () =&gt; this.setState({
        size,
        dimmer,
        open: true
    })
    close = () =&gt; this.setState({
        open: false
    })

    render() {
        const {open, size, dimmer} = this.state
        const post_data = this.props.post_data
        var updated_time = (new Date(post_data.updated_at)).toLocaleString().replace('/T/', '').replace('/\../+', '')
        var state_color = (post_data.state == ""green"") ? ""green"" : ""red""
        var icon_name = (post_data.state == ""green"") ? ""smile"" : ""warning sign""
        return (
            &lt;Table.Row&gt;
                &lt;Table.Cell&gt;&lt;Icon name={icon_name} color={state_color}/&gt;&lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;{post_data.jp_name}&lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;{post_data.ip_address}&lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;{post_data.port}&lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;{updated_time}&lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;{post_data.priority}&lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;
                    &lt;div&gt;
                        &lt;Icon link name='settings' color='purple' onClick={this.show('small', 'blurring')} /&gt;
                        &lt;Modal size={size} dimmer={dimmer} open={open} onClose={this.close} closeIcon&gt;
                        &lt;Modal.Header&gt;Edit&lt;/Modal.Header&gt;             
                        &lt;Modal.Content&gt;
                            &lt;Modal.Description&gt;
                                &lt;Form&gt;
                                &lt;Form.Group width='equal'&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;Server Name&lt;/label&gt;
                                    &lt;input value={this.state.servername} onChange={this.handleServerNameChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;JP Name&lt;/label&gt;
                                    &lt;input value={this.state.jpname} onChange={this.handleJPNameChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;/Form.Group&gt;
                                &lt;Form.Group width='equal'&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;IP Address&lt;/label&gt;
                                    &lt;input value={this.state.ipaddress} onChange={this.handleIPChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;Priority&lt;/label&gt;
                                    &lt;input value={this.state.priority} onChange={this.handlePriorityChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;/Form.Group&gt;
                                &lt;Form.Group&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;Port&lt;/label&gt;
                                    &lt;input value={this.state.port} onChange={this.handlePORTChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;/Form.Group&gt;
                                &lt;/Form&gt;
                            &lt;/Modal.Description&gt;
                        &lt;/Modal.Content&gt;
                        &lt;Modal.Actions&gt;
                        &lt;Button color='black' onClick={this.close}&gt;
                            Nope
                        &lt;/Button&gt;
                        &lt;Button positive icon='checkmark' labelPosition='right' content=""Submit"" onClick={this.handleSubmit.bind(this)} /&gt;
                        &lt;/Modal.Actions&gt;
                        &lt;/Modal&gt;
                    &lt;/div&gt;
                &lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;&lt;Icon link name='trash' color='purple' onClick={this.handleDeleteServer.bind(this)} /&gt;&lt;/Table.Cell&gt;
            &lt;/Table.Row&gt;
        )
    }
}

const mapStateToProps = (state) =&gt; {
    return {
        servers: state.servers
    }
}

const mapDispatchToProps = (dispatch) =&gt; {
    return {
        onEditServer: (index, data) =&gt; {
            dispatch(editServer(index, data))
        },
    }
}

export default connect(
    mapStateToProps,
    mapDispatchToProps
)(ListContainer)
</code></pre>

<p>SegmentContainer.js</p>

<pre><code>import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { Container, Loader, Table, Grid, Icon, Button, Modal, Form } from 'semantic-ui-react'
import SegmentList from '../components/SegmentContainer'
import { initServers, deleteServer, editServer } from '../reducers/reducer'
import MenuFix from '../components/Menu'
const axios = require('axios')

class SegmentContainer extends Component {
    static propTypes = {
        servers: PropTypes.array,
        initServers: PropTypes.func,
        onDeleteServer: PropTypes.func,
        onAddServer: PropTypes.func
    }

    constructor() {
        super()
        //this._loadData()
        this.state = {
            servername: '',
            jpname: '',
            ipaddress: '',
            priority: ''
        }
    }

    componentWillMount() {
        this._loadData()
    }

    componentDidMount() {
        if (this.timer) {
            clearInterval(this.timer)
        }
        this.timer = setInterval(() =&gt; {
            this._loadData()
        }, 3000)
    }

    componentWillUnmount() {
        clearInterval(this.timer)
    }

    _loadData() {
        let sorted_data = [];
        let posts_data = [];
        let response = axios.post('/show')
            .then((response) =&gt; {
                Object.keys(response.data).forEach(function(index) {
                    sorted_data.push(response.data[index]);
                })

                function _dataCompare(a, b) {
                    if (a.priority &gt; b.priority)
                        return 1;
                    if (a.priority &lt; b.priority)
                        return -1;
                    return 0;
                }

                sorted_data.forEach((item, index) =&gt; {
                    posts_data.push(item);
                })
                posts_data.sort(_dataCompare);
                this.props.initServers(posts_data)
            //dispatch(initServers(posts_data))
            }).catch(() =&gt; {
        })

    }

    handleDeleteServer(index) {
        const {servers} = this.props
        axios.post('/delete', {
            id: servers[index]._id
        }).then((response) =&gt; {
            if (response.data.success === false) {
                alert(""error"");
            } else {
                window.location.reload();
            }
        }).catch(() =&gt; {
        })
        if (this.props.onDeleteServer) {
            this.props.onDeleteServer(index)
        }
    }

    /*handleEditServer(index) {
        const {servers} = this.props
        axios.post('/edit', {
            querymark: this.props.servers._id,
            servername: this.state.servername,
            jpname: this.state.jpname,
            ipaddress: this.state.ipaddress,
            port: this.state.port,
            priority: this.state.priority
        }).then((response) =&gt; {
            if (response.data.success === false) {
                alert(""error"")
            } else {
                //window.location.reload();
                dispatch(onEditServer(index, {
                    querymark: this.props.servers._id,
                    servername: this.state.servername,
                    jpname: this.state.jpname,
                    ipaddress: this.state.ipaddress,
                    port: this.state.port,
                    priority: this.state.priority
                }))
            }
        }).catch(() =&gt; {
        })
        this.setState({
            open: false
        })
    }*/

    handleCreate(server) {
        axios.post('/create', {
            servername: this.state.servername,
            jpname: this.state.jpname,
            ipaddress: this.state.ipaddress,
            port: this.state.port,
            priority: this.state.priority
        }).then((response) =&gt; {
            if (response.data.success === false) {
                alert(""error"");
            } else {
                window.location.reload()
                dispatch(onAddServer(index, {
                    servername: this.state.servername,
                    jpname: this.state.jpname,
                    ipaddress: this.state.ipaddress,
                    port: this.state.port,
                    priority: this.state.priority
                }))
            }
        }).catch(() =&gt; {
        })
        this.setState({
            open: false
        })
    }

    handleServerNameChange(event) {
        this.setState({
            servername: event.target.value
        })
    }

    handleJPNameChange(event) {
        this.setState({
            jpname: event.target.value
        })
    }

    handleIPChange(event) {
        this.setState({
            ipaddress: event.target.value
        })
    }

    handlePORTChange(event) {
        this.setState({
            port: event.target.value
        })
    }

    handlePriorityChange(event) {
        this.setState({
            priority: event.target.value
        })
    }

    state = {
        open: false
    }
    show = (size, dimmer) =&gt; () =&gt; this.setState({
        size,
        dimmer,
        open: true
    })

    close = () =&gt; this.setState({
        open: false
    })

    render() {
        const {open, size, dimmer} = this.state
        return (
            &lt;Grid&gt;
            &lt;MenuFix /&gt; 
            &lt;Container style = {{
                marginTop: '6em'
            }}&gt;
                &lt;Table unstackable&gt;
                    &lt;Table.Header&gt;
                        &lt;Table.Row&gt;
                        &lt;Table.HeaderCell colSpan='8'&gt;
                            &lt;Button basic color='violet' floated='right' icon labelPosition='left' primary size='tiny' onClick={this.show('small', 'blurring')}&gt;
                                &lt;Icon link color='violet' name='add' /&gt;Add
                            &lt;/Button&gt;
                            &lt;Modal size={size} dimmer={dimmer} open={open} onClose={this.close} closeIcon&gt;
                            &lt;Modal.Header&gt;Add&lt;/Modal.Header&gt;
                            &lt;Modal.Content&gt;
                                &lt;Modal.Description&gt;
                                    &lt;Form&gt;
                                &lt;Form.Group width='equal'&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;Server Name&lt;/label&gt;
                                    &lt;input value={this.state.servername} onChange={this.handleServerNameChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;JP Name&lt;/label&gt;
                                    &lt;input value={this.state.jpname} onChange={this.handleJPNameChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;/Form.Group&gt;
                                &lt;Form.Group width='equal'&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;IP Address&lt;/label&gt;
                                    &lt;input value={this.state.ipaddress} onChange={this.handleIPChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;Priority&lt;/label&gt;
                                    &lt;input value={this.state.priority} onChange={this.handlePriorityChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;/Form.Group&gt;
                                &lt;Form.Group&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;Port&lt;/label&gt;
                                    &lt;input value={this.state.port} onChange={this.handlePORTChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;/Form.Group&gt;
                                &lt;/Form&gt;
                                &lt;/Modal.Description&gt;
                            &lt;/Modal.Content&gt;
                            &lt;Modal.Actions&gt;
                                &lt;Button color='black' onClick={this.close}&gt;
                                    Nope
                                &lt;/Button&gt;
                                &lt;Button positive icon='checkmark' labelPosition='right' content=""Submit"" onClick={this.handleCreate.bind(this)} /&gt;
                            &lt;/Modal.Actions&gt;
                            &lt;/Modal&gt;
                        &lt;/Table.HeaderCell&gt;
                        &lt;/Table.Row&gt;
                        &lt;Table.Row&gt;
                            &lt;Table.HeaderCell&gt;State&lt;Loader active inline size='small' /&gt;&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;Server Name&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;IP Address&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;Port&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;Updated&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;Priority&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;Edit&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;Delete&lt;/Table.HeaderCell&gt;
                        &lt;/Table.Row&gt;
                    &lt;/Table.Header&gt;
                    &lt;SegmentList posts_data = {this.props.servers} onDeleteServer={this.handleDeleteServer.bind(this)} /&gt;
                &lt;/Table&gt;
            &lt;/Container&gt;
            &lt;/Grid&gt;
        )
    }
}

const mapStateToProps = (state) =&gt; {
    return {
        servers: state.servers
    }
}

const mapDispatchToProps = (dispatch) =&gt; {
    return {
        initServers: (servers) =&gt; {
            dispatch(initServers(servers))
        },
        onDeleteServer: (index) =&gt; {
            dispatch(deleteServer(index))
        },
        onEditServer: (index, data) =&gt; {
            dispatch(editServer(index, data))
        },
        onAddServer: (server) =&gt; {
            dispatch(addServer(server))
        }
    }
}

export default connect(
    mapStateToProps,
    mapDispatchToProps
)(SegmentContainer)
</code></pre>

<p>reducer.js</p>

<pre><code>//action types
const INIT_SERVERS = 'INIT_SERVERS'
const ADD_SERVER = 'ADD_SERVER'
const DELETE_SERVER = 'DELETE_SERVER'
const EDIT_SERVER = 'EDIT_SERVER'

//reducer

export default function(state, action) {
    if (!state) {
        state = {
            servers: []
        }
    }
    switch (action.type) {
    case INIT_SERVERS:
        return {
            servers: action.servers
        }
    case ADD_SERVER:
        return {
            servers: [...state.servers, action.server]
        }
    case EDIT_SERVER:
        return {
            servers: [...state.servers.slice(0, action.index), Object.assign({}, state.servers[action.index], {
                done: true
            }), ...state.servers.slice(action.index + 1)]
        /*servers: Object.assign([...state.servers], {
            [index]: action.data
        })*/
        //servers: Object.assign({}, state[action.index], action.data)
        }
    case DELETE_SERVER:
        return {
            servers: [
                ...state.servers.slice(0, action.index),
                ...state.servers.slice(action.index + 1)
            ]
        }
    default:
        return state
    }
}

// action creators
export const initServers = (servers) =&gt; {
    return {
        type: INIT_SERVERS,
        servers
    }
}

export const addServer = (server) =&gt; {
    return {
        type: ADD_SERVER,
        server
    }
}

export const deleteServer = (index) =&gt; {
    return {
        type: DELETE_SERVER,
        index
    }
}

export const editServer = (index, data) =&gt; {
    return {
        type: EDIT_SERVER,
        index,
        data
    }
}
</code></pre>

<p>SegmentList.js</p>

<pre><code>import React, { Component, PropTypes } from 'react'
import ListContainer from '../containers/ListContainer'


export default class SegmentList extends Component {
    static propTypes = {
        posts_data: PropTypes.array,
        onDeleteServer: PropTypes.func,
    //onEditServer: PropTypes.func
    }
    static defaultProps = {
        posts_data: []
    }

    handleDeleteServer(index) {
        if (this.props.onDeleteServer) {
            this.props.onDeleteServer(index)
        }
    }

    /*handleEditServer(index) {
        if (this.props.onEditServer) {
            this.props.onEditServer(index)
        }
    }*/

    render() {
        return (
            &lt;div&gt;
                {this.props.posts_data.map((data, i) =&gt; &lt;ListContainer
                post_data={data}
                key={i}
                index={i} onDeleteServer={this.handleDeleteServer.bind(this)} /&gt;
            )}
            &lt;/div&gt;
        )
    }
}
</code></pre>
","8763651","","8763651","","2017-10-18 06:17:49","2017-10-18 06:17:49","How can I get the right data from database with react","<javascript><node.js><ajax><reactjs><react-redux>","1","0","","",""
"39153545","1","39155301","","2016-08-25 19:43:35","","0","14988","<p>I have created a login page using reactjs, when I send my user input/password through a post method rest api call to authenticate I am receiving an error. Can somebody help me on whats going wrong here please!!</p>

<p>I guess this is because I am unable to send username and password strings in a json format. </p>

<p>This is the error, </p>

<pre><code>&lt;br /&gt;
&lt;b&gt;Notice&lt;/b&gt;: Undefined variable: error in &lt;b&gt;/var/www/html/app/Controllers/Hafka/HAFKAController.php&lt;/b&gt; on line &lt;b&gt;27&lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Notice&lt;/b&gt;: Undefined variable: id in &lt;b&gt;/var/www/html/app/Controllers/Hafka/HAFKAController.php&lt;/b&gt; on line &lt;b&gt;29&lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Notice&lt;/b&gt;: Undefined variable: error in &lt;b&gt;/var/www/html/app/Controllers/Hafka/HAFKAController.php&lt;/b&gt; on line &lt;b&gt;29&lt;/b&gt;&lt;br /&gt;
{""code"":""INVALID_JSON_INPUT"",""message"":""Error decoding JSON input""}
</code></pre>

<p>This is my app.js file,</p>

<pre><code>    import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

export default class App extends Component {

    render() {
        return (
            &lt;div className=""App""&gt;
                &lt;div className=""App-header""&gt;&lt;/div&gt;
                &lt;form
                    id=""main-login""
                    action=""http://don.healthedata.com/admin/login""
                    method=""post""&gt;
                    &lt;h2&gt;
                        Admin UI Login
                    &lt;/h2&gt;
                    &lt;label&gt;
                        &lt;span class=""text""&gt;user:&lt;/span&gt;
                        &lt;input type=""email"" name=""email""/&gt;&lt;br/&gt;
                    &lt;/label&gt;
                    &lt;br/&gt;
                    &lt;label&gt;
                        &lt;span class=""text""&gt;password:&lt;/span&gt;
                        &lt;input type=""password"" name=""password""/&gt;&lt;br/&gt;
                    &lt;/label&gt;&lt;br/&gt;
                    &lt;div class=""align-right""&gt;
                        &lt;button type=""submit""&gt;Submit&lt;/button&gt;
                    &lt;/div&gt;
                &lt;/form&gt;

            &lt;/div&gt;

        );
    }

}
</code></pre>

<p><strong>Solution:</strong><br/>
Modified and working <strong>App.js</strong> file:</p>

<pre><code>import React, {Component} from 'react';
import logo from './logo.svg';
import './App.css';

export default class App extends Component {

    constructor(props, context) {
        super(props, context);

        this.state = { description: '' };
    }

    onChange(e) {
        this.setState({
            [e.target.name]: e.target.value
        });
    }

    onSubmit(e) {
        e.preventDefault();

        fetch(this.props.formAction, {
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({description: this.state.description})
        });

        this.setState({description: ''});
    }

    render() {
        return (
            &lt;div className=""App""&gt;
                &lt;form
                    id=""main-login""
                    action={this.props.action}
                    method={this.props.method}
                    onSubmit={this.onSubmit}&gt;
                    &lt;h2&gt;Admin UI Login&lt;/h2&gt;
                    &lt;label&gt;
                        &lt;span class=""text""&gt;user:&lt;/span&gt;
                        &lt;input type=""email"" name=""email""/&gt;&lt;br/&gt;
                    &lt;/label&gt;
                    &lt;br/&gt;
                    &lt;label&gt;
                        &lt;span class=""text""&gt;password:&lt;/span&gt;
                        &lt;input type=""password"" name=""password""/&gt;&lt;br/&gt;
                    &lt;/label&gt;
                    &lt;br/&gt;
                    &lt;div class=""align-right""&gt;
                        &lt;button&gt;Submit&lt;/button&gt;
                    &lt;/div&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        );
    }

}

// App.propTypes = { action: React.PropTypes.string.isRequired, method: React.PropTypes.string}
App.defaultProps = {
    action: 'http://don.healthedata.com/admin/login',
    method: 'post'
};

module.exports = App;
</code></pre>

<p>When I provide user input/password and hit submit, nothing is happening. </p>
","4398985","","148271","","2018-04-18 12:00:11","2018-04-18 12:00:11","How to do POST in FORM Submit using reactjs and pass the object value into REST service?","<javascript><reactjs><react-router><reactjs-flux>","2","3","2","",""
"47341852","1","","","2017-11-17 01:21:43","","0","409","<p>I have been using react-draft-wysiwyg as text-editor in my project.I am trying to modify the behavior of code block. Right now when i select the code block from the dropdown, it is inputting</p>

<blockquote>
  <p><strong><code>&lt;pre&gt;&lt;/pre&gt;</code></strong></p>
</blockquote>

<p>tag to the editor, but i want to slightly modify it so that i can have </p>

<blockquote>
  <p><strong><code>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</code></strong></p>
</blockquote>

<p>.</p>

<p>How can i acheive this in react-draft-wysiwyg? 
Below is my code:</p>

<pre><code>import React, {Component} from 'react';
import PropTypes from 'prop-types';
import { Editor } from 'react-draft-wysiwyg';
import 'draft-js/dist/Draft.css';
import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';
import './editor.css';
import uploadDocumentFile from '../../../utils/imageApiHelper';
import draftToHtml from 'draftjs-to-html';
import { convertToRaw } from 'draft-js';//DefaultDraftBlockRenderMap
import CustomOption from './CustomOption';
// const Immutable = require('immutable');
import CodeBlock from './CodeBlock';

class HTMLEditor extends Component{
  constructor(props) {
    super(props);
    this.uploadCallback = this.uploadCallback.bind(this);
    this.myBlockRenderer = this.myBlockRenderer.bind(this);
  }

  myBlockRenderer(contentBlock) {
    const type = contentBlock.getType();
    if (type === 'code') {
      return {
        component: CodeBlock,
        props: {
          children: contentBlock.getText(),
          preClassName: this.props.preClassName
        },
      };
    }
  }

  uploadCallback (file) {
    return new Promise(
      (resolve) =&gt; {
        if (file) {
          file.preview = URL.createObjectURL(file);
          uploadDocumentFile(file)
            .then((res) =&gt; {
              const imageUrl = (res &amp;&amp; res.data &amp;&amp; res.data.file_path) ? res.data.file_path : '';
              resolve({data: {link: imageUrl}});
            })
            .catch(()=&gt; {
              resolve({data: {link: """"}});
            });
        }
      }
    );
  }

  render() {
    // const blockRenderMap = Immutable.Map({
    //   'code-block': {
    //     // element is used during paste or html conversion to auto match your component;
    //     // it is also retained as part of this.props.children and not stripped out
    //     element: 'pre',
    //     wrapper: &lt;CodeBlock/&gt;
    //   },
    // });
    // const extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap);
    //blockRendererFn={this.myBlockRenderer}
    // blockRenderMap={extendedBlockRenderMap}

    return (
      &lt;div className=""text_editor""&gt;
        &lt;Editor
          toolbarClassName=""toolbar-class""
          wrapperClassName=""wrapper-class""
          editorClassName=""editor-class""
          editorState={this.props.editorState}
          onEditorStateChange={this.props.onEditorStateChange}
          onBlur={this.props.onBlur}
          toolbar={{
            image: {
              className: 'editor_uploader',
              uploadCallback: this.uploadCallback,
              urlEnabled: true,
              alt: { present: true, mandatory: true }
            },
          }}
          toolbarCustomButtons={[&lt;CustomOption /&gt;]}
          hashtag={{
            separator: ' ',
            trigger: '#',
            className: 'hashtag-className',
          }}
          mention={{
            separator: ' ',
            trigger: '@',
            suggestions: [
            ],
          }}
          customBlockRenderFunc={this.myBlockRenderer}
        /&gt;
        &lt;div className=""form-group""&gt;
          &lt;textarea
            className=""form-control""
            rows=""20""
            disabled=""true""
            value={draftToHtml(convertToRaw(this.props.editorState.getCurrentContent()))}
          /&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}

HTMLEditor.defaultProps = {
  editorState: {},
  preClassName: ""language-* language-markup""
};

HTMLEditor.propTypes = {
  onBlur: PropTypes.func.isRequired,
  onEditorStateChange: PropTypes.func.isRequired,
  onHtmlContentChange: PropTypes.func,
  editorState: PropTypes.object.isRequired,
  preClassName: PropTypes.string
};

export default HTMLEditor;
</code></pre>

<p>Can please somebody guide me to acheive this? I am stuck here.</p>
","1457002","","","","","2017-11-17 01:21:43","Add support for custom block type in react-draft-wysiwyg","<draftjs><draft-js-plugins>","0","0","","",""
"47698275","1","","","2017-12-07 15:20:00","","1","278","<p>I had this working in a react-native app, but I feel I had to do some stuff with babel and I can't remember what it was. For whatever reason this is not working, it's saying cannot read property <code>CONSTANT_1</code> of <code>undefined</code>.</p>

<pre><code>export default class Main extends React.Component {

    static MyClassProp = {
       CONSTANT_1: 1,
       CONSTANT_2: 2
    };

    static defaultProps = {
       prop1: Main.MyClassProp.CONSTANT_1
    };

    ...

}
</code></pre>

<p>Can anybody tell me if I'm supposed to include something in a <code>.babelrc</code> or <code>package.json</code> to get this to compile correctly?</p>
","954940","","","","","2017-12-07 15:20:00","react-native static class properties","<react-native><babel>","0","5","","",""
"39740437","1","","","2016-09-28 07:12:12","","0","633","<p>Below is example code to display video.</p>

<pre><code>&lt;video
  data-video-id=""2114345470001""
  data-account=""1507807800001""
  data-player=""default""
  data-embed=""default""
  class=""video-js"" controls&gt;&lt;/video&gt;
&lt;script src=""//players.brightcove.net/1507807800001/default_default/index.min.js""&gt;&lt;/script&gt;
</code></pre>

<p>I have implemented it in react redux </p>

<pre><code> &lt;div className=""bigVideo""&gt;
      {
          (currentVideoId) ?  &lt;div&gt;&lt;video data-video-id={`${currentVideoId}`} data-account={`${accountId}`} data-player=""default"" data-embed=""default"" className=""video-js"" controls&gt;&lt;/video&gt;&lt;script src={`${playerUrl}?videoId=${currentVideoId}`}&gt;&lt;/script&gt;&lt;/div&gt; : ''
      }
 &lt;/div&gt;
</code></pre>

<p>But it is not displaying video , it is just showing player.</p>

<p>Below is the code i have tried in react but facing issue to get event.
I am calling this function on click of video.
Below is my whole code , please check this . 
Done all the things asked by you.</p>

<pre><code>import React, { Component } from 'react'
import ReactSelect from 'common/form-components/select'
import VideoTypes from 'constants/videoTypes'
import { connect } from 'react-redux'
import { fetchVideos } from 'actions/drfVideos'
import AppConstant from 'constants/appConstants'

class DRFTV extends Component {

constructor(props) {
    super(props)

    this.state = {
        videoId: null,
        showAll: false,
        autoPlay: false
    }
    this._toggleVideos = this._toggleVideos.bind(this)
}

componentDidMount(){
    let playListId = (VideoTypes[0]) ? VideoTypes[0]['val'] : null
    this.props.fetchVideos(playListId)
    this.vTag = document.getElementById('myPlayerID');
    this.vTag.setAttribute('data-account',    AppConstant.brightcove.accountId);
    bc(this.vTag);
}

_callback(videoId, autoPlay){
      console.log(this.state.videoId+'auto'+this.state.autoPlay);
      console.log(videoId+''+autoPlay);
      let playerUrl = AppConstant.brightcove.player
      let currentVideoId = videoId
      let playerWithVideoId = playerUrl+'?videoId='+currentVideoId
      let brightCoverUrl = (currentVideoId &amp;&amp; autoPlay) ? playerWithVideoId+'&amp;autoPlay=true' : (currentVideoId &amp;&amp; !this.state.autoPlay) ? playerWithVideoId : '';
      let myPlayer = '';
       myPlayer.dispose();
      this.vTag.setAttribute('data-video-id', currentVideoId);
      myPlayer = videojs(document.querySelector('.video-js'));
      myPlayer.src({
        ""src"": brightCoverUrl
      });
      myPlayer.play();
      /*videojs(""myPlayerID"").on('loadstart',function(){
          myPlayer = this;
          myPlayer.src({
            ""src"": brightCoverUrl
          });
          myPlayer.play();
      });*/

}

_getVideoList(minNoOfVideos) {
    let drfVideos = this.props.videos

    if(drfVideos){
        let videos = drfVideos.videos.slice(0, minNoOfVideos)
        { this.state.showAll ? videos = drfVideos.videos : videos = drfVideos.videos.slice(0, minNoOfVideos) }

        return _.map(videos, (video, key) =&gt; {
            return (
                &lt;li className=""clearfix"" key={video.id}&gt;
                    &lt;div className=""smallVideoContent""&gt;
                        &lt;div className=""smallVideo""&gt;
                            &lt;img src={video.thumbnail}/&gt;
                            &lt;a href=""javascript:void(0);"" onClick={this._selectVideo.bind(this, video.id, true)} className=""videoSmallBtn""/&gt;
                        &lt;/div&gt;
                        &lt;a href=""javascript:void(0);"" className=""videoLink"" onClick={this._selectVideo.bind(this, video.id, true)}&gt;
                            {video.name}
                        &lt;/a&gt;
                    &lt;/div&gt;
                &lt;/li&gt;
            );
        });
    }else {
        return ''
    }
}

_selectVideo(videoId, autoPlay) {
    this.setState({
        videoId: videoId,
        autoPlay: autoPlay
    });
    this._callback(videoId, autoPlay);
}

render() {
    let minNoOfVideos = 3
    let currentVideoId = this.state.videoId
    let playerUrl = AppConstant.brightcove.player
    let accountId = AppConstant.brightcove.accountId
    let videoList = this._getVideoList(minNoOfVideos)
    let drfVideos = this.props.videos
    let videoTypesProps = {
        options: VideoTypes,
        ref: 'videoTypes',
        onChange: this._changePlaylist.bind(this),
        defaultValue: ''
    }
    if(!currentVideoId &amp;&amp; drfVideos &amp;&amp; drfVideos.videos &amp;&amp; drfVideos.videos[0]){
        currentVideoId =  drfVideos.videos[0].id
    }
    let playerWithVideoId = playerUrl+'?videoId='+currentVideoId
    let brightCoverUrl = (currentVideoId &amp;&amp; this.state.autoPlay) ? playerWithVideoId+'&amp;autoPlay' : (currentVideoId &amp;&amp; !this.state.autoPlay) ? playerWithVideoId : '';
    return (
        &lt;div&gt;
            &lt;div className=""selectVideos""&gt;
                &lt;ReactSelect {...videoTypesProps}/&gt;
            &lt;/div&gt;
            &lt;div className=""videosWrap""&gt;
                &lt;div className=""bigVideo""&gt;
                    {
                      &lt;video id='myPlayerID'  data-video-id={currentVideoId} data-account={accountId} data-player=""default"" data-embed=""default"" className=""video-js"" controls&gt;&lt;/video&gt;
                    }
                &lt;/div&gt;
                &lt;ul className=""list-unstyled list-inline videoList""&gt;
                    {videoList}
                    {
                        (drfVideos &amp;&amp; drfVideos.videos &amp;&amp; drfVideos.videos.length &gt; minNoOfVideos) ?
                        &lt;li className=""showMoreSmallVideos""&gt;
                            &lt;a onClick={this._toggleVideos}&gt;Show {this.state.showAll ? 'Less' : 'More'}&lt;/a&gt;
                        &lt;/li&gt;
                        : ''
                    }
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    )
  }
}

DRFTV.defaultProps = {
   videos: {
       videos: []
   }
}

const mapStateToProps = (state) =&gt; {
   return {
    videos: state.drfVideos.videos
   }
}

const mapDispatchToProps = (dispatch) =&gt; {
   return {
     fetchVideos: (playlistId) =&gt;  { dispatch(fetchVideos(playlistId)) }
   }
}

const drfTV = connect(
  mapStateToProps,
  mapDispatchToProps)
(DRFTV)

export default drfTV
</code></pre>
","3032373","","3032373","","2016-09-28 18:26:36","2016-09-28 18:41:34","brightcove Video is not getting displayed in video tag in react -redux","<javascript><jquery><reactjs><redux><brightcove>","1","0","","",""
"39322966","1","","","2016-09-05 01:45:31","","10","9592","<p>I'm following the example from this stackoverflow answer - <a href=""https://stackoverflow.com/questions/25533036/test-a-react-component-function-with-jest"">Test a React Component function with Jest</a>. I have an example component and test set up. The component works correctly when loaded into App.js. </p>

<p>Component - </p>

<pre><code>import React, { PropTypes, Component } from 'react';

export default class ExampleModule extends Component {
  static propTypes = {
    onAction: PropTypes.func,
  }

  static defaultProps = {
  onAction: () =&gt; { console.log(""In onAction""); }
}

doAction = () =&gt; {
  // do something else
  console.log('In do action');
  this.props.onAction();
}

render() {
  return(
    &lt;div&gt;
      &lt;button className='action-btn' onClick=  {this.doAction.bind(this)}&gt;Do action&lt;/button&gt;
    &lt;/div&gt;
  )
}
}
</code></pre>

<p>And here's the test - </p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-addons-test-utils';
import ExampleComponent from './ExampleModule.js';

let Example;

describe('Example component', function() {
  beforeEach(function() {
    Example = TestUtils.renderIntoDocument(&lt;ExampleComponent /&gt;);
  })

  it('calls props functions', function() {
    Example.doAction = jest.genMockFunction();
    let actionBtn = TestUtils.findRenderedDOMComponentWithClass(Example, 'action-btn');
    TestUtils.Simulate.click(actionBtn);
    expect(Example.doAction).toBeCalled();
  })

  it('doAction calls onAction', function() {
    expect(Example.props.onAction).not.toBeCalled();
    Example.doAction();
    expect(Example.props.onAction).toBeCalled();
  })
})
</code></pre>

<p>However, I get the following error - </p>

<pre><code>FAIL  src/App/components/Example/ExampleModule.test.js
  Console

    console.log src/App/components/Example/ExampleModule.js:14
      In do action
    console.log src/App/components/Example/ExampleModule.js:24
      In onAction

  Example component › calls props functions

    Expected the mock function to be called.

      at Object.&lt;anonymous&gt; (src/App/components/Example/ExampleModule.test.js:17:30)
      at process._tickCallback (node.js:369:9)

  Example component › doAction calls onAction

    toBeCalled matcher can only be used on a spy or mock function.

      at Object.&lt;anonymous&gt; (src/App/components/Example/ExampleModule.test.js:21:40)
      at process._tickCallback (node.js:369:9)
</code></pre>

<p>I can see the console.logs in the <code>doAction</code> and <code>onAction</code> are being called even when I want to mock out <code>doAction</code>. 
Also, I'm unable to mock out <code>onAction</code>. I get this error - </p>

<pre><code>TypeError: Cannot assign to read only property 'onAction' of #&lt;Object&gt;
</code></pre>

<p>I've tried <code>jest.fn()</code> but got the same errors. </p>

<p>How do I mock these functions and test them?</p>

<p>EDIT:</p>

<p>I was able to mock <code>doAction</code> by using jest.fn() in the following way - </p>

<pre><code>let mockFn = jest.fn();
Example.doAction = mockFn()
</code></pre>

<p>However, I'm still unable to mock <code>Example.props.onAction</code>.</p>
","451906","","-1","","2017-05-23 12:17:36","2016-12-08 22:41:23","How to mock functions, and test that they're called, when passed as props in react components?","<javascript><unit-testing><reactjs><jestjs>","1","0","4","",""
"47290955","1","","","2017-11-14 16:41:31","","1","139","<p>I've been looking to add Flow to my React project, but I'm unclear as to how to type check defaultProps.</p>

<p>Let's say I have a very basic component:</p>

<pre><code>const React = require('react')

type MyComponentProps = {
  example: string
}

const MyComponent = (props: MyComponentProps) =&gt; &lt;span&gt;{props.example}&lt;/span&gt;

MyComponent.defaultProps = {
  example: 1,
}
</code></pre>

<p>Here the default value for the <strong>example</strong> prop is an integer, and even though I'm declaring that it should be a string, Flow reports: <code>No errors!</code></p>

<p>If I add the following:</p>

<pre><code>let component = &lt;MyComponent /&gt;
</code></pre>

<p>Flow throws this error, as I would expect:</p>

<pre><code>13: let component = &lt;MyComponent /&gt;
                     ^ props of React element `MyComponent`.
                       This type is incompatible with
7: const MyComponent = (props: MyComponentProps) =&gt; &lt;span&gt;{props.example}&lt;/span&gt;
                                 ^ object type

Property `example` is incompatible:
10:   example: 1,
               ^ number. This type is incompatible with
4:   example: string
               ^ string
</code></pre>

<p>Is this expected behaviour?</p>

<p>Can I get Flow to check defaultProps without having to call the component itself?</p>
","6890377","","6890377","","2017-11-15 04:49:37","2017-11-15 04:49:37","Checking React defaultProps with Flow","<javascript><reactjs><types>","0","0","","",""
"48080808","1","","","2018-01-03 15:57:07","","0","48","<p>This question is for someone very good with react as well as understand filestack-js</p>

<p>I read the whole source code for src/ReactFilestack.jsx but I can't find the part where filestack attach itself to the dom.. somehow it just magically .. did without using <code>ref</code> or ReactDom whatsoever.</p>

<p>if possible anyone can point me to the line that the dom attachment 
 from <code>client</code> to <code>&lt;Tag&gt;</code> happens?<a href=""https://github.com/filestack/filestack-react/blob/master/src/ReactFilestack.jsx"" rel=""nofollow noreferrer"">https://github.com/filestack/filestack-react/blob/master/src/ReactFilestack.jsx</a></p>

<p>Thanks!</p>

<pre><code>import React, { Component } from 'react';
import filestack from 'filestack-js';
import PropTypes from 'prop-types';

class ReactFilestack extends Component {
  static defaultProps = {
    file: null,
    link: false,
    buttonText: 'Pick file',
    buttonClass: '',
    onSuccess: result =&gt; console.log(result),
    onError: error =&gt; console.error(error),
    mode: 'pick',
    options: {},
    security: null,
    children: null,
    render: null,
    cname: null,
  };

  static propTypes = {
    file: PropTypes.objectOf(PropTypes.any),
    apikey: PropTypes.string.isRequired,
    link: PropTypes.bool,
    mode: PropTypes.string,
    buttonText: PropTypes.string,
    buttonClass: PropTypes.string,
    onSuccess: PropTypes.func,
    onError: PropTypes.func,
    options: PropTypes.objectOf(PropTypes.any),
    security: PropTypes.objectOf(PropTypes.any),
    children: PropTypes.node,
    render: PropTypes.func,
    cname: PropTypes.string,
  };

  onClickPick = (event) =&gt; {
    event.stopPropagation();
    event.preventDefault();
    const {
      apikey,
      onSuccess,
      onError,
      options,
      mode,
      file,
      security,
      cname
    } = this.props;
    const onFinished = (result) =&gt; {
      if (typeof onSuccess === 'function') {
        onSuccess(result);
      } else {
        console.log(result);
      }
    };
    const onFail = (error) =&gt; {
      if (typeof onError === 'function') {
        onError(error);
      } else {
        console.error(error);
      }
    };

    this.initClient(mode, apikey, options, file, security, cname)
      .then(onFinished)
      .catch(onFail);
  };

  initClient = (mode, apikey, options, file, security, cname) =&gt; {
    const { url, handle } = options;
    delete options.handle;
    delete options.url;
    const client = filestack.init(apikey, security, cname);

    if (mode === 'transform') {
      return new Promise((resolve, reject) =&gt; {
        try {
          resolve(client.transform(url, options));
        } catch (err) {
          reject(err);
        }
      });
    } else if (mode === 'retrieve') {
      return client.retrieve(handle, options);
    } else if (mode === 'metadata') {
      return client.metadata(handle, options);
    } else if (mode === 'storeUrl') {
      return client.storeURL(url, options);
    } else if (mode === 'upload') {
      return client.upload(file, options);
    } else if (mode === 'remove') {
      return client.remove(handle, security);
    }

    return client.pick(options);
  };

  render () {
    const { buttonClass, buttonText, link, children, render: CustomRender } = this.props;
    if (CustomRender) {
      return (
        &lt;CustomRender onPick={this.onClickPick} /&gt;
      );
    }
    const Tag = link ? 'a' : 'button';
    return (
      &lt;Tag
        name=""filestack""
        onClick={this.onClickPick}
        className={buttonClass}
      &gt;
        {children || buttonText}
      &lt;/Tag&gt;
    );
  }
}

export default ReactFilestack;
</code></pre>
","2646226","","2646226","","2018-01-03 19:05:07","2018-02-13 17:30:17","Where the client dom got attached to the react dom for filestack-react?","<javascript><reactjs><dom><filestack>","1","10","","",""
"47283323","1","","","2017-11-14 10:27:36","","0","50","<p>I currently developing an app with react-native and jwplayer native sdk build in.
it renders the native component in react-native using the requireNativeComponent function. </p>

<p>It was working perfectly, but i updated the react-native version ( it was half a year old ) to 0.50.3</p>

<p>but currently im getting the error </p>

<p><strong>Invariant Violation: Event cannot be both direct and bubbling: onPause</strong></p>

<p>This happends even when im removing the onPause function in both native and React-native prop, it only happens in android...</p>

<p>What could be the cause? and how to solve that? </p>

<pre><code>import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { requireNativeComponent } from 'react-native'
import Util from '../../../utils'

export default class JWPlayer extends Component {

  static defaultProps = {
    seek: true,
    seekTo: true,
    paused: false,
    accessible: true,
    onBeforePlay: Util.noop, // default empty functions
    onPlay: Util.noop,
    onPlayerError: Util.noop,
    onBuffer: Util.noop,
    onProgressChanged: Util.noop,
    onTime: Util.noop,
    onAdStarted: Util.noop,
    onComplete: Util.noop,
    accessibilityLabel: '',
    testID: '1',
    importantForAccessibility: 'yes',
    renderToHardwareTextureAndroid: false,
    onLayout: true,
    accessibilityLiveRegion: 'assertive',
    accessibilityComponentType: 'view',
    nativeID: '1',
  }

  static propTypes = {
    seek: PropTypes.bool,
    seekTo: PropTypes.bool,
    paused: PropTypes.bool,
    accessible: PropTypes.bool,
    style: PropTypes.object.isRequired,
    source: PropTypes.object.isRequired,
    volume: PropTypes.number.isRequired,
    onBeforePlay: PropTypes.func,
    onPlay: PropTypes.func,
    onPause: PropTypes.func.isRequired,
    onPlayerError: PropTypes.func,
    onBuffer: PropTypes.func,
    onProgressChanged: PropTypes.func,
    onTime: PropTypes.func,
    onAdStarted: PropTypes.func,
    onComplete: PropTypes.func,
    accessibilityLabel: PropTypes.string,
    testID: PropTypes.string,
    importantForAccessibility: PropTypes.string,
    renderToHardwareTextureAndroid: PropTypes.bool,
    onLayout: PropTypes.bool,
    accessibilityLiveRegion: PropTypes.string,
    accessibilityComponentType: PropTypes.string,
    nativeID: PropTypes.string,
  }

  videoPlayer = null;
  render() {
    return (
      &lt;NativePlayer ref={(ref) =&gt; { this.videoPlayer = ref }} {...this.props} /&gt;
    )
  }
}

const NativePlayer = requireNativeComponent('JWPlayer', JWPlayer)
</code></pre>
","4226302","","4226302","","2017-11-14 11:44:33","2017-11-14 11:44:33","integrating native component in react-native error since update","<javascript><android><react-native><jwplayer>","0","0","","",""
"46919584","1","","","2017-10-24 20:37:22","","0","146","<p>I'm trying to setup my new project with Rails 5.1 and Wepacker-react, but I get first error very quickly.
I have been created new component in <strong>javascript/packs</strong> 
The code is basic:</p>

<p><em>javascript/packs/home.jsx</em></p>

<pre><code>import React from 'react'
import ReactDOM from 'react-dom'
import PropTypes from 'prop-types'

const Home = props =&gt; (
  &lt;div&gt;Hello {props.name}!&lt;/div&gt;
)

Home.defaultProps = {
  name: ''
}

Home.propTypes = {
  name: PropTypes.string
}

document.addEventListener('DOMContentLoaded', () =&gt; {
  ReactDOM.render(
    &lt;Home name=""Daniel"" /&gt;,
    document.body.appendChild(document.createElement('div')),
  )
})
</code></pre>

<p>Im rendering this component in index view:</p>

<p><em>index.html.erb</em></p>

<pre><code>&lt;%= javascript_pack_tag 'home' %&gt;
</code></pre>

<p>But I got this error: 
<a href=""https://i.stack.imgur.com/oen4J.png"" rel=""nofollow noreferrer"">MissingEntryError </a></p>

<p>I would to add  that I had imported this component in app....js
What is missing?</p>
","7949346","","","","","2018-01-08 12:20:04","rails webpacker react MissingEntryError","<reactjs><ruby-on-rails-5><react-rails><ruby-on-rails-5.1><webpacker>","1","1","","",""
"41632970","1","","","2017-01-13 10:55:58","","0","177","<p>This is the parent code and the whole thing renders perfectly and even the props function oncheckselection is been perfectly called by the child but i cant pass the data to my react component method getchilddata gives me undefined no properties or some other error.</p>

<pre><code>class Supertest extends React.Component {

    constructor(props) {
        super(props);
        this.state = {selected : []};
    }
    componentWillReceiveProps(Nextprops) {
      console.log(Nextprops.onCheckSelection)
    }
    getchilddata(value) {
      alert('yolo')
    }
    render() {
        return (&lt;div&gt;
          &lt;div&gt;{SimpleTable(this.props)}&lt;/div&gt;
          &lt;/div&gt;);
    }

}

Supertest.propTypes = {
    headers: React.PropTypes.instanceOf(Immutable.List),
    descriptors: React.PropTypes.instanceOf(Immutable.List),
    data: React.PropTypes.instanceOf(Immutable.List),
    rowTransform: React.PropTypes.func,
    rowSelected: React.PropTypes.func,
    headerSelected: React.PropTypes.func,
    selectable: React.PropTypes.bool,
    onCheckSelection: React.PropTypes.func,
    prescanRows: React.PropTypes.bool
};

Supertest.defaultProps = {
    headers: List(headers),
    descriptors: List(descriptors),
    data: List(data),
    rowTransform: (() =&gt; List()),
    rowSelected: ((dataItem) =&gt; {}),
    headerSelected: ((header) =&gt; {}),
    onCheckSelection : ((items) =&gt; {this.getchilddata}),
    selectable: true,
    prescanRows: true
};
</code></pre>

<p>Child function thats been called. I can print the data in console when I edit the parent code oncheckSelection.</p>

<pre><code>    var checkSelection = function (value) {
        props.onCheckSelection(value)
}
</code></pre>
","7414061","","2030321","","2017-01-13 10:57:51","2017-01-13 11:21:58","defaultProps function does not accept methods from component class (Parent Child Comunication)","<javascript><reactjs><ecmascript-6>","1","0","","",""
"46880368","1","","","2017-10-23 00:07:51","","0","121","<p>I'm using a range slider with <code>react-instantsearch</code>, and I'm attempting to control the <code>attributeName</code> prop with a variable in my component's state. </p>

<p>The slider (the code of which is below) is called from the parent component like so:</p>

<pre><code>&lt;InstantSearch
    appId='etc'
    apiKey='etc etc'
    indexName='etc'
 &gt;
    &lt;InstantSearchSlider
        updatePriceAttributeName={this.props.updatePriceAttributeName}
        min={this.props.min}
        max={this.props.max}
        attributeName={this.state.currentAttributeName}
     /&gt;
&lt;/InstantSearch&gt;
</code></pre>

<p>However, when I change the <code>currentAttributeName</code> value in <code>state</code>, I'm met with this error:</p>

<pre><code>Uncaught Error: prices.hourly.ten is not a retrieved facet.
    at SearchResults../node_modules/algoliasearch-helper/src/SearchResults/index.js.SearchResults.getFacetValues (index.js:640)
    at ProxyComponent.getProvidedProps (connectRange.js:119)
    at ProxyComponent.getProvidedProps (createConnector.js:259)
    at ProxyComponent.componentWillReceiveProps (createConnector.js:168)
    at ProxyComponent.componentWillReceiveProps (createPrototypeProxy.js:44)
    at ReactCompositeComponent.js:610
    at measureLifeCyclePerf (ReactCompositeComponent.js:75)
    at ReactCompositeComponentWrapper.updateComponent (ReactCompositeComponent.js:609)
    at ReactCompositeComponentWrapper.receiveComponent (ReactCompositeComponent.js:546)
    at Object.receiveComponent (ReactReconciler.js:124)
</code></pre>

<p>I'd like my users to pick one attribute from a list of possible attributes. Is there a way to do that?</p>

<pre><code>// InstantSearchSlider.js
// nearly a full copy/paste from algolia docs, but with a different slider component

class Range extends Component&lt;Props, State&gt; {
    static defaultProps = {
        refine: minMax =&gt; minMax
    };
    state = { currentValues: { min: this.props.min, max: this.props.max } };

    componentWillReceiveProps(sliderState) {
      if (sliderState.canRefine) {
        this.setState({
            currentValues: {
                min: sliderState.currentRefinement.min,
                max: sliderState.currentRefinement.max
            }
        });
        }
    }

    onValuesUpdated = sliderState =&gt; {
        this.setState({
            currentValues: {
                min: sliderState[0],
                max: sliderState[1]
            }
        });
    };

    onChange = sliderState =&gt; {
        console.log(sliderState);
        if (
            this.props.currentRefinement.min !== sliderState[0] ||
            this.props.currentRefinement.max !== sliderState[1]
        ) {
            this.props.refine({
                min: sliderState[0],
                max: sliderState[1]
            });
        }
    };

    render() {
        const { min, max, currentRefinement } = this.props;
        const { currentValues } = this.state;
        return min !== max
            ? &lt;div&gt;
                  &lt;PackageSelector handleUpdate={this.props.updatePriceAttributeName} /&gt;
                  &lt;Slider
                      range
                      defaultValue={[min, max]}
                      min={min}
                      max={max}
                      value={[currentRefinement.min, currentRefinement.max]}
                      onChange={this.onChange}
                      onAfterChange={this.onValuesUpdated}
                  /&gt;
                  {/* &lt;Rheostat
                      min={min}
                      max={max}
                      values={[currentRefinement.min, currentRefinement.max]}
                      onChange={this.onChange}
                      onValuesUpdated={this.onValuesUpdated}
                  /&gt; */}
                  &lt;div
                      style={{
                          display: 'flex',
                          justifyContent: 'space-between'
                      }}
                  &gt;
                      &lt;div&gt;
                          {currentValues.min}
                      &lt;/div&gt;
                      &lt;div&gt;
                          {currentValues.max}
                      &lt;/div&gt;
                  &lt;/div&gt;
              &lt;/div&gt;
            : null;
    }
}

export default connectRange(Range);
</code></pre>

<p><strong>ETA</strong>: this error also occurs when I try make instantsearch widgets hidden on initial render, revealing them after user interaction (e.g., in a collapsible <code>div</code>). I imagine this means the issue isn't tied directly to state, but I'm not sure enough about what it is to update the title yet. </p>
","5456001","","5456001","","2017-10-24 00:49:09","2017-10-24 00:49:09","How do I fix ""<attribute> is not a retrieved facet"" in Algolia's react-instantsearch connectedRange slider?","<reactjs><algolia><react-instantsearch>","1","6","","",""
"48073514","1","48073695","","2018-01-03 08:11:35","","1","83","<p>I am using <a href=""https://github.com/One-com/react-truncate"" rel=""nofollow noreferrer"">react-truncate</a> for a project. The basic setup with a expand-collapse and ellipsis is expected to be like this:</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Truncate from 'react-truncate';

class ReadMore extends Component {
    constructor(...args) {
        super(...args);

        this.state = {
            expanded: false,
            truncated: false
        };

        this.handleTruncate = this.handleTruncate.bind(this);
        this.toggleLines = this.toggleLines.bind(this);
    }

    handleTruncate(truncated) {
        if (this.state.truncated !== truncated) {
            this.setState({
                truncated
            });
        }
    }

    toggleLines(event) {
        event.preventDefault();

        this.setState({
            expanded: !this.state.expanded
        });
    }

    render() {
        const {
            children,
            more,
            less,
            lines
        } = this.props;

        const {
            expanded,
            truncated
        } = this.state;

        return (
            &lt;div&gt;
                &lt;Truncate
                    lines={!expanded &amp;&amp; lines}
                    ellipsis={(
                        &lt;span&gt; &lt;a href='#' onClick={this.toggleLines}&gt;{more}&lt;/a&gt;&lt;/span&gt;
                    )}
                    onTruncate={this.handleTruncate}
                &gt;
                    {children}
                &lt;/Truncate&gt;
                {!truncated &amp;&amp; expanded &amp;&amp; (
                    &lt;span&gt; &lt;a href='#' onClick={this.toggleLines}&gt;{less}&lt;/a&gt;&lt;/span&gt;
                )}
            &lt;/div&gt;
        );
    }
}

ReadMore.defaultProps = {
    lines: 3,
    more: 'Read more',
    less: 'Show less'
};

ReadMore.propTypes = {
    children: PropTypes.node.isRequired,
    text: PropTypes.node,
    lines: PropTypes.number
};

export default ReadMore;
</code></pre>

<p>I want to test the expand-collapse functionality in my project using enzyme, so far I can verify the basic setup and default behavior:</p>

<pre><code>const wrapper = shallow(&lt;ReadMore /&gt;); // where above code is defined
expect(wrapper.state('expanded')).to.equal(false); // passes
</code></pre>

<p>But am stuck with how to stimulate the <code>expand click</code> behavior on this, I tried </p>

<p><code>wrapper.toggleLines;</code> // returns undefined. </p>

<p>The debug output <code>console.log(wrapper.debug());</code> is </p>

<pre><code>&lt;div&gt;
  &lt;Truncate lines={3} ellipsis={{...}} onTruncate={[Function: bound handleTruncate]} trimWhitespace={false} /&gt;
&lt;/div&gt;
</code></pre>

<p>I am not sure how to access the <code>onClick</code> property of the <code>Read more</code> span</p>

<p>Basically what I am looking for is something like:</p>

<pre><code>const wrapper = shallow(&lt;ExpandCollapse /&gt;); // where above code is defined
expect(wrapper.state('expanded')).to.equal(false); // passes
//simulate onclick on Expand button 
expect(wrapper.state('expanded')).to.equal(true); // should pass
//then trigger onclick on Collapse button
expect(wrapper.state('expanded')).to.equal(false); // should pass
</code></pre>

<p>Any ideas on how to proceed on this? Thanks in advance. </p>
","988544","","988544","","2018-01-03 08:22:34","2018-01-03 08:26:40","React test react-truncate using enzyme","<javascript><reactjs><testing><enzyme>","2","0","","",""
"49372481","1","49373200","","2018-03-19 21:17:05","","1","76","<p>Using the <a href=""https://github.com/facebook/flow/releases/tag/v0.68.0"" rel=""nofollow noreferrer"">v0.68.0</a>, it seems that defaultProps are not controlled:</p>

<p>The code below (from <a href=""https://flow.org/en/docs/react/components/#toc-using-default-props"" rel=""nofollow noreferrer"">official doc</a>) won't raise error when declaring the ""foo"" defaultProp (as a string instead of a number):</p>

<pre><code>// @flow
import * as React from ""react"";

type Props = {
  foo: number,
};

class MyComponent extends React.Component&lt;Props&gt; {
  static defaultProps = {
    foo: 'bad string',
  };
}
</code></pre>

<p>(See <a href=""https://flow.org/try/#0JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcARFDvmQNwBQdMAnmFnAArFjoC8cA3nThwCECAC44AOwCuIAEZYoAGjoBfenVwAbNOgCyTAMIlIUrFPhYAHjAsATdNjwwAdCfARzlgDycI3AB8AkJwqDDIMMC4cPZYBMgy2jD+3HB8gsLCohJwAOTyyPZhMFDAUgDmearCGupAA"" rel=""nofollow noreferrer"">TryFlow example</a>)</p>

<p>Any idea?
Thanks</p>
","5832547","","4952130","","2018-03-19 22:20:31","2018-03-19 22:20:41","Flow (flowtype) and react: defaultProps are not controlled?","<javascript><reactjs><react-native><flowtype>","1","0","","",""
"48734828","1","48734858","","2018-02-11 18:18:12","","0","76","<p>I have the following ui-component:</p>

<pre><code>...
import stylePropType from 'react-style-proptype';

const Heading = ({
  ...
  marginBottom,
  strong
}) =&gt; (
  &lt;Header
    style={{
      marginBottom,
      fontWeight: strong ? 'bold' : 'normal',
    }}
  &gt;....
  &lt;/Header&gt;
);

Heading.defaultProps = {
  children: &lt;div /&gt;,
  marginBottom: 4,
  strong: false,
  style: {},
};

Heading.propTypes = {
  children: PropTypes.node,
  marginBottom: PropTypes.number,
  strong: PropTypes.bool,
  style: stylePropType,
};
</code></pre>

<p>How can I combine the current style logic (marginBottom and fontWeight) with optionally additional styles passed in as a prop? Is there a way to combine the two or merge them?</p>

<p>Thanks</p>
","149080","","","","","2018-02-11 18:26:57","How to combine react default styles with a style prop?","<javascript><reactjs>","1","0","","",""
"48828823","1","","","2018-02-16 14:24:23","","1","28","<p>I'm making an input component and i want to use it whereever i want.</p>

<blockquote>
  <p>input component code: </p>
</blockquote>

<pre><code>import React from ""react"";
import PropTypes from ""prop-types"";

class Input extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            [props.name] : props.value
        };

        this.handleUserInput = this.handleUserInput.bind(this)
    }

    handleUserInput(e){
        console.log(e.target.name);
        this.setState( prevState =&gt; ({
            [e.target.name] : e.target.value
        }));
    }

    render() {
        const {
            type,
            value,
            placeholder,
            className,
            name,
            id,
            form_control,
            disabled,
            readOnly,
            minLength,
            maxLength,
            ref,
            autoFocus,
            message
        } = this.props;

        let CLASS =
            (form_control ? ""form-control"" : """") + "" "" + (className || """");

        if ( message ){
            CLASS += (className ? ' ' : '') + 'is-invalid ';
        }

        return (
            &lt;input
                type={type}
                name={name}
                value={this.state[name]}
                placeholder={placeholder}
                className={CLASS}
                id={id}
                disabled={disabled}
                readOnly={readOnly}
                minLength={minLength}
                maxLength={maxLength}
                ref={ref}
                autoFocus={autoFocus}
                onChange={this.handleUserInput}
            /&gt;
        );
    }
}

Input.defaultProps = {
    type: ""text"",
    form_control: true,
    value : """"
};

Input.propTypes = {
    type: PropTypes.string,
    value: PropTypes.string,
    placeholder: PropTypes.string,
    className: PropTypes.string,
    name: PropTypes.string.isRequired,
    id: PropTypes.string,
    form_control: PropTypes.bool,
    disabled: PropTypes.bool,
    readOnly: PropTypes.bool,
    minLength: PropTypes.number,
    maxLength: PropTypes.number,
    ref: PropTypes.string,
    autoFocus: PropTypes.bool
};

export default Input;
</code></pre>

<blockquote>
  <p>confirmable component code : </p>
</blockquote>

<pre><code>import React from ""react"";
import PropTypes from ""prop-types"";

import Input from ""./input"";
import FeedBack from ""../static/feedback"";

class ConfirmAble extends React.Component {
    constructor(props) {
        super(props);
    }

    render() {
        const { message } = this.props;

        return (
            &lt;div&gt;
                &lt;Input {...this.props} /&gt;
                &lt;FeedBack text={message} /&gt;
            &lt;/div&gt;
        );
    }
}

ConfirmAble.propTypes = {
    message: PropTypes.string.isRequired
};

export default ConfirmAble;
</code></pre>

<blockquote>
  <p>I'm using this confirmable component many times in same component like below : </p>
</blockquote>

<pre><code>&lt;ConfirmAble
type=""email""
name=""email""
value={this.state.email}
message={this.state.formErrors.email}
/&gt;

&lt;ConfirmAble
type=""password""
name=""password""
value={this.state.password}
message={this.state.formErrors.password}
/&gt;
</code></pre>

<p>but input valuee can not change. if i added handleUserInput function to component i got this error</p>

<blockquote>
  <p>TypeError: Cannot read property 'name' of null at t. (input.jsx:19)</p>
</blockquote>

<p>line 19 is</p>

<blockquote>
  <p>[ e.target.name ] : e.target.value ( in the handleUserInput function )</p>
</blockquote>

<p>If I remove one of component, it works.</p>

<p>Why does not work? Where is the problem ?</p>
","6665018","","","","","2018-02-16 14:24:23","react resuable component issue when use multiple time in same component","<javascript><reactjs><components><reusability>","0","6","","2018-02-16 14:34:21",""
"47117106","1","47128142","","2017-11-05 00:45:35","","0","827","<p>I am new to react and I wanted to create a chart to display skill level. Where I wanted to display text on both X-axis and Y-axis. I have created bar/line and pie chart using React.js. Currently I am able to display digit on -axis and text on X-axis. However, is there a way to display string(text) on both axis?</p>

<p>I would like to display <strong>[""Expert"", ""Advanced"", ""Intermediate"", ""Beginner""]</strong> on Y-axis and on X-axis, I would like to display - <strong>[""HTML"", ""CSS"", ""React JS"",          ""Javascript"", ""SQL"",""Drupa]</strong>.</p>

<p>I am using 'react-chartjs-2' module (<a href=""https://gor181.github.io/react-chartjs-2/"" rel=""nofollow noreferrer"">https://gor181.github.io/react-chartjs-2/</a>).</p>

<p>I have created component called 'Chart.jsx' and code for that is:</p>

<pre><code>import React, { Component } from ""react"";
import { Bar, Line, Pie } from ""react-chartjs-2"";
import ""./Chart.css"";

class Chart extends Component {
  constructor(props) {
    super(props);
    this.state = {
      chartData: props.chartData

    };
  }

  static defaultProps = {
    displayTitle: true,
    DisplayLegend: true,
    LegendPosition: 'right',
    level:'Skills'
  };

  render() {
    return (
      &lt;div className=""chart""&gt;
        &lt;Bar
          data={this.state.chartData}
          options={{
            title: {
              display: this.props.displayTitle,
              text: 'Skills I am proficient with '+this.props.level,
            },
            legend: {
              display: this.props.DisplayLegend,
              position: this.props.LegendPosition
            }
          }}
        /&gt;

        &lt;Line
          data={this.state.chartData}
          options={{
            title: {
              display: this.props.displayTitle,
              text: 'Skills I am proficient with '+this.props.level,
            },
            legend: {
              display: this.props.DisplayLegend,
              position: this.props.LegendPosition
            }
          }}
        /&gt;

        &lt;Pie
          data={this.state.chartData}
          options={{
            title: {
              display: this.props.displayTitle,
              text: 'Skills I am proficient with '+this.props.level,
            },
            legend: {
              display: this.props.DisplayLegend,
              position: this.props.LegendPosition
            }
          }}
        /&gt;
      &lt;/div&gt;
    );
  }
}

export default Chart;
</code></pre>

<p>I have created one page called 'Skills.jsx' and code for that is:</p>

<pre><code>import React, { Component } from ""react"";
import Navbar from ""../components/Navbar.jsx"";
import Footer from ""../components/Footer.jsx"";
import Jumbotron from ""../components/Jumbotron.jsx"";
import Chart from ""../components/Chart.jsx"";

class Skills extends Component {
  constructor() {
    super();
    this.state = {
      chartData: {}
    };
  }

  componentWillMount() {
    this.getChartData();
  }

  getChartData() {
    //Ajax calls here
    this.setState({
      chartData: {
        labels: [
          ""HTML"",
          ""CSS"",
          ""React JS"",
          ""Javascript"",
          ""SQL"",
          ""Drupal""
        ],
        datasets: [
          {
           // labels: ""Level"",
           labels: [""Expert"", ""Advanced"", ""Intermediate"", ""Beginner""],
           data: [100, 90, 90, 70, 60, 50, 40, 30, 20, 10, 0],
            //labels: [""Expert"", ""Advanced"", ""Intermediate"", ""Beginner""],
            displays: [""Expert"", ""Advanced"", ""Intermediate"", ""Beginner""],
            backgroundColor: [
              ""rgba(255, 99, 132, 0.6)"",
              ""rgba(54, 162, 235, 0.6)"",
              ""rgba(255, 206, 86, 0.6)"",
              ""rgba(75, 192, 192, 0.6)"",
              ""rgba(153, 102, 235, 0.6)"",
              ""rgba(255, 159, 132, 0.6)"",
              ""rgba(255, 99, 132, 0.6)""
            ]
          }
        ]
      }
    });
  }

  render() {
    return (
      &lt;div&gt;
        &lt;Navbar /&gt;
        &lt;Jumbotron title=""welcome"" subtitle=""put something"" /&gt;
        &lt;div className=""container""&gt;
          &lt;h2&gt;My Skills&lt;/h2&gt;
          &lt;p&gt;Look, what I can do ..&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
          &lt;Chart chartData={this.state.chartData} lavel=""HTML"" LegendPosition=""bottom"" /&gt;
        &lt;/div&gt;
        &lt;Footer /&gt;
      &lt;/div&gt;
    );
  }
}
export default Skills;
</code></pre>

<p>Thank you in advance!</p>
","8839528","","","","","2017-11-06 00:33:37","How to display text on both axis in react chart?","<reactjs><charts><bar-chart><pie-chart><linechart>","2","0","1","",""
"38954298","1","","","2016-08-15 11:34:14","","0","432","<p>I'm trying to make a simple react web apps with facebook auth for login and the authorization using react-facebook-login from the npmjs package, but it's always blocked by a popup-blocker. My code is thus:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>  static defaultProps = {
    textButton: 'Login with Facebook',
    scope: 'public_profile, email',
    xfbml: false,
    cookie: false,
    size: 'metro',
    fields: 'name',
    cssClass: 'kep-login-facebook',
    version: '2.3',
    language: 'en_US',
    uri: encodeURI('http://myapps.com');
  };

    document.body.appendChild(fbRoot);

    window.fbAsyncInit = () =&gt; {
      FB.init({
        appId: this.props.appId,
        xfbml: this.props.xfbml,
        cookie: this.props.cookie,
        version: 'v' + this.props.version,
      });

      if (this.props.autoLoad) {
        FB.getLoginStatus(this.checkLoginState);
      }
    };

    ((d, s, id) =&gt; {
      const element = d.getElementsByTagName(s)[0];
      const fjs = element;
      let js = element;
      if (d.getElementById(id)) {return;}
      js = d.createElement(s); js.id = id;
      js.src = '//connect.facebook.net/' + this.props.language + '/all.js';
      fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
  }

  responseApi = (authResponse) =&gt; {
    FB.api('/me', { fields: this.props.fields }, (me) =&gt; {
      Object.assign(me, authResponse)
      this.props.callback(me);
    });
  };

  checkLoginState = (response) =&gt; {
    if (response.authResponse) {
      this.responseApi(response.authResponse);
    } else {
      if (this.props.callback) {
        this.props.callback({ status: response.status });
      }
    }
  };

  click = () =&gt; {
    FB.login(this.checkLoginState, { scope: this.props.scope });
  };</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
","2118636","","757508","","2016-08-15 12:44:08","2016-08-15 12:44:57","How to disable react-facebook-login pop-up?","<reactjs><facebook-javascript-sdk><facebook-login>","1","2","","",""
"39710106","1","39710396","","2016-09-26 18:42:51","","0","195","<p>When I inherit/subclass the 'Column' component, it throws <code>Warning: Failed prop type: Table only accepts children of type Column</code></p>

<p>This is how I subclassed <code>Column</code></p>

<pre><code>import React, {Component, PropTypes} from 'react';
import * as RV from 'react-virtualized';

class Column extends Component {
    constructor() {
        super();
    }

    render() {
        return (
            &lt;RVC.Column {...this.props} type=""Column"" /&gt;
        )
    }
}

Column.defaultProps = RV.Column.defaultProps;
Column.propTypes = RV.Column.propTypes;

export default Column;
</code></pre>

<p>It works very well but how can I avoid from that warning?</p>
","763256","","","","","2016-09-26 22:30:08","Warning when react virtualized column is subclassed","<react-virtualized>","2","0","","",""
"48871455","1","48871873","","2018-02-19 17:40:20","","0","37","<p>I have a prototype chat app in react that I can currently show sent messages in both viewers windows (Agent and User). However, I'm having trouble figuring out how to only show a sent message as sent in one window and received in the other and vice versa. So if the Agent sends a message, it will show with their name and the message in both windows. I'm thinking I need to pass the ""author"" into each ""User messages"" and ""Agent messages"" within App.js, but this doesn't work.</p>

<p><strong>App.js</strong></p>

<pre><code>class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      messages: []
    }
    this.handleNewMessage = this.handleNewMessage.bind(this);
  }

  static propTypes = {
    messages: PropTypes.arrayOf(PropTypes.object)
  }

  handleNewMessage = (text) =&gt; {
    this.setState({
      messages: [...this.state.messages, { me: true, author: ""Me"", body: text},{ me: true, author: ""Agent"", body: text}]
    })
  }
  render() {
    return (
      &lt;div className=""App""&gt;
        &lt;div className=""agentWindow""&gt;
          &lt;Agent messages={this.state.messages} handleNewMessage={this.handleNewMessage} /&gt;
        &lt;/div&gt;
        &lt;div className=""userWindow""&gt;
          &lt;User messages={this.state.messages} handleNewMessage={this.handleNewMessage} /&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p><strong>Agent.js</strong>(User.js is the same)</p>

<pre><code>class Agent extends Component {
  render() {
    return (
      &lt;div className=""Agent""&gt;
        &lt;header&gt;
          &lt;p&gt;Agent&lt;/p&gt;
        &lt;/header&gt;
        &lt;MessageList messages={this.props.messages} /&gt;
        &lt;MessageForm onMessageSend={this.props.handleNewMessage} /&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p><strong>Message.js</strong></p>

<pre><code>class Message extends Component {
  static propTypes = {
    author: PropTypes.string,
    body: PropTypes.string.isRequired,
    me: PropTypes.bool
  }

  render() {
    const classes = classNames('Message', {
      log: !this.props.author,
      me: this.props.me
    })

    return (
      &lt;div className={classes}&gt;
        {this.props.author &amp;&amp; (
          &lt;span className=""author""&gt;{this.props.author}:&lt;/span&gt;
        )}
        {this.props.body}
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p><strong>MessageList.js</strong></p>

<pre><code>class MessageList extends Component {
  static propTypes = {
    messages: PropTypes.arrayOf(PropTypes.object)
  }

  static defaultProps = {
    messages: [],
  }

  componentDidUpdate = () =&gt; {
    this.node.scrollTop = this.node.scrollHeight
  }

  render() {
    return (
      &lt;div className=""MessageList"" ref={(node) =&gt; (this.node = node)}&gt;
        {this.props.messages &amp;&amp; this.props.messages.map((message, i) =&gt; (
            &lt;Message key={i} {...message} /&gt;
        ))}
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p><strong>MessageForm.js</strong></p>

<pre><code>class MessageForm extends Component {
  static propTypes = {
    onMessageSend: PropTypes.func.isRequired,
  }

  componentDidMount = () =&gt; {
    this.input.focus()
  }

  handleFormSubmit = (event) =&gt; {
    event.preventDefault()
    this.props.onMessageSend(this.input.value)
    this.input.value = """"
  }

  render() {
    return (
      &lt;form className=""MessageForm"" onSubmit={this.handleFormSubmit}&gt;
        &lt;div className=""input-container""&gt;
          &lt;input
            type=""text""
            ref={(node) =&gt; (this.input = node)}
            placeholder=""Enter Message...""
          /&gt;
        &lt;/div&gt;
        &lt;div className=""button-container""&gt;
          &lt;button type=""submit""&gt;
            Send
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/form&gt;
    )
  }
}
</code></pre>
","350305","","350305","","2018-02-19 19:48:06","2018-02-19 21:36:41","Show message as sent/received in other users window with react","<javascript><reactjs>","1","2","","",""
"41746645","1","","","2017-01-19 16:17:47","","1","345","<p>Hi there I am using Enzyme to test my react components. I was wondering what's the best way to test the fact that the component I am testing DOES include a certain child component with a certain props?</p>

<p>So far I have no success in doing this:</p>

<p>InlineEdit.js</p>

<pre><code>import React, { PropTypes } from 'react';
import ReactDOM from 'react-dom';
import debounce from 'lodash/debounce';

export default class InlineEdit extends React.Component {
    static propTypes = {
      label: PropTypes.string,
      value: PropTypes.string.isRequired,
      onChange: PropTypes.func.isRequired,
    };    
    static defaultProps = {
      label: null,
    };

    constructor(props) {
      super(props)
      this.state = {
        isOn: false,
        inputValue: props.value,
      }
      this.showInput = this.showInput.bind(this)
      this.hideInput = this.hideInput.bind(this)
      this.handleDisplayTextChange = this.handleDisplayTextChange.bind(this)
      this.debouncedHandleKeyDown = debounce(this.debouncedHandleKeyDown.bind(this), 200)
      this.handleKeyDown = this.handleKeyDown.bind(this)
      this.checkIfChanged = this.checkIfChanged.bind(this)
      this.commitChange = this.commitChange.bind(this)
      this.discardChange = this.discardChange.bind(this)
    }

    showInput() {
      this.setState({
        isOn: true,
      }, 
      () =&gt; {
        ReactDOM.findDOMNode(this.refs.namedInput).select()
      })
    }

    hideInput() {
      this.setState({
        isOn: false,
      })
    }

    handleDisplayTextChange(e) {
      this.setState({inputValue:e.target.value})
    }

    debouncedHandleKeyDown(key) {
      if( key == 'Enter') {
        this.commitChange()
      } else if ( key == 'Escape') {
        this.discardChange()
      }
    }

    handleKeyDown(e) {
      // http://stackoverflow.com/questions/22123055/react-keyboard-event-handlers-all-null
      this.debouncedHandleKeyDown(e.key)
    }

    checkIfChanged() {
      return this.state.inputValue !== this.props.value
    }

    commitChange() {
      this.hideInput()
      if(this.checkIfChanged()){
        this.props.onChange(this.state.inputValue)  
      }
    }
    discardChange(){
      this.hideInput()
      this.setState({inputValue: this.props.value})
    }

    render() {
      const { 
        onChange,
        value,
        label,
      } = this.props;

      const {
        isOn,
        inputValue,
      } = this.state;

      return  &lt;span style={{
                borderBottom: '1px dashed #000',
              }}&gt;
                { 
                  !isOn 
                    ? &lt;span onDoubleClick={this.showInput}&gt;{label || value}&lt;/span&gt;
                    : &lt;input 
                        ref=""namedInput""
                        onChange={this.handleDisplayTextChange}
                        onBlur={this.commitChange}
                        onKeyDown={this.handleKeyDown}
                        value={inputValue}
                      /&gt;
                }
              &lt;/span&gt;
    }
}
</code></pre>

<p>LineItemRow.js</p>

<pre><code>import React, { PropTypes } from 'react';
import InlineEdit from './InlineEdit';

const LineItemRow = ({
  project,
}) =&gt; (
  &lt;div&gt;
    &lt;InlineEdit 
      value={project.name} /&gt;
  &lt;/div&gt;
)
LineItemRow.propTypes = {
  project: PropTypes.object,
};

export default LineItemRow;
</code></pre>

<p>LineItemRow.spec.js</p>

<pre><code>import React from 'react';
import shallow from 'enzyme/shallow';
import expect from 'expect';
import sinon from 'sinon';

import { LineItemRow } from './LineItemRow';
import InlineEdit from '../lib/components/InlineEdit';
import LineItemSelectBox from './LineItemSelectBox';

describe('&lt;LineItemRow /&gt; component', function () {
  const setup = () =&gt; {
    const props = {
      project: {id: 1, name: '1000'},
    }
    const output = shallow(&lt;LineItemRow {...props} /&gt;)
    return {
      output,
      props,
    }
  }

  it.only('should contain project name', function () {
    const { output, props } = setup()
    const actual  = output.contains(&lt;InlineEdit value={props.project.name} /&gt;) // THIS IS FALSE
    const expected= true

    expect(actual).toEqual(expected)
  });

});
</code></pre>

<p>//package.json</p>

<pre><code>    {
      ""name"": ""client"",
      ""version"": ""1.0.0"",
      ""description"": """",
      ""main"": ""index.js"",
      ""scripts"": {
        ""test"": ""NODE_ENV=test mocha './app/**/*.spec.js' --compilers js:babel-register --recursive --require testSetup.js"",
        ""test:watch"": ""npm test -- --watch"",
        ""start"": ""NODE_ENV=dev node server.js""
      },
      ""author"": """",
      ""license"": ""ISC"",
      ""devDependencies"": {
        ""babel-core"": ""^6.7.4"",
        ""babel-eslint"": ""^6.0.4"",
        ""babel-loader"": ""^6.2.4"",
        ""babel-plugin-react-hot"": ""^1.0.4"",
        ""babel-plugin-transform-flow-strip-types"": ""^6.18.0"",
        ""babel-polyfill"": ""^6.7.4"",
        ""babel-preset-es2015"": ""^6.6.0"",
        ""babel-preset-react"": ""^6.5.0"",
        ""babel-preset-stage-0"": ""^6.5.0"",
        ""babel-register"": ""^6.7.2"",
        ""css-loader"": ""^0.23.1"",
        ""enzyme"": ""^2.2.0"",
        ""eslint"": ""^2.6.0"",
        ""eslint-plugin-react"": ""^5.0.1"",
        ""expect"": ""^1.16.0"",
        ""happypack"": ""^2.1.1"",
        ""jsdom"": ""^8.2.0"",
        ""mocha"": ""^2.4.5"",
        ""mocha-jsdom"": ""^1.1.0"",
        ""node-sass"": ""^3.4.2"",
        ""npm-check-updates"": ""^2.8.9"",
        ""npm-install-webpack-plugin"": ""^3.0.0"",
        ""react-addons-perf"": ""^15.1.0"",
        ""react-addons-test-utils"": ""^15.1.0"",
        ""react-hot-loader"": ""^3.0.0-beta.6"",
        ""react-render-visualizer"": ""^0.2.2"",
        ""redux-devtools"": ""^3.3.1"",
        ""redux-devtools-dock-monitor"": ""^1.1.1"",
        ""redux-devtools-log-monitor"": ""^1.0.11"",
        ""sinon"": ""^1.17.3"",
        ""style-loader"": ""^0.13.1"",
        ""webpack"": ""^1.13.1"",
        ""webpack-dev-server"": ""^1.14.1"",
        ""webpack-notifier"": ""^1.3.0"",
        ""why-did-you-update"": ""0.0.8""
      },
      ""dependencies"": {
        ""Faker"": ""^0.7.2"",
        ""aphrodite"": ""^1.1.0"",
        ""axios"": ""^0.12.0"",
        ""classnames"": ""^2.2.5"",
        ""color"": ""^0.11.3"",
        ""counterpart"": ""^0.17.4"",
        ""cuid"": ""^1.3.8"",
        ""damals"": ""^0.9.4"",
        ""delay"": ""^1.3.1"",
        ""draft-js"": ""^0.7.0"",
        ""draft-js-export-html"": ""^0.3.0"",
        ""fecha"": ""^2.1.0"",
        ""file-loader"": ""^0.8.5"",
        ""halogen"": ""^0.2.0"",
        ""history"": ""^2.0.1"",
        ""humanize-plus"": ""^1.8.2"",
        ""intl"": ""^1.1.0"",
        ""lodash"": ""^4.13.1"",
        ""memoizee"": ""^0.3.10"",
        ""normalizr"": ""^2.1.0"",
        ""pluralize"": ""^3.0.0"",
        ""query-string"": ""^4.2.2"",
        ""query-string-parser"": ""^0.1.4"",
        ""react"": ""^15.1.0"",
        ""react-addons-shallow-compare"": ""^15.1.0"",
        ""react-dnd"": ""^2.1.4"",
        ""react-dnd-html5-backend"": ""^2.1.2"",
        ""react-dom"": ""^15.1.0"",
        ""react-dropzone"": ""^3.4.0"",
        ""react-functional"": ""^1.2.0"",
        ""react-grid-layout"": ""^0.13.0"",
        ""react-modal"": ""^1.4.0"",
        ""react-player"": ""^0.12.0"",
        ""react-redux"": ""^4.4.5"",
        ""react-router"": ""^3.0.0-beta.1"",
        ""react-router-redux"": ""^4.0.0"",
        ""react-rte"": ""^0.5.0"",
        ""react-select"": ""^1.0.0-rc.2"",
        ""react-stateless"": ""^0.2.1"",
        ""redux"": ""^3.5.2"",
        ""redux-crud"": ""^1.0.0"",
        ""redux-form"": ""^5.2.5"",
        ""redux-saga"": ""^0.14.2"",
        ""reselect"": ""^2.2.1"",
        ""seamless-immutable"": ""^5.1.1"",
        ""url-loader"": ""^0.5.7""
      }
    }
</code></pre>

<p>The line I marked ""this is false"" is where I have most question about. how can I test that the child component InlineEdit will be given props XYZ?</p>

<p>Thank you!</p>
","126749","","126749","","2017-01-22 19:09:25","2017-01-22 19:09:25","enzyme react testing .contains() not matching","<reactjs><testing><enzyme>","0","6","","",""
"48533555","1","","","2018-01-31 02:30:20","","0","36","<p>I have an image slider that is built using react that works in all browsers except Safari. The preview and next buttons(image-slider__button-next and image-slider__button-previous) do not show up The slider is not giving any errors at all. I can not figure out why it would not work in Safari, but works in all other browsers. I've never had a browser conflict with js unless I was testing in a really old browser. Any help on this would be greatly appreciated. My code is below:</p>

<pre><code>/* globals document */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Image from '../Common/Image';

import './ImageSlider.css';

const defaultProps = {
  data: [],
};

const propTypes = {
  data: PropTypes.arrayOf(PropTypes.shape({
    LogoColor: PropTypes.shape({
      Src: PropTypes.string,
      Alt: PropTypes.string,
    }),
    Url: PropTypes.string,
  })).isRequired,
};

class ImageSlider extends Component {
  state = {
    isSlider: false,
  }

  componentDidMount() {
    document.addEventListener('resize', this.handleResize());
    this.attachInterval();
  }

  componentWillUnmount() {
    clearInterval(this.interval);
  }

  setSlidesOrder = (nextRefIndex) =&gt; {
    let currentOrder = 1;
    let counter = nextRefIndex;
    for (let i = 0; i &lt; this.props.data.length; i += 1) {
      if (counter === this.props.data.length) {
        counter = 0;
      }
      this.slider.querySelector(`#image-slider__slider-item-${counter}`).style.order = currentOrder;
      currentOrder += 1;
      counter += 1;
    }
  };

  attachInterval = () =&gt; {
    if (this.props.data &amp;&amp; this.props.data.length &gt; 0) {
      this.interval = setInterval(() =&gt; {
        this.handleNext();
      }, 4000);
    }
  }

  handleResize = () =&gt; {
    this.setState({
      isSlider: document.body.clientWidth / 180 &gt; this.props.data.length,
    });
  }

  handleNext = () =&gt; {
    const currentRef = this.slider.querySelector('.image-slider__slider-item.is-ref');
    if (!currentRef) return;

    const currentRefIndex = Number(currentRef.id.substring(currentRef.id.lastIndexOf('-') + 1));
    const nextRefIndex =
      currentRefIndex === (this.props.data.length - 1)
        ? 0
        : currentRefIndex + 1;

    this.slider.querySelector('.image-slider__slider').classList.remove('is-reversing');

    // reset order
    currentRef.classList.remove('is-ref');
    this.slider.querySelector(`#image-slider__slider-item-${nextRefIndex}`).classList.add('is-ref');
    this.slider.querySelector(`#image-slider__slider-item-${nextRefIndex}`).style.order = 1;

    this.setSlidesOrder(nextRefIndex);

    this.slider.querySelector('.image-slider__slider').classList.remove('is-set');
    setTimeout(() =&gt; {
      this.slider.querySelector('.image-slider__slider').classList.add('is-set');
    }, 50);
  };

  handlePrevious = () =&gt; {
    const currentRef = this.slider.querySelector('.image-slider__slider-item.is-ref');
    if (!currentRef) return;

    const currentRefIndex = Number(currentRef.id.substring(currentRef.id.lastIndexOf('-') + 1));
    const nextRefIndex =
      currentRefIndex === 0
        ? this.props.data.length - 1
        : currentRefIndex - 1;

    this.slider.querySelector('.image-slider__slider').classList.add('is-reversing');
    // reset order
    currentRef.classList.remove('is-ref');
    this.slider.querySelector(`#image-slider__slider-item-${nextRefIndex}`).classList.add('is-ref');
    this.slider.querySelector(`#image-slider__slider-item-${nextRefIndex}`).style.order = 1;

    this.setSlidesOrder(nextRefIndex);

    this.slider.querySelector('.image-slider__slider').classList.remove('is-set');
    setTimeout(() =&gt; {
      this.slider.querySelector('.image-slider__slider').classList.add('is-set');
    }, 50);
  };

  render() {
    if (!this.props.data || this.props.data.length === 0) return null;

    const items = this.props.data.map((item, index) =&gt; {
      if (!item.LogoColor.Src) return null;

      return (
        &lt;li
          className={`image-slider__slider-item ${index === this.props.data.length - 1 &amp;&amp; this.state.isSlider ? 'is-ref' : ''}`}
          id={`image-slider__slider-item-${index}`}
          key={item.LogoColor.Src}
        &gt;
          &lt;a href={item.Url}&gt;
            &lt;Image src={item.LogoColor.Src} /&gt;
          &lt;/a&gt;
        &lt;/li&gt;
      );
    });
    return (
      &lt;div ref={(ref) =&gt; { this.slider = ref; }} className=""image-slider p-tb-30""&gt;
        &lt;div className=""slider-container""&gt;
          &lt;div className=""row""&gt;
            &lt;div className=""col-xs-12""&gt;
              &lt;div className=""image-slider__container""&gt;
                {
                  this.state.isSlider ?
                    (&lt;button className=""image-slider__button-previous"" onClick={this.handlePrevious}&gt;
                      &lt;i className=""fa fa-chevron-left"" /&gt;
                    &lt;/button&gt;) : ''
                }
                &lt;div className=""image-slider__slider-container""&gt;
                  &lt;ul className={`image-slider__slider list--nostyle ${this.state.isSlider ? 'is-set' : ''}`}&gt;
                    {items}
                  &lt;/ul&gt;
                &lt;/div&gt;
                {
                  this.state.isSlider ?
                    (&lt;button className=""image-slider__button-next"" onClick={this.handleNext}&gt;
                      &lt;i className=""fa fa-chevron-right"" /&gt;
                    &lt;/button&gt;) : ''
                }
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}

ImageSlider.defaultProps = defaultProps;
ImageSlider.propTypes = propTypes;

export default ImageSlider;
</code></pre>
","6051253","","","","","2018-01-31 02:30:20","My react js image slider is working perfectly in all browsers except Safari","<javascript><reactjs><slider><jsx>","0","0","","",""
"41061000","1","","","2016-12-09 12:55:05","","1","521","<p>im having problems with re-using react components in two different html pages</p>

<p>heres the structure of my app</p>

<pre><code>react app
    |-- webpack.config
    |-- package
    `-- src
        |-- index.js
        |-- index.html
        |-- home.html
        `-- components
            |-- Main.js
            |-- Sector.js
            |-- Homepage.js
</code></pre>

<p>okay in webpack.config i have
        this   </p>

<pre><code>module.exports = {
  entry: './index.js',


entry: [
    'webpack-dev-server/client?http://127.0.0.1:' + defaultSettings.port,
    'webpack/hot/only-dev-server',
    './src/index'

  ],

    output: {
    path: path.join(__dirname, '/../dist/assets'),
    filename: 'app.js',
  },


  module: {
    loaders: [
      { test: /\.js$/, exclude: /node_modules/, loader: 'babel-loader?presets[]=es2015&amp;presets[]=react' }
    ]
  }
}
</code></pre>

<p>in index.js</p>

<pre><code>import 'core-js/fn/object/assign';
import React from 'react';
import ReactDOM from 'react-dom';
import Appd from './components/Main';
import Sector from './components/sector';
import Homepagesector from './components/Homepagesector';

ReactDOM.render(&lt;Appd /&gt;, document.getElementById('app'));
ReactDOM.render(&lt;Sector /&gt;, document.getElementById('sector'));  
ReactDOM.render(&lt;Homepagesector /&gt;, document.getElementById('homepage'));
</code></pre>

<p>in index.html</p>

<pre><code>&lt;!doctype html&gt;
&lt;html &gt;

&lt;head&gt;
  &lt;meta charset=""utf-8""&gt;
  &lt;title&gt;zilla&lt;/title&gt;
  &lt;meta http-equiv=""X-UA-Compatible"" content=""IE=edge,chrome=1""&gt;
  &lt;meta name=""description"" content=""""&gt;
&lt;/head&gt;

  &lt;!-- REQUIRED 3/3 - the image crop directive --&gt;


   &lt;body &gt;
      &lt;header&gt;
         &lt;div id=""app""&gt;&lt;/div&gt;
      &lt;/header&gt;

      &lt;script src=""appcontroller.js""&gt;&lt;/script&gt;
      &lt;script src=""http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js""&gt;&lt;/script&gt;
  &lt;script&gt;__REACT_DEVTOOLS_GLOBAL_HOOK__ = parent.__REACT_DEVTOOLS_GLOBAL_HOOK__&lt;/script&gt;

      &lt;script type=""text/javascript"" src=""/assets/app.js""&gt;&lt;/script&gt;
      &lt;script type=""text/javascript"" src=""resample.js""&gt;&lt;/script&gt;
      &lt;script type=""text/javascript"" src=""avatar.js""&gt;&lt;/script&gt;
&lt;/body&gt;      
&lt;/html&gt;
</code></pre>

<p>in home.html</p>

<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;   
&lt;body &gt;
&lt;header&gt;
  &lt;div id=""homepage""&gt;&lt;/div&gt;
&lt;/header&gt;
   &lt;script src=""appcontroller.js""&gt;&lt;/script&gt;
   &lt;script src=""http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js""&gt;&lt;/script&gt;
   &lt;script&gt;__REACT_DEVTOOLS_GLOBAL_HOOK__ = parent.__REACT_DEVTOOLS_GLOBAL_HOOK__&lt;/script&gt;
   &lt;script type=""text/javascript"" src=""/assets/app.js""&gt;&lt;/script&gt;
   &lt;script type=""text/javascript"" src=""resample.js""&gt;&lt;/script&gt;
   &lt;script type=""text/javascript"" src=""avatar.js""&gt;&lt;/script&gt;
   &lt;script type=""text/javascript"" src=""avatar.js""&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>In components folder 
Main.js</p>

<pre><code>require('styles/App.css');

import React from 'react';

let yeomanImage = require('../images/zilla.png');

class AppComponent extends React.Component {
  render() {
    return (
       &lt;div&gt;
          &lt;img src={yeomanImage} alt=""Yeoman Generator"" /&gt; 
          &lt;h1 className=""title""&gt;&lt;/h1&gt;  
          &lt;li&gt;
             &lt;a href=""index2.html""  className=""a7"" &gt;Signin&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
             &lt;a href=""index.html"" className=""a7"" &gt;Register&lt;/a&gt;
          &lt;/li&gt;         
       &lt;/div&gt;

In components folder 
</code></pre>

<p>Sector.js</p>

<pre><code>require('styles/sector.css');

import React from 'react';

let yeomanImage = require('../images/dealzilla.png');

let yeomanImaged = require('../images/256.jpg');

class AppComponent extends React.Component {
  constructor(props) {
      super(props);

      this.state = {
         data: 'Initial data...'
      }

      this.updateState = this.updateState.bind(this);

   };

   updateState(e) {
      this.setState({data: e.target.value});
   }
  render() {


    return (
       &lt;div className=""page-wrap""&gt;
          &lt;h1&gt;not registered?register for free&lt;/h1&gt;
          &lt;div className=""profile""&gt;
             &lt;div className=""profile-avatar-wrap""&gt;
               &lt;img src={yeomanImaged} alt=""Yeoman Generator"" id=""profile-avatar"" alt=""Image for Profile""/&gt;
             &lt;/div&gt;
             &lt;div className=""location""&gt;upload avatar&lt;/div&gt;              
          &lt;/div&gt;
          &lt;h3&gt;You could do this with a file input too...&lt;/h3&gt;
       &lt;div&gt;
          &lt;input type = ""text"" value = {this.state.data} 
               onChange = {this.updateState} /&gt;
          &lt;h4&gt;{this.state.data}&lt;/h4&gt;
       &lt;/div&gt;
    &lt;/div&gt;
</code></pre>

<p>In components folder</p>

<p>homepage.js</p>

<pre><code>import React from 'react';

let yeomanImage = require('../images/dealzilla.png');

class AppedComponent extends React.Component {
  render() {
    return (
       &lt;div&gt;
          &lt;img src={yeomanImage} alt=""Yeoman Generator"" /&gt; 
          &lt;h1 className=""title""&gt;dealzilla&lt;/h1&gt; 
          &lt;li&gt;
             &lt;a href=""index2.html""  className=""a7"" &gt;Search&lt;/a&gt;
             &lt;a href=""index2.html""  className=""a7"" &gt;Search&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
             &lt;a href=""index.html"" className=""a7"" &gt;Register&lt;/a&gt;
          &lt;/li&gt;    
       &lt;/div&gt;
   );
  }
}

AppedComponent.defaultProps = {
};

export default AppedComponent;
</code></pre>

<p>The problem is that I am not able to use homepage.js component
in my home.html page
it doesnt appear at all
however my Main.js component is able to appear</p>

<p>Im still a beginner in react, I've looked around for answers and didnt find any on this regard
any help would be appreciated 
thank you in advance
best regards</p>
","4089319","","4089319","","2016-12-10 07:17:04","2017-02-21 20:14:49","How to reuse react components in different html pages","<javascript><html5><reactjs><webpack><webpack-dev-server>","1","2","","",""
"41781836","1","","","2017-01-21 16:40:41","","2","796","<p>I am trying to display the user location on the map using google-maps-react. I followed the fullstack tutorial, but I just can't seem to display the user location.  I will display my Map.js  Component below.  Please help me point out what I am doing wrong. Thank you.</p>

<pre><code>import React, { Component } from 'react'
import ReactDOM from 'react-dom';

class Map extends Component {
  constructor(props) {
    super(props);

    const {lat, lng} = this.props.initialCenter;
    this.state = {
      currentLocation: {
        lat: lat,
        lng: lng
      }
    }
  }
  componentDidUpdate(prevProps, prevState) {
    if (prevProps.google !== this.props.google) {
      this.loadMap();
    }
    if (prevState.currentLocation !== this.state.currentLocation) {
      this.recenterMap();
    }
  }
  recenterMap() {
    const map = this.map;
    const curr = this.state.currentLocation;

    const google = this.props.google;
    const maps = google.maps;

    if (map) {
        let center = new maps.LatLng(curr.lat, curr.lng)
        map.panTo(center)
    }
  }
  componentDidMount() {
    if (this.props.centerAroundCurrentLocation) {
        if (navigator &amp;&amp; navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((pos) =&gt; {
                const coords = pos.coords;
                this.setState({
                    currentLocation: {
                        lat: coords.latitude,
                        lng: coords.longitude
                    }
                })
            })
        }
    }
    this.loadMap();
  }
  loadMap() {
    if (this.props &amp;&amp; this.props.google) {
      // google is available
      const {google} = this.props;
      const maps = google.maps;

      const mapRef = this.refs.map;
      const node = ReactDOM.findDOMNode(mapRef);

      let {initialCenter, zoom} = this.props;
      const {lat, lng} = initialCenter;
      const center = new maps.LatLng(lat, lng);
      const mapConfig = Object.assign({}, {
        center: center,
        zoom: zoom
      })
      this.map = new maps.Map(node, mapConfig);
    }
  }
  render() {
    const style = {
      width: '100vw',
      height: '100vh'
    }
    return (
      &lt;div ref='map' style={style}&gt;
        Loading map...
      &lt;/div&gt;
    )
  }
}

Map.propTypes = {
  google: React.PropTypes.object,
  zoom: React.PropTypes.number,
  initialCenter: React.PropTypes.object,
  centerAroundCurrentLocation: React.PropTypes.bool
}
Map.defaultProps = {
  zoom: 13,
  // San Francisco, by default
  initialCenter: {
    lat: 37.774929,
    lng: -122.419416
  },
  centerAroundCurrentLocation: false
}


export default Map
</code></pre>
","6650932","","","","","2017-01-21 16:40:41","google-maps-react user location not working","<javascript><google-maps><reactjs><components>","0","1","2","",""
"32682994","1","32691346","","2015-09-20 18:48:37","","0","381","<p>I have an simple react component that i send a bool prop to like <code>&lt;MenuItem active={notificationMenu.shown} /&gt;</code><br>
but the prop don't get changed inside the component and is always true even if i pass it in on the element</p>

<pre><code>@Radium
export class MenuItem extends Component {
  styles = {
    hidden: {
      listStyleType: ""none""
    }
  }
  static propTypes = {
    active: React.PropTypes.bool.isRequired
  }
  static defaultProps = {
    active: true
  }
  render() {
    if(this.props.active) {
      return (
        &lt;li style={this.props.style}&gt;
          {this.props.children}
        &lt;/li&gt;
      )
    } else {
      return (
        &lt;li style={[this.styles.hidden, this.props.style]}&gt;&amp;nbsp;&lt;/li&gt;
      )
    }
  }
}
</code></pre>
","218822","","218822","","2015-09-21 08:24:37","2015-09-21 09:10:24","defaultProps overrides delevert props","<javascript><reactjs><ecmascript-7>","2","4","","",""
"41081539","1","41081807","","2016-12-10 23:48:31","","0","237","<p>I am new in react. I am trying to validate props. As per documentation, if remove isRequired value it shows warning in development mode.</p>

<pre><code>import React from 'react';

export default class PropsValidation extends React.Component{
    render(){
        return(
            &lt;div&gt;
                &lt;h1&gt;Props Validation&lt;/h1&gt;
                &lt;p&gt;{this.props.propArray}&lt;/p&gt;
                &lt;p&gt;{this.props.propBoolean}&lt;/p&gt;
                &lt;p&gt;{this.props.propFunction}&lt;/p&gt;
            &lt;/div&gt;
        )
    }
}

PropsValidation.defaultProps = {
    propArray:[1,2,3],
    propBoolean:false,
    propFunction:function(e){return e}
}

PropsValidation.propsTypes = {
    propArray: React.PropTypes.array.isRequired,
    propBool: React.PropTypes.bool.isRequired,
    propFunction: React.PropTypes.function
}
</code></pre>
","3442266","","","","","2016-12-11 01:12:44","propsvalidation isrequired is not showing warning in reactjs","<reactjs>","2","0","","",""
"48565754","1","","","2018-02-01 15:00:10","","0","360","<p>i have component with a simple structure and a <code>&lt;Text&gt;</code> somewhere inside the tree for which i want to pass in a style. Which works perfectly but for the proptypes validation.</p>

<p>The basic setup is not much more than that</p>

<pre><code>export default class Component extends PureComponent {
    render() {
        return (&lt;View&gt;&lt;Text style={this.props.style}&gt;Some text&lt;/Text&gt;&lt;/view&gt;);
    }
}

Component.defaultProps = {
    style: null,
};

Component.propTypes = {
    style: ViewPropTypes.style,
};
</code></pre>

<p>The problem is that the ViewPropTypes.style does not contain i.e. <code>color</code> key. So providing a style with a color is invalid and produces a warning. I tried to import <code>TextStylePropTypes</code> as i found in <a href=""https://github.com/facebook/react-native/blob/master/Libraries/Text/TextStylePropTypes.js"" rel=""nofollow noreferrer"">https://github.com/facebook/react-native/blob/master/Libraries/Text/TextStylePropTypes.js</a> but it is undefined. </p>

<p>Any advice on what to do?</p>
","1171541","","","","","2018-02-01 20:28:35","react-native prop type for text style","<react-native><react-proptypes>","1","0","","",""
"41488537","1","42733457","","2017-01-05 15:19:51","","23","3170","<p>I just came across a question about React performances when settings default values in one of my <strong>stateless functional components</strong>.</p>

<p>This component had a <code>defaultProps</code> which defined <code>row: false</code>, but I didn't like it because the <code>defaultProps</code> is <strong>at the end</strong> of the file, which actually makes it harder to see. And thus, we aren't aware of the default property. So I moved it to the function declaration directly and assigned it using ES6 default value for parameters.</p>

<pre><code>const FormField = ({
  row = false,
  ...others,
}) =&gt; {
  // logic...
};
</code></pre>

<p>But then we argued with a coworker about this <strong>being a good idea or not</strong>. Because doing so may seem trivial, but may also have a great impact upon performances since <strong>react is not aware</strong> of the default value. </p>

<p>I believe in this case, it's trivial. Because it's a boolean and not an object/array and therefore won't be seen as a different value during <em>reconciliation</em>. </p>

<hr>

<p>But, let's now see a more advanced use-case:</p>

<pre><code>const FormField = ({
  input: { name, value, ...inputRest },
  label = capitalize(name),
  placeholder = label,
  row = false,
  meta: { touched, error, warning },
  ...others,
}) =&gt; {
  // logic...
};
</code></pre>

<p>Here, I base the value of <code>placeholder</code> from <code>label</code>, which itself is based on <code>input.name</code>. Using ES6 destructuring with default values for parameters makes the whole thing quite easy to write/understand and it works like a charm.</p>

<p>But is it a good idea? And if not, then how would you do it properly?</p>
","2391795","","2391795","","2017-02-02 16:33:48","2017-03-11 09:17:51","React - defaultProps vs ES6 default params when destructuring (performances issues)","<performance><reactjs><ecmascript-6><destructuring>","2","9","7","",""
"40524030","1","40581786","","2016-11-10 09:28:18","","3","1013","<p>I was able to override the button inside the compononent but not able to call the local function, for example when I press ""Refresh"", nothing happen. Is this the correct way to override the button text and perform function. Your help is appreciate. Thanks. </p>

<pre><code>import { WebView } from 'react-native'
import React, { PropTypes, Component } from 'react';
import { View, Text } from 'react-native';

import styles from '../src/styles/home'

var WEBVIEW_REF = 'webview';
class WebViewComponent extends Component {

  static rightTitle = ""Refresh"";
  static onRight() {
    this.reload;
  }

  static propTypes = {
    url: PropTypes.string,
    scalesPageToFit: PropTypes.bool,
    startInLoadingState: PropTypes.bool,
  };

  static defaultProps = {
    url: 'http://google.com',
    scalesPageToFit: true,
    startInLoadingState: true,
  };

  render() {
    return (
      &lt;WebView
          ref={ WEBVIEW_REF }
          style={ { flex: 1, marginTop: 50 } }
          source={ { uri: this.props.url } }
          scalesPageToFit={ this.props.scalesPageToFit }
          startInLoadingState={ this.props.startInLoadingState } /&gt;
      );
  }

  reload = () =&gt; {
    alert('reload');
  };

}

module.exports = WebViewComponent;
</code></pre>
","7125370","","","","","2016-11-14 04:13:45","react native router flux: override left or right button inside component and access local function","<javascript><reactjs><react-native><jsx><react-native-router-flux>","1","4","1","",""
"49774648","1","","","2018-04-11 12:03:12","","0","28","<p>we have a Dropdown component which will render very slowly when on iOS and with a large number of array entries, for example a country-array. </p>

<p><strong>Our code:</strong></p>

<pre><code>import React from 'react';
import PropTypes from 'prop-types';
import {
    Picker,
    Text,
    View,
    Platform,
    ActionSheetIOS
} from 'react-native';

import Button from '../Button'
import styles from './styles';

const defaultProps = {
    mode: 'dropdown'
};

const _showActionSheet = (iosData, onValueChange) =&gt; {
    return ActionSheetIOS.showActionSheetWithOptions({
        options: iosData
        },
        (selectedOption) =&gt; onValueChange(iosData[selectedOption])
    )
};

const _renderDropdown  = (platform, props, data, mapItemProps, iosButtonText, onValueChange, iosData) =&gt; {
    if (platform === 'ios') {
        return (&lt;Button
            buttonStyle=""primary""
            onPress={ () =&gt; _showActionSheet(iosData, onValueChange) }
            text={ iosButtonText }
            /&gt;)
    }
    else if (platform === 'android') {
        return (
            &lt;Picker
            style={ styles.dropdown }
            { ...defaultProps }
            { ...props }
        &gt;
            { data.map(item =&gt; &lt;Picker.Item { ...mapItemProps(item) } /&gt;) }
        &lt;/Picker&gt;
        )
    }
};

const Dropdown = ({
    errorMessage,
    label,
    data,
    mapItemProps,
    iosButtonText = 'Wählen',
    iosData,
    ...props
}) =&gt; (
    &lt;View style={ styles.container }&gt;
        { !!label &amp;&amp;
            &lt;Text style={ styles.label }&gt;
                {label.toUpperCase()}
            &lt;/Text&gt;
        }
        {_renderDropdown(Platform.OS, props, data, mapItemProps, iosButtonText, props.onValueChange, iosData)}
        { !!errorMessage &amp;&amp;
            &lt;Text style={ styles.errorMessage }&gt;
                {errorMessage}
            &lt;/Text&gt;
        }
    &lt;/View&gt;
);

Dropdown.propTypes = {
    errorMessage: PropTypes.string,
    label: PropTypes.string,
    data: PropTypes.array.isRequired,
    mapItemProps: PropTypes.func.isRequired,
    iosButtonText: PropTypes.string,
    props: PropTypes.object,
    iosData: PropTypes.array
};

export default Dropdown;
</code></pre>

<p>Unfortunately  cant be used, as it will be always open on iOS, which causes a bad usability. </p>

<p>iosData has only the country array inside. the preparation of the data takes only 2ms. </p>

<p>Does anyone has an idea, what causes this performance issue?</p>
","7226875","","","","","2018-04-11 12:03:12","performance issue with react-native Dropdown and showActionSheet when rendering a country list","<ios><react-native>","0","0","","",""
"32277383","1","","","2015-08-28 18:15:03","","0","865","<p>I'm just getting started with react testing, trying to use shallow rendering.</p>

<p>I can't figure what's going on here - I believe my code follows all instructions I've seen with examples (e.g. <a href=""http://racingtadpole.com/blog/test-react-with-jest/"" rel=""nofollow"">http://racingtadpole.com/blog/test-react-with-jest/</a>)</p>

<p>but I'm getting null with <code>shallowRenderer.getRenderOutput();</code></p>

<p>Additionally I'm confused as when I log out shallowRenderer, I don't see any getRenderOutput method??</p>

<pre class=""lang-jsx prettyprint-override""><code>import React from 'react/addons';
import Icon from '../../components/shared/Icon.jsx';

const TestUtils = React.addons.TestUtils;

function getRenderOutput(elt) {
  console.log('elt: ', elt);
  const shallowRenderer = TestUtils.createRenderer();
  shallowRenderer.render(elt);
  console.log('shallowRenderer: ', shallowRenderer);
  const output = shallowRenderer.getRenderOutput();
  console.log('output: ', output);
  return output;
}


describe('&lt;Icon /&gt;', () =&gt; {

  it('should pass props through', () =&gt; {
    const result = getRenderOutput(&lt;Icon type='octicon' name='file-directory' classNames=""icon-roomy icon-muted"" /&gt;);
    console.log('result: ', result);
  });

});
</code></pre>

<p>And the resulting output:</p>

<pre><code>elt:  

{ type:
   { [Function: Icon]
     _isMockFunction: true,
     mock: { calls: [], instances: [] },
     mockClear: [Function],
     mockReturnValueOnce: [Function],
     mockReturnValue: [Function],
     mockImpl: [Function],
     mockImplementation: [Function],
     mockReturnThis: [Function],
     _getMockImplementation: [Function],
     defaultProps: { type: 'fa', classNames: '' },
     propTypes:
      { type: [Object],
        name: [Object],
        prefix: [Object],
        classNames: [Object],
        title: [Object] } },
  key: null,
  ref: null,
  _owner: null,
  _context: {},
  _store:
   { props:
      { type: 'octicon',
        name: 'file-directory',
        classNames: 'icon-roomy icon-muted' },
     originalProps:
      { type: 'octicon',
        name: 'file-directory',
        classNames: 'icon-roomy icon-muted' } } }
shallowRenderer:  { _instance:
   { _currentElement:
      { type: [Object],
        key: null,
        ref: null,
        _owner: null,
        _context: {},
        _store: [Object] },
     _rootNodeID: '.0',
     _instance:
      { getClassNames: [Object],
        render: [Object],
        setState: [Object],
        forceUpdate: [Object],
        props: [Object],
        context: {},
        refs: {},
        _reactInternalInstance: [Circular],
        state: null },
     _pendingElement: null,
     _pendingStateQueue: null,
     _pendingReplaceState: false,
     _pendingForceUpdate: false,
     _renderedComponent: { _renderedOutput: null, _currentElement: [Object] },
     _context: {},
     _mountOrder: 1,
     _isTopLevel: false,
     _pendingCallbacks: null } }
output:  null
result:  null
</code></pre>
","2232367","","1957849","","2015-08-29 12:04:22","2015-08-29 12:04:22","react testing: shallow rendering - getRenderOutput returning null","<reactjs><reactjs-testutils>","1","0","","",""
"49224725","1","","","2018-03-11 20:26:43","","0","66","<p><strong>Hi Friends</strong> </p>

<p>I'm currently working on a landing page. The functionality is taken care of in reactJS (which I am relatively unfamilar with). I am having trouble adding an onClick to the button in order to take me to the next page of my project. </p>

<p><strong>Here is my JS</strong></p>

<pre><code>var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (""value"" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(""Cannot call a class as a function""); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(""this hasn't been initialised - super() hasn't been called""); } return call &amp;&amp; (typeof call === ""object"" || typeof call === ""function"") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== ""function"" &amp;&amp; superClass !== null) { throw new TypeError(""Super expression must either be null or a function, not "" + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FancyButton = function (_React$Component) {
    _inherits(FancyButton, _React$Component);

    function FancyButton() {
        _classCallCheck(this, FancyButton);

        return _possibleConstructorReturn(this, (FancyButton.__proto__ || Object.getPrototypeOf(FancyButton)).apply(this, arguments));
    }

    _createClass(FancyButton, [{
        key: 'render',
        value: function render() {
            // Mask id and styling
            // need unique id's for multiple buttons
            var maskId = 'mask_1';
            var maskStyle = '#fancy-masked-element_' + maskId + ' { mask: url(#' + maskId + '); -webkit-mask: url(#' + maskId + ')}';

            var buttonStyle = {
                width: this.props.width,
                height: this.props.height
            };

            var fancyFrontStyle = {
                transform: 'rotateX(0deg) translateZ(' + this.props.height / 2 + 'px )'
            };

            var fancyBackStyle = {
                transform: 'rotateX(90deg) translateZ( ' + this.props.height / 2 + 'px )'
            };



            // SVG attributes
            var textTransform = 'matrix(1 0 0 1 ' + this.props.width / 2 + ' ' + this.props.height / 1.6 + ')';
            var viewBox = '0 0 ' + this.props.width + ' ' + this.props.height;

            return React.createElement(
                'div',
                { className: 'fancy-button',
                    style: buttonStyle,
                    ref: 'fancyButton' },
                React.createElement(
                    'div',
                    { className: 'fancy-flipper' },
                    React.createElement(
                        'div',
                        { className: 'fancy-front', style: fancyFrontStyle },
                        React.createElement(
                            'svg',
                            {
                                height: this.props.height,
                                width: this.props.width,
                                viewBox: viewBox },
                            React.createElement(
                                'defs',
                                null,
                                React.createElement(
                                    'mask',
                                    { id: maskId },
                                    React.createElement('rect', { width: '100%', height: '100%', fill: '#FFFFFF' }),
                                    React.createElement(
                                        'text',
                                        { className: 'mask-text button-text', fill: '#000000', transform: textTransform, fontFamily: '\'intro_regular\'', fontSize: this.props.fontSize, width: '100%', textAnchor: 'middle', letterSpacing: '1' },
                                        this.props.buttonText
                                    )
                                )
                            ),
                            React.createElement(
                                'style',
                                null,
                                maskStyle
                            ),
                            React.createElement('rect', { id: 'fancy-masked-element_' + maskId, fill: this.props.color, width: '100%', height: '100%' })
                        )
                    ),
                    React.createElement(
                        'div',
                        { className: 'fancy-back', style: fancyBackStyle },
                        React.createElement(
                            'svg',
                            {
                                height: this.props.height,
                                width: this.props.width,
                                viewBox: viewBox },
                            React.createElement('rect', { stroke: this.props.color,
                                strokeWidth: this.props.borderWidth,
                                fill: 'transparent',
                                width: '100%',
                                height: '100%' }),
                            React.createElement(
                                'text',
                                { className: 'button-text', transform: textTransform, fill: this.props.color, fontFamily: '\'intro_regular\'', fontSize: this.props.fontSize, textAnchor: 'middle', letterSpacing: '1' },
                                this.props.buttonText,

                            )
                        )
                    )
                )
            );
        }
    }]);

    return FancyButton;
}(React.Component);

FancyButton.defaultProps = {
    color: '#FFFFFF',
    width: 410,
    height: 100,
    fontSize: 42,
    borderWidth: 15,
    buttonText: 'MYSTUDY'

};

React.render(React.createElement(FancyButton, null), document.getElementById('app'));
</code></pre>

<p>Thus far I have tried to add an A tag in my html and reference it further in my JS</p>

<pre><code>function App() {
    {
      window.location.href = ""homepageDEMO.php"";
    }
}
</code></pre>

<p>This also didn't work, Probably because it is ordinary Js and I realized the function I created was not referencing the button I need. </p>

<p>I then tried to add an onClick to the function FancyButton and I also tried by adding a reference to the page I want to go to. Neither worked </p>

<pre><code>    function FancyButton() {
    _classCallCheck(this, FancyButton);
        {
      window.location.href = ""index2.html"";
    }
    return _possibleConstructorReturn(this, (FancyButton.__proto__ || Object.getPrototypeOf(FancyButton)).apply(this, arguments));
}
</code></pre>

<p>This last code made the page which held my landing page go to the page I wanted to go to with the button on my landing page.</p>

<pre><code>function FancyButton() {
        _classCallCheck(this, FancyButton);

        return _possibleConstructorReturn(""webApp.php"", (FancyButton.__proto__ || Object.getPrototypeOf(FancyButton)).apply(this, arguments));
    }
</code></pre>

<p>Anyone have the answer to my problems?</p>

<hr>

<hr>

<h2>EDIT</h2>

<p>With help from the comments I have found the solution. I added the onclick syntax into the fancy-button class and it worked like a charm. Thank you all</p>

<pre><code>return React.createElement(
                'div',
                { className: 'fancy-button',
                    style: buttonStyle,
                    onClick: () =&gt; window.location.href = ""index2.html"",
                    ref: 'fancyButton' },
</code></pre>
","9445468","","9445468","","2018-03-11 20:54:41","2018-03-11 21:10:40","Adding an onClick button into reactJS","<javascript><html><reactjs><onclick>","1","6","","",""
"49787389","1","","","2018-04-12 03:13:26","","1","19","<pre><code>// @flow
import React from 'react';
import PropTypes from 'prop-types';
import { ImageButton } from '../Button';

type AddEmojiButtonPropTypes = {
  small?: boolean,
  children?: any, // eslint-disable-line react/require-default-props
};

const AddEmojiButton = ({
  small,
  children,
  ...other
}: AddEmojiButtonPropTypes) =&gt; (
  &lt;ImageButton
    type=""button""
    {...other}
  &gt;
    {small ? (
      &lt;img
        alt=""Add Emoji""
        src=""https://res.cloudinary.com/df9jsefb9/image/upload/c_scale,h_54,q_auto/v1503278075/assets/btn-add-emoji_3x.png""
        srcSet=""
          https://res.cloudinary.com/df9jsefb9/image/upload/c_scale,h_108,q_auto/v1503278075/assets/btn-add-emoji_3x.png 2x,
          https://res.cloudinary.com/df9jsefb9/image/upload/c_scale,h_162,q_auto/v1503278075/assets/btn-add-emoji_3x.png 3x
        ""
      /&gt;
    ) : (
      &lt;img
        alt=""Add Emoji""
        src=""https://res.cloudinary.com/df9jsefb9/image/upload/s--nnCHGEWM--/c_scale,h_110,q_auto/v1502250483/assets/group-2-copy-3_3x.png""
        srcSet=""
          https://res.cloudinary.com/df9jsefb9/image/upload/s--nnCHGEWM--/c_scale,h_220,q_auto/v1502250483/assets/group-2-copy-3_3x.png 2x,
          https://res.cloudinary.com/df9jsefb9/image/upload/s--nnCHGEWM--/c_scale,h_330,q_auto/v1502250483/assets/group-2-copy-3_3x.png 3x,
        ""
      /&gt;
    )}
  &lt;/ImageButton&gt;
);


AddEmojiButton.defaultProps = {
  small: false,
};

AddEmojiButton.propTypes = {
  small: PropTypes.bool,
};

export default AddEmojiButton;
</code></pre>

<p>The const declaration does not understand well among the JavaScript source that I attached above.</p>

<pre><code>const AddEmojiButton = ({
  small,
  children,
 ...other
}: AddEmojiButtonPropTypes) =&gt; (
  &lt;ImageButton
</code></pre>

<p>In the above code, can you tell us what the {} in the const declaration means and what the: operator means?</p>

<p>Normally when declaring an object with const or var</p>

<pre><code>const foo = {
  name: 'foo'
  age: 30,
  gender: 'male'
  func1 : (e) =&gt; {}
}
</code></pre>

<p>I know there is a declaration like this, but I wonder why there is only a property name of props and no value. </p>

<p>In addition</p>

<pre><code>({small,childeren,...other} : AddEmojiButtonPropTypes) =&gt; ImageButton 
</code></pre>

<p>What does this form mean?</p>

<p>I wonder if the original JavaScript syntax is the correct expression.</p>
","9618129","","","","","2018-04-12 04:08:02","about react javascript grammar const syntex . help T.T","<javascript><reactjs><react-proptypes>","1","0","","",""
"40781551","1","","","2016-11-24 08:44:00","","3","505","<p>My TypeScript version is <code>2.0.10</code>.</p>

<p>The component</p>

<pre><code>import * as React from ""react"";

export interface HelloProps { list?: number[]; }

export class Hello extends React.Component&lt;HelloProps, {}&gt; {
    static defaultProps = {
        list: [1, 2, 3]
    }
    static propTypes = {
        list: React.PropTypes.array,
        title: React.PropTypes.string
    };

    render() {
        let {list} = this.props
        return (
            &lt;ul&gt;
                {
                    // error here: Object is possibly 'undefined'.
                    list.map(item =&gt; (
                        &lt;li&gt;{item}&lt;/li&gt;
                    ))
                }
            &lt;/ul&gt;
        )
    }
}
</code></pre>

<p>The TypeScript compiler config file</p>

<pre><code>{
    ""compilerOptions"": {
        ""outDir"": ""./dist/"",
        ""sourceMap"": true,
        ""noImplicitAny"": true,
        ""module"": ""commonjs"",
        ""target"": ""es5"",
        ""jsx"": ""react"",
        ""strictNullChecks"": true
    },
    ""include"": [
        ""src/**/*""
    ]
}
</code></pre>

<p>Note that I set <code>strictNullChecks</code> to <code>true</code> here. And the compile output:</p>

<pre><code>ERROR in ./src/Hello.tsx
(19,21): error TS2532: Object is possibly 'undefined'.
</code></pre>

<p>But I have set the default value for list. Is it a TypeScript bug? </p>
","2422037","","","","","2018-04-05 12:46:16","TypeScript + React: defaultProps not works for optional props in strict null checking mode","<typescript><typescript2.0>","2","0","1","",""
"48825746","1","","","2018-02-16 11:25:03","","0","51","<p>I have created react app using the npm module 'create-react-app'</p>

<p>I wanted to use external API for say <code>api.example.com</code> but was unable to call the <strong>external API because axios is requesting localhost rather</strong> than external API.</p>

<p>I tried the following Code:</p>

<pre><code>class Example extends Component{
   static defaultProps={
      'url':""api.example.com""
   }
  handleChange(event){
      axios.get(this.props.url+event.target.value)
      .then(result=&gt; console.log(result.data)
     }
   }
 }
</code></pre>

<p>How to allow react app to access external API?</p>
","6470760","","4778809","","2018-02-16 15:23:47","2018-02-16 15:23:47","how to us external api in react","<javascript><reactjs><axios>","1","4","","",""
"41487860","1","","","2017-01-05 14:45:21","","1","1559","<p>This is a bit of a followup to <a href=""https://stackoverflow.com/questions/37798741/nested-components-testing-with-enzyme-inside-of-react-redux"">Nested components testing with Enzyme inside of React &amp; Redux</a> ...</p>

<p>I have a component that I need to test props and methods on. However, that component needs to be rendered in a provider in order to work: </p>

<pre><code>const renderComponent = (props) =&gt; {
    &lt;Provider store={ createStore(reducer, initialState) }&gt;
       &lt;ChildComponent { ...props }/&gt;
    &lt;/Provider&gt;
};
</code></pre>

<p>My question is, how do I test methods on this component now? This does not work:</p>

<pre><code>it('can call its own methods', ()=&gt; {
    const wrapper = mount(renderComponent(defaultProps)).find('ChildComponent');
    wrapper.instance().call('someMethod'); // returns Error: ReactWrapper::instance() can only be called on the root
});
</code></pre>
","3753046","","-1","","2017-05-23 12:13:57","2017-01-06 12:41:38","Testing nested react components with enzyme","<reactjs><redux><enzyme>","1","0","","",""
"33462535","1","","","2015-11-01 13:16:11","","1","163","<p>EDIT: My mistake, my webpack hotloader was caching the old js for some reason every time I ran a build.  Reset and rebuilt and it seems to be working now.</p>

<p>I'm trying to create a simple searchbox using es6 style class declaration in a yahoo fluxible react app.  I'm working off the todo example, converting it to es6 style syntax and I'm getting an error on <code>this.setState</code> in the <code>_onChange</code> method.  I've bound the functions to ""this"" in the constructor but I'm still getting the error.</p>

<pre><code>import React from 'react';
import searchProducts from '../actions/searchProducts';

const ENTER_KEY_CODE = 13;

class SearchBox extends React.Component {

    static contextTypes = {
        executeAction: React.PropTypes.func.isRequired
    };

    static propTypes = {
        text: React.PropTypes.string
    };

    static defaultProps = {
        text:''
    };

    constructor(props) {
        super(props);
        this.state = {
            text: props.text
        };
        this._onChange = this._onChange.bind(this);
        this._onKeyDown = this._onKeyDown.bind(this);
    }

    render() {
        return (
            &lt;input
                className=""search-box""
                name=""search-keyword""
                value={this.state.text}
                onChange={this._onChange}
                onKeyDown={this._onKeyDown}
            /&gt;
        );
    }

    _onChange(event, value) {
        console.log( event.target.value);

        //error is here///////////////////////////////////////////////////
        this.setState({text: event.target.value}); 
    }

    _onKeyDown(event) {
        if (event.keyCode === ENTER_KEY_CODE) {
            event.preventDefault();
            event.stopPropagation();

            var text = this.state.text.trim();
            if (text) {
                this.context.executeAction(searchProducts, {
                    text: text
                });
            }
            this.setState({text: ''});
        }
    }

}


export default SearchBox;
</code></pre>
","611750","","611750","","2015-11-01 15:08:18","2015-12-05 19:36:29","""setState on undefined"" this error trying to use es6 style react component in yahoo fluxible","<reactjs><fluxible>","2","5","","",""
"48841490","1","","","2018-02-17 12:53:08","","0","38","<p>I have a login form which has two input and a submit button.
Input is a component has some function and one of this set the states.</p>

<p>How can I post this child component data to api ?</p>

<blockquote>
  <p>This is login form jsx : </p>
</blockquote>

<pre><code>import React from ""react"";
import FontAwesomeIcon from ""@fortawesome/react-fontawesome"";
import { Link } from ""react-router-dom"";
import axios from ""axios"";
import { Alert } from ""reactstrap"";
import PropTypes from ""prop-types"";
import { connect } from ""react-redux"";
import { login } from ""../../actions/authActions"";
import { LoadingButton, ConfirmAble, Input } from ""../../elements"";

class Login extends React.Component {
    constructor(props) {
        super(props);

        this.handleSubmit = this.handleSubmit.bind(this);
        this.errorMessageOnDismiss = this.errorMessageOnDismiss.bind(this);

        this.state = {
            email: """",
            password: """",
            formErrors: {
                email: """",
                password: """"
            },
            formSubmit: false,
            errorMessage: """",
            errorMessageVisible: false
        };
    }

    errorMessageOnDismiss() {
        this.setState(prevState =&gt; ({
            errorMessageVisible: false
        }));
    }

    handleSubmit(e) {
        e.preventDefault();

        this.setState(prevState =&gt; ({
            formSubmit: true,
            errorMessageVisible: false
        }));

        const user = {
            email: this.state.email,
            password: this.state.password
        };

        this.props
            .login(user)
            .then(
                res =&gt; this.context.router.history.push(""/home""),
                err =&gt; {
                    var settedFormErrors = {};
                    for (var key in err.response.data) {
                        settedFormErrors[key] = err.response.data[key][0];
                    }

                    this.setState(prevState =&gt; ({
                        formErrors: {
                            ...prevState.formErrors,
                            ...settedFormErrors
                        }
                    }));
                }
            )
            .then(() =&gt; {
                console.log(""asdasasd"");
                this.setState(prevState =&gt; ({
                    formSubmit: false
                }));
            });
    }

    render() {
        return (
            &lt;div className=""row""&gt;
                &lt;div className=""col-md-8 offset-md-2 col-lg-6 offset-lg-3""&gt;
                    &lt;div className=""card auth-card""&gt;
                        &lt;div className=""card-body shadow-3""&gt;
                            &lt;div className=""card-title text-center mb-3""&gt;
                                Giriş Yap
                            &lt;/div&gt;
                            &lt;hr /&gt;
                            {this.state.errorMessage.length &gt; 0 ? (
                                &lt;Alert
                                    color=""danger""
                                    isOpen={this.state.errorMessageVisible}
                                    toggle={this.errorMessageOnDismiss}
                                &gt;
                                    {this.state.errorMessage}
                                &lt;/Alert&gt;
                            ) : (
                                """"
                            )}
                            &lt;form
                                onSubmit={this.handleSubmit}
                                className=""table-responsive""
                                autoComplete=""off""
                            &gt;
                                &lt;table className=""table table-borderless mb-0""&gt;
                                    &lt;tbody&gt;
                                        &lt;tr&gt;
                                            &lt;td&gt;E-mail&lt;/td&gt;
                                            &lt;td&gt;
                                                &lt;ConfirmAble
                                                    name=""email""
                                                    value={this.props.email}
                                                    message={
                                                        this.state.formErrors
                                                            .email
                                                    }
                                                /&gt;
                                            &lt;/td&gt;
                                        &lt;/tr&gt;
                                        &lt;tr&gt;
                                            &lt;td&gt;Şifre&lt;/td&gt;
                                            &lt;td&gt;
                                                &lt;ConfirmAble
                                                    type=""password""
                                                    name=""password""
                                                    value={this.props.password}
                                                    message={
                                                        this.state.formErrors
                                                            .password
                                                    }
                                                /&gt;
                                            &lt;/td&gt;
                                        &lt;/tr&gt;
                                    &lt;/tbody&gt;
                                    &lt;tfoot&gt;
                                        &lt;tr&gt;
                                            &lt;td colSpan=""2""&gt;
                                                &lt;LoadingButton
                                                    text=""Giriş Yap""
                                                    block
                                                    submit
                                                    isLoading={
                                                        this.state.formSubmit
                                                    }
                                                /&gt;
                                            &lt;/td&gt;
                                        &lt;/tr&gt;
                                        &lt;tr&gt;
                                            &lt;td colSpan=""2""&gt;
                                                &lt;Link
                                                    to=""/forget_password""
                                                    className=""btn btn-link""
                                                &gt;
                                                    Şifremi Unuttum
                                                &lt;/Link&gt;
                                                &lt;Link
                                                    to=""/register""
                                                    className=""btn btn-link float-right""
                                                &gt;
                                                    Kayıt Ol
                                                &lt;/Link&gt;
                                            &lt;/td&gt;
                                        &lt;/tr&gt;
                                    &lt;/tfoot&gt;
                                &lt;/table&gt;
                            &lt;/form&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }
}

Login.propTypes = {
    login: PropTypes.func.isRequired
};

Login.contextTypes = {
    router: PropTypes.object.isRequired
};

export default connect(null, { login })(Login);
</code></pre>

<blockquote>
  <p>this is ConfirAnble jsx</p>
</blockquote>

<pre><code>import React from ""react"";
import PropTypes from ""prop-types"";
import { connect } from ""react-redux"";

import Input from ""./input"";
import FeedBack from ""../static/feedback"";

class ConfirmAble extends React.Component {
    constructor(props) {
        super(props);
    }

    render() {
        const { message } = this.props;

        return (
            &lt;div&gt;
                &lt;Input {...this.props} /&gt;
                &lt;FeedBack text={message} /&gt;
            &lt;/div&gt;
        );
    }
}

ConfirmAble.propTypes = {
    message: PropTypes.string.isRequired
};

export default connect(null)(ConfirmAble);
</code></pre>

<blockquote>
  <p>this is Input jsx</p>
</blockquote>

<pre><code>import React from ""react"";
import PropTypes from ""prop-types"";

class Input extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            [props.name]: props.value
        };

        this.handleUserInput = this.handleUserInput.bind(this);
    }

    handleUserInput(e) {
        var _name = e.target.name,
            _value = e.target.value;
        this.setState(() =&gt; ({
            [_name]: _value
        }));
    }

    render() {
        const {
            type,
            value,
            placeholder,
            className,
            name,
            id,
            form_control,
            disabled,
            readOnly,
            minLength,
            maxLength,
            ref,
            autoFocus,
            message
        } = this.props;

        let CLASS =
            (form_control ? ""form-control"" : """") + "" "" + (className || """");

        if (message) {
            CLASS += (className ? "" "" : """") + ""is-invalid "";
        }

        return (
            &lt;input
                type={type}
                name={name}
                value={this.state[name]}
                placeholder={placeholder}
                className={CLASS}
                id={id}
                disabled={disabled}
                readOnly={readOnly}
                minLength={minLength}
                maxLength={maxLength}
                ref={ref}
                autoFocus={autoFocus}
                onChange={this.handleUserInput}
            /&gt;
        );
    }
}

Input.defaultProps = {
    type: ""text"",
    form_control: true,
    value: """"
};

Input.propTypes = {
    type: PropTypes.string,
    value: PropTypes.string,
    placeholder: PropTypes.string,
    className: PropTypes.string,
    name: PropTypes.string.isRequired,
    id: PropTypes.string,
    form_control: PropTypes.bool,
    disabled: PropTypes.bool,
    readOnly: PropTypes.bool,
    minLength: PropTypes.number,
    maxLength: PropTypes.number,
    ref: PropTypes.string,
    autoFocus: PropTypes.bool
};

export default Input;
</code></pre>

<p>as you can see the Input component has handleUserInput to set states and it works but when the form was submitted, email and password states goes empty. how can I get this state to be fill out.</p>

<p>will I use the redux connect function for this ?</p>

<p><a href=""https://i.stack.imgur.com/lB7IJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/lB7IJ.png"" alt=""form""></a>
<a href=""https://i.stack.imgur.com/K7PL4.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/K7PL4.png"" alt=""request""></a></p>
","6665018","","","","","2018-02-17 12:53:08","react update child state and post it","<javascript><reactjs><components>","0","0","","",""
"49454271","1","","","2018-03-23 16:25:59","","2","36","<p>I'm using react-rails (with sprockets rather than webpack, if it turns out to be relevant), trying to make a reusable component for a sprawling rails application. It's basically a navbar, and we have a list of links we usually want to display, but we also need to be able to override that list on some pages.</p>

<p>So far so good. However! </p>

<p>We have the array of links saved as a constant in our rails app, and ideally, the default links would be the defaultProps for the react component. We don't want to duplicate that information in the react component, because the whole point of making this component is that we're trying to move toward consistency, and if we need to make updates hopefully we'll only make them in one place.</p>

<p>So this is an option:</p>

<p><code>&lt;%= react_component ""Navbar"", links: navbar_default_links, other_settings: true, etc: false %&gt;
</code></p>

<p>But having to do that on every page seems inelegant when really we just want to call out when the links are <em>different</em> than the usual ones. </p>

<p>Does anyone know a way to pull information from Rails into the definition of the react component using react-rails? Or another solution?</p>

<p>(Edit: to be clear, this doesn't need to be information from the rails database)</p>
","3034468","","","","","2018-03-23 16:25:59","Using Rails data as the defaultProps in react component","<ruby-on-rails><ruby><reactjs><react-rails>","0","3","","",""
"49478274","1","49480341","","2018-03-25 16:44:55","","1","88","<p>There is a nice simple react ES6 example on codepen.</p>

<p><a href=""https://codepen.io/anon/pen/ZxXQxp/"" rel=""nofollow noreferrer"">https://codepen.io/anon/pen/ZxXQxp/</a></p>

<p>I would like to use this as a base for some investigations I want to make in react type checking, namely the 'defaultProps' feature.</p>

<p>'DefaultProperies' is a very simple type checking feature but unfortunately it lives in another library now. At the top of my component I have to import it like this :</p>

<pre><code>import PropTypes from 'prop-types';
</code></pre>

<p>What steps would I need to make in codepen to import an external react library? It seems like there is no possible way to import the most basic of react libraries.</p>
","1022330","","","","","2018-03-25 20:07:36","Importing react libraries into Codepen (namely prop-types)","<reactjs><codepen>","1","0","0","",""
"49779986","1","","","2018-04-11 16:15:58","","0","64","<p>I briefly tried to find this in the react-test-renderer source code, but wasn't able to locate it.</p>

<p>Recall that in React, component element attributes whose values are <code>undefined</code> are not rendered in the DOM.  I.e., given <code>bat = undefined</code> and <code>&lt;Foo bar={bat} /&gt;</code>, the <code>bar</code> attribute will not appear in the generated HTML.</p>

<p>I'm assuming it's expected behavior, but I'm confused why, when an optional component attribute appears in the JSON tree in a Jest snapshot - unless the snapshot is simply confirming that the property is unspecified (<code>ws-automation-id</code> is an optional component property that does not have a <code>defaultProps</code> entry defined):</p>

<pre><code>exports[`the &lt;TextButton/&gt; component should use the specified class names 1`] = `
&lt;button
  className=""gc-icon test-class1 test-class2""
  onClick={[Function]}
  ws-automation-id={undefined}
&gt;
  Button Text
&lt;/button&gt;
`;
</code></pre>

<p>Given</p>

<pre><code>test('should use the specified class names', () =&gt; {
  const tree = create(&lt;TextButton buttonText=""Button Text"" onClick={null} classNames={['test-class1', 'test-class2']} /&gt;).toJSON()
  expect(tree).toMatchSnapshot()
})
</code></pre>
","542395","","","","","2018-04-11 16:15:58","Jest test using react-test-renderer is inserting undefined attribute value into the DOM","<jestjs><react-test-renderer>","0","0","","",""
"33512017","1","33517831","","2015-11-04 01:06:54","","0","330","<p>So I'm not sure I quite understand what connectToStores is doing in my search results component.  I'm expecting the component's state to be updated when my store emits changes, however it only seems to be updating the properties of the component and updates the state of a wrapping <code>SearchResultsConnector</code> object.</p>

<p>My questions are:</p>

<ol>
<li><p>Am I not supposed to be using state in this case, if so, why does the connectToStores have a callback that returns the state?</p></li>
<li><p>When does state get updated from an emitChanges trigger in the store?  Do I have to duplicate what I did in the constructor?</p></li>
<li><p>When should I use state vs props, and should store update state at all?  is there a specific flux rule that props mutate state in a one way fashion?</p></li>
<li><p>Why does state update to the results when I hot-load changes in the dev-server.  I don't understand if that's correct behavior.</p></li>
<li><p>Should I be catching an update event somewhere here and updating the state with the incoming changed properties somehow?</p></li>
</ol>

<p>SearchResults.js</p>

<pre><code>import React from 'react';
import SearchStore from '../stores/SearchStore';
import Product from './Product';
import connectToStores from 'fluxible-addons-react/connectToStores'


class SearchResults extends React.Component {

    static contextTypes = {
        executeAction: React.PropTypes.func.isRequired,
        getStore: React.PropTypes.func.isRequired
    };
    static propTypes = {
        results: React.PropTypes.array
    };
    static defaultProps = {
        results:[]
    };
    constructor(props) {
        super(props);
        this.state = {results: props.results};
    }
    render() {

        let main;

        // I first used this.state.results, but this.state is null unless I hot load from the dev server on changes
        if (this.props &amp;&amp; this.props.results &amp;&amp; this.props.results.length) {

            let products = this.props.results.map(function (product) {
                return (
                    &lt;Product
                        key={product.id}
                        imageUrl={product.image_url_large}
                        description={product.description}
                        name={product.name}
                        maxPrice={product.price_max}
                        minPrice={product.price_min}
                    /&gt;
                );
            }, this);

            main = (
                &lt;section id=""results""&gt;
                    &lt;ul id=""todo-list""&gt;
                        {products}
                    &lt;/ul&gt;
                &lt;/section&gt;
            );
        }

        return (
            &lt;div&gt;
                &lt;header id=""header""&gt;
                    &lt;h1&gt;Search Results&lt;/h1&gt;
                &lt;/header&gt;
                {main}
            &lt;/div&gt;
        );
    }

}

SearchResults = connectToStores(SearchResults, [SearchStore], (context, props) =&gt; ({
    results: context.getStore('SearchStore').getResults()
}))


export default SearchResults;
</code></pre>
","611750","","611750","","2015-11-04 01:12:26","2015-11-04 20:06:02","How to update state vs props in a fluxible react.js component using connectToStores","<reactjs><fluxible>","1","0","","",""
"33510553","1","33510703","","2015-11-03 22:47:54","","1","170","<p>I'm getting this error trying to create my fluxible component with an es6 class declaration:</p>

<pre><code>Warning: getInitialState was defined on SearchResults,
a plain JavaScript class. This is only supported for 
classes created using React.createClass. Did you mean 
to define a state property instead?
</code></pre>

<p>I'm going off of this example on the fluxible docs:</p>

<p><a href=""http://fluxible.io/api/components.html"" rel=""nofollow"">http://fluxible.io/api/components.html</a></p>

<p>Am I declaring my fluxible component correctly?  It errors with no initial state so it looks like it's not being called.</p>

<pre><code>import React from 'react';
import SearchStore from '../stores/SearchStore';
import Product from './Product';

    class SearchResults extends React.Component {

        static contextTypes = {
            executeAction: React.PropTypes.func.isRequired,
            getStore: React.PropTypes.func.isRequired
        };

        static propTypes = {
            results: React.PropTypes.array
        };

        static defaultProps = {
            results:[]
        };
        getInitialState () {
            return this.getStoreState();
        }
        getStoreState () {
            return {
                results: this.context.getStore(SearchStore).getResults()
            }
        }
        componentDidMount () {
            this.context.getStore(SearchStore).addChangeListener(this._onStoreChange);
        }
        componentWillUnmount () {
            this.context.getStore(SearchStore).removeChangeListener(this._onStoreChange);
        }
        _onStoreChange () {
            this.setState(this.getStoreState());
        }


        render() {

            var main;

            if (this.state &amp;&amp; this.state.results &amp;&amp; this.state.results.length) {
                let products = this.state.results.map(function (product) {
                    return (
                        &lt;Product
                            key={product.id}
                            imageUrl={product.image_url_large}
                            description={product.description}
                            name={product.name}
                            maxPrice={product.price_max}
                            minPrice={product.price_min}
                        /&gt;
                    );
                }, this);

                main = (
                    &lt;section id=""results""&gt;
                        &lt;ul id=""todo-list""&gt;
                            {products}
                        &lt;/ul&gt;
                    &lt;/section&gt;
                );
            }

            return (
                &lt;div&gt;
                    &lt;header id=""header""&gt;
                        &lt;h1&gt;Search Results&lt;/h1&gt;
                    &lt;/header&gt;
                    {main}
                &lt;/div&gt;
            );
        }

    }


    export default SearchResults;
</code></pre>
","611750","","","","","2015-12-01 11:59:35","Error trying to declare my fluxible react.js component in an es6 class","<reactjs><fluxible>","2","0","","",""
"42168069","1","","","2017-02-10 20:23:54","","4","281","<p>I've tried making a radar chart using react-chartjs (<a href=""https://github.com/reactjs/react-chartjs"" rel=""nofollow noreferrer"">https://github.com/reactjs/react-chartjs</a>). It renders, but there are no colors. </p>

<p><a href=""https://i.stack.imgur.com/tjAsW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tjAsW.png"" alt=""enter image description here""></a></p>

<p>What am I missing? I pretty much copied a large chunk of the example at <a href=""https://reactcommunity.org/react-chartjs/index.html"" rel=""nofollow noreferrer"">https://reactcommunity.org/react-chartjs/index.html</a>. (I simplified the data to one dataset.)</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, {PropTypes} from 'react';
import {Grid} from 'react-bootstrap';
const {Radar} = require(""react-chartjs"");
const ReactDOM = require('react-dom');

function rand(min, max, num) {
	var rtn = [];
	while (rtn.length &lt; num) {
		rtn.push((Math.random() * (max - min)) + min);
	}
	return rtn;
}

var chartData = {
	labels: [""Eating"", ""Drinking"", ""Sleeping"", ""Designing"", ""Coding"", ""Cycling"", ""Running""],
	datasets: [
	{
		label: ""My First dataset"",
		backgroundColor: ""rgba(179,181,198,0.2)"",
		borderColor: ""red"",
		pointBackgroundColor: ""rgba(179,181,198,1)"",
		pointBorderColor: ""#fff"",
		pointHoverBackgroundColor: ""#fff"",
		pointHoverBorderColor: ""rgba(179,181,198,1)"",
		data: [65, 59, 90, 81, 56, 55, 40]
	}
	]
};

var chartOptions = {
	scale: {
		reverse: true,
		ticks: {
			beginAtZero: true
		}
	}
};

function TasteGraph({rating}) {
	//loop through and output one slider and one value per component
	return (
		&lt;div&gt;
		&lt;Radar data={chartData} options={chartOptions}/&gt;
		&lt;/div&gt;
		);

}
TasteGraph.propTypes = {
	rating: PropTypes.array
};

TasteGraph.defaultProps = {
	rating: []
};

export default TasteGraph;</code></pre>
</div>
</div>
</p>

<p>There doesn't seem to be any imports missing or clear error. I tried surrounding the chartOptions and ChartData with ""["" and ""]"" based on another related SO question.</p>
","1227001","","1227001","","2017-02-13 16:48:26","2017-02-14 07:15:54","react-chartjs chart renders without colors","<javascript><reactjs><react-redux><react-chartjs>","1","0","","",""
"49120598","1","","","2018-03-05 22:32:33","","0","24","<p>I have found this piece of code for a component that displays dots on loading.</p>

<pre><code>class LoadingDots extends React.Component {
    constructor(props, context) {
        super(props, context);

        this.state = {frame: 1};
    }

    componentDidMount() {
        this.interval = setInterval(() =&gt; {
            this.setState({ // eslint-disable-line react/no-did-mount-set-state
                frame: this.state.frame + 1
            });
        }, this.props.interval);
    }

    componentWillUnmount() {
       clearInterval(this.interval);
    }

    render() {
        let dots = this.state.frame % (this.props.dots + 1);
        let text = '';
        while (dots &gt; 0) {
            text += '.';
            dots--;
        }
        return &lt;span {...this.props}&gt;{text}&amp;nbsp;&lt;/span&gt;;
    }
}

LoadingDots.defaultProps = {
    interval: 300, dots: 3
};

LoadingDots.propTypes = {
    interval: PropTypes.number,
    dots: PropTypes.number
}
</code></pre>

<p>What I wonder is how is this being calculated so that it gives the result on the console like this one, when we pass the value of 20 for the dots property and 100 for the interval property?</p>

<pre><code>let dots = this.state.frame % (this.props.dots + 1);
console.log(dots) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
</code></pre>

<p>What confuses me, is this part, since from what I thought if we pass <code>20</code>, and we have set the state to <code>frame: 1</code> then we would set the dots variable to <code>1</code>, since <code>1 % 21</code> is <code>1</code>, the first time on render function, and then in the while loop would just decrease it to <code>0</code> and it would stop there. So, I assume that react rerenders the template on each state change, so the frame increases on each interval, but how we go then from <code>0</code> to <code>20</code>, if the first time the frame is set to <code>1</code>, and then we decrease the <code>dots</code> in the <code>while</code> loop. Not sure about what is the point of decreasing the <code>dots</code> either in the <code>while</code> loop if we are already changing the variable on each interval?</p>
","7071069","","","","","2018-03-05 22:32:33","Javascript/react loading function explanation","<javascript><reactjs>","0","2","","",""
"50755925","1","","","2018-06-08 07:52:56","","1","75","<p>I'm new to react and I'm tying to code as short as possible. We're writing react components with many props. The problem is my colleagues keep filling the code which seems very unnecessary to me. So is it correct to set null to all available values or only use propTypes to define property types? Because I don't see such usage examples and I think it is bad practice.</p>

<pre><code>FormAutonumeric.defaultProps = {
    validationRules: null,
    onBlur: null,
    onFocus: null,
    inputClasses: null,
    showErrors: false,
    numericType: null,
    isFormValid: null,
    placeholder: null,
    onChange: null,
    disabled: null,
    children: null,
    vMin: null,
    vMax: null,
    prefix: null,
    suffix: null
};


FormAutonumeric.propTypes = {
    validationRules: PropTypes.shape({
        [PropTypes.string]: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.number,
            PropTypes.bool
        ])
    }),
    onBlur: PropTypes.func,
    onFocus: PropTypes.func,
    inputClasses: PropTypes.string,
    showErrors: PropTypes.bool,
    numericType: PropTypes.string,
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    isFormValid: PropTypes.func,
    id: PropTypes.string.isRequired,
    placeholder: PropTypes.string,
    onKeyUp: PropTypes.func.isRequired,
    onChange: PropTypes.func,
    disabled: PropTypes.bool,
    children: PropTypes.element,
    vMin: PropTypes.string,
    vMax: PropTypes.string,
    prefix: PropTypes.string,
    suffix: PropTypes.string
};
</code></pre>
","259881","","259881","","2018-06-08 08:11:35","2018-06-11 07:29:08","Should I set default react properties to null","<reactjs>","1","4","","",""
"50537227","1","","","2018-05-25 21:45:05","","0","21","<p>I'm using react for getting current location and destination. Then I want to calculate the length of the road from my location to destination. </p>

<p>Firstly, google map takes my current location and I have create one input field to set destination address, but this field haven't any operation. How can I display the route from the current location to the destination?</p>

<p>My code for map looks like:</p>

<pre><code>import React, { Component } from ""react"";
import GoogleMapReact from ""google-map-react"";
import { withGoogleMap, GoogleMap, Marker } from ""google-map-react"";
import { InfoWindow } from ""google-map-react"";
import Geolocation from ""react-geolocation"";



const AnyReactComponent = ({ text }) =&gt; &lt;div&gt;{text}&lt;/div&gt;;

export default class Map extends Component {
  static defaultProps = {
    center: { lat: 40.744679, lng: -73.948542 },
    zoom: 11
  };

  constructor(props) {
    super(props);
    this.state = props;    
  }

  geoSuccess = position =&gt; {
    console.log(""position.coords.latitude: "", position.coords.latitude);
    console.log(""position.coords.longitude: "", position.coords.longitude);

    let coords = {
      lat: position.coords.latitude,
      lng: position.coords.longitude
    }

    this.setState({
      center: coords
    })

  };


  render() {
    console.log(this.state.center);
    console.log(this.state.zoom);

    return (
      &lt;Geolocation
        onSuccess={this.geoSuccess}
        render={({
          fetchingPosition,
          position: { coords: { latitude, longitude } = {} } = {},
          error,
          getCurrentPosition
        }) =&gt; (

          &lt;div&gt;

        &lt;input id=""destination-input""  className=""controls"" type=""text""
        placeholder=""Enter a destination location"" /&gt;

            &lt;div
              className=""google-map""
              style={{ height: ""80vh"", width: ""100%"" }}
            &gt;
              &lt;GoogleMapReact
                  bootstrapURLKeys={{
                    key: 'MY_KEY' }}
                center={this.state.center}
                zoom={this.state.zoom}
              &gt;
                &lt;AnyReactComponent
                  lat={latitude}
                  lng={longitude}
                  text={""Wheres Waldo?""}
                /&gt;

              &lt;/GoogleMapReact&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      /&gt;
    );
  }
}
</code></pre>

<p>index.js looks like:</p>

<pre><code>ReactDOM.render( 
        &lt;Provider store = { store } &gt;
        &lt;Map /&gt; 
        &lt;/Provider&gt;, document.getElementById('root'));
        registerServiceWorker();
</code></pre>
","9378116","","5532513","","2018-05-26 11:09:32","2018-05-26 11:09:32","react current location and destination","<reactjs><redux>","0","0","","",""
"50884367","1","50942843","","2018-06-16 01:54:27","","0","43","<p>I'm using this guide to integrate <code>react-select</code> with <code>redux-form</code>: <a href=""https://gist.github.com/leocristofani/98312e61807db8f32e720c9f97a186e5"" rel=""nofollow noreferrer"">https://gist.github.com/leocristofani/98312e61807db8f32e720c9f97a186e5</a></p>

<pre><code>import React, { PropTypes } from 'react';
import Select from 'react-select';
import 'react-select/dist/react-select.css';

RFReactSelect.defaultProps = {
  multi: false,
  className: """"
};

RFReactSelect.propTypes = {
  input: PropTypes.shape({
    name: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    onBlur: PropTypes.func.isRequired,
    onChange: PropTypes.func.isRequired,
    onFocus: PropTypes.func.isRequired,
  }).isRequired,
  options: PropTypes.array.isRequired,
  multi: PropTypes.bool,
  className: PropTypes.string
};

export default function RFReactSelect({ input , options, multi, className }) {
  const { name, value, onBlur, onChange, onFocus } = input;
  const transformedValue = transformValue(value, options, multi);
  return (
    &lt;Select
      valueKey=""value""
      name={name}
      value={transformedValue}
      multi={multi}
      options={options}
      onChange={multi
        ? multiChangeHandler(onChange)
        : singleChangeHandler(onChange)
      }
      onBlur={() =&gt; onBlur(value)}
      onFocus={onFocus}
      className={className}
    /&gt;
  );
}

/**
 * onChange from Redux Form Field has to be called explicity.
 */
function singleChangeHandler(func) {
  return function handleSingleChange(value) {
    func(value ? value.value : '');
  };
}

/**
 * onBlur from Redux Form Field has to be called explicity.
 */
function multiChangeHandler(func) {
  return function handleMultiHandler(values) {
    func(values.map(value =&gt; value.value));
  };
}

/**
 * For single select, Redux Form keeps the value as a string, while React Select 
 * wants the value in the form { value: ""grape"", label: ""Grape"" }
 * 
 * * For multi select, Redux Form keeps the value as array of strings, while React Select 
 * wants the array of values in the form [{ value: ""grape"", label: ""Grape"" }]
 */
function transformValue(value, options, multi) {
  if (multi &amp;&amp; typeof value === 'string') return [];

  const filteredOptions = options.filter(option =&gt; {
    return multi 
      ? value.indexOf(option.value) !== -1
      : option.value === value;
  });

  return multi ? filteredOptions : filteredOptions[0];
}
</code></pre>

<p>This works albeit with one issue (so far).</p>

<p>When I set the <code>initialValues</code> of the form and submit it without touching the <code>react-select</code> component, it converts the initial values of the select from <code>[""id1"", ""id2"", ""id3""]</code> to [null, null, null].</p>
","734366","","","","","2018-06-20 07:42:18","Submitting untouched redux-form with initialValues converts react-select values to array of null","<reactjs><redux><react-redux><redux-form><react-select>","1","0","","",""
"50862407","1","50863520","","2018-06-14 16:49:37","","1","67","<p>A developer gave me an api specification which is a <code>List</code> that can accept an array of objects using the <code>ListItem</code> shape described below; this will be transformed into a set of rendered <code>List.Item</code> components.</p>

<p><strong>API</strong></p>

<p>The <code>List</code> component accepts the following props:</p>

<ul>
<li><code>items</code> (<code>ListItem[]</code>): <strong>Required</strong>. This array should contain one or more JSX elements, or one or more <code>ListItem</code> objects (see below for details).</li>
<li><code>searchable</code> (<code>string[]</code>): Optional. Accepts an array of strings which match the names of ListItem properties. If present, a localized freeform search box is rendered above the list, and entry within that field will filter the internal data using the provided keys as a guide.</li>
</ul>

<p><strong>Schemas</strong></p>

<hr>

<p><code>ListItem</code></p>

<p><code>ListItem</code> is the object schema for an individual item in the list.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>{
    // REQUIRED: The main title of the list item.
    title: string,
    // OPTIONAL: A secondary title.
    subtitle: string,
    // OPTIONAL: Additional labeling which appears directly below the title or subtitle label: String,
    // OPTIONAL: If provided, a date will always appear at the top of the list item
    date: Date,
    // OPTIONAL: An array of actions which are appended to the right side of the list item.
    actions: [
        {
            label: string | JSX.Element,
            action: Function
        }
    ]
}</code></pre>
</div>
</div>
</p>

<hr>

<p><strong>My implementation which is not working</strong></p>

<p><code>journalList.jsx</code></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import PropTypes from ""prop-types"";
import React from ""react"";
import {Components} from ""reusable-web-components"";

const {
    Icon,
    List
} = Components;

const JournalList = (props) =&gt; {
  const {description, title} = props;
  
  const formattedItems = [
    {
        title: title,
        description: description,
        actions: [
            {
                label: &lt;Icon name=""edit"" /&gt;,
                action: () =&gt; {}
            },
            {
                label: &lt;Icon name=""delete"" /&gt;,
                action: () =&gt; {}
            }
        ]
    }
];
    return(
        &lt;List items={formattedItems} searchable={[""title""]} /&gt;
    )
}

JournalList.propTypes = {
  ""title"": PropTypes.string.isRequired,
  ""description"": PropTypes.string.isRequired
};

JournalList.defaultProps = {
    
};

export default JournalList;</code></pre>
</div>
</div>
</p>

<hr>

<p><strong>Now here is the parent component</strong></p>

<p><code>journal.jsx</code></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import api from ""bees"";
import JournalList from './JournalList';
import React from ""react"";
import store from ""store"";


class Journal extends React.Component {
    constructor (props) {
        super(props)
        this.state = {
            ""displayList"": true,
            ""journalList"": null,
            ""searchJournalList"": []
        }
    }

    componentDidMount = () =&gt; {
        store.dispatch(api.getJournals()).then((result) =&gt; {
            this.setState(() =&gt; ({""journalList"": result.body.data}));
        }).
            catch(() =&gt; {
                this.setState(() =&gt; ({""journalList"": []}));
            });
    }

    onEdit = () =&gt; {
        // TODO: Update a Journal
    }

    onDelete = () =&gt; {
        // TODO: Delete a Journal 
    }
    render() {
        return (
            &lt;div&gt;
               
                    &lt;JournalList&gt;
                        {
                            journalList.map((items) =&gt; {
                                return{
                                    key={items.title}
                                        title={items.title} 
                                        description={items.description} 
                                }
                            })                            
                        }
                    &lt;/JournalList&gt;
               
            &lt;/div&gt;            
        ) 
    }   
}


export default Journal;</code></pre>
</div>
</div>
</p>

<p>I need to be able to successfully iterate over the data I am getting from my store and create a list of <code>journal</code> entries. According to his documentation the output should look like this:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;
  &lt;div class=""list""&gt;
    &lt;div class=""list__search""&gt;
      &lt;div class=""form-group""&gt;
        &lt;input placeholder=""Search"" id=""ListSearch_0.1429790340540955"" class=""form-control""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=""list__item""&gt;
      &lt;div class=""list-item""&gt;
        &lt;div class=""list-item__contents""&gt;
          &lt;div class=""list-item-contents""&gt;
            &lt;div class=""list-item-contents__title""&gt;Journal 1&lt;/div&gt;
            &lt;div class=""list-item-contents__title""&gt;Journal 2&lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=""list-item__actions""&gt;
          &lt;button class=""list-item-action""&gt;&lt;svg class=""icon icon--medium""&gt;&lt;use xlink: href=""#edit-icon""&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/button&gt;
          &lt;button class=""list-item-action""&gt;&lt;svg class=""icon icon--medium""&gt;&lt;use xlink: href=""#delete-icon""&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
","333757","","","","","2018-06-15 00:12:45","How do I create a react list component from an array of objects?","<javascript><reactjs><array.prototype.map>","1","0","1","",""
"51098355","1","","","2018-06-29 09:18:32","","1","61","<p>I am creating charts using d3 and svg in react native in which i have created an progress bar chart. I would like to use this progress bar chart as speedometer by having a needle shows the current value.
Can anyone tell me how to create a speedometer in react native.</p>

<pre><code>    import React, { PureComponent } from 'react';
import {
  View,
} from 'react-native';
import PropTypes from 'prop-types';
import * as shape from 'd3-shape';
import Path from './animated-path';
import Svg, { G } from 'react-native-svg';

export default class Gauge extends PureComponent {
  state = {
    height: 0,
    width: 0,
  }

  _onLayout(event) {
    const {
      nativeEvent: {
        layout: {
          height,
          width,
        }
      }
    } = event;
    this.setState({height, width});
  }
  render() {
    const {
      style,
      progressColor,
      backgroundColor,
      strokeWidth,
      startAngle,
      endAngle,
      animate,
      animationDuration,
      children,
      cornerRadius,
    } = this.props

    let { progress } = this.props

    const {
      height, width
    } = this.state

    const outerDiameter = Math.min(width, height)

    if (!isFinite(progress) || isNaN(progress)) {
      progress = 0;
    }

    const data = [
      {
        key: 'rest',
        value: 1 - progress,
        color: backgroundColor,
      },
      {
        key: 'progress',
        value: progress,
        color: progressColor,
      }
    ]

    const pieSlices = shape
          .pie()
          .value(d =&gt; d.value)
          .sort((a) =&gt; a.key === 'rest' ? 1 : -1)
          .startAngle(startAngle)
          .endAngle(endAngle)
          (data)

    const arcs = pieSlices.map((slice, index) =&gt; (
      {
        ...data[index],
        ...slice,
        path: shape.arc()
        .outerRadius(outerDiameter / 2)
        .innerRadius((outerDiameter / 2) - strokeWidth)
        .startAngle(index === 0 ? startAngle : slice.startAngle)
        .endAngle(index === 0 ? endAngle : slice.endAngle)
        .cornerRadius(cornerRadius)
        (),
      }
    ))

    const extraProps = {
      width,
      height,
    }

    return (
      &lt;View style={ style } onLayout={event =&gt; this._onLayout(event)}&gt;
        {
          height &gt; 0 &amp;&amp; width &gt; 0 &amp;&amp;
          &lt;Svg style={{height, width}}&gt;
            &lt;G x={width / 2}
              y={height / 2}
              &gt;
              {
                React.Children.map(children, child =&gt; {
                  if (child &amp;&amp; child.props.belowChart) {
                    return React.cloneElement(child, extraProps)
                  }
                  return null
                })
              }
              {
                arcs.map((shape, index) =&gt; {
                  return (
                    &lt;Path
                       key={index}
                       fill={shape.color}
                       d={shape.path}
                       animate={animate}
                       animationDuration={animationDuration}
                    /&gt;
                  )
                })
              }
              {
                React.Children.map(children, child =&gt; {
                  if (child &amp;&amp; !child.props.belowChart) {
                    return React.cloneElement(child, extraProps)
                  }
                  return null
                })
              }
            &lt;/G&gt;
          &lt;/Svg&gt;
        }
      &lt;/View&gt;
    )
  }
}

Gauge.propTypes = {
  progress: PropTypes.number.isRequired,
  style: PropTypes.any,
  progressColor: PropTypes.any,
  backgroundColor: PropTypes.any,
  strokeWidth: PropTypes.number,
  startAngle: PropTypes.number,
  endAngle: PropTypes.number,
  animate: PropTypes.bool,
  cornerRadius: PropTypes.number,
  animationDuration: PropTypes.number,
}

Gauge.defaultProps = {
  progressColor: 'black',
  backgroundColor: '#ECECEC',
  strokeWidth: 5,
  startAngle: 0,
  endAngle: Math.PI * 2,
  cornerRadius: 45,
}
</code></pre>

<p>App.js</p>

<pre><code>&lt;GaugeChartExample /&gt;
</code></pre>

<p>The output which is got is like as follows:</p>

<p><a href=""https://i.stack.imgur.com/6FJ7F.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6FJ7F.png"" alt=""Output""></a></p>
","6737630","","","","","2018-06-29 09:18:32","How to create a speedometer in react native","<react-native><d3.js><svg><charts>","0","1","","",""
"49768638","1","","","2018-04-11 07:08:38","","0","55","<p>When writing tests using Jest and Enzyme I ran into the following error.</p>

<blockquote>
  <p>Warning: Failed prop type: The prop <code>to</code> is marked as required in <code>Link</code>, but its value is <code>undefined</code>.</p>
</blockquote>

<p>I am generating tests for my Modal component that has a InnerModal with a Link Component. I shallow render the ModalClass and test my handleOpen() function which triggers the prop-types warning.</p>

<p>When I dive() to the Link component rendered by Enzyme, I see that the to line has the proper props passed through from the Enzyme render. I left my console.log functions to depict what I am talking about. The console reads the following.</p>

<pre><code> { to: '/alertpage',
    children:
     { '$$typeof': Symbol(react.element),
       type:
        { [Function: Button]
          defaultProps: [Object],
          _meta: [Object],
          Content: [Object],
          Group: [Object],
          Or: [Object],
          handledProps: [Array],
          propTypes: [Object],
          create: [Function] },
       key: null,
       ref: null,
       props: { children: ' Yes ', as: 'button' },
       _owner: null,
       _store: {} },
    replace: false }
</code></pre>

<p>It's definitely there, so how do I get rid of this warning? </p>

<p>The code is below.</p>

<p>Unit test:
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>describe('ModalClass', () =&gt; {
    const wrapper = shallow( &lt;ModalClass link={'/alertpage'}/&gt; );
    
     it('modal is open after click button', () =&gt; {
        console.log(wrapper.find(InnerModal).at(0).dive().find(Link).props());
        console.log(wrapper.find(InnerModal).at(1).dive().find(Link).props())
        wrapper.instance().handleOpen();
        expect(wrapper.state().open).toBe(true);
    })
    
});</code></pre>
</div>
</div>
</p>

<p>ModalClass with functional InnerModal component:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>export class ModalClass extends Component {

    constructor(props) {
        super(props);
        this.state = {
            open: false
        };
    }

    handleOpen = () =&gt; this.setState({ open: true });

    handleClose = () =&gt; this.setState({ open: false });

    render() {
        return (
        &lt;Modal open={this.state.open}
        trigger={
            &lt;Button onClick={this.handleOpen}&gt;
                &lt;img src={this.props.image} alt=""alert"" width=""100""&gt;&lt;/img&gt;
            &lt;/Button&gt;
            }&gt;
            &lt;Modal.Header&gt; {this.props.modalHeader} &lt;/Modal.Header&gt;
            &lt;Modal.Content&gt;
                &lt;div class=""ui two column centered grid""&gt;
                    &lt;InnerModal 
                    buttonLabel={EMERGENCY_ALERT}
                    link={this.props.link}
                    color=""red""
                    handleClose={this.handleClose}/&gt;
                    &lt;InnerModal 
                    buttonLabel={TEST_ALERT}
                    link={this.props.link}
                    color=""green""
                    handleClose={this.handleClose}/&gt;
                &lt;/div&gt;
            &lt;/Modal.Content&gt;
        &lt;/Modal&gt;
    )
    }
}



export const InnerModal = (props) =&gt; {
    return (
        &lt;Modal trigger={
            &lt;Button color={props.color}&gt; {props.buttonLabel} &lt;/Button&gt;
        }&gt;
        &lt;Modal.Header&gt; Are you sure you want to send out a {props.buttonLabel}? &lt;/Modal.Header&gt;
        &lt;Modal.Content&gt;
            &lt;div class=""ui two column centered grid""&gt;
                &lt;Link to={props.link}&gt;&lt;Button&gt; Yes &lt;/Button&gt;&lt;/Link&gt;
                &lt;Button onClick={props.handleClose}&gt; No &lt;/Button&gt;
            &lt;/div&gt;
        &lt;/Modal.Content&gt;
        &lt;/Modal&gt;
    )
}</code></pre>
</div>
</div>
</p>

<p>Any help would be appreciated!</p>
","9628942","","","","","2018-04-11 07:08:38","prop-type warning from react-router Link when using Enzyme's shallow rendering","<javascript><reactjs><react-router><enzyme>","0","3","","",""
"50664862","1","","","2018-06-03 09:14:36","","1","21","<p>I'm adding a graphs library to my react native project:</p>

<p><a href=""https://www.npmjs.com/package/react-native-pathjs-charts"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/react-native-pathjs-charts</a></p>

<p>and i'm using storybook, 
every time i'm trying to see the charts i get an error saying
""No component found for view with name ""RNSVGPath""</p>

<p>i tried linking the repositories but that doesn't help
any idea on how to fix it ?</p>

<p>here is my story:</p>

<pre><code>import React from 'react';
import PropTypes from 'prop-types';
import { View, Text, StyleSheet } from 'react-native';
import { Bar } from 'react-native-pathjs-charts'

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f7f7f7',
  },
});

export default class Welcome extends React.Component {
  static navigationOptions = ({ navigation }) =&gt; ({
    title: `Bar (Column) - Basic`,
  });

  styles = {
    wrapper: {
      flex: 1,
      padding: 24,
      justifyContent: 'center',
    },
    header: {
      fontSize: 18,
      marginBottom: 18,
    },
    content: {
      fontSize: 12,
      marginBottom: 10,
      lineHeight: 18,
    },
  };

  showApp(event) {
    event.preventDefault();
    if (this.props.showApp) this.props.showApp();
  }

  render() {
    let data = [
      [{
        ""v"": 49,
        ""name"": ""apple""
      }, {
        ""v"": 42,
        ""name"": ""apple""
      }],
      [{
        ""v"": 69,
        ""name"": ""banana""
      }, {
        ""v"": 62,
        ""name"": ""banana""
      }],
      [{
        ""v"": 29,
        ""name"": ""grape""
      }, {
        ""v"": 15,
        ""name"": ""grape""
      }]
    ]


    let options = {
      width: 300,
      height: 300,
      margin: {
        top: 20,
        left: 25,
        bottom: 50,
        right: 20
      },
      color: '#2980B9',
      gutter: 20,
      animate: {
        type: 'oneByOne',
        duration: 200,
        fillTransition: 3
      },
      axisX: {
        showAxis: true,
        showLines: true,
        showLabels: true,
        showTicks: true,
        zeroAxis: false,
        orient: 'bottom',
        label: {
          fontFamily: 'Arial',
          fontSize: 8,
          fontWeight: true,
          fill: '#34495E',
          rotate: 45
        }
      },
      axisY: {
        showAxis: true,
        showLines: true,
        showLabels: true,
        showTicks: true,
        zeroAxis: false,
        orient: 'left',
        label: {
          fontFamily: 'Arial',
          fontSize: 8,
          fontWeight: true,
          fill: '#34495E'
        }
      }
    }

    return (
      &lt;View style={this.styles.wrapper}&gt;
          &lt;View style={styles.container}&gt;
          &lt;Bar data={data} options={options} accessorKey='v'/&gt;
        &lt;/View&gt;
      &lt;/View&gt;
    );
  }
}

Welcome.defaultProps = {
  showApp: null,
};

Welcome.propTypes = {
  showApp: PropTypes.func,
};
</code></pre>

<p>Thnx</p>
","2560571","","","","","2018-06-03 09:14:36","No component ""RNSVGPath"" in react native","<reactjs><react-native>","0","0","","",""
"50729455","1","","","2018-06-06 20:55:22","","2","35","<p>using:</p>

<ul>
<li>flow 0.67.1</li>
<li>react 16.3.1</li>
<li>react-redux 5.0.7</li>
</ul>

<p>Flow returns an type incompatibility error when a react component property, that has a default value, is wired up by react-redux.</p>

<p>The error is along the lines of:</p>

<blockquote>
  <p>undefined <a href=""https://github.com/flowtype/flow-typed/blob/master/definitions/npm/react-redux_v5.x.x/flow_v0.63.0-/react-redux_v5.x.x.js#L54"" rel=""nofollow noreferrer"">1</a> is incompatible with number <a href=""https://flow.org/en/docs/react/types/#toc-react-elementconfig"" rel=""nofollow noreferrer"">2</a>.</p>
</blockquote>

<p>Here is my code sample:</p>

<pre><code>type MyProps = {
  myProp: number,
};

class MyComponent extends Component&lt;MyProps&gt; {
  static defaultProps = { myProp: 123 }
}

const myMapStateToProps = ({ someStateNumber }: { someStateNumber: number }): { myProp: number } =&gt; ({
  myProp: someStateNumber
});

const MyContainer = connect(myMapStateToProps)(MyComponent);
</code></pre>

<p>I think this has to do with the way the <code>connect</code> function is defined in the flow-typed <a href=""https://github.com/flowtype/flow-typed/blob/master/definitions/npm/react-redux_v5.x.x/flow_v0.63.0-/react-redux_v5.x.x.js#L54"" rel=""nofollow noreferrer"">lib def</a>.</p>

<pre><code>declare export function connect&lt;
  Com: ComponentType&lt;*&gt;,
  S: Object,
  DP: Object,
  RSP: Object,
  CP: $Diff&lt;OmitDispatch&lt;ElementConfig&lt;Com&gt;&gt;, RSP&gt;
  &gt;(
  mapStateToProps: MapStateToProps&lt;S, DP, RSP&gt;,
  mapDispatchToProps?: null
): (component: Com) =&gt; ComponentType&lt;CP &amp; DP&gt;;
</code></pre>

<p>The most relevant lines are:</p>

<p><code>CP: $Diff&lt;OmitDispatch&lt;ElementConfig&lt;Com&gt;&gt;, RSP&gt;</code></p>

<p>The CP generic param consists of component props that do not have default values (<a href=""https://flow.org/en/docs/react/types/#toc-react-elementconfig"" rel=""nofollow noreferrer"">doc on ElementConfig type</a>) less the properties handled by <code>mapStateToProps</code>.  OmitDispatch will also strip a prop with the name <code>dispatch</code> ... which can be ignored in this example.</p>

<p>and:</p>

<p><code>): (component: Com) =&gt; ComponentType&lt;CP &amp; DP&gt;;</code></p>

<p>Which defines a ComponentType with props that consist of a union between the CP generic param and DP.  DP is the type of the optional second <code>ownArgs</code> param passed to the myMapStateToProps function. DP can be ignored because it isn't being used in the samples <code>myMapStateToProps</code> function.</p>

<p>In my example, this results in a ComponentType that doesn't have any props, because its only property has a default value.</p>

<p>I tried to play around with <code>$Diff</code> and <code>ElementConfig</code> on flow's web based try site and came up with <a href=""https://flow.org/try/#0JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwBQduANmugLICeAwiZAHZY+8LAA8YggCbpseGADoe4CAKEAeAN504cAhAgAuOHwCuIAEZYoAGi1wzyKIdQwowPgHM6AXwB8cTdrOyDDAuHASWATIxkwwAArEYOgAvP46eoYAjABMAMxWdg6GZAAWWExMEGRwXt4MMBxgWJgAynFwqerpBkamFlA19Np0DU1wACLABARYEgAqjc2pACST06oy+HIAokxYIIIwPHwEwO6qo1gQBHCcivyHPgUYbT4MAPTvcJbEUIzKzjg4mchjWM3miw6-i89DonzgYFYWFQ-z4gOQfAgMDKUDmyJgoKm4IWY063UM2UyuUGQA"" rel=""nofollow noreferrer"">this</a>. I think that is the same issue.</p>

<p>For component's i author that should never be used without react-redux, the solution is to just strip out the default values, but what if that isn't always the case?  They may be 3rd party components or components that are used without react-redux.</p>

<p>What am i missing here?</p>

<p>Thanks!</p>
","1284852","","","","","2018-06-06 20:55:22","flow errors when a Component prop with a default value is wired up by react-redux","<javascript><reactjs><react-redux><flow>","0","0","1","",""
"51039303","1","","","2018-06-26 09:22:51","","0","33","<p>I have weird issue when trying to create a custom autocomplete editor.  </p>

<p>Basicly what I've done is I've pulled the built-in AutocompleteEditor class and refactored it to plain ES6, and renamed the class to ProductSelectEditor. No modifications to the code logic. </p>

<p>When I try to use it, I'm getting error ""Cannot read property 'onCommit' of undefined"" when handleChange() is called:</p>

<pre><code>handleChange() {
  this.props.onCommit(); // props undefined
}
</code></pre>

<p>Now if i replace the editor with the real built-in AutocompleteEditor, it works just fine. I can't see any straight reason, why my custom version does not work, when only alterations I'm doing are refactoring the code away from TypeScript, renaming the class, and eventually exporting the class out as default?
Any clues on what I'm not understanding here?</p>

<p>Below is the whole refactored code</p>

<pre><code>import React from 'react'
import ReactDOM from 'react-dom'
import ReactAutocomplete from  'ron-react-autocomplete';
import PropTypes from 'prop-types';
import '../css/ron-react-autocomplete.css'
const { shapes: { ExcelColumn } } = require('react-data-grid')

let optionPropType = PropTypes.shape({
  id: PropTypes.required,
  title: PropTypes.string
});

export default class ProductSelectEditor extends React.Component {
  static propTypes = {
    onCommit: PropTypes.func,
    options: PropTypes.arrayOf(optionPropType),
    label: PropTypes.any,
    value: PropTypes.any,
    height: PropTypes.number,
    valueParams: PropTypes.arrayOf(PropTypes.string),
    column: PropTypes.shape(ExcelColumn),
    resultIdentifier: PropTypes.string,
    search: PropTypes.string,
    onKeyDown: PropTypes.func,
    onFocus: PropTypes.func,
    editorDisplayValue: PropTypes.func
  };

  static defaultProps = {
    resultIdentifier: 'id'
  };

  handleChange() {
    this.props.onCommit();
  }

  getValue() {
    let value;
    let updated = {};
    if (this.hasResults() &amp;&amp; this.isFocusedOnSuggestion()) {
      value = this.getLabel(this.autoComplete.state.focusedValue);
      if (this.props.valueParams) {
        value = this.constuctValueFromParams(this.autoComplete.state.focusedValue, this.props.valueParams);
      }
    } else {
      value = this.autoComplete.state.searchTerm;
    }
    updated[this.props.column.key] = value;
    return updated;
  }

  getEditorDisplayValue() {
    let displayValue = {title: ''};
    let { column, value, editorDisplayValue } = this.props;
    if (editorDisplayValue &amp;&amp; typeof editorDisplayValue === 'function') {
      displayValue.title = editorDisplayValue(column, value);
    } else {
      displayValue.title = value;
    }
    return displayValue;
  }

  getInputNode() {
    return ReactDOM.findDOMNode(this).getElementsByTagName('input')[0];
  }

  getLabel(item) {
    let label = this.props.label != null ? this.props.label : 'title';
    if (typeof label === 'function') {
      return label(item);
    } else if (typeof label === 'string') {
      return item[label];
    }
  }

  hasResults() {
    return this.autoComplete.state.results.length &gt; 0;
  }

  isFocusedOnSuggestion() {
    let autoComplete = this.autoComplete;
    return autoComplete.state.focusedValue != null;
  }

  constuctValueFromParams(obj, props) {
    if (!props) {
      return '';
    }
    let ret = [];
    for (let i = 0, ii = props.length; i &lt; ii; i++) {
      ret.push(obj[props[i]]);
    }
    return ret.join('|');
  }

  render() {
    let label = this.props.label != null ? this.props.label : 'title';
    return (&lt;div height={this.props.height} onKeyDown={this.props.onKeyDown}&gt;
      &lt;ReactAutocomplete search={this.props.search} ref={(node) =&gt; this.autoComplete = node} label={label} onChange={this.handleChange} onFocus={this.props.onFocus} resultIdentifier={this.props.resultIdentifier} options={this.props.options} value={this.getEditorDisplayValue()} /&gt;
      &lt;/div&gt;);
  }
}
</code></pre>
","1549142","","","","","2018-06-26 11:28:42","custom editor react-data-grid","<editor><react-data-grid>","1","0","","",""
"50489891","1","50498663","","2018-05-23 13:37:07","","1","45","<p>I have a Form with an Input field, a TextArea and two (2) Buttons in a footer within the Form. The first button is for resetting the form and the second to update it. My problem is when I press ""enter"" in the Input field, the Form is submitted but it seems that it always triggers the logic of the first button (in my case resetting the form). If I switch the order of the buttons so that the Update button is first, then the form is updated upon pressing ""enter"". Only the update button has the ""submit"" type.</p>

<p>I have looked in the documentation and could not find anything regarding this behavior. I have also checked the source code a little bit and didn't see what could cause this. I tried setting up the onSubmit callback of the Form to the same function of the update button but the ""cancel"" logic is still being called first.</p>

<p>How can I control the ""enter"" logic of the Input field within the form?</p>

<p>Here's the code:</p>

<pre><code>import React from 'react';
import PropTypes from 'prop-types';
import { Form, Input, TextArea, Button } from 'semantic-ui-react';
import I18n from '../../shims/i18n_global';

export default class SpaceDetails extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      details: {
        id: props.id,
        name: props.name,
        description: props.description,
      },
      formError: false,
      formDisabled: true,
    };

    this.originalDetails = Object.assign({}, this.state.details);

    this.handleNameUpdate = this.handleNameUpdate.bind(this);
    this.handleDescriptionUpdate = this.handleDescriptionUpdate.bind(this);
    this.handleDetailsUpdate = this.handleDetailsUpdate.bind(this);
    this.handleResetForm = this.handleResetForm.bind(this);
  }

  setFormStatus(error = false, disabled = false) {
    this.setState({ formError: error, formDisabled: disabled });
  }

  setDetailsValue(detailProp, value) {
    this.setState({
      details: Object.assign(
        {},
        this.state.details,
        {
          [detailProp]: value,
        },
      ),
    });
  }

  get trimmedDetails() {
    return Object.assign(
      {},
      this.state.details,
      { name: this.state.details.name.trim() },
      { description: this.state.details.description.trim() },
    );
  }

  handleNameUpdate(event) {
    this.setFormStatus(event.target.value.trim() === '');
    this.setDetailsValue('name', event.target.value);
  }

  handleDescriptionUpdate(event) {
    this.setFormStatus();
    this.setDetailsValue('description', event.target.value);
  }

  handleDetailsUpdate() {
    this.props.onUpdate(Object.assign(
      { icon: null },
      this.trimmedDetails,
    ));
    this.resetFileInputField();
  }

  handleResetForm() {
    this.setFormStatus(false, true);
    this.setState({ details: this.originalDetails });
  }

  render() {
    return (
      &lt;Form &gt;
        &lt;h2 &gt;{I18n.t('space.edit.details.title')}&lt;/h2 &gt;
        &lt;Form.Field
          className=""field-full""
        &gt;
          &lt;Input
            id=""name""
            type=""text""
            name=""name""
            placeholder={I18n.t('space.edit.details.placeholders.name')}
            size=""large""
            error={this.state.formError}
            value={this.state.details.name}
            onChange={this.handleNameUpdate}
          /&gt;
        &lt;/Form.Field &gt;
        &lt;Form.Field
          className=""field-full""
        &gt;
          &lt;TextArea
            id=""description""
            className=""field-full""
            rows=""4""
            cols=""50""
            placeholder={I18n.t('space.edit.details.placeholders.description')}
            value={this.state.details.description}
            onChange={this.handleDescriptionUpdate}
          /&gt;
        &lt;/Form.Field &gt;
        &lt;div className=""form-footer"" &gt;
          &lt;Button
            size=""big""
            className=""btn-xxl""
            content=""Reset""
            onClick={this.handleResetForm}
          /&gt;
          &lt;Button
            type=""submit""
            primary
            size=""big""
            className=""btn-xxl""
            content=""Save""
            disabled={this.state.formDisabled}
            onClick={this.handleDetailsUpdate}
          /&gt;
        &lt;/div &gt;
      &lt;/Form &gt;
    );
  }
}

SpaceDetails.defaultProps = {
  name: '',
  description: '',
};

SpaceDetails.propTypes = {
  id: PropTypes.number.isRequired,
  name: PropTypes.string,
  description: PropTypes.string,
  onUpdate: PropTypes.func.isRequired,
};
</code></pre>

<p>Thanks!</p>
","3323102","","3323102","","2018-05-23 21:00:08","2018-05-23 23:04:49","Semantic-ui-react Input field auto-submit triggers wrong behavior","<semantic-ui-react>","1","2","","",""
"50666075","1","","","2018-06-03 11:51:34","","0","47","<p>I'm trying to develop unit test for my react component with jest and enzyme. So basically my component have resize listener, when resize occured my component will update component state. But i just couldn't get the clientWidth for my react component. Below is some code of my component.</p>

<pre><code>import React, { Component } from ""react"";
import moment from ""moment"";
// import PropTypes from ""prop-types"";

import Table from ""./Table"";
import Grid from ""./Grid"";
import ActionBlock from ""../ActionBlock"";
import ConfirmDialog from './ConfirmDialog';
import ReactTooltip from 'react-tooltip'
import { debounce } from '../../utils';
import styles from './styles.scss';

export default class Pagination extends Component {

  constructor(props) {
    super(props);
    this.state = {
      index: props.index,
      type: props.type,
      config: props.config,
      data: props.data,
      currentPage: 1,
      dataPerPage: 20,
      enableActionBlock: props.enableActionBlock,
      confirmDialogIndex: null,
      confirmDialogActionName: null,
      confirmDialogData: null,
      width: 0
    };

    this.handleWindowResize = debounce(this.handleWindowResize.bind(this), 100); //delay trigger resize event
  }

  componentDidMount() {
    this.setState({ width: this.refs.pagination_wrapper.clientWidth })
    window.addEventListener('resize', this.handleWindowResize)
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.handleWindowResize);
  }

  handleWindowResize = () =&gt; {
    this.setState({ width: this.refs.pagination_wrapper.clientWidth })
  }

  render() {
    return (
      &lt;div ref=""pagination_wrapper"" className={styles.pagination_wrapper}&gt;
        &lt;ReactTooltip /&gt;
        {this.renderViewType()}
        {this.renderConfirmDialog()}
      &lt;/div&gt;
    )
  }
}

Pagination.defaultProps = {
  enableActionBlock: true,
  dataPerPage: 20
};
</code></pre>

<p>And below is my test code.</p>

<pre><code>import React from 'react'
import { shallow, mount, render } from 'enzyme';
import Pagination from '../index';
let img = 'https://www.jqueryscript.net/images/Simplest-Responsive-jQuery-Image-Lightbox-Plugin-simple-lightbox.jpg';
let imageStream = 'http://192.168.100.125:8080/';
let imgQuoteError = `http://192.168.100.71/target-data/fr/target-person-images/1111112222233333@Rizkifika-Asanuli'nam/qTD8vYa.jpeg`;

describe('Testing Pagination', () =&gt; {

  let action = (actionName, indexData) =&gt; {
    console.log('action APP', actionName, indexData);
  }

  let dataListProps = {
    index: 'id',
    type: 'grid',
    config: [
      { text: 'Image', type: 'image', textPath: 'image', textColor: 'red', valuePath: 'image' },
      { text: 'Fullname', type: 'string', textPath: 'fullname', valuePath: 'fullname' },
      { text: 'Role', type: 'string', textPath: 'role', valuePath: 'role' },
      { text: 'Datetime', type: 'date', textPath: 'datetime', valuePath: 'datetime' },
      { text: 'Json', type: 'json', textPath: 'json', valuePath: 'json' },
    ],
    data: [
      { id: 305, created_at: '2018-02-23T09:43:08.928Z', rule_detail: { id: 1 }, cam_detail: { id: 2, name: 'kamera huawei' }, vas_detail: { id: 3, name: 'VAS 3' }, image: img },
      { id: 306, created_at: '2018-02-23T09:43:08.928Z', rule_detail: { id: 2, name: '' }, cam_detail: { id: 3, name: 'kamera avigilon' }, vas_detail: { id: 4, name: 'VAS 4' }, image: imageStream },
      { id: 306, created_at: '2018-02-23T09:43:08.928Z', rule_detail: { id: 2, name: null }, cam_detail: { id: 3, name: 'kamera avigilon' }, vas_detail: { id: 4, name: 'VAS 4' }, image: imgQuoteError },
      { id: 306, created_at: '2018-02-23T09:43:08.928Z', rule_detail: { id: 2, name: 'Crowd Behaviour' }, cam_detail: { id: 3, name: 'kamera avigilon' }, vas_detail: { id: 4, name: 'VAS 4' }, image: imageStream },
    ],
    onAction: action,
    enableActionBlock: false
  }

  it('snapshot', () =&gt; {
    const wrapper = shallow(&lt;Pagination {...dataListProps}/&gt;)
    expect(wrapper).toMatchSnapshot();
  })
})
</code></pre>

<p>I need help for solving this</p>
","3026781","","1727948","","2018-06-04 04:20:43","2018-06-04 07:50:31","Test react component can't get clientWidth","<javascript><reactjs><jestjs><enzyme>","2","3","","",""
"50937743","1","51363839","","2018-06-19 22:26:13","","0","59","<p>I have a problem with an eslint in react native application. I'm declaring styles property for my component. It looks like:</p>

<pre><code>Component.propTypes = {
   styles: ViewPropTypes.style,
   textStyle: Text.propTypes.style,
}
Component.defaultProps = {
   styles: null,
   textStyle: null,
}
</code></pre>

<p>and I'm getting the following eslint errors:</p>

<pre><code>295:25  error  Typo in declared prop type: style         react/no-typos
296:20  error  Typo in declared prop type: propTypes     react/no-typos
296:30  error  Typo in prop type chain qualifier: style  react/no-typos
</code></pre>

<p>I have noticed that I'm getting them with es6 syntax. When I use an es7 everything is fine.
May you tell me what I do wrong?</p>

<p>My versions of libraries are:</p>

<pre><code>""prop-types"": ""15.6.1"",
""react"": ""16.0.0"",
""react-native"": ""0.50.0"",

""eslint"": ""^4.11.0"",
""eslint-import-resolver-babel-module"": ""^4.0.0"",
""eslint-plugin-flowtype"": ""^2.41.0"",
""eslint-plugin-import"": ""^2.11.0"",
""eslint-plugin-jsx-a11y"": ""^6.0.2"",
""eslint-plugin-react"": ""7.9.1"",
""eslint-plugin-react-native"": ""^3.1.0"",
</code></pre>

<p>Thanks and sorry for my English skill.</p>
","6260510","","","","","2018-07-16 14:12:01","Eslint react/no-typos rule throw an error when declare a property as style","<react-native><ecmascript-6><eslint><react-proptypes>","1","2","","",""
"51046305","1","","","2018-06-26 15:15:35","","0","21","<p>I'm trying to implement the exact same example from the <a href=""https://uber.github.io/deck.gl/#/documentation/developer-guide/writing-custom-layers/composite-layers"" rel=""nofollow noreferrer"">https://uber.github.io/deck.gl/#/documentation/developer-guide/writing-custom-layers/composite-layers</a> documentation, but the thing won't render. So, once again, I need your help awesome community :-)</p>

<p>Here's my Composite component:</p>

<pre><code>import { CompositeLayer, ScatterplotLayer } from 'deck.gl';

export default class ScatterplotLayerWithOutline extends CompositeLayer {
    renderLayers() {
        const { updateTriggers } = this.props;

        return [
            new ScatterplotLayer({
                ...this.props,
                id: 'fill',
                getColor: this.props.getFillColor,
                outline: false,
                updateTriggers: {
                    ...updateTriggers,
                    getColor: updateTriggers.getFillColor,
                },
            }),
            new ScatterplotLayer({
                ...this.props,
                id: 'outline',
                getColor: this.props.getStrokeColor,
                outline: true,
                updateTriggers: {
                    ...updateTriggers,
                    getColor: updateTriggers.getStrokeColor,
                },
            }),
        ];
    }
}

ScatterplotLayerWithOutline.layerName = 'ScatterplotLayerWithOutline';

ScatterplotLayerWithOutline.defaultProps = {
    ...ScatterplotLayer.defaultProps,
    getFillColor: d =&gt; [255, 255, 0],
    getStrokeColor: d =&gt; [255, 140, 0]
}
</code></pre>

<p>And here's the Map.jsx which renders the map with all the layers:</p>

<pre><code>import React, { Component } from 'react';
import MapGL, { NavigationControl, Marker } from 'react-map-gl';
import DeckGL, { LineLayer } from 'deck.gl';

import ScatterplotLayerWithOutline from './ScatterplotLayerWithOutline';
import MarkerSvg from './MarkerSvg';

import 'mapbox-gl/dist/mapbox-gl.css';

const sourcePosition = [-71.0589, 42.3601];
const targetPosition = [-74.4589, 43.4601];

export default class Map extends Component {
    state = {
        viewport: {
            mapboxApiAccessToken: 'pk.eyJ1IjoiZGlzY29tYXJyYSIsImEiOiJjaml1M3BoN3oxeWd2M3Z0OXlwajc3Y2gxIn0.JSSzF0Yr3oXm5UcNg6p-rA',
            width: 1000,
            height: 800,
            latitude: 42.3601,
            longitude: -71.0589,
            zoom: 6,
            attributionControl: false,
        },
    };

    render() {
        return (
            &lt;div className=""map""&gt;
                &lt;MapGL
                    {...this.state.viewport}
                    onViewportChange={viewport =&gt; this.setState({ viewport })}
                &gt;
                    &lt;div style={{ position: 'absolute', left: 10, top: 10 }}&gt;
                        &lt;NavigationControl onViewportChange={viewport =&gt; this.setState({ viewport })} /&gt;
                    &lt;/div&gt;
                    &lt;Marker latitude={sourcePosition[1]} longitude={sourcePosition[0]} offsetLeft={-25} offsetTop={-50}&gt;
                        &lt;MarkerSvg color=""green""/&gt;
                    &lt;/Marker&gt;
                    &lt;Marker latitude={targetPosition[1]} longitude={targetPosition[0]} offsetLeft={-25} offsetTop={-50}&gt;
                        &lt;MarkerSvg color=""red""/&gt;
                    &lt;/Marker&gt;
                    &lt;DeckGL {...this.state.viewport}&gt;
                        &lt;LineLayer
                            id=""lineLayer""
                            getStrokeWidth={12}
                            getColor={[120, 120, 240]}
                            opacity={0.2}
                            data={[
                                {
                                    sourcePosition,
                                    targetPosition,
                                }
                            ]}
                        /&gt;
                        &lt;ScatterplotLayerWithOutline
                            id=""sourceAreaLayer""
                            data={[
                                {
                                    coordinates: sourcePosition,
                                }
                            ]}
                            strokeWidth={2}
                            opacity={0.5}
                            radiusScale={1}
                            radiusMinPixels={1}
                            getPosition={d =&gt; d.coordinates}
                            getRadius={100000}
                            getFillColor={[255, 140, 0]}
                            getStrokeColor={[2, 100, 100]}
                        /&gt;
                    &lt;/DeckGL&gt;
                &lt;/MapGL&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>Is there something I'm missing here? Any ideas on how to actually show a CompositeLayer?</p>
","437659","","","","","2018-06-26 15:15:35","deck.gl + react-map-gl won't render a CompositeLayer","<reactjs><deck.gl><react-map-gl>","0","0","","",""