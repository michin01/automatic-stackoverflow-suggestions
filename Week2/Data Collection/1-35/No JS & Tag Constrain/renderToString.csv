Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate
"47006005","1","","","2017-10-29 22:41:48","","1","199","<p>I am trying to learn how to make web apps with express, however, I am not really understanding how it sends data to the client side and what express is supposed to do.  I am under the impression that express is supposed to send data to the client side then the client side is supposed to display the UI according to the data that was sent.  Right now I am trying to render a react component from express using <code>reactDOMServer</code> but I am running into a jsx error saying: </p>

<pre><code>res.send(ReactDOMServer.renderToString(&lt;root /&gt;))

SyntaxError: Unexpected token &lt;
</code></pre>

<p>I am aware of <a href=""https://stackoverflow.com/questions/42181682/using-express-and-es6-to-render-react-and-jsx-server-side"">this</a> post and have tried installing babel for the jsx, but it still gives me this error.</p>

<p>Here is my app.js: </p>

<pre><code>const express = require(""express"")
const React = require(""react"")
const ReactDOMServer = require(""react-dom/server"");

const root = require(""./public/root.js"");

const app = express();

app.get(""/"", (req, res) =&gt; {
  res.send(ReactDOMServer.renderToString(&lt;root /&gt;))
})

app.listen(3000, () =&gt; {
  console.log(""running on port 3000"")
})
</code></pre>

<p>root.js</p>

<pre><code>const React = require(""react"");

module.export = class root extends React.Component{
  render(){
    return(
      &lt;div&gt;Hello world from react&lt;/div&gt;
    )
  }
}
</code></pre>

<p>package.json: </p>

<pre><code>{
  ""name"": ""myproject"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""index.js"",
  ""scripts"": {
    ""test"": ""echo \""Error: no test specified\"" &amp;&amp; exit 1"",
    ""start"": ""nodemon app.js --exec babel-node --presets es2015,stage-2,react""
  },
  ""author"": """",
  ""license"": ""ISC"",
  ""dependencies"": {
    ""express"": ""^4.16.2"",
    ""koa"": ""^2.3.0"",
    ""koa-router"": ""^7.2.1"",
    ""koa-static"": ""^4.0.1"",
    ""koa-static-server"": ""^1.3.2"",
    ""react"": ""^16.0.0"",
    ""react-dom"": ""^16.0.0"",
    ""react-dom-server"": ""0.0.5""
  },
  ""devDependencies"": {
    ""babel-cli"": ""^6.26.0"",
    ""babel-preset-es2016"": ""^6.24.1"",
    ""babel-preset-react"": ""^6.24.1""
  }
}
</code></pre>

<p>Note: This is an experimental project, so there is a lot of unnecessary packages (koa)</p>

<p>And to make things simple my questions are: </p>

<ol>
<li>What does express do?(send static html files to the client which then interact on its own? routing?) and how do you send a react component to the client? </li>
<li>my jsx problem above</li>
</ol>

<p>New Problem (Ryan): </p>

<pre><code>  res.send(renderToString(&lt;Root /&gt;))
                          ^

SyntaxError: Unexpected token &lt;
    at createScript (vm.js:80:10)
    at Object.runInThisContext (vm.js:139:10)
    at Module._compile (module.js:588:28)
    at Object.Module._extensions..js (module.js:635:10)
    at Module.load (module.js:545:32)
    at tryModuleLoad (module.js:508:12)
    at Function.Module._load (module.js:500:3)
    at Function.Module.runMain (module.js:665:10)
    at startup (bootstrap_node.js:187:16)
    at bootstrap_node.js:608:3
</code></pre>
","8813240","","8813240","","2017-10-31 19:47:10","2017-10-31 19:47:10","react and express app not allowing jsx","<node.js><reactjs><express><jsx><serverside-rendering>","1","6","","",""
"50121687","1","","","2018-05-01 18:19:27","","0","38","<p>I'm trying to understand react-dom/server.</p>

<p>I have a react application, using express as the server.</p>

<p>I have an express route like so : </p>

<pre><code>var server = app.listen(3000);
app.get('/test', (req, res) =&gt; {                       
  const context = {}
  const html = ReactDOMServer.renderToString(
      &lt;h1&gt;foo&lt;/h1&gt;
  )  
  if (context.url) {
    res.writeHead(302, {
      Location: context.url
    })
    res.end()
  } else {
    res.write(html)
    res.end()
  }
});
</code></pre>

<p>If I run the server file with <code>node app-server</code>, I get this error :</p>

<pre><code>      &lt;h1&gt;adasd&lt;/h1&gt;
      ^
SyntaxError: Unexpected token &lt;
</code></pre>

<p>I passed JSX to renderToString based on the example there :
<a href=""https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/api/StaticRouter.md"" rel=""nofollow noreferrer"">https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/api/StaticRouter.md</a></p>

<p>How can I make the express server file processed this JSX code ?</p>

<p>For the client side, I use webpack with the babel loader, and it works fine.</p>
","1904386","","1904386","","2018-05-01 19:10:15","2018-05-02 12:53:50","jsx passed to react-dom/server renderToString","<reactjs><react-dom-server>","1","5","","",""
"47018368","1","","","2017-10-30 14:58:43","","1","189","<p>I have a React app in which I am using <a href=""http://leafletjs.com/"" rel=""nofollow noreferrer"">Leaflet</a> through <a href=""https://github.com/PaulLeCam/react-leaflet"" rel=""nofollow noreferrer"">react-leaflet</a>, both super useful libraries.</p>

<p>In this app, I have a group of coordinates that need to be rendered as follows:</p>

<ol>
<li><p>When zoomed out, cluster the coordinates into Marker Clusters like so
<a href=""https://i.stack.imgur.com/fY9he.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fY9he.png"" alt=""enter image description here""></a></p></li>
<li><p>When zoomed in, each Marker needs to have </p>

<ol>
<li>A dynamic countdown timer under it</li>
<li>A dynamic SVG countdown clock around it like so
<a href=""https://i.stack.imgur.com/m32Z2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/m32Z2.png"" alt=""enter image description here""></a></li>
</ol></li>
</ol>

<p>For the clustering, I am using the <a href=""https://www.npmjs.com/package/react-leaflet-markercluster"" rel=""nofollow noreferrer"">react-leaflet-markercluster</a> plugin, which works great for showing static content. </p>

<p>But when I need to show any dynamic content within each marker, I have no option of sending in <code>JSX</code>, there's only provision for static HTML as can been seen from the example available <a href=""https://yuzhva.github.io/react-leaflet-markercluster/#marker-popup"" rel=""nofollow noreferrer"">here</a>.</p>

<pre><code>// Template for getting popup html MarkerClusterGroup
// IMPORTANT: that function returns string, not JSX
function getStringPopup(name) {
  return (`
    &lt;div&gt;
      &lt;b&gt;Hello world!&lt;/b&gt;
      &lt;p&gt;I am a ${name} popup.&lt;/p&gt;
    &lt;/div&gt;
  `);
}

// that function returns Leaflet.Popup
function getLeafletPopup(name) {
  return L.popup({ minWidth: 200, closeButton: false })
    .setContent(`
      &lt;div&gt;
        &lt;b&gt;Hello world!&lt;/b&gt;
        &lt;p&gt;I am a ${name} popup.&lt;/p&gt;
      &lt;/div&gt;
    `);
}
</code></pre>

<p>Is there a way to handle this situation? How can I make a JSX marker instead of a static HTML marker?</p>

<p>PS: I have tried using <code>ReactDOM.renderToString</code>already, but it's an ugly hack and involves re-rendering the markers every time.</p>

<p>TIA!!</p>

<p>Here's a sample <a href=""https://www.webpackbin.com/bins/-KxhoIKcuQaFNyL7zivs"" rel=""nofollow noreferrer"">WebpackBin</a> for you to play around with if you have a solution in mind</p>
","1409180","","1409180","","2017-10-30 15:08:42","2017-10-30 15:08:42","Implementing a dynamic JSX element within a marker, using react-leaflet","<javascript><reactjs><leaflet><jsx><react-leaflet>","0","6","1","",""
"50128342","1","","","2018-05-02 06:26:44","","1","50","<p>I am using react router v4 with redux to render some data on the server but i am not able to set the state of the component on the server. Here's my code. Appreciate the Help </p>

<p>heres the server side loadonserver function</p>

<pre><code>loadOnServer({ store, location, routes }).then(() =&gt; {
  const context = {};
  const html = renderToString(
    &lt;Provider store={store}&gt;
      &lt;StaticRouter location={location} context={context}&gt;
        &lt;ReduxAsyncConnect routes={routes} /&gt;
      &lt;/StaticRouter&gt;
    &lt;/Provider&gt;
  );

  // handle redirects
  if(context.url) {
    req.header('Location', context.url)
    return res.send(302)
  }

  // render the page, and send it to the client
  res.send(renderLayout(html, '', store.getState(),ApiData , req.protocol + '://' + req.get('x-forwarded-host')));

  // render the page, and send it to the client
  // can't use until redux-connect works with loadable-components
  // getLoadableState(html).then(pageScripts =&gt;
  //   res.send(renderLayout(html, pageScripts.getScriptTag(), store.getState(), !!(req.user &amp;&amp; req.user.isAdmin)))
  // )
})
.catch(err =&gt; {
  console.log(err);
  res.status(500).end();
});
</code></pre>

<p>ApiData is the data from the server that needs to be set at the server so that the components render out</p>

<p>Heres my index.js</p>

<pre><code>import React from 'react';
import { hydrate } from 'react-dom';
import { createStore, applyMiddleware } from 'redux';
import { Provider } from 'react-redux';
import { BrowserRouter, Route } from 'react-router-dom';
import { ReduxAsyncConnect } from 'redux-connect';
import createHistory from 'history/createBrowserHistory';
import { ConnectedRouter, routerMiddleware, push } from 'react-router-redux';

import routes from './routes';
import reducers from './reducers';

import App from './app';

const initialState = window.__INITIAL_STATE;

const history = createHistory();
const middleware = routerMiddleware(history);

const store = createStore(reducers, initialState, applyMiddleware(middleware));

hydrate(
  &lt;Provider store={store}&gt;
    &lt;ConnectedRouter history={history}&gt;
       &lt;ReduxAsyncConnect routes={routes}/&gt;
    &lt;/ConnectedRouter&gt;
  &lt;/Provider&gt;,
  document.getElementById('app')
);
</code></pre>

<p>Heres my routes.js</p>

<pre><code>import React from 'react';
import App from './app';
import HomePage from './pages/HomePage';

const routes = [{
    component: App,
    routes: [
         {
           path : '/',
           exact: true,
           component: HomePage
         }
    ]
 }];

 export default routes;
</code></pre>

<p>And heres my App.js</p>

<pre><code>import React,  { Component } from 'react';
import PropTypes from 'prop-types';
import { Link } from 'react-router-dom';
import renderRoutes from 'react-router-config/renderRoutes';

import routes from './routes';

import {isBrowser,isServer} from './util/environmentDetection'

class App extends Component {

    constructor(props) {
        super(props);
        if(isServer) {

        } else if(isBrowser &amp;&amp; !this.state) {
             this.state = window.__DATA;
             delete  window.__DATA;
        }
     }
     render() {
         return (
             &lt;div&gt;
               &lt;Link to={'/'}&gt;
                {'Home'}
               &lt;/Link&gt;
               {renderRoutes(routes[0].routes, { initialData : this.state })}
            &lt;/div&gt;
        );
    }
 }

 export default App;
</code></pre>
","6550576","","","","","2018-05-15 17:10:29","How to set state at the server for data from API using react redux","<reactjs><redux>","1","0","","",""
"42517350","1","","","2017-02-28 19:38:13","","1","22","<p>I am using reactjs 15.0.2, but when I add constants in render it keeps adding extra elements around it like below. I want clean html from it.</p>

<p>React output is as below:</p>

<pre><code>&lt;p data-reactid=""49""&gt;
    &lt;!-- react-text: 50 --&gt;Join the
        &lt;!-- /react-text --&gt;&lt;!-- react-text: 51 --&gt;Hello 1&lt;!-- /react-text --&gt;&lt;!-- react-text: 52 --&gt;Testing
    &lt;!-- /react-text --&gt;     
&lt;/p&gt;
</code></pre>

<p>Code is as below:</p>

<pre><code>export default class Test extends React.Component {
render() {
const text1 = 'Hello 1';
return (
    &lt;p&gt;Join the {text1} Tesing&lt;/p&gt;)
}
}
</code></pre>

<p>for server to send html in node I am using code as below:</p>

<pre><code>res.send(`&lt;!doctype html&gt;
  ${ReactDOM.renderToString(&lt;Html assets={webpackIsomorphicTools.assets()} store={store} /&gt;)}`);
</code></pre>

<p>I want clean html here as Join the ""Hello 1 Testing""</p>
","7271616","","","","","2017-02-28 19:49:51","How to remove exta element around the constants added in react 15.0.2","<reactjs>","1","0","","",""
"35419846","1","35464117","","2016-02-15 21:56:32","","1","549","<p>How to pass variable  to child components from react-router on server side.
I want pass some variables to my components which rendered by RoutingContext</p>

<pre><code>import { renderToString } from 'react-dom/server'
import { match, RouterContext } from 'react-router'
import routes from './routes'

serve((req, res) =&gt; {
  match({ routes, location: req.url }, (error, redirectLocation,     renderProps) =&gt; {
    if (error) {
  res.status(500).send(error.message)
    } else if (redirectLocation) {
  res.redirect(302, redirectLocation.pathname + redirectLocation.search)
    } else if (renderProps) {
  res.status(200).send(renderToString(&lt;RouterContext {...renderProps} /&gt;))
    } else {
  res.status(404).send('Not found')
    }
  })
})
</code></pre>
","4303309","","","","","2016-02-18 21:35:39","Passing variable from react-router to child components","<javascript><node.js><reactjs><react-router>","1","0","","",""
"27907357","1","","","2015-01-12 17:17:37","","3","3962","<p>I'm currently starting my first React app with server-side rendering. The problem is that I want to choose the most solid strategy. </p>

<p>What I'm currently trying to do:</p>

<ul>
<li><p>using Swig as template engine for Express app and inserting stringified React component like template variable:</p>

<pre><code>&lt;!doctype html&gt;
&lt;html lang=""en""&gt;
  &lt;head&gt;
     &lt;meta charset=""utf-8""&gt;
     &lt;title&gt;Title&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
     &lt;div id=""react-mount""&gt;{{reactHTML|safe}}&lt;/div&gt;
     &lt;script src=""/build/bundle.js""&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></li>
<li><p>here is the problem of passing props into components on both server-side and client-side:</p></li>
</ul>

<p><strong>server</strong></p>

<pre><code>var Box = require('./src/components/Box.jsx');
function renderify (component, props) {
   var reactHTML = React.renderToString(React.createElement(component, props));
   return {reactHTML: reactHTML};
}

app.get('/', function (req, res) {
   res.render('layout', renderify(Box, {name: 'My Box'}));
});
</code></pre>

<p>This renders on server perfectly, but client doesn't know that I have <code>name</code> prop..</p>

<p><strong>client</strong></p>

<pre><code>var React = require('react');
var Box = require('./components/Box.jsx');

React.render(&lt;Box /&gt;, document.getElementById('react-mount'));
</code></pre>

<p>Which throws me a warning from React and rerenders the page without <code>name</code>.</p>

<hr>

<p>Another question here is routing..  I assume that it's better to render app on server when some route is requested but then I will prefer to have client-side location change when user goes through application..</p>

<p>Does this mean that routes should be duplicated on both client and server?</p>

<hr>

<h3>So what is the best strategy from your experience to render React components on the server?</h3>
","2117550","","","","","2015-08-12 23:08:21","react.js - Server-side rendering and routes strategies","<javascript><node.js><express><render><reactjs>","1","0","","",""
"50235274","1","","","2018-05-08 13:49:32","","0","22","<p>Since I learn the server rendering from Pro MERN Stack which Vasan is the author.
There is a server rendering lesson, he use react-router for server rendering.
If I am going to use react router version 4, where can I find the tutorial or any resources to map convert the following code to react router version 4???, Please help. T_T</p>

<p>renderedPageRouter.jsx</p>

<pre><code>import React from 'react';
import { renderToString } from 'react-dom/server';
import { match, RouterContext } from 'react-router';

import Router from 'express';

import template from './template.js';
import routes from '../src/Routes.jsx';
import ContextWrapper from '../src/ContextWrapper.jsx';

const renderedPageRouter = new Router();

renderedPageRouter.get('*', (req, res) =&gt; {
  match({ routes, location: req.url }, (error, redirectLocation, renderProps) =&gt; {
    if (error) {
      res.status(500).send(error.message);
    } else if (redirectLocation) {
      res.redirect(302, redirectLocation.pathname + redirectLocation.search);
    } else if (renderProps) {
      const componentsWithData = renderProps.components.filter(c =&gt; c.dataFetcher);
      const dataFetchers = componentsWithData.map(c =&gt; c.dataFetcher({
        params: renderProps.params, location: renderProps.location,
        urlBase: 'http://localhost:3000', cookie: req.headers.cookie,
      }));
      Promise.all(dataFetchers).then((dataList) =&gt; {
        let initialState = {};
        dataList.forEach((namedData) =&gt; {
          initialState = Object.assign(initialState, namedData);
        });
        const html = renderToString(
          &lt;ContextWrapper initialState={initialState} &gt;
            &lt;RouterContext {...renderProps} /&gt;
          &lt;/ContextWrapper&gt;
        );
        res.status(200).send(template(html, initialState));
      })
      .catch(err =&gt; {
        console.log(`Error rendering to string: ${err}`);
      });
    } else {
      res.status(404).send('Not found');
    }
  });
});

export default renderedPageRouter;
</code></pre>
","8491066","","","","","2018-05-08 13:49:32","How to do server rendering for react router version 4?","<node.js><reactjs><express><react-router-v4>","0","2","","",""
"42863308","1","42863476","","2017-03-17 17:03:50","","1","422","<p>I'm trying to set up a universal react app with react-router 4.0.0. </p>

<p>Server-side rendering works except for the fact that my Link tags are rendered differently on the server and the client. Here is the error message:</p>

<blockquote>
  <p>Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:</p>

<pre><code>(client) o Furb&lt;/h1&gt;&lt;a href=""./"" data-reactid=""4""
(server) o Furb&lt;/h1&gt;&lt;a href=""/./"" data-reactid=""4
</code></pre>
</blockquote>

<p>I am very new to react-router and react in general, so keep in mind this might be a trivial error in my code. Also, I'm learning as I go along, so, there are probably other clamorous mistakes in my code, sorry in advance.</p>

<p>Looking online I came up with this bug fix that covers a similar problem: <a href=""https://github.com/ReactTraining/react-router/pull/4484"" rel=""nofollow noreferrer"">https://github.com/ReactTraining/react-router/pull/4484</a></p>

<p>However, this patch is included in react-router 4.0.0 (I poked the code and it's indeed fixed). Therefore, my issue cannot be caused by this. </p>

<p>After a lot of tinkering, I suspect my config or an error arising from my limited understanding of what I'm doing. For example, for StaticRouter, I'm using <code>location={req.originalUrl}</code> instead of <code>location={req.url}</code> as <code>req.url</code> always seems to be <code>/</code>, and I'm not sure why.</p>

<p>I'm posting the files I believe relevant below, but if you want to check the full code you may find it here: <a href=""https://github.com/magp/furb/tree/universal"" rel=""nofollow noreferrer"">https://github.com/magp/furb/tree/universal</a></p>

<p>package.json</p>

<pre><code>{
  ""name"": ""furb"",
  ""version"": ""0.0.1"",
  ""description"": ""A boilerplate for Firebase-UniversalRedux-Bootstrap/MaterialUI projects"",
  ""main"": ""app/server.jsx"",
  ""scripts"": {
    ""start"": ""concurrently --kill-others \""npm run start:api\"" \""npm run start:back\"""",
    ""start:back"": ""node app/serverlauncher.js"",
    ""start:api"": ""node api/server.js"",
    ""clean"": ""rimraf static"",
    ""serve:prod"": ""http-server ./static -o -p 3032"",
    ""build:app"": ""NODE_ENV=production webpack --config config/webpack-prod-config.js"",
    ""build"": ""npm run clean &amp;&amp; npm run build:app &amp;&amp; npm run serve:prod"",
    ""test"": ""echo 'NODE_ENV=production mocha './tests/**/*.spec.js' --compilers js:babel-core/register'"",
    ""lint"": ""eslint --config=./.eslintrc app/**/**/*.jsx""
  },
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""git+https://github.com/magp/furb.git""
  },
  ""keywords"": [
    ""Boilerplate"",
    ""React"",
    ""Redux"",
    ""UniversalJS"",
    ""Bootstrap"",
    ""MaterialUI""
  ],
  ""author"": ""magp"",
  ""license"": ""MIT"",
  ""bugs"": {
    ""url"": ""https://github.com/magp/furb/issues""
  },
  ""homepage"": ""https://github.com/magp/furb#readme"",
  ""dependencies"": {
    ""express"": ""^4.15.2"",
    ""history"": ""^4.6.1"",
    ""react"": ""^15.4.2"",
    ""react-dom"": ""^15.4.2"",
    ""react-hot-loader"": ""^3.0.0-beta.6"",
    ""react-router-dom"": ""^4.0.0""
  },
  ""devDependencies"": {
    ""babel-core"": ""^6.24.0"",
    ""babel-loader"": ""^6.4.0"",
    ""babel-preset-es2015"": ""^6.24.0"",
    ""babel-preset-react"": ""^6.23.0"",
    ""concurrently"": ""^3.4.0"",
    ""eslint"": ""^3.17.1"",
    ""eslint-config-airbnb"": ""^14.1.0"",
    ""eslint-plugin-import"": ""^2.2.0"",
    ""eslint-plugin-jsx-a11y"": ""^4.0.0"",
    ""eslint-plugin-react"": ""^6.10.0"",
    ""html-webpack-plugin"": ""^2.28.0"",
    ""http-server"": ""^0.9.0"",
    ""node-sass"": ""^4.5.0"",
    ""rimraf"": ""^2.6.1"",
    ""sass-loader"": ""^6.0.3"",
    ""style-loader"": ""^0.14.0"",
    ""webpack"": ""^2.2.1"",
    ""webpack-dev-middleware"": ""^1.10.1"",
    ""webpack-hot-middleware"": ""^2.17.1""
  }
}
</code></pre>

<p>app/serverlauncher.js</p>

<pre><code>require('babel-register')({
  presets: [ 'es2015', 'react' ]
});

var app = require('./server.jsx');
</code></pre>

<p>app/server.jsx</p>

<pre><code>var path = require('path');
var express = require('express');

var React = require('react');
var ReactDOMServer = require('react-dom/server');
var StaticRouter = require('react-router-dom/StaticRouter').default;
var webpack = require('webpack');

var config = require('../config/webpack-dev-config');
var Routes = require('./routes/Routes.jsx').default;

var app = express();
var compiler = webpack(config);

app.use(require('webpack-dev-middleware')(compiler, {
  noInfo: true,
  publicPath: config.output.publicPath
}));

app.use(require('webpack-hot-middleware')(compiler));

const routes = [
    '/',
    '/about'
];

app.use('*', function (req, res, next) {
  const context = {};
  const componentHTML = ReactDOMServer.renderToString(&lt;StaticRouter context={context} location={req.originalUrl}&gt;&lt;Routes /&gt;&lt;/StaticRouter&gt;);

  const HTML = `
    &lt;!DOCTYPE html&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;meta charset=""utf-8""&gt;
        &lt;title&gt;Static&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;div id=""app""&gt;${componentHTML}&lt;/div&gt;
        &lt;script type=""text/javascript"" src=""/static/source.js""&gt;&lt;/script&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  `;
  res.end(HTML);
});

const PORT = process.env.PORT || 3030;

app.listen(PORT, 'localhost', function(err) {
  if (err) {
    console.log(err);
    return;
  }
  console.log('Listening at http://localhost:3030');
});
</code></pre>

<p>app/routes/Routes.jsx</p>

<pre><code>import React from 'react';
import { Route, Switch } from 'react-router-dom';

import List from '../components/List';
import About from '../components/About';
import NotFound from '../components/NotFound';

import links from '../../api/data/links.json';

const linksarr = Object.keys(links).map(function(k) { return links[k] });

function Routes() {
  return (
    &lt;Switch&gt;
      &lt;Route exact path=""/"" render={props =&gt; (&lt;List links={linksarr} {...props} /&gt;)} /&gt;
      &lt;Route exact path=""/about"" component={About} /&gt;
      &lt;Route component={NotFound} /&gt;
    &lt;/Switch&gt;
  );
}

export default Routes;
</code></pre>

<p>app/components/Layout.jsx</p>

<pre><code>import React from 'react';
import { Link } from 'react-router-dom';

function Layout() {
  return (
    &lt;div&gt;
      &lt;h1&gt;Welcome to Furb&lt;/h1&gt;
      &lt;Link to=""./""&gt;Home&lt;/Link&gt;
      &lt;Link to=""./about""&gt;About&lt;/Link&gt;
      &lt;Link to=""./test""&gt;Test&lt;/Link&gt;
    &lt;/div&gt;
  );
}

export default Layout;
</code></pre>

<p>Excuse the long question and thank you in advance for any help you can provide.</p>
","3158887","","","","","2017-03-17 17:12:45","StaticRouter renders a leading slash for <Link> tags [react-router 4.0.0]","<javascript><reactjs><express><react-router><react-router-v4>","1","1","","",""
"43058684","1","","","2017-03-28 00:33:28","","6","7920","<p>I am trying server side rendering using react-router 4. I am following the example provided here <a href=""https://reacttraining.com/react-router/web/guides/server-rendering/putting-it-all-together"" rel=""noreferrer"">https://reacttraining.com/react-router/web/guides/server-rendering/putting-it-all-together</a></p>

<p>As per the example on server we should use <code>StaticRouter</code>. When I import as per the example I am seeing StaticRouter as undefined</p>

<pre><code>import {StaticRouter} from 'react-router';
</code></pre>

<p>After doing some research online I found I could use <code>react-router-dom</code>. Now my import statement looks like this.</p>

<pre><code>import {StaticRouter} from 'react-router-dom';
</code></pre>

<p>However when I run the code I am getting <code>Invariant Violation: Browser history needs a DOM</code> in the browser.</p>

<p>my server.js file code</p>

<pre><code>....
app.get( '*', ( req, res ) =&gt; {
  const html = fs.readFileSync(path.resolve(__dirname, '../index.html')).toString();
  const context = {};
  const markup = ReactDOMServer.renderToString(
    &lt;StaticRouter location={req.url} context={context} &gt;
      &lt;App/&gt;
    &lt;/StaticRouter&gt;
  );

  if (context.url) {
    res.writeHead(302, {
      Location: context.url
    })
    res.end();
  } else {
      res.send(html.replace('$react', markup));
  }
} );
....
</code></pre>

<p>And my client/index.js code</p>

<pre><code>....
ReactDOM.render((
  &lt;BrowserRouter&gt;
    &lt;App /&gt;
  &lt;/BrowserRouter&gt;
), root);
....
</code></pre>

<hr>

<p><strong>Update v1</strong>
Reduced my example to a bear minimum and still getting the same error.</p>

<p><strong>clientIndex.js</strong></p>

<pre><code>import ReactDOM from 'react-dom'
import { BrowserRouter } from 'react-router-dom'
import App from '../App'

ReactDOM.render((
  &lt;BrowserRouter&gt;
    &lt;App/&gt;
  &lt;/BrowserRouter&gt;
), document.getElementById('app'))
</code></pre>

<p><strong>serverIndex.js</strong></p>

<pre><code>import { createServer } from 'http'
import React from 'react'
import ReactDOMServer from 'react-dom/server'
import { StaticRouter } from 'react-router'
import App from '../App'

createServer((req, res) =&gt; {
  const context = {}

  const html = ReactDOMServer.renderToString(
    &lt;StaticRouter
      location={req.url}
      context={context}
    &gt;
      &lt;App/&gt;
    &lt;/StaticRouter&gt;
  )

res.write(`
  &lt;!doctype html&gt;
  &lt;div id=""app""&gt;${html}&lt;/div&gt;
`)
res.end()
}).listen(3000);
</code></pre>

<p><strong>App.js</strong></p>

<pre><code>import React from 'react';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import routes from ""./client/routes"";
const App = ( ) =&gt; (
  &lt;Router&gt;
    &lt;Route path=""/"" exact render={( props ) =&gt; ( &lt;div&gt;Helloworld&lt;/div&gt; )} /&gt;
  &lt;/Router&gt;
)

export default App;
</code></pre>
","7776961","","7776961","","2017-03-28 02:56:48","2017-07-11 19:52:24","react-router 4 - Browser history needs a DOM","<react-router-v4>","1","3","3","",""
"50130396","1","","","2018-05-02 08:37:38","","0","38","<p>I try to get resultsState by call react-instantsearch's <code>findResultsState</code> API, But can't integrate with the component already connected with redux store. Error will show like below.</p>

<blockquote>
  <p>Invariant Violation: Could not find ""store"" in either the context or props of component . Either wrap the root component in a <code>&lt;Provider&gt;</code>, or explicitly pass ""store"" as a prop to component</p>
</blockquote>

<p>Call api like this </p>

<pre><code>findResultsState(
  component: Search, {
  searchState
});
</code></pre>

<p>My component looks like this. It is composed with some HOCs, and some HOC will connect with redux store through <code>react-redux</code> connect function.</p>

<pre><code>Search = compose(
  intlWrapper,
  withModal,
  withGlobalAlert,
  withMainLayout,
  injectIntl,
)(Search);
</code></pre>

<p>Server-side Provider will render like this</p>

<pre><code>const appString = renderToString(
  &lt;Provider store={store}&gt;
    &lt;StaticRouter location={req.url} context={ context }&gt;
      &lt;Main /&gt;
    &lt;/StaticRouter&gt;
  &lt;/Provider&gt;
);
</code></pre>

<p>Client-side:</p>

<pre><code>const store = configureStore(history, 
window.__APP_INITIAL_REDUX_STATE__);

// Render component
hydrate(
  &lt;Provider store={store}&gt;
    &lt;ConnectedRouter history={history}&gt;
      &lt;Main /&gt;
    &lt;/ConnectedRouter&gt;
  &lt;/Provider&gt;,
  document.getElementById('root'),
);
</code></pre>

<p>Main</p>

<pre><code>&lt;Switch&gt;
  { routes.map( route =&gt; &lt;Route key={ route.path } { ...route } /&gt;)}
&lt;/Switch&gt;
</code></pre>

<p>routes</p>

<pre><code>export default [
  {
    path: '/search',
    component: Search,
  },{
   ...
  }
  ...
];
</code></pre>
","9729218","","9729218","","2018-05-02 09:45:13","2018-05-02 09:45:13","How to get resultsState of react-instantsearch correctly with server-side render and integration with redux store","<javascript><reactjs><redux><serverside-rendering><react-instantsearch>","0","5","","",""
"42460925","1","","","2017-02-25 19:57:53","","1","262","

<p>While studying Reactjs Server Side Rendering, on a node Express web server, and Webpack middleware, I'm finding hard to understand why the root route ""/"" matching component is not passed into the html, while nested ""/foobar"" works fine (and you see the parents too).</p>

<p>If the webpack middleware's removed, the path ""/"" returns the match reactjs route.</p>

<p>Please find the source below, have in mind that there's a lot of testing and seeing and it's not quality code.</p>

<p>The Webpack development configuration file:</p>

<pre class=""lang-js prettyprint-override""><code>var path = require('path')
var webpack = require('webpack')
var HtmlWebpackPlugin = require('html-webpack-plugin')

module.exports = {
  devtool: 'inline-source-map',
  context: path.resolve(__dirname, 'src'),
  entry: [
    'react-hot-loader/patch',
    'webpack/hot/dev-server',
    'webpack-hot-middleware/client',
    'babel-polyfill',
    './js/index.js'
  ],
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: [
          'babel-loader'
        ]
      },
      {
        test: /\.scss$/,
        exclude: /node_modules/,
        use: [
          'style-loader',
          'css-loader',
          'sass-loader'
        ]
      },
      {
        test: /\.(ttf|eot|svg|woff(2)?)(\?[a-z0-9=&amp;.]+)?$/,
        use: [
          'file-loader'
        ]
      },
      {
        test: /\.(jpg|png|gif|svg)$/i,
        use: [
          'file-loader'
        ]
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({
      inject: true,
      template: path.join(__dirname, '/src/index.html'),
      filename: 'index.html'
    }),
    new webpack.DefinePlugin({
      'process.env': {
        'NODE_ENV': JSON.stringify('development')
      }
    }),
    // enable HMR globally
    new webpack.HotModuleReplacementPlugin(),
    // prints more readable module names in the browser console on HMR updates
    new webpack.NamedModulesPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  ]
}
</code></pre>

<p>The Reactjs Router related components.</p>

<p>The Rootjs:</p>

<pre class=""lang-js prettyprint-override""><code>import React from 'react'
import { Router } from 'react-router'
import { Provider } from 'react-redux'
import routes from './routes'

const Root = ({store, history}) =&gt; {
  return (
    &lt;Provider store={store}&gt;
      &lt;Router history={history}&gt;
        { routes }
      &lt;/Router&gt;
    &lt;/Provider&gt;
  )
}

export default Root
</code></pre>

<p>The Routes:</p>

<pre class=""lang-js prettyprint-override""><code>import React from 'react'
import { Route } from 'react-router'
import App from './containers/app'
import Foobar from './containers/foobar'

export default (
  &lt;Route path='/' component={App}&gt;
    &lt;Route path='foobar' component={Foobar} /&gt;
  &lt;/Route&gt;
)
</code></pre>

<p>The Server.js:</p>

<pre class=""lang-js prettyprint-override""><code>import express from 'express'
import path from 'path'
import superagent from 'superagent'
import chalk from 'chalk'

import React from 'react'
import { renderToString } from 'react-dom/server'
import { Provider } from 'react-redux'
import { match, RouterContext } from 'react-router'
import routes from './src/js/routes'

import configureStore from './src/js/store'
import App from './src/js/containers/app'

const app = express()
const router = express.Router()
const port = process.env.PORT ? process.env.PORT : 3000
var serverInstance = null
var dist = path.join(__dirname, ('dist' + (process.env.NODE_ENV ? '/' + process.env.NODE_ENV : 'staging')))
var config = null
var fs = require('fs')
var htmlTemplateString = ''

/**
 * Environment settings
 */
if (['staging', 'production'].indexOf(process.env.NODE_ENV) &gt; -1) {
  console.log('break 1')
  dist = path.resolve(__dirname, process.env.NODE_ENV)
  config = require('../config')
  htmlTemplateString = fs.readFileSync(dist + '/index.html', 'utf-8')
} else {
  console.log('break 2')
  config = require('./config')
  htmlTemplateString = fs.readFileSync('./dist/production/index.html', 'utf-8')
}

/**
 * Process error handling
 */
process.on('uncaughtException', (err) =&gt; {
  throw err
})

process.on('SIGINT', () =&gt; {
  serverInstance.close()
  process.exit(0)
})

/**
 * The Cross origin resource sharing rules
 */
app.use((req, res, next) =&gt; {
  res.setHeader('Access-Control-Allow-Origin', '*')
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')
  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')
  res.setHeader('Access-Control-Allow-Credentials', true)
  next()
})

/**
 * Health check
 */
app.use('/healthcheck', (req, res) =&gt; {
  res.json({
    'env': {
      'NODE_ENV': process.env.NODE_ENV
    }
  })
  res.end()
})

router.use('/api/test', (req, res) =&gt; {
  superagent
    .get('https://jsonip.com/')
    .end((err, response) =&gt; {
      if (err) {
        console.log('api test err', err)
      }
      res.send(response.body)
    })
})

// HMR only in development
if (process.env.NODE_ENV !== 'production' &amp;&amp; process.env.NODE_ENV !== 'staging') {
  console.log('Development environment: Starting webPack middleware...')

  const webpack = require('webpack')
  const webpackHotMiddleware = require('webpack-hot-middleware')
  const webpackDevConfig = require('./webpack.dev.config')
  const compiler = webpack(webpackDevConfig)

  var webpackDevMiddleware = require('webpack-dev-middleware')
  var devMiddleware = webpackDevMiddleware(compiler, {
    noInfo: true,
    publicPath: webpackDevConfig.output.publicPath,
    stats: {
      colors: true
    }
  })

  router.use(devMiddleware)

  router.use(webpackHotMiddleware(compiler, {
    log: console.log
  }))

  // Production needs physical files! (built via separate process)
  router.use('/assets', express.static(dist))

  // any other is mapped here
  router.get('*', (req, res, next) =&gt; {
    console.log('req.url: ', req.url)
    match({ routes, location: req.url }, (err, redirect, props) =&gt; {
      if (props) {
        const preloadedState = {'foobar': 1}
          // Create a new Redux store instance
        const store = configureStore(preloadedState)
          // Render the component to a string
        const myAppHtml = renderToString(&lt;RouterContext {...props} /&gt;)

          // Grab the initial state from our Redux store
        const finalState = store.getState()
          // Send the rendered page back to the client
        let html = htmlTemplateString.replace('&lt;div id=""app""&gt;', '&lt;div id=""app""&gt;' + myAppHtml)

          // Paste the state into the html
        const preloadedStateScript = `&lt;script&gt;window.__PRELOADED_STATE__ = ${JSON.stringify(finalState).replace(/&lt;/g, '\\x3c')}&lt;/script&gt;`
        html = html.replace('&lt;/head&gt;', preloadedStateScript)
        res.send(html)
      } else {
        res.status(404).send('Not found')
      }
    })
  })
}

app.disable('x-powered-by')

app.use('/', router)

serverInstance = app.listen(port, (error) =&gt; {
  if (error) {
    console.log(error) // eslint-disable-line no-console
  }
  console.log(chalk.green('[' + config.build_name + '] listening on port ' + port + '!'))
})
</code></pre>
","284693","","3708596","","2017-02-25 20:29:26","2017-02-25 22:49:39","The root path ""/"" does not match the reactjs declared route on server side rendering, when webpack middleware is used","<reactjs><express><webpack><react-router><isomorphic-javascript>","1","0","","",""
"43225643","1","43229340","","2017-04-05 08:20:15","","1","99","<p>I'm using create-react-app in my latest project and it's great! Now I'm facing one issue that I'm not sure how to solve properly.</p>

<p>I've created app using redux for my state managment, and that all is working well.</p>

<p>Now I don't have much experiance with server side renderin in React, but for my next feature I'll need to take one of the existing / working react components (that are connected to redux store) and render it on server that comes with create-react-app. The reason why I wanna do this is to be able to use some libs like pdf generators and simillar to be able to print out some of them (also some other stuff but that's the basic).</p>

<p>First thing I'm confused with, since I don't want to render everyting on server, what's the best / correct way (for development) to run webpack-dev server and node server that will do all those taks I mentioned above in parallel instead of just changing it's default port to let's say 8000, and run it manually?</p>

<p>Secound, should I be able to just use ReactDOMServer.renderToString on that existing component on server or there is something else that will complicate stuff (I know I'll need to add babel on server definitaly)?</p>
","2458731","","","","","2018-02-19 08:30:33","Create-react-app render component on server","<reactjs><express><redux>","2","1","","",""
"34941646","1","34942231","","2016-01-22 07:54:12","","0","275","<p>I render server and client side with same jsx. I need some element only have html, and do not need data-reactid. (e.g. A pure html jsx layout has some dynamic variable but do not need data-reactid).</p>

<p>And i except i can reuse the server side render dom which contains data-reactid, and do not need rerender the view.</p>

<p>The other element has data-reactid which can do not need rerender by reactjs. 
Cannot use <code>shouldComponentUpdate</code> because 'renderToString' method do not call <code>shouldComponentUpdate</code>.</p>

<p>I don't except i should render two element with different function( e.g. renderToStaticMarkup, renderToString) and combine it because the element could be include by many element. Render split and combine could cause mistake when element is much more.</p>

<p>Here is my fantasy:</p>

<p>In this case, i want {this.props.children} have data-reactid but the outside html and budy (DefaultLayout) do not.</p>

<pre><code>class DefaultLayout extends  React.Component{   
        if (typeof window !== 'undefined') {
            return (
                &lt;div&gt;{this.props.children}&lt;/div&gt;
            );
        } 
        return (
        &lt;html&gt;
            &lt;head&gt;
            &lt;/head&gt;
            &lt;body&gt;
                &lt;div id=""container"" className='container'&gt;
                    &lt;div&gt;{this.props.children}&lt;/div&gt;
                &lt;/div&gt;
                &lt;script src='/js/index.js'type='text/javascript'&gt;&lt;/script&gt;
            &lt;/body&gt;
        &lt;/html&gt;
        );
    }
};
DefaultLayout.noNeedDiffCompoment = true;
export default DefaultLayout;
</code></pre>

<p>or a new pure html Compoment</p>

<pre><code>class DefaultLayout extends  React.PureHtmlComponent{    

        if (typeof window !== 'undefined') {
            return (
                &lt;div&gt;{this.props.children}&lt;/div&gt;
            );
        }
        return (
        &lt;html&gt;
            &lt;head&gt;
            &lt;/head&gt;
            &lt;body&gt;
                &lt;div id=""container"" className='container'&gt;
                    &lt;div&gt;{this.props.children}&lt;/div&gt;
                &lt;/div&gt;
                &lt;script src='/js/index.js'type='text/javascript'&gt;&lt;/script&gt;
            &lt;/body&gt;
        &lt;/html&gt;
        );
    }
};
export default DefaultLayout;
</code></pre>

<p>and i can use this layout easly and not error in client side and server side.</p>

<pre><code>class Somepage extends  React.Component {
    constructor(props) {
        super(props);
    }

    render(){
        return (
            &lt;DefaultLayout&gt;
                &lt;h1&gt;Hello world&lt;/h1&gt;
            &lt;/DefaultLayout&gt;
        );
    }
};
</code></pre>

<p>If i write as above, the render function can auto swap render function to render elements.</p>

<p>Is there any graceful solution like this?</p>
","5824846","","5824846","","2016-01-22 09:26:08","2017-01-24 08:54:14","Is there reactjs have auto switch render? (renderToStaticMarkup, renderToString)","<javascript><reactjs>","1","0","1","",""
"28036600","1","28036862","","2015-01-20 02:00:21","","2","955","<p>I am working on a little boilerplate project to do server-side rendering with ReactJS using node &amp; express.</p>

<p>I would like to know how to identify when the <code>Handler</code> variable in my callback represents the <code>NotFound</code> factory so I can throw a <strong>404 error</strong> with express. Something like: <code>res.status(404)</code></p>

<pre><code>router.run(function(Handler) {

    // HOW TO KNOW `Handler` corresponds to `NotFound`?
    // I WANT TO USE SOMETHING LIKE `res.status(404)` HERE...

    // Render React to a string, passing in our fetched tweets
    var markup = React.renderToString(
        Handler(state)
    );

    // Render our 'home' template
    res.render('index', {
        markup: markup, // Pass rendered react markup
        state: JSON.stringify(state) // Pass current state to client side
    });
});
</code></pre>

<p>If you want full visibility of the file, feel free to visit its page on github:
<a href=""https://github.com/sergiocruz/react-boilerplate/blob/master/server.js"" rel=""nofollow noreferrer"">https://github.com/sergiocruz/react-boilerplate/blob/master/server.js</a></p>

<p>Also feel free to browse through the whole project here if you're curious about it: <a href=""https://github.com/sergiocruz/react-boilerplate"" rel=""nofollow noreferrer"">https://github.com/sergiocruz/react-boilerplate</a></p>
","1354614","","7600492","","2018-07-13 10:09:51","2018-07-13 10:09:51","How to identify react-router Handler is NotFound right before it goes to the view?","<javascript><reactjs><react-router><isomorphic-javascript>","1","0","0","",""
"34408059","1","34408178","","2015-12-22 03:37:18","","7","5918","<p>I've been trying to figure out how to render react on the server (node/express) and finally found a simple enough tutorial to understand what's going on. But now, after setting everything up, I'm getting an error in the <code>React.render</code> method:</p>

<p>here's my component file:</p>

<pre><code>var React = require('react');
var box = React.createClass({
    render: function() {
        return (
            &lt;div style='padding: 10px'&gt;
                this.props.text
            &lt;/div&gt;
        );
    }
});

React.render(&lt;box text='testing server side'/&gt;, document.body);
module.exports = box;
</code></pre>

<p>I get an error when I run <code>npm start</code>:</p>

<blockquote>
  <p>document is not defined</p>
</blockquote>

<p>how do I get around this? do I need or not need the render method?</p>

<p>to give more context, this <code>box</code> component is being required by another component:</p>

<pre><code>var React = require('react');
var Box = require('../react-jsx/box.js'); //this is the box component
var Component = React.createClass({
    render: function() {
        return (
            &lt;html&gt;
                &lt;head&gt;
                    &lt;title&gt;
                        React Server Rendering
                    &lt;/title&gt;
                &lt;/head&gt;
                &lt;body&gt;
                    &lt;Box text='testing'/&gt;
                    &lt;script src=""public/bundle.js""&gt;&lt;/script&gt;
                &lt;/body&gt;
            &lt;/html&gt;
        );
    }
});

module.exports = Component;
</code></pre>

<p>and this is all being used in index.js</p>

<pre><code>require('node-jsx').install();
var React = require('react');
var Component = require('../custom-modules/test-react-server-module.js');
var express = require('express');
var router = express.Router();

router.get('/react', function(req, res, next) {
  var markup = React.renderToString(Component());
  res.send(markup);
});

module.exports = router;
</code></pre>

<p>and if I remove the render method I get this error in the browser:</p>

<blockquote>
  <p>Cannot read property '__reactAutoBindMap' of undefined</p>
</blockquote>

<p>I saw some people saying that may be due to the jsx transformer being old, but I think I have the latest version </p>

<p>I'm out of ideas</p>
","2939522","","2939522","","2015-12-22 03:42:18","2017-10-10 07:58:50","rendering react on server","<node.js><express><reactjs>","3","0","3","",""
"43440326","1","","","2017-04-16 18:00:11","","3","2216","<p>maybe this issue is because the new version of the react router have few days, but I have been reading about this issue and I want to clarify what is going on. I am using the last version of the react router and I want to do the routing through redux. I follow the steps that are listed in the documentation of the redux router module: <a href=""https://github.com/ReactTraining/react-router/tree/master/packages/react-router-redux"" rel=""nofollow noreferrer"">https://github.com/ReactTraining/react-router/tree/master/packages/react-router-redux</a>, but I receive this error when I make the implementation: (I know that the issue is in the server render)</p>

<pre><code>Invariant Violation: Browser history needs a DOM
</code></pre>

<p>Here is my code (the important parts):</p>

<p><strong>server.js</strong></p>

<pre><code>import { Provider } from 'react-redux';
import store from './store';

lisaApp.get('*', function (req, res) {
  const context = {};

  const html = renderToString(
    &lt;Provider store={store}&gt;
      &lt;MuiThemeProvider muiTheme={getMuiTheme()}&gt;
        &lt;StaticRouter location={req.url} context={context}&gt;
          &lt;Routes /&gt;
        &lt;/StaticRouter&gt;
      &lt;/MuiThemeProvider&gt;
    &lt;/Provider&gt;,
  );

  res.setHeader('Content-Type', 'text/html');

  if (context.url) {
    res.writeHead(301, {
      Location: context.url,
    });
    res.end();
  }

  res.write(
    renderToStaticMarkup(&lt;Layout title={req.title} content={html} /&gt;),
  );

  res.end();
}
</code></pre>

<p><strong>client.js</strong></p>

<pre><code>import { Provider } from 'react-redux';
import createHistory from 'history/createBrowserHistory';
import { BrowserRouter } from 'react-router-dom';
import store from './store';

render((
  &lt;Provider store={store}&gt;
    &lt;MuiThemeProvider muiTheme={getMuiTheme()}&gt;
      &lt;BrowserRouter history={createHistory()}&gt;
        &lt;Routes /&gt;
      &lt;/BrowserRouter&gt;
    &lt;/MuiThemeProvider&gt;
  &lt;/Provider&gt;),
  document.getElementById('app'));
</code></pre>

<p><strong>store.js</strong></p>

<pre><code>import { createStore, combineReducers, applyMiddleware } from 'redux'
import createHistory from 'history/createBrowserHistory'
import { ConnectedRouter, routerReducer, routerMiddleware, push } from 'react-router-redux'
import thunk from 'redux-thunk';

import reducer from './reducer';

const history = createHistory()
const middlewareHistory = routerMiddleware(history)

const store = createStore(
  combineReducers({
    reducer,
    router: routerReducer
  }),
  applyMiddleware(
    middlewareHistory,   
    thunk
  )
);

export default store;
</code></pre>

<p><strong>component.js (dispatch)</strong></p>

<pre><code>const mapDispatchToProps = dispatch =&gt; {
  return {
    onNavigateTo(dest) {
      dispatch(push(dest));
    }
  };
};
</code></pre>

<p>Obviously the dispatch, from my component never is called. Anyone can me clarify me where I am wrong? or maybe this feature is not implemented yet in the react router redux module? In advance Thanks.</p>
","7566041","","","","","2017-05-20 15:07:12","New version react router doesn't work with redux","<javascript><reactjs><redux><react-router>","2","0","1","",""
"34945507","1","","","2016-01-22 11:19:58","","0","629","<p><strong>Background</strong></p>

<p>I am using <a href=""https://github.com/kriasoft/react-starter-kit"" rel=""nofollow"">React starter kit</a> for my react application. Inside the <a href=""https://github.com/kriasoft/react-starter-kit/blob/master/src/server.js"" rel=""nofollow"">server.js</a> they are rendering component using <code>renderToStaticMarkup</code> and then passing it to <code>Html</code> component which include it using <code>dangerouslySetInnerHTML</code> as you can see <a href=""https://github.com/kriasoft/react-starter-kit/blob/master/src/components/Html/Html.js#L52"" rel=""nofollow"">here</a></p>

<p>I am trying to create a unit test for my <code>AboutUs</code> page. But because it was rendered as string inside the html component, the unit test does not work for it because it is unable to find this component</p>

<p><strong>UNIT TEST</strong></p>

<pre><code>/*REACT*/
var React = require('react');
import ReactDOM from 'react-dom/server';
var TestUtils = require('react-addons-test-utils');

/*Components*/
var AboutUsPage = require('../../src/components/AboutUsPage');
var App = require('../../src/components/App');
var Html = require('../../src/components/Html');

/*UNIT TESTING*/
import sd from 'skin-deep';
var expect = require(""chai"").expect;

describe('AboutUsPage component', function(){
  let tree;
  let aboutElement;
  before('render and locate element', function() {
    const data = { title: '', description: '', css: '', body: '' };
    const css = [];
    const context = {
      onInsertCss: value =&gt; css.push(value),
      onSetTitle: value =&gt; data.title = value,
      onSetMeta: (key, value) =&gt; data[key] = value,
      onPageNotFound: () =&gt; statusCode = 404,
    };
    data.body = ReactDOM.renderToString(&lt;App context={context}&gt;&lt;AboutUsPage /&gt;&lt;/App&gt;);
    data.css = css.join('');

    tree = sd.shallowRender(&lt;Html {...data} /&gt;);
    aboutElement = tree.dive(['App','AboutUsPage']); //could not find App or AboutUsPage components
  });

  it('it should have text hi""', function() {
    expect(tree.subTree('.htmlHead').text()).to.equal(""hi""); //pass because it was in html component
  });
  it('it should have text hello""', function() {
    expect(aboutElement.subTree('.aboutHead').text()).to.equal(""hello""); //fail because it was in aboutus component
  });
});
</code></pre>

<p>I am using <code>mocha</code>, <code>chai</code> &amp; <code>skin-deep</code> for shallow rendering.</p>

<p>So how to write a unit test for the component which was rendered as string?</p>
","875048","","875048","","2016-01-22 13:01:39","2016-03-23 09:23:47","React renderToString component unit testing","<javascript><node.js><unit-testing><reactjs><mocha>","1","0","","",""
"44044864","1","","","2017-05-18 10:10:01","","1","329","<p>Is there anyway to debug React components ( developed with ES6 and babel ) which are rendered on <strong>server side</strong> with the help of asp.net core and Microsoft.AspNetCore.SpaServices ?</p>

<p>Here is my server boot file</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>import * as React from 'react';
import { Provider } from 'react-redux';
import { renderToString } from 'react-dom/server';
import { match, RouterContext } from 'react-router';
import createMemoryHistory from 'history/lib/createMemoryHistory';
import { createServerRenderer, RenderResult } from 'aspnet-prerendering';
import Footer from ""./components/Footer""
import store from ""./redux/store""

export default createServerRenderer(params =&gt; {
    return new Promise((resolve, reject) =&gt; {
        // Build an instance of the application
        const app = (
            &lt;Provider store={store}&gt;
                &lt;Footer /&gt;
            &lt;/Provider&gt;
        );

        // Perform an initial render that will cause any async tasks (e.g., data access) to begin
        renderToString(app);

        // Once the tasks are done, we can perform the final render
        // We also send the redux store state, so the client can continue execution where the server left off
        params.domainTasks.then(() =&gt; {
            resolve({
                html: renderToString(app),
                globals: { initialReduxState: store.getState() }
            });
        }, reject); // Also propagate any errors back into the host application
    });
});</code></pre>
</div>
</div>
</p>

<p>And here is my footer.js file</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>import React from ""react""
import { GetFooter } from ""../redux/actions/footerActions""
import { connect } from ""react-redux""
import { bindActionCreators } from 'redux'

class Footer extends React.Component {
    constructor() {
        super();
    }

    render() {
        if (this.props === null || this.props.footer === undefined || Object.keys(this.props.footer).length === 0)
            return (&lt;div&gt;Loading&lt;/div&gt;)
        else
            return (
                &lt;div id=""G5"" className=""row-fluid fh-Footer""&gt;
                    &lt;div id=""G5C1"" className=""span12 ""&gt;
                        &lt;div dangerouslySetInnerHTML={{ __html: this.props.footer }} /&gt;
                    &lt;/div&gt;
                &lt;/div&gt;)
    }
}

const mapStateToProps = (state) =&gt; {
    console.log(""footer mapState"", state);
    return {
        footer: state.footer.footer
    }
}


export default connect(mapStateToProps, GetFooter)(Footer)</code></pre>
</div>
</div>
</p>

<p>I want to debug my Footer component but the breakpoints never get hit.</p>

<p>P.S: The render function from footer gets called as it is rendering properly.</p>
","5571434","","","","","2017-05-18 10:10:01","asp.net core and react debugging","<asp.net><reactjs><debugging><asp.net-core><es6-class>","0","1","0","",""
"44049640","1","","","2017-05-18 13:50:09","","1","167","<p>Here is my problem,</p>

<ol>
<li>I have a front server (apache or nginx) and had some configs like proxy_pass ""iamurl/server_render/"" to ""backend.iamurl.com:3000/"".</li>
<li>I have a server rendering react-router programme running on the ""backend.iamurl.com:3000"" server. (react ,react-router, koa2 and redux).</li>
<li>When I run it on the client side everything is right.</li>
<li>When I run it on the server side, at the first time the request on the server (koa2),i get ctx.url = / so the router matched. But when renderToString() finish and the client had received the response, the location.path is ""/server_render"", so react-router does't render what i want.</li>
</ol>

<p>I know the problem is different path on the client- and server-side, but I think this situation(using proxy) is very common in the big company. How can I run correct when the browser received the server rendering response?</p>

<p>I am looking for everyone's idea.</p>

<p>my routes code (share between client and server side)</p>

<pre><code>    &lt;Route path='/' component={Connector}&gt;
        &lt;Route component={BaseLayout}&gt;
            &lt;IndexRoute components={Home} onEnter={onRouteChange.bind(this, 'home')}/&gt;
            &lt;Route path=""articleDetail/:id"" components={ArticleDetail} onEnter={onRouteChange.bind(this, 'home')}/&gt;
            &lt;Route path=""about"" components={About} onEnter={onRouteChange.bind(this, 'about')}/&gt;
            &lt;Route path=""joinUs"" components={JoinUs} onEnter={onRouteChange.bind(this, 'JoinUs')}/&gt;
        &lt;/Route&gt;
    &lt;/Route&gt;
</code></pre>

<p>here is my server rendering code</p>

<pre><code>async function serverRender(ctx, next, renderProps) {
    return new Promise((resolve, reject) =&gt; {
        fetchArticlesAPI({API_URL, page: 1}, apiResult =&gt; {
            const homeReducer = {
                ""home"": {
                    fetched: true,
                    data: apiResult.dataList,
                    times: 1,
                    page: 1
                }
            };
            const preloadedState = {""home"": homeReducer.home};
            const store = createStore(rootReducer, preloadedState);

            const html = renderToString(
                &lt;Provider store={store}&gt;
                    &lt;RouterContext {...renderProps} /&gt;
                &lt;/Provider&gt;
            );

            const finalState = store.getState();
            const finalStateToClient = JSON.stringify(finalState).replace(/&lt;/g, '\\x3c');


            const body = ctx.render('index', {
                title: ""盘古首页（同构）"",
                dev: argv.env === 'development',
                finalStateToClient,
                html
            });
            resolve(body);
        });
    });
}

export default async (ctx, next) =&gt; {
    const {redirectLocation, renderProps} = await _match({routes: routes, location: ctx.url});

    if (redirectLocation) {
        ctx.redirect(redirectLocation.pathname + redirectLocation.search)
    } else if (renderProps) {
        await serverRender(ctx, next, renderProps)
    } else {
        await next()
    }

}
</code></pre>
","1705643","","2311047","","2017-05-18 16:18:35","2017-05-18 16:18:35","client- and server-side route are different when using react-router server rendering behind proxy","<reactjs><proxy><react-router><single-page-application><server-rendering>","0","0","","",""
"42472246","1","42473514","","2017-02-26 18:11:45","","2","1340","<p>Just to make it clear, I'm using the MongoDB, Express, React and Node stack.</p>

<p>I'm trying to learn react.js right now. I got the basics right and I am able to code a simple react app with a router. I've also tried server-side rendering a simple react app and it also works perfectly. However, I'm kind of stuck now that I want to make a full app with a rest api and server-side rendering. </p>

<p>1) I don't know how I should go about separating the api and the react code in the server file. Would starting off by listing the api calls and then do the server-side rendering work?
Like so:</p>

<pre><code>app.get('/api/whatever', function(req, res) {
    //get whatever
});
app.get('*', function(req, res) {
    //math routes and renderToString React
});
</code></pre>

<p>2) Also, the reason I couldn't even test the above, is that when I try to run the server with nodemon it throws an error because it doesn't understand the react code, how should I go about this? Should I somehow configure nodemon to read es6 or ignore it or configure webpack to run the express server ?</p>

<p>3) The final question that could clear this whole story quite easily. I've tried finding an answer but got many conflicting ones instead. Are the google crawlers capable of crawling a React app? I'm learning server-side rendering for SEO, is that all really necessary?</p>

<p>Sorry for the long question, looking forward to reading your answers.</p>
","5266516","","","","","2017-02-26 20:04:37","How to render react on server-side with an api?","<rest><reactjs><express><serverside-rendering><mern>","1","4","3","",""
"43086676","1","","","2017-03-29 07:10:01","","5","150","<p>I have a React Server Side rendered component with <code>img</code> tag. I want to attach an <code>onload</code> event listener on the image tag and made the component like below:</p>

<pre><code>render () {
  return (
    &lt;img onLoad={() =&gt; { console.log('Image loaded'); }} src='/abc.jpg'/&gt;
  )
}
</code></pre>

<p>Ideally React's <code>renderToString</code> method should have generated an HTML template like below:</p>

<pre><code>&lt;img onload='function () { console.log('Image loaded'); }' src='/abc.jpg' /&gt;
</code></pre>

<p>but it doesn't. What am I missing? I checked there was a similar issue <a href=""https://github.com/reactjs/React.NET/issues/209"" rel=""noreferrer"">here</a> but with no solution</p>
","3878940","","","","","2017-03-29 08:35:03","Why react server side rendering strips event handlers?","<javascript><reactjs><serverside-rendering>","1","0","","",""
"42953629","1","42953892","","2017-03-22 13:51:45","","2","1802","<p>I render react component on server and when go to route get error message: </p>

<p><a href=""https://i.stack.imgur.com/kqq9N.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/kqq9N.png"" alt=""enter image description here""></a></p>

<pre><code>  const renderToString = ReactDOMServer.renderToString
  const fac = React.createFactory(React.createClass({
    render: function() { 
      return (
        &lt;Provider store={store}&gt;
          &lt;StaticRouter location={location} context={routeContext}&gt;
            &lt;App /&gt;
          &lt;/StaticRouter&gt;
        &lt;/Provider&gt;
      )
  }}))

  const appHtml = renderToString(fac())
</code></pre>
","5763321","","5763321","","2017-03-22 13:57:23","2017-03-22 14:02:37","ReactDOMServer.renderToString is not a function","<javascript><node.js><reactjs><react-server>","1","6","1","",""
"34148061","1","","","2015-12-08 04:33:30","","2","421","<p>I have a react component. <code>&lt;myFooter&gt;</code>. It is a simple footer.</p>

<pre><code>import React from 'react';
import './my-footer.scss';

export default class myFooter extends React.Component {
  render() {
    return (
    &lt;footer className=""col-xs-12""&gt;
      hello !
    &lt;/footer&gt;
    );
  }
}
</code></pre>

<p>I want to render it from the server-side. On the backend, I have an express server. For that I wrote this:</p>

<pre><code>import myFooter from '../components/my-footer.jsx';

app.get('/footer', function(req, res) {
  var string1 = ReactDOMServer.renderToString(myFooter);
  res.send(string1);
});
</code></pre>

<p>Now the problem is that server cannot read sass files. For client side rendering, I am using webpack. Webpack builds everything and gives a bundle file.</p>

<p>But i'm not sure what happens if its the server side. How can I compile using webpack. If I can, will i need to compile my app for each request on node server ?</p>
","2962766","","","","","2015-12-08 17:53:26","Render react component on node server, with webpack","<node.js><reactjs><sass><isomorphic-javascript>","1","0","","",""
"34728962","1","34907209","","2016-01-11 18:55:57","","52","18881","<p>I've noticed that the <code>reactDOM.renderToString()</code> method starts to slow down significantly when rendering a large component tree on the server. </p>

<h2>Background</h2>

<p>A bit of background. The system is a fully isomorphic stack. The highest level <code>App</code> component renders templates, pages, dom elements, and more components. Looking in the react code, I found it renders ~1500 components (this is inclusive of any simple dom tag that gets treated as a simple component, <code>&lt;p&gt;this is a react component&lt;/p&gt;</code>.</p>

<p>In development, rendering ~1500 components takes ~200-300ms. By removing some components I was able to get ~1200 components to render in ~175-225ms. </p>

<p>In production, renderToString on ~1500 components takes around ~50-200ms.</p>

<p>The time does appear to be linear. No one component is slow, rather it is the sum of many.</p>

<h2>Problem</h2>

<p>This creates some problems on the server. The lengthy method results in long server response times. The TTFB is a lot higher than it should be. With api calls and business logic the response should be 250ms, but with a 250ms renderToString it is doubled! Bad for SEO and users. Also, being a synchronous method, <code>renderToString()</code> can block the node server and backup subsequent requests (this could be solved by using 2 separate node servers: 1 as a web server, and 1 as a service to solely render react).</p>

<h2>Attempts</h2>

<p>Ideally, it would take 5-50ms to renderToString in production. I've been working on some ideas, but I'm not exactly sure what the best approach would be.</p>

<h3>Idea 1: Caching components</h3>

<p>Any component that is marked as 'static' could be cached. By keeping a cache with the rendered markup, the <code>renderToString()</code> could check the cache before rendering. If it finds a component, it automatically grabs the string. Doing this at a high level component would save all the nested children component's mounting. You would have to replace the cached component markup's react rootID with the current rootID.</p>

<h3>Idea 2: Marking components as simple/dumb</h3>

<p>By defining a component as 'simple', react should be able to skip all the lifecycle methods when rendering. React already does this for the core react dom components (<code>&lt;p/&gt;</code>, <code>&lt;h1/&gt;</code>, etc). Would be nice to extend custom components to use the same optimization.</p>

<h3>Idea 3: Skip components on server-side render</h3>

<p>Components that do not need to be returned by the server (no SEO value) could simply be skipped on the server. Once the client loads, set a <code>clientLoaded</code> flag to <code>true</code> and pass it down to enforce a re-render.</p>

<h3>Closing and other attempts</h3>

<p>The only solution I've implemented thus far is to reduce the number of components that are rendered on the server. </p>

<p>Some projects we're looking at include:</p>

<ul>
<li>React-dom-stream <a href=""https://github.com/aickin/react-dom-stream"">https://github.com/aickin/react-dom-stream</a> (still working on implementing this for a test)</li>
<li>Babel inline elements <a href=""https://babeljs.io/docs/plugins/transform-react-inline-elements/"">https://babeljs.io/docs/plugins/transform-react-inline-elements/</a> (seems like this is along the lines of Idea 2)</li>
</ul>

<p>Has anybody faced similar issues? What have you been able to do?
Thanks.</p>
","4086590","","1857969","","2016-01-13 21:35:55","2016-09-12 13:39:07","React renderToString() Performance and Caching React Components","<performance><reactjs><isomorphic-javascript><render-to-string><react-dom>","4","9","17","",""
"44111859","1","44549800","","2017-05-22 11:35:04","","1","274","<p>I just wanted to enable server-side rendering with react and create-react-app.</p>

<p>I've written a server/index.js file which should return a simple react component as a string.</p>

<pre><code>//require('import-export');
//require('babel-register')({ ignore: /\/(build|node_modules)\//, presets: ['react-app', 'es2015', 'react'] });
const express = require('express');
const morgan = require('morgan');
const path = require('path');
const fs = require('fs');
const index = require('./index.js');
const react = require('react');
const reactServerDom = require('react-dom/server');
const renderToString = reactServerDom.renderToString;
const ourComponent = require('../src/App.js');
const app = express();

// Setup logger
app.use(morgan(':remote-addr - :remote-user [:date[clf]] "":method :url HTTP/:http-version"" :status :res[content-length] :response-time ms'));

// Serve static assets - NEEDS TO BE ACTIVATED LATER WHEN RENDERTOSTRING WORKS!
//app.use(express.static(path.resolve(__dirname, '..', 'build')));

app.get('/', (req, res) =&gt; {
  const filePath = path.resolve(__dirname, '..', 'build', 'index.html');
  let result = '';
  fs.readFile(filePath, 'utf8', function (err, data) {
    if (err) {
      return console.log(err);
    }
    const ReactApp = renderToString(react.createElement(ourComponent));
    result = data.replace('{{SSR}}', ReactApp);
    res.send(result);
  });
});

const port = 9007;

app.listen(port, () =&gt; {
  console.log(`App listening on port ${ port }`);
});

module.exports = app;
</code></pre>

<p>The component that should be rendered is just the sample component which everyone gets from create-react-app:</p>

<pre><code>import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

class App extends Component {
  render() {
    return (
      &lt;div className=""App""&gt;
        &lt;div className=""App-header""&gt;
          &lt;img src={logo} className=""App-logo"" alt=""logo"" /&gt;
          &lt;h2&gt;Welcome to React&lt;/h2&gt;
        &lt;/div&gt;
        &lt;p className=""App-intro""&gt;
          To get started, edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.
        &lt;/p&gt;
      &lt;/div&gt;
    );
  }
}

export default App;
</code></pre>

<p>Inside my package.json I have following command to start the server with babel-node using the command <strong>yarn server</strong> or <strong>npm run server</strong>:</p>

<pre><code>...
  ""scripts"": {
    ""start"": ""react-scripts start"",
    ""server"": ""NODE_ENV=development babel-node --presets=es2015,react server/index.js"",
    ""build"": ""react-scripts build"",
    ""test"": ""react-scripts test --env=jsdom"",
    ""eject"": ""react-scripts eject""
  }
...
</code></pre>

<p>But I still get following error: </p>

<pre><code>$ NODE_ENV=development babel-node --presets=es2015,react server/index.js
/home/sonnenfeld/ssr-render/src/logo.svg:4
React.createElement(
^

ReferenceError: React is not defined
</code></pre>

<p>And if I remove the svg from the component I get another error:</p>

<pre><code>SyntaxError: /home/sonnenfeld/ssr-render/src/App.css: Unexpected token (1:0)
&gt; 1 | .App {
    | ^
  2 |   text-align: center;
  3 | }
  4 |
</code></pre>

<p>I have already tried the babel hook with babel-register, but also no success.</p>

<p>What would be a good approach to transpile my server.js and all dependencies to vanilla javascript, when using create-react-app with express?</p>
","6790960","","6790960","","2017-05-22 12:17:59","2017-06-14 16:11:28","I get ""React not defined"" when using express, create-react-app and babel-node","<reactjs><express><create-react-app><babel-node><babel-register>","1","4","0","",""
"34500482","1","","","2015-12-28 20:42:05","","2","286","<p>In a WebWorker, I use ReactDOMServer.renderToString</p>

<p>I then pass that string back to the main UI thread with this:</p>

<pre><code>    lines = lines.map(function(line){
        return ReactDOMServer.renderToString(ContactItem({line: line}));
    });

    postMessage({
        testResult: 'pass',
        testLines: lines
    });
</code></pre>

<p>but back in the main UI thread, I am not sure how to actually render that string...do I need to use <code>React.dangerouslySetInnerHTML</code> or is there a better way?</p>

<p>The string result from the WebWorker message looks like this of course:</p>

<pre><code>    MessageEvent bubbles: false 
    cancelBubble: false 
    cancelable: false 
    currentTarget: Worker 
    data: Object 
    name: ""chuckles"" 
    testLines: Array[25] 

     0: ""&lt;li class=""Contact"" data-reactid="".252oied3u2o"" data-react-checksum=""1411403885""&gt;&lt;h2 class=""Contact-name"" data-reactid="".252oied3u2o.0""&gt;&amp;gt;[test] foo✔&lt;/h2&gt;&lt;/li&gt;"" 
     1: ""&lt;li class=""Contact"" data-reactid="".29kk5vm2sqo"" data-react-checksum=""2115195156""&gt;&lt;h2 class=""Contact-name"" data-reactid="".29kk5vm2sqo.0""&gt;&amp;gt;[test] bar✔&lt;/h2&gt;&lt;/li&gt;"" 
     2: ""&lt;li class=""Contact"" data-reactid="".bg6xmnuqdc"" data-react-checksum=""1668960606""&gt;&lt;h2 class=""Contact-name"" data-reactid="".bg6xmnuqdc.0""&gt;&amp;gt;[test] baz✔&lt;/h2&gt;&lt;/li&gt;"" 
     3: ""&lt;li class=""Contact"" data-reactid="".1t3vx6pj4sg"" data-react-checksum=""2019185929""&gt;&lt;h2 class=""Contact-name"" data-reactid="".1t3vx6pj4sg.0""&gt;&amp;gt;p[test] makes stuff 5✔&lt;/h2&gt;&lt;/li&gt;"" 
     4: ""&lt;li class=""Contact"" data-reactid="".cebbpdy8e8"" data-react-checksum=""818500766""&gt;&lt;h2 class=""Contact-name"" data-reactid="".cebbpdy8e8.0""&gt;&amp;gt;p[test] makes stuff 6✔&lt;/h2&gt;&lt;/li&gt;"" 
     5: ""&lt;li class=""Contact"" data-reactid="".1bu0bdc3f9c"" data-react-checksum=""1304319087""&gt;&lt;h2 class=""Contact-name"" data-reactid="".1bu0bdc3f9c.0""&gt;&amp;gt;p[test] makes stuff 7✔&lt;/h2&gt;&lt;/li&gt;""

     ...
     25: ""&lt;li class=""Contact"" data-reactid="".1bu6jdc3f9c"" data-react-checksum=""1404319082""&gt;&lt;h2 class=""Contact-name"" data-reactid="".1bu0bdc3f9c.0""&gt;&amp;gt;p[test] makes stuff 25✔&lt;/h2&gt;&lt;/li&gt;""
</code></pre>
","1223975","","1223975","","2015-12-28 21:00:06","2015-12-28 22:25:12","React + WebWorkers, rendering the string result of ReactDOMServer.renderToString","<javascript><reactjs>","2","0","1","",""
"43700998","1","43701147","","2017-04-29 22:17:35","","4","195","<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>{
  ""name"": ""shopping-cart-app"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""index.js"",
  ""scripts"": {
    ""test"": ""karma start"",
    ""start"": ""node server.js""
  },
  ""author"": """",
  ""license"": ""MIT"",
  ""dependencies"": {
    ""axios"": ""^0.9.1"",
    ""babel-plugin-transform-object-rest-spread"": ""^6.23.0"",
    ""body-parser"": ""^1.17.1"",
    ""express"": ""^4.13.4"",
    ""faker"": ""^4.1.0"",
    ""marked"": ""^0.3.6"",
    ""mongoose"": ""^4.9.6"",
    ""nodemon"": ""^1.11.0"",
    ""react"": ""^0.14.7"",
    ""react-addons-test-utils"": ""^0.14.7"",
    ""react-bootstrap"": ""^0.31.0"",
    ""react-dom"": ""^0.14.7"",
    ""react-router"": ""^2.0.0""
  },
  ""devDependencies"": {
    ""babel-core"": ""^6.5.1"",
    ""babel-loader"": ""^6.2.2"",
    ""babel-plugin-transform-object-rest-spread"": ""^6.23.0"",
    ""babel-preset-es2015"": ""^6.5.0"",
    ""babel-preset-react"": ""^6.5.0"",
    ""babel-preset-stage-0"": ""^6.5.0"",
    ""css-loader"": ""^0.23.1"",
    ""expect"": ""^1.14.0"",
    ""foundation-sites"": ""6.2.0"",
    ""jquery"": ""^2.2.1"",
    ""karma"": ""^0.13.22"",
    ""karma-chrome-launcher"": ""^0.2.2"",
    ""karma-mocha"": ""^0.2.2"",
    ""karma-mocha-reporter"": ""^2.0.0"",
    ""karma-sourcemap-loader"": ""^0.3.7"",
    ""karma-webpack"": ""^1.7.0"",
    ""mocha"": ""^2.4.5"",
    ""node-sass"": ""^3.4.2"",
    ""sass-loader"": ""^3.1.2"",
    ""script-loader"": ""^0.6.1"",
    ""style-loader"": ""^0.13.0"",
    ""webpack"": ""^1.12.13""
  }
}</code></pre>
</div>
</div>
</p>

<p>I am trying to implement server side routing for a react app i am working on. I am using react-router for this purpose. Here is part of my server.js code</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const renderToString   = require ('react-dom/server');
let match, RouterContext = require('react-router');
const routes = require ('/app/router');
const React = require('react');

app.get('*', (req, res) =&gt; {
    match(
        { routes, location: req.url },
        (err, redirectLocation, renderProps) =&gt; {

            // in case of error display the error message
            if (err) {
                return res.status(500).send(err.message);
            }

            // in case of redirect propagate the redirect to the browser
            if (redirectLocation) {
                return res.redirect(302, redirectLocation.pathname + redirectLocation.search);
            }

            // generate the React markup for the current route
            let markup;
            if (renderProps) {
                // if the current route matched we have renderProps
                markup = renderToString(&lt;RouterContext {...renderProps}/&gt;);
            } else {
                // otherwise we can render a 404 page
                markup = renderToString(&lt;NotFoundPage/&gt;);
                res.status(404);
            }

            // render the index template with the embedded React markup
            return res.render('index', { markup });
        }
    );
});



//my webpack config file 

var webpack = require('webpack');
var path = require('path');

module.exports = {
  entry: [
    'script!jquery/dist/jquery.min.js',
    'script!foundation-sites/dist/foundation.min.js',
    './app/app.jsx'
  ],
  externals: {
    jquery: 'jQuery'
  },
  plugins: [
    new webpack.ProvidePlugin({
      '$': 'jquery',
      'jQuery': 'jquery'
    })
  ],
  output: {
    path: __dirname,
    filename: './public/bundle.js'
  },
  resolve: {
    root: __dirname,
    modulesDirectories: [
      'node_modules',
      './app/components'
    ],
    extensions: ['', '.js', '.jsx']
  },
  module: {
    loaders: [
      {
        loader: 'babel-loader',
        query: {
          presets: ['react', 'es2015', 'stage-0']
        },
        test: /\.jsx?$/,
        exclude: /(node_modules|bower_components)/
      }
    ]
  },
  sassLoader: {
    includePaths: [
      path.resolve(__dirname, './node_modules/foundation-sites/scss')
    ]
  },
  devtool: 'cheap-module-eval-source-map'
};</code></pre>
</div>
</div>
</p>

<p>I get an unexpected token &lt; at &lt; RouterContext {...renderProps}/>.  </p>

<p>I have looked over the tutorial am am working of off, but i am not so sure what i have done wrong. Any suggestion would be really appreciated</p>
","6692278","","6692278","","2017-04-29 23:00:39","2017-04-29 23:00:39","Unexpected token react-router in express server","<reactjs><express><react-router>","1","2","1","",""
"34771084","1","","","2016-01-13 15:50:34","","0","1110","<p>Everything is about isomorphic application. I'm using <code>React</code> with <code>react-router</code> module on server side for routing purposes and have following warning in browser console. </p>

<blockquote>
  <p>Warning: render(...): Replacing React-rendered children with a new
  root component. If you intended to update the children of this node,
  you should instead have the existing children update their state and
  render the new components instead of calling ReactDOM.render.</p>
</blockquote>

<p>I have following routes schema defined on <strong>backend</strong>:</p>

<pre><code>&lt;Route path=""/"" component={App} &gt;
    &lt;IndexRoute component={Home} /&gt;
&lt;/Route&gt;
</code></pre>

<p>App component:</p>

<pre><code>module.exports = React.createClass({
  render : function() {
    return &lt;html&gt;
      &lt;head&gt;&lt;/head&gt;
      &lt;body&gt;        
        &lt;div id=""container""&gt;
          { this.props.children }
        &lt;/div&gt;        
        &lt;script src=""/app/bundle.js""&gt;&lt;/script&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  }
});
</code></pre>

<p>Home component:</p>

<pre><code>module.exports = React.createClass({
  render : function() {
    return &lt;div&gt;Any content here&lt;/div&gt;
  }
});
</code></pre>

<p>After that I use on the <strong>frontend</strong>:</p>

<pre><code>ReactDOM.render(&lt;Home /&gt;, document.getElementById('container'));
</code></pre>

<p><strong>Probable solution:</strong>
If I understood correctly if I could render App component as static markup(<code>renderToStaticMarkup</code>) and Home component as a string (<code>renderToString</code>), then it would be ok.</p>

<p>Is it possible to implement something like that with <code>react-router</code>?</p>
","1918648","","1918648","","2016-01-13 16:42:30","2016-01-13 19:00:21","ReactJS react-router server-rendering issue","<javascript><reactjs><react-router>","1","4","","",""
"34767922","1","","","2016-01-13 13:25:27","","6","1770","<p>I'm building isomorphic application using ReactJS with <a href=""https://github.com/rackt/react-router"" rel=""noreferrer"">react-router</a> module for routing purposes on server side.</p>

<p>From its <a href=""https://github.com/rackt/react-router/blob/latest/docs/guides/advanced/ServerRendering.md"" rel=""noreferrer"">guide</a> about using react-router on server:</p>

<pre><code>(req, res) =&gt; {      
  match({ routes, location: req.url }, (error, redirectLocation, renderProps) =&gt; {
    //...

    else if (renderProps) {
      res.status(200).send(renderToString(&lt;RoutingContext {...renderProps} /&gt;))
    } 

    //...
  })
}
</code></pre>

<p>There is almost no information about this RoutingContext. So it's a bit unclear for me how it works. Is it some kind of replacement for <code>Router</code> component from react-router (used on top of other routes)?</p>

<p>Any help in understanding will be really appreciated!</p>
","1918648","","","","","2017-02-27 15:02:49","ReactJS react-router RoutingContext","<javascript><node.js><reactjs><react-router>","3","0","2","",""
"43689344","1","43690894","","2017-04-28 21:46:36","","0","91","<ul>
<li>JDK 8  </li>
<li>React 0.13.1  </li>
</ul>

<p>Getting the following error when using Nashorn to render a ReactJS component</p>

<p><code>Error: Invariant Violation: renderToString(): You must pass a valid ReactElement.</code></p>

<p><strong>component.js</strong></p>

<pre><code>var Controller = React.createClass({
  render: function() {
    return (React.createElement(""div"",null,""Hello, World!""));
  }
});

var renderEventsComponentServer = function (eventList) {
  return React.renderToString(Controller);
};
</code></pre>

<p><strong>From Java</strong></p>

<p><code>Object html = nashorn.invokeFunction(""renderEventsComponentServer"", events);
</code></p>

<p><strong>This however works fine</strong></p>

<pre><code>var renderEventsComponentServer = function (eventList) {
  return React.renderToString(React.createElement(""div"",null,""Hello, World!""));
};
</code></pre>

<p>With result </p>

<p><code>&lt;div data-reactid="".19jt6qowty6"" data-react-checksum=""-706801283""&gt;Hello, World!&lt;/div&gt;</code></p>

<p>I'm obviously missing something fundamental about how ReactJS/Nashorns works. </p>

<p>These are the JS files being loaded</p>

<pre><code>nashorn.eval(read(""assets/js/react.js""));  
nashorn.eval(read(""assets/js/react-dom.js""));  
nashorn.eval(read(""assets/js/babel.min.js""));  
nashorn.eval(read(""assets/js/axios.js""));  
nashorn.eval(read(""assets/js/nashorn-polyfill.js""));  
nashorn.eval(read(""assets/js/events.js""));
</code></pre>
","2600522","","2600522","","2017-04-29 01:11:00","2017-04-29 01:21:58","Nashhorn ECMAException for renderToString with invalid ReactElememt","<java><reactjs><nashorn>","1","0","","",""
"35120863","1","35121187","","2016-01-31 23:33:03","","1","744","<p>I'm using express, and I want to do some basic routing server-side.  At the moment I'm just trying to set up the router to do <em>anything</em>.  Right now it always returns a 404.</p>

<p>I believe I've followed the directions listed on <a href=""https://github.com/rackt/react-router/blob/master/docs/guides/advanced/ServerRendering.md"" rel=""nofollow"">https://github.com/rackt/react-router/blob/master/docs/guides/advanced/ServerRendering.md</a>.</p>

<p>It's about as basic as you can get: an express server that routes every request to be handled by the code from the link listed above, and a ReactRouter that routes everything to the AppTemplate component.</p>

<p>It's definitely getting to the callback in routes.js, because it returns 'Not found' for every request.</p>

<p>I doubt it matters, but I'm running it in IIS via iisnode.  I've been having troubles debugging, which is one of the reasons I'm switching from express-react-views to routing via the <code>&lt;Router&gt;</code>.</p>

<p>Let me know what other information i can get you.</p>

<h3>File structure:</h3>

<pre><code>server/
-- server.js // just calls babel-register and express-app.js
-- express-app.js
-- router.js

server/views/
-- app-template.js
-- routes.js
</code></pre>

<h3>server/express-app.js</h3>

<pre><code>import Express from 'express';
import BodyParser from 'body-parser';
import CookieParser from 'cookie-parser';

let app = new Express();
export default app;

app.enable('trust proxy');

app.use('/public', Express.static('../dist'));

app.use(BodyParser.urlencoded({ extended: true }));
app.use(BodyParser.json());
app.use(CookieParser());

// some rest API code here, currently commented out

app.set('tokenSecret', process.env.tokenSecret);

require('./router');
</code></pre>

<h3>server/router.js</h3>

<pre><code>// copied right from https://github.com/rackt/react-router/blob/master/docs/guides/advanced/ServerRendering.md.
import { renderToString } from 'react-dom/server';
import { match, RouterContext} from 'react-router';

import app from './express-app';
import Routes from './views/routes';

app.get('/*', (req, res) =&gt; {
    match({ Routes, location: req.originalUrl }, (error, redirectLocation, renderProps) =&gt; {
        if (error) {
            res.status(500).send(error.message);
        } else if (redirectLocation) {
            res.redirect(302, redirectLocation.pathname + redirectLocation.search);
        } else if (renderProps) {
            res.status(200).send(renderToString(&lt;RouterContext {...renderProps} /&gt;));
        } else {
            res.status(404).send('Not found');
        }
    });
});
</code></pre>

<h3>server/views/routes.js</h3>

<pre><code>import React from 'react';
import {Router, Route, IndexRoute} from 'react-router';

import AppTemplate from './app-template';

export default (
    &lt;Router&gt;
        &lt;Route path='/' component={AppTemplate}&gt;
        &lt;/Route&gt;
    &lt;/Router&gt;
);
</code></pre>

<h3>server/views/app-template.js</h3>

<pre><code>import React from 'react';

export default class AppTemplate extends React.Component {
    constructor() {
        super();
    }

    render() {
        return (
            &lt;html&gt;
                &lt;head&gt;
                &lt;/head&gt;
                &lt;body&gt;
                    &lt;div id='app' /&gt;
                &lt;/body&gt;
            &lt;/html&gt;
        );
    }
};
</code></pre>
","3120446","","","","","2016-06-24 12:06:54","Server-side rendering with react-router is not working","<react-router>","1","0","","",""
"43572874","1","43573212","","2017-04-23 15:15:24","","1","355","<p>I am rather new to reactjs and was testing basic server side rendering with react-router <strong>v4</strong> but I cannot get past this error, been trying since hours. I have tried every solution that I found on google but none of them seems to be working.</p>

<p>Here is the server.js code :</p>

<pre><code>import Express from 'express';
import React from 'react';
import { renderToString } from 'react-dom/server';
import { StaticRouter } from 'react-router'
import MyRoutes from './routes/routes.js';

...

app.get('*', (req, res) =&gt; {

  let markup = `&lt;!DOCTYPE html&gt;
    &lt;html lang=""en""&gt;        
    &lt;body&gt;
        ${renderToString(&lt;StaticRouter location={req.url} context={{}}&gt;&lt;MyRoutes/&gt;&lt;/StaticRouter&gt;)}
    &lt;/body&gt;
    &lt;/html&gt;`;
  res.write(markup);
  res.end();
});
</code></pre>

<p>Problem seems to be with the following code :</p>

<p><strong>./routes/routes.js code:</strong></p>

<pre><code>import React from 'react';
import { Match, Miss } from 'react-router';    

const componentTest = () =&gt;
(       
    &lt;div&gt;
     Testing a component
    &lt;/div&gt;
);

export default () =&gt; (
        &lt;div&gt;
        &lt;Match exactly={true} pattern=""/"" component={componentTest} /&gt;
        &lt;/div&gt;
);
</code></pre>

<p>Now <strong>if I remove the Match tag line I get blank page with no error.</strong>
But if that Match tag line is there I get the following error:</p>

<pre><code>Warning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in.
    in Unknown
    in Router (created by StaticRouter)
    in StaticRouter
Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in. Check the render method of `StatelessComponent`.
    at invariant (/home/ubuntu/workspace/node_modules/react-dom/node_modules/fbjs/lib/invariant.js:44:15)
    at instantiateReactComponent (/home/ubuntu/workspace/node_modules/react-dom/lib/instantiateReactComponent.js:74:56)
    at instantiateChild (/home/ubuntu/workspace/node_modules/react-dom/lib/ReactChildReconciler.js:44:28)
    at /home/ubuntu/workspace/node_modules/react-dom/lib/ReactChildReconciler.js:71:16
    at traverseAllChildrenImpl (/home/ubuntu/workspace/node_modules/react-dom/lib/traverseAllChildren.js:77:5)
    at traverseAllChildren (/home/ubuntu/workspace/node_modules/react-dom/lib/traverseAllChildren.js:172:10)
    at Object.ReactChildReconciler.instantiateChildren (/home/ubuntu/workspace/node_modules/react-dom/lib/ReactChildReconciler.js:70:7)
    at ReactDOMComponent.ReactMultiChild.Mixin._reconcilerInstantiateChildren (/home/ubuntu/workspace/node_modules/react-dom/lib/ReactMultiChild.js:187:41)
    at ReactDOMComponent.ReactMultiChild.Mixin.mountChildren (/home/ubuntu/workspace/node_modules/react-dom/lib/ReactMultiChild.js:226:27)
    at ReactDOMComponent.Mixin._createContentMarkup (/home/ubuntu/workspace/node_modules/react-dom/lib/ReactDOMComponent.js:653:32)
</code></pre>

<p>Any help would be much appreciated.</p>
","4332349","","","","","2017-04-23 15:45:54","Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function. react router v4","<node.js><reactjs><react-router>","1","2","","",""
"51214269","1","","","2018-07-06 16:17:03","","0","19","<p>I am trying to view an InfoWindow everytime the maps is clicked, it will show an input field and a button to add the named location to list. For now, I am just trying to get the text out of the form, the problem that I am having is how to access the form when the button is clicked???!</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import ReactDOM from 'react-dom';
import PopUpForm from './PopUpForm';
import ReactDOMServer from 'react-dom/server'

class Map extends React.Component {
  
  state = {
      infowindow: new google.maps.InfoWindow({}),
  }

  componentDidUpdate(prevProps, prevState) {
    console.log('componentDidUpdate');
    if (prevProps.google !== this.props.google) {
      this.loadMap();
    }
  }

  componentDidMount() {
    console.log('componentDidMount');
    this.loadMap();
  }

  loadMap() {
    console.log('loadMap');
    if (this.props &amp;&amp; this.props.google) {
      // google is available
      const {google} = this.props;
      const maps = google.maps;

      const mapRef = this.refs.map;
      const node = ReactDOM.findDOMNode(mapRef);

      const {initialCenter, zoom} = this.props;
      const {lat, lng} = initialCenter;
      const center = new maps.LatLng(lat, lng);
      const mapConfig = Object.assign({}, {
        center,
        zoom
      })
      this.map = new maps.Map(node, mapConfig);

      // adding markers for corresponding saved places
      const pos = {lat: 59.329113196988345 , lng: 17.966015144369067};
      const marker = new google.maps.Marker({
        position: pos,
        map: this.map,
        title: 'first marker',
      });
      const infowindow = new google.maps.InfoWindow({
        content: `&lt;h3&gt;${marker.title}&lt;/h3&gt;`
      });
      marker.addListener('click', () =&gt; {
        infowindow.open(this.map, marker);
      });

      // pop up  infoWindoW on map
      this.map.addListener('click', (e) =&gt; {
        this.state.infowindow.close();
        const popUp = &lt;PopUpForm onSubmit={this.onSubmit}/&gt;;
        this.showPopupOnMap(e.latLng, popUp);
        google.maps.event.addListener(this.state.infowindow, 'domready', () =&gt; {
          // HOW TO ACCESS THE FORM HERE
        });
      })
      this.forceUpdate();
    }      
}

onSubmit = () =&gt; {
  e.preventDefault();
  window.alert('onSubmit form')
}

showPopupOnMap = (latLng, popUp) =&gt; {
  const contentString = ReactDOMServer.renderToString(popUp)

  const pos = { lat: latLng.lat(), lng: latLng.lng() };

  this.state.infowindow = new google.maps.InfoWindow({
    content: contentString,
    position: pos
  });
  this.state.infowindow.open(this.map)
}

renderChildren() {
  console.log('renderChildren');
  const {children} = this.props;
  if (!children) return;
  return React.Children.map(children, c =&gt; {
    return React.cloneElement(c, {
      map: this.map,
      google: this.props.google,
    });
  })
}

render() {
  console.log('render');
    const style = {
      width: '70vw',
      height: '70vh'
    }

    return (
      &lt;div  ref=""map"" style={style}&gt;
        loading map...
        {this.renderChildren()}
      &lt;/div&gt;
    )
  }
};

Map.defaultProps = {
  zoom: 11,
  initialCenter: {
    lat: 59.3293,
    lng: 18.0686
  }
}

export default Map;</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';

class PopUpForm extends React.Component {
    render() {
        return (
            &lt;div id='iwc' ref='iwc' &gt;
                &lt;b&gt;Add this location&lt;/b&gt;&lt;br /&gt;
                &lt;form ref='mapform' className='map-form' onSubmit={this.onSubmit}&gt;
                    &lt;input type='text' /&gt;
                    &lt;button id='btn'&gt;Add&lt;/button&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        );
    }
}

export default PopUpForm;</code></pre>
</div>
</div>
</p>

<p>inside of this.map.addListner(this.state.infoWindow, 'domready', someFunctionToBeCalled) I do not know how to acces the form in React, I searched about it all I could found is this:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>google.maps.event.addListener(info, 'domready', function() {
    document.id(""map-form"").addEvent(""submit"", function(e) {
        e.stop();
        console.log(""hi!"");
    });
});</code></pre>
</div>
</div>
</p>

<p>is this even possible? Am I missing something??</p>
","7463649","","","","","2018-07-07 07:48:19","How to access a form inside InfoWindow content in React using Google maps api and google-maps-react V2.0.2","<reactjs><google-maps><google-maps-api-3><infowindow><google-maps-react>","1","0","","",""
"49979005","1","","","2018-04-23 10:36:55","","1","296","<p>How CSS files will load dynamically using react-loadable library on client side?</p>

<p>I have included react-loadable library on both server and client side rendering, from server-side rendering everything works fine but client side, how CSS will load dynamically?</p>

<p><code>webpack.config.prod.js</code> : <em>Client/Server -</em></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>'use strict';

const autoprefixer = require('autoprefixer');
const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const ExtractCssChunks = require('extract-css-chunks-webpack-plugin');
const ManifestPlugin = require('webpack-manifest-plugin');
const InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin');
const SWPrecacheWebpackPlugin = require('sw-precache-webpack-plugin');
const eslintFormatter = require('react-dev-utils/eslintFormatter');
const ModuleScopePlugin = require('react-dev-utils/ModuleScopePlugin');
const paths = require('./paths');
const getClientEnvironment = require('./env');
const { ReactLoadablePlugin } = require('react-loadable/webpack');

const publicPath = paths.servedPath;

const shouldUseRelativeAssetPaths = publicPath === './';

const shouldUseSourceMap = process.env.GENERATE_SOURCEMAP !== 'false';
const publicUrl = publicPath.slice(0, -1);
const env = getClientEnvironment(publicUrl);
if (env.stringified['process.env'].NODE_ENV !== '""production""') {
  throw new Error('Production builds must have NODE_ENV=production.');
}
const cssFilename = 'static/css/[name].[contenthash:8].css';

const client = {
  bail: true,
  devtool: shouldUseSourceMap ? 'source-map' : false,
  entry: [require.resolve('./polyfills'), paths.appIndexJs],
  output: {
    // The build folder.
    path: paths.appBuild,
    filename: 'static/js/[name].[chunkhash:8].js',
    chunkFilename: 'static/js/[name].[chunkhash:8].chunk.js',
    publicPath,
    devtoolModuleFilenameTemplate: info =&gt;
      path
        .relative(paths.appSrc, info.absoluteResourcePath)
        .replace(/\\/g, '/'),
  },
  resolve: {
    modules: ['node_modules', paths.appNodeModules].concat(
  process.env.NODE_PATH.split(path.delimiter).filter(Boolean)),
    extensions: ['.web.js', '.mjs', '.js', '.json', '.web.jsx', '.jsx'],
    alias: {
      'react-native': 'react-native-web',
    },
    plugins: [
      new ModuleScopePlugin(paths.appSrc, [paths.appPackageJson]),

    ],
  },
  module: {
    strictExportPresence: true,
    rules: [
      {
        test: /\.(js|jsx|mjs)$/,
        enforce: 'pre',
        use: [
          {
            options: {
              formatter: eslintFormatter,
              eslintPath: require.resolve('eslint'),

            },
            loader: require.resolve('eslint-loader'),
          },
        ],
        include: paths.appSrc,
      },
      {
        oneOf: [
   
          {
            test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
            loader: require.resolve('url-loader'),
            options: {
              limit: 10000,
              name: 'static/media/[name].[hash:8].[ext]',
            },
          },
          // Process JS with Babel.
          {
            test: /\.(js|jsx|mjs)$/,
            include: paths.appSrc,
            loader: require.resolve('babel-loader'),
            options: {
              compact: true,
              plugins: ['react-loadable/babel'],
            },
          },
          {
            test: /\.(?:css|less)$/,
            use: ExtractCssChunks.extract({
              use: [
                {
                  loader: 'css-loader?modules',
                  options: {
                    minimize: true,
                    sourceMap: shouldUseSourceMap,
                    importLoaders: true,
                    localIdentName: '[name]__[local]__[hash:base64:7]',
                  },
                },
                {
                  loader: 'less-loader',
                  options: {
                    minimize: true,
                    sourceMap: shouldUseSourceMap,
                    importLoaders: true,
                  },
                },
                {
                  loader: require.resolve('postcss-loader'),
                  options: {
                  ident: 'postcss',
                    plugins: () =&gt; [
                      require('postcss-flexbugs-fixes'),
                      autoprefixer({
                        browsers: [
                          '&gt;1%',
                          'last 4 versions',
                          'Firefox ESR',
                          'not ie &lt; 9',
                        ],
                        flexbox: 'no-2009',
                      }),
                    ],
                  },
                },
              ],
              fallback: 'style-loader',
            }),
            exclude: /\.(eot|woff|woff2|ttf|otf|svg)(\?[\s\S]+)?$/,
          },
          {
            loader: require.resolve('file-loader'),
            exclude: [/\.(js|jsx|mjs)$/, /\.html$/, /\.json$/],
            options: {
              name: 'static/media/[name].[hash:8].[ext]',
            },
          },
        ],
      },
    ],
  },
  plugins: [
    new InterpolateHtmlPlugin(env.raw),
    new HtmlWebpackPlugin({
      inject: true,
      template: paths.appHtml,
      minify: {
        removeComments: true,
        collapseWhitespace: true,
        removeRedundantAttributes: true,
        useShortDoctype: true,
        removeEmptyAttributes: true,
        removeStyleLinkTypeAttributes: true,
        keepClosingSlash: true,
        minifyJS: false,
        minifyCSS: true,
        minifyURLs: true,
      },
    }),
    new webpack.DefinePlugin(env.stringified),
    new webpack.optimize.UglifyJsPlugin({
      compress: {
        warnings: false,
        comparisons: false,
      },
      mangle: {
        safari10: true,
      },
      output: {
        comments: false,
        ascii_only: true,
      },
      sourceMap: shouldUseSourceMap,
    }),
    new ExtractCssChunks({
      filename: cssFilename,
    }),
    new webpack.HashedModuleIdsPlugin(),
    new webpack.optimize.CommonsChunkPlugin({
      name: 'manifest.js',
      minChunks: Infinity,
    }),
    new ManifestPlugin({
      fileName: 'asset-manifest.json',
    }),
    new ReactLoadablePlugin({
      filename: './build/react-loadable.json',
    }),
    new SWPrecacheWebpackPlugin({
      dontCacheBustUrlsMatching: /\.\w{8}\./,
      filename: 'service-worker.js',
      logger(message) {
        if (message.indexOf('Total precache size is') === 0) {
          return;
        }
        if (message.indexOf('Skipping static resource') === 0) {
          return;
        }
        console.log(message);
      },
      minify: true,
      navigateFallback: `${publicUrl}/index.html`,
      navigateFallbackWhitelist: [/^(?!\/__).*/],
      staticFileGlobsIgnorePatterns: [/\.map$/, /asset-manifest\.json$/],
    }),
    new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/),
  ],

  node: {
    dgram: 'empty',
    fs: 'empty',
    net: 'empty',
    tls: 'empty',
    child_process: 'empty',
  },
};

// Server render
const nodeExternals = require('webpack-node-externals');
const server = Object.assign({}, client);
server.target = 'node';
server.node = {
  __filename: true,
  __dirname: true,
};
server.externals = [nodeExternals()];
server.entry = [
  './server/middleware/renderer.js',
];

delete server.devtool;
delete server.node;
server.module = {};
server.plugins = [
  new webpack.HashedModuleIdsPlugin(),
  new webpack.optimize.LimitChunkCountPlugin({
    maxChunks: 1,
  }),
];
server.output = {
  path: paths.appBuild,
  filename: 'handleRender.js',
  publicPath,
  libraryTarget: 'commonjs2',
};
server.module.rules = [{
  test: /\.(?:js|jsx)$/,
  exclude: /node_modules/,
  loader: require.resolve('babel-loader'),
  options: {
    compact: true,
    plugins: ['react-loadable/babel'],
  },
},
{
  test: /\.(?:css|less)$/,
  loader: 'css-loader/locals?modules&amp;localIdentName=[name]__[local]__[hash:base64:7]!less-loader',
  exclude: /\.(eot|woff|woff2|ttf|otf|svg)(\?[\s\S]+)?$/,
}];

module.exports = [server, client];</code></pre>
</div>
</div>
</p>

<p><code>Server index.js</code>: </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>...
import Loadable from 'react-loadable';
import serverRenderer from '../build/handleRender.js';
...
router.use('*', serverRenderer);
...
app.use(router);
// Pre-load all compoenents
Loadable.preloadAll().then(() =&gt; {
  app.listen(PORT, (error) =&gt; {
    if (error) {
      return console.log('something bad happened', error);
    }
    console.log(`listening on ${PORT}...`);
  });
}).catch((e) =&gt; {
  console.log('Loadable Error : ', e);
});</code></pre>
</div>
</div>
</p>

<p><code>renderer.js</code>:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import { renderToStringWithData } from 'react-apollo';
import Loadable from 'react-loadable';
import { getBundles } from 'react-loadable/webpack';
...

const mainApp = renderToStringWithData(&lt;Loadable.Capture
      report={moduleName =&gt; modules.push(moduleName)}
    &gt;
      &lt;App req={req} context={context} client={client} /&gt;
    &lt;/Loadable.Capture&gt;);
...
  const bundles = getBundles(JSON.parse(stats), modules);
  const styles = bundles.filter(bundle =&gt;                   bundle.file.endsWith('.css'));
  const scripts = bundles.filter(bundle =&gt; bundle.file.endsWith('.js'));    

...
//mainApp=&gt;html
   const replacedStyle = html.replace(
            '&lt;link id=""codeSplittingStyle""&gt;',
            styles.map(bundle =&gt; `&lt;link
                rel=""stylesheet""
                href=""/${bundle.file}""/&gt;`).join('\n'),
          );

          const replacedScript = replacedStyle.replace(
            '&lt;script id=""codeSplittingScript""&gt;&lt;/script&gt;',
            scripts.map(bundle =&gt; `&lt;script
                type=""text/javascript""
                src=""/${bundle.file}""&gt;&lt;/script&gt;`).join('\n'),
          );
...
   return res.send(replacedScript);    </code></pre>
</div>
</div>
</p>

<p><code>Browser.js</code>:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import ReactDOM from 'react-dom';
import Loadable from 'react-loadable';

import Browser from './layout/browser';
import registerServiceWorker from './registerServiceWorker';

Loadable.preloadReady().then(() =&gt; {
  ReactDOM.hydrate(&lt;Browser /&gt;, document.getElementById('root'));
});
registerServiceWorker();</code></pre>
</div>
</div>
</p>
","6025305","","3073543","","2018-04-26 07:23:11","2018-04-26 09:06:01","Import component css chunk client side with react-loadable","<reactjs><react-loadable>","1","8","","",""
"51424792","1","","","2018-07-19 14:08:03","","0","12","<p>I am facing some issue in Server side rendering,</p>

<p>My App component which is shared between Client and server side and but my app component has some Code which is setting some value on local storage, which show undefined Window object on Server as window is not initialized at that time, how can i take care of this scenario? </p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom/server';
import Helmet from 'react-helmet';
import { flushChunkNames } from 'react-universal-component/server';
import flushChunks from 'webpack-flush-chunks';

import App from '../shared/App';

/**
 * Provides the server side rendered app. In development environment, this method is called by
 * `react-hot-server-middleware`.
 *
 * This method renders the ejs template `public/views/index.ejs`.
 *
 * @param clientStats Parameter passed by hot server middleware
 */
export default ({ clientStats }) =&gt; async (req, res) =&gt; {
    const app = (
        &lt;App/&gt;
    );

    const appString = ReactDOM.renderToString(app);
    const { title } = Helmet.renderStatic();
    const chunkNames = flushChunkNames();
    const { js, styles } = flushChunks(clientStats, { chunkNames });

    res.render('index', {
        title: title.toString(),
        appString,
        js,
        styles
    });
};


Ex 
import React, { Component } from 'react';
import Helmet from 'react-helmet';

import './app.styl';

import UniversalComponent from './components/UniversalComponent';
import Kumar from './components/Kumar';

export default class App extends Component {
    // Sample code
   const setLocalStorage = (itemName,itemValue) =&gt; { 
       window.localStorage.setItem(itemName,itemValue)
      }

    const getLocalStorage = (itemName) =&gt;{
      return window.localStorage.getItem(itemName);
    }
    render() {
        return (
            &lt;div&gt;
                &lt;Helmet&gt;
                    &lt;title&gt;manish title&lt;/title&gt;
                &lt;/Helmet&gt;
                 &lt;Kumar /&gt;   
                &lt;h1&gt;Welcome to React Fiber App.&lt;/h1&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>
","5317182","","","","","2018-07-19 14:08:03","Server side rendering with Local storage(Windows API) react","<reactjs><express><serverside-rendering>","0","0","1","",""
"33765095","1","33891863","","2015-11-17 19:08:54","","2","341","<p>When doing server side rendering with react-router and Radium I get the following warning that appears to come from Radium appending css prefixes on the client but not on the server.</p>

<pre><code>Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:
(client) 8.$=10""&gt;&lt;div style=""-webkit-transition:b
(server) 8.$=10""&gt;&lt;div style=""transition:backgroun
</code></pre>

<p>I tried to include radiumConfig within my server side rendering code, as shown below, but it doesn't appear to help. Do you have any suggestions?</p>

<pre><code>  match({ routes, location }, (error, redirectLocation, renderProps) =&gt; {
    if (redirectLocation)
      res.redirect(301, redirectLocation.pathname + redirectLocation.search)
    else if (error)
      res.status(500).send(error.message)
    else if (renderProps == null)
      res.status(404).send('Not found')
    else
      content = ReactDomServer.renderToString(&lt;RoutingContext {...renderProps} radiumConfig={{userAgent: req.headers['user-agent']}} /&gt;);
      markup = Iso.render(content, alt.flush());
  });
</code></pre>

<p>And my routes look like the following, where the App component is wrapped by Radium:</p>

<pre><code>export default (
  &lt;Route path=""/"" component={App}&gt;
    &lt;Route path=""login"" component={Login} /&gt;
    &lt;Route path=""logout"" component={Logout} /&gt;
    &lt;Route name=""test"" path=""test"" component={Test} /&gt;        
    &lt;Route name=""import"" path=""import"" component={ImportPlaylist} /&gt;
    &lt;Route name=""player"" path=""/:playlist"" component={Player} /&gt;
  &lt;/Route&gt;
);
</code></pre>
","1203703","","","","","2015-11-24 11:01:01","react-router, radium and server side rendering - Warning: react checksum was invalid","<css><reactjs><checksum><react-router>","1","1","1","",""
"42338907","1","42339569","","2017-02-20 07:39:14","","1","705","

<p>I've got a problem with react SSR. I use react-router as my app route manager.</p>

<p>In the server side,  it may look like this (server.js):</p>

<pre class=""lang-js prettyprint-override""><code>var app = express();
app.get(""*"",function(req, res ){
     match({routes:AppRoutes, location:req.url},

      function(err, redirectLocation, renderProps){
        if (error) {
          res.send(500, error.message)
        } else if (redirectLocation) {
          res.redirect(302, redirectLocation.pathname + redirectLocation.search)
        } else if (renderProps) {
          res.send(200, renderToString(&lt;RoutingContext {...renderProps} /&gt;))
        } else {
          res.send(404, 'Not found')
       }
    });
});
</code></pre>

<p>In case react-router consumes all <code>GET</code> routes, if I need RESTful API in the server side, how do I separate it from react-route? </p>

<p>And if I have a component in the frontend:</p>

<pre class=""lang-js prettyprint-override""><code>class Post extends Component{
    componentDidMount(){
       fetch('/api/post')
         .then(function(response){
              //change component state or do other
         })
         .catch(function(err){
             //handle error
         })
    } 
     render(){
      // 
     }
}
</code></pre>

<p>How does this component communicate with server by RESTful API?<br>
Can Express  provide such RESTful API structure?</p>

<pre class=""lang-js prettyprint-override""><code>app.get(""/api/post"",function(){
    //do something and response
});
</code></pre>

<p>I really dont understand.</p>
","7382640","","3959875","","2017-02-20 07:46:34","2017-02-20 08:22:36","How does React server-side rendering deal with RESTful API (react-router+express)?","<rest><reactjs><express><react-router><serverside-rendering>","1","0","","",""
"33343722","1","","","2015-10-26 10:42:13","","0","70","<p>I'm using react-router 1.0.0-rc3, and following this <a href=""https://github.com/rackt/react-router/blob/master/docs/guides/advanced/ServerRendering.md"" rel=""nofollow"">server rendering</a> guide.</p>

<p>Here is the point part:</p>

<pre><code>const html = renderToString(
  &lt;Provider store={store}&gt;
    &lt;RoutingContext {...renderProps} /&gt;
  &lt;/Provider&gt;
);
</code></pre>

<p>Here is my route part:</p>

<pre><code>  &lt;Route path=""/"" component={Container} &gt;
    &lt;IndexRoute component={App} /&gt;
    &lt;Route path="":source/:owner/:name/:branch/tree/:corpus*"" component={App} /&gt;
    &lt;Route path="":source/:owner/:name/:branch/ticket/(:ticket)"" component={App} /&gt;
  &lt;/Route&gt;
</code></pre>

<p>I got <code>html</code> output as an empty div element like: </p>

<p><code>&lt;div data-reactid="".whl3ehjj0g"" data-react-checksum=""12324050""&gt;&lt;/div&gt;</code></p>

<p>There is no <code>&lt;App /&gt;</code> component rendered in the server, and the <code>&lt;App /&gt;</code> rendered normally after receiving server rendering response in the client, and all the routes funtions work well in the client.</p>

<p>So, anything I missed?</p>
","581094","","","","","2015-12-03 14:01:43","react-router server rendering without matched component's html content","<node.js><reactjs><react-router>","2","1","","",""
"33376090","1","33379285","","2015-10-27 18:43:56","","1","261","<p>I'm new in React and following a tutorial to build an isomorphic app. In the server side it use <code>router.run()</code> do the rendering thing, but it's removed in react-router 1.0.0. </p>

<pre><code>Router.run(routes, req.url, Handler =&gt; {
    let content = React.renderToString(&lt;Handler /&gt;);
    res.render('index', {
        content: content
    });
});
</code></pre>

<p>What the <em>Update Guide</em> said is </p>

<pre><code>// v0.13.x
Router.run(routes, (Handler) =&gt; {
  render(&lt;Handler/&gt;, el);
})

// v1.0
render(&lt;Router&gt;{routes}&lt;/Router&gt;, el)
</code></pre>

<p>But how can I do with the server rendering? </p>
","4698795","","","","","2015-10-27 22:03:12","How to do server rendering with react-router 1.0.0?","<reactjs><react-router>","1","0","1","",""
"42050321","1","42051043","","2017-02-05 09:12:52","","-1","1186","<p>Below is my server.js file:</p>

<pre><code>import path from 'path';
import express from 'express';
import webpack from 'webpack';
import middleware from './src/middleware';

const app = express();
var port     = process.env.PORT || 8080;

if(process.env.NODE_ENV === 'development') {
const config = require('./webpack.config.dev');
const compiler = webpack(config);
app.use(require('webpack-dev-middleware')(compiler, {
    noInfo: true,
    publicPath: config.output.publicPath,
    stats: {
        assets: false,
        colors: true,
        version: false,
        hash: false,
        timings: false,
        chunks: false,
        chunkModules: false
    }
}));
//app.use(require('webpack-hot-middleware')(compiler));
app.use(express.static(path.resolve(__dirname, 'src')));
} else if(process.env.NODE_ENV === 'production') {
app.use(express.static(path.resolve(__dirname, 'dist')));
}

app.get('*', middleware);

app.listen(port, '0.0.0.0', (err) =&gt; {
if(err) {
    console.error(err);
} else {
    console.info(path.resolve(__dirname, 'src'));
    console.info('Listening at '+port);
}
});
</code></pre>

<p>My webpack.config.dev.js:</p>

<pre><code>const path = require('path');
const webpack = require('webpack');

module.exports = {
entry: './src/middleware.js',
output: {
path       : path.resolve('./src'), // always use absolute paths
filename   : 'bundle.js',
publicPath : '/assets/'
},
plugins: [
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoErrorsPlugin(),
    new webpack.DefinePlugin({
        'process.env': {
            NODE_ENV: JSON.stringify('development')
        }
    })
],
module: {
    loaders: [
        {
            test: /\.css$/,
            loader: 'style-loader'
        }, {
            test: /\.css$/,
            loader: 'css-loader',
            include: path.join(__dirname, 'node_modules'),
            query: {
                modules: true,
                localIdentName: '[name]__[local]___[hash:base64:5]'
            }
        },
        {
            test: /\.js$/,
            loader: 'babel',
            include: path.resolve(__dirname, 'src'),
            query: {
                presets: [ 'react-hmre' ]
            }
        },
        { test: /\.js$/, exclude: /node_modules/, loader: ""babel-loader"" }
    ]
  }
};
</code></pre>

<p>This is my middleware:</p>

<pre><code>import React from 'react';
import { renderToString } from 'react-dom/server';
import { createStore } from 'redux';
import { Provider } from 'react-redux';
import { match, RouterContext } from 'react-router';
import reducers from './reducers';
import routes from './routes';

export default (req, res) =&gt; {
match({ routes, location: req.url }, (error, redirectLocation, renderProps) =&gt; {
    if(error) {
        res.status(500).send(error.message);
    } else if(redirectLocation) {
        res.redirect(302, redirectLocation.pathname + redirectLocation.search);
    } else if(renderProps) {
        res.status(200).send(`
            &lt;!DOCTYPE html&gt;
            &lt;html&gt;
            &lt;head&gt;
            &lt;title&gt;Req Management&lt;/title&gt;
            &lt;link rel=""stylesheet"" href=""https://unpkg.com/react-select/dist/react-select.css""&gt;
            &lt;/head&gt;
            &lt;body&gt;
            &lt;script src='/src/bundle.js'&gt;&lt;/script&gt;
            &lt;div id='app'&gt;${renderToString(
                &lt;Provider store={createStore(reducers)}&gt;
                &lt;RouterContext {...renderProps} /&gt;
                &lt;/Provider&gt;
            )}&lt;/div&gt;
            &lt;/body&gt;
            &lt;/html&gt;
            `);
        } else {
            console.log(""inside else"");
            res.status(404).send('Not found');
        }
    });
};
</code></pre>

<p>This is my package.json:</p>

<pre><code>{
""name"": ""universal-boilerplate"",
""version"": ""1.4.0"",
""description"": ""Universal/isomorphic boilerplate with react, redux, webpack and express"",
""main"": ""src/index.js"",
""scripts"": {
""lint"": ""eslint ./src"",
""start"": ""npm run build &amp;&amp; cross-env NODE_ENV=development babel-node ./server.js"",
""build"": ""webpack --config ./webpack.config.dev.js"",
""serve"": ""cross-env NODE_ENV=production babel-node ./server.js""
},
""author"": """",
""license"": """",
""devDependencies"": {
""babel-cli"": ""^6.10.1"",
""babel-core"": ""^6.22.1"",
""babel-eslint"": ""^6.1.2"",
""babel-loader"": ""^6.2.10"",
""babel-plugin-transform-decorators-legacy"": ""^1.3.4"",
""babel-preset-es2015"": ""^6.22.0"",
""babel-preset-react"": ""^6.22.0"",
""babel-preset-react-hmre"": ""^1.1.1"",
""babel-preset-stage-0"": ""^6.5.0"",
""copy-webpack-plugin"": ""^3.0.1"",
""cross-env"": ""^2.0.0"",
""eslint"": ""^3.1.1"",
""eslint-plugin-babel"": ""^3.3.0"",
""eslint-plugin-react"": ""^5.2.2"",
""express"": ""^4.14.0"",
""react"": ""^15.2.1"",
""react-dom"": ""^15.2.1"",
""react-redux"": ""^4.4.5"",
""react-router"": ""^2.6.1"",
""react-router-redux"": ""^4.0.5"",
""redux"": ""^3.5.2"",
""rimraf"": ""^2.5.4"",
""webpack"": ""^1.13.1"",
""webpack-dev-middleware"": ""^1.6.1"",
""webpack-hot-middleware"": ""^2.12.2""
},
""repository"": {
""type"": """",
""url"": """"
},
""dependencies"": {
""axios"": ""^0.13.1"",
""babel"": ""^6.5.2"",
""babel-cli"": ""^6.10.1"",
""babel-core"": ""^6.10.4"",
""babel-eslint"": ""^6.1.2"",
""babel-loader"": ""^6.2.4"",
""babel-plugin-transform-decorators-legacy"": ""^1.3.4"",
""babel-preset-es2015"": ""^6.22.0"",
""babel-preset-react"": ""^6.11.1"",
""babel-preset-react-hmre"": ""^1.1.1"",
""babel-preset-stage-0"": ""^6.5.0"",
""copy-webpack-plugin"": ""^3.0.1"",
""cross-env"": ""^2.0.0"",
""eslint"": ""^3.1.1"",
""eslint-plugin-babel"": ""^3.3.0"",
""eslint-plugin-react"": ""^5.2.2"",
""express"": ""^4.14.0"",
""fixed-data-table"": ""^0.6.3"",
""querystring"": ""^0.2.0"",
""react"": ""^15.2.1"",
""react-dom"": ""^15.2.1"",
""react-dropdown"": ""^1.2.0"",
""react-input-autosize"": ""^1.1.0"",
""react-redux"": ""^4.4.5"",
""react-router"": ""^2.6.1"",
""react-router-redux"": ""^4.0.5"",
""react-select"": ""^1.0.0-rc.3"",
""redux"": ""^3.5.2"",
""redux-logger"": ""^2.6.1"",
""redux-thunk"": ""^2.1.0"",
""rimraf"": ""^2.5.4"",
""style-loader"": ""^0.13.1"",
""webpack"": ""^1.14.0"",
""webpack-dev-middleware"": ""^1.6.1"",
""webpack-hot-middleware"": ""^2.12.2""
}
}
</code></pre>

<p>This is my index.js:</p>

<pre><code>import React from 'react';
import { render } from 'react-dom';
import { Provider } from 'react-redux';
import { Router, browserHistory } from 'react-router';
import { syncHistoryWithStore } from 'react-router-redux';
import reducers from './reducers';
import routes from './routes';
import { applyMiddleware, createStore } from ""redux""
import logger from ""redux-logger""
import thunk from ""redux-thunk""

const middleware = applyMiddleware(thunk, logger());

const store = createStore(reducers, middleware);
const history = syncHistoryWithStore(browserHistory, store);

render(
&lt;Provider store={store}&gt;
    &lt;Router history={history} store={store}&gt;
        { routes }
    &lt;/Router&gt;
&lt;/Provider&gt;,
document.getElementById('app')
);

if(process.env.NODE_ENV == 'development' &amp;&amp; module.hot) {
module.hot.accept('./reducers', () =&gt; {
    store.replaceReducer(require('./reducers').default);
});
}
</code></pre>

<p>I was trying to deploy this code to Heroku. Did some changes in webpack.config.dev.js file. Not able to revert back. Before the code was working fine locally. Now not working locally also.</p>

<p><a href=""https://i.stack.imgur.com/kqGsy.png"" rel=""nofollow noreferrer"">Folder structure is shown below: </a></p>
","5242039","","472495","","2017-02-05 14:50:10","2017-02-05 14:50:10","/src/bundle.js not found in react with webpack application","<node.js><reactjs><webpack>","2","5","","",""
"35418200","1","35430914","","2016-02-15 20:12:38","","3","887","<p>In the server side it renders fine, but when it gets to the client side the react part of html vanishes and I get this error:</p>

<pre><code>Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:
(client) &lt;noscript data-reacti
(server) &lt;div data-reactid="".z
</code></pre>

<p>this is my client code before compression:</p>

<pre><code>import {Router, RouterContext, browserHistory} from ""react-router"";
import React from ""react"";
import ReactDOM from ""react-dom"";


const innerHTML = document.getElementById('react-routes').innerHTML;
const routes = JSON.parse(innerHTML);
console.log(routes);

// ReactDOM.render(&lt;RouterContext {...routes} /&gt;, document.getElementById('react-app'));

ReactDOM.render(&lt;Router&gt;{routes.routes}&lt;/Router&gt;, document.getElementById('react-app'));

// Router.run(routes, Router.HistoryLocation, function (Handler) {
//   React.render(&lt;Handler/&gt;, document.getElementById('app'));
// });
</code></pre>

<p>I've tryed this three methods the two firsts gives the same error and the third says that Router.run is not a function. (the third was what I had working a few version ago)</p>

<p>the HTML generated by the server is this:</p>

<pre><code>&lt;html lang=""en""&gt;
  &lt;head&gt;
    &lt;meta charset=""utf-8""&gt;
    &lt;meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""&gt;
    &lt;meta http-equiv=""X-UA-Compatible"" content=""IE=edge""&gt;
    &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;
    &lt;link rel=""stylesheet"" type=""text/css"" href=""css/style.css""&gt;
  &lt;/head&gt;
  &lt;body&gt;

    &lt;div id=""react-app""&gt;&lt;div data-reactid="".1rbyhm4ruo0"" data-react-checksum=""-854297298""&gt;&lt;span data-reactid="".1rbyhm4ruo0.0""&gt;Hello &lt;/span&gt;&lt;span data-reactid="".1rbyhm4ruo0.1""&gt;BLBALBLABA LUIZ&lt;/span&gt;&lt;div data-reactid="".1rbyhm4ruo0.2""&gt;&lt;input type=""text"" value=""Login"" data-reactid="".1rbyhm4ruo0.2.0""&gt;&lt;span data-reactid="".1rbyhm4ruo0.2.1""&gt;Hello &lt;/span&gt;&lt;span data-reactid="".1rbyhm4ruo0.2.2""&gt;Login&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

    &lt;script id=""react-routes"" type=""application/json""&gt;{""routes"":[{""name"":""public"",""path"":""/"",""childRoutes"":[{""name"":""login"",""path"":""/login""}]},{""name"":""login"",""path"":""/login""}],""params"":{},""location"":{""pathname"":""/login"",""search"":"""",""hash"":"""",""state"":null,""action"":""POP"",""key"":""zc9mx1"",""query"":{},""$searchBase"":{""search"":"""",""searchBase"":""""}},""components"":[null,null],""history"":{},""router"":{""__v2_compatible__"":true},""matchContext"":{""history"":{},""transitionManager"":{},""router"":{""__v2_compatible__"":true}}}&lt;/script&gt;

    &lt;script src=""https://cdn.socket.io/socket.io-1.1.0.js""&gt;&lt;/script&gt;
    &lt;script src=""/public/js/bundle.js""&gt;&lt;/script&gt;


&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>and after the client runs it becames this:</p>

<pre><code>&lt;html lang=""en""&gt;&lt;head&gt;
    &lt;meta charset=""utf-8""&gt;
    &lt;meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""&gt;
    &lt;meta http-equiv=""X-UA-Compatible"" content=""IE=edge""&gt;
    &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;
    &lt;link rel=""stylesheet"" type=""text/css"" href=""css/style.css""&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=""react-app""&gt;&lt;noscript data-reactid="".zhdkkenpq8""&gt;&lt;/noscript&gt;&lt;/div&gt;

    &lt;script id=""react-routes"" type=""application/json""&gt;{""routes"":[{""name"":""public"",""path"":""/"",""childRoutes"":[{""name"":""login"",""path"":""/login""}]},{""name"":""login"",""path"":""/login""}],""params"":{},""location"":{""pathname"":""/login"",""search"":"""",""hash"":"""",""state"":null,""action"":""POP"",""key"":""qbhof0"",""query"":{},""$searchBase"":{""search"":"""",""searchBase"":""""}},""components"":[null,null],""history"":{},""router"":{""__v2_compatible__"":true},""matchContext"":{""history"":{},""transitionManager"":{},""router"":{""__v2_compatible__"":true}}}&lt;/script&gt;
    &lt;script src=""https://cdn.socket.io/socket.io-1.1.0.js""&gt;&lt;/script&gt;
    &lt;script src=""/public/js/bundle.js""&gt;&lt;/script&gt;


&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>I'm using the same method to renderToString() in the server.</p>

<p>Thanks</p>
","5918357","","5918357","","2016-02-15 21:37:35","2016-02-16 11:08:25","react router rendering <noscript> in client side","<javascript><node.js><reactjs><react-router>","1","1","","",""
"43572499","1","","","2017-04-23 14:39:47","","6","323","<p>I’m running my react app via Node. Is there a way to easily handle this import hell?</p>

<p>I’m running</p>

<pre><code>./node_modules/.bin/babel-node --presets react,es2015 server/server.js
</code></pre>

<p>as npm start. And server.js is a simple Express Server that serves a <code>ReactDOMServer.renderToString(&lt;MyApp /&gt;)</code></p>

<p>Some of my react components have something like this:</p>

<pre><code>import GenericTemplate from ""../../templates/GenericTemplate/GenericTemplate"";
import Footer from ""../../organisms/Footer/Footer"";
import Header from ""../../organisms/Header/Header"";
import Hero from ""../../organisms/Hero/Hero"";
import MainMenu from ""../../organisms/MainMenu/MainMenu"";
import TodoList from ""../../organisms/TodoList/TodoList"";
</code></pre>

<p>this is prone to error, one changement like directory name would result in manually entering every file to update this.</p>

<p>do you have any idea how I can fix this. Ideally I would have something like this:</p>

<pre><code>import { Footer, Header, Hero, MainMenu, TodoList } from ""myComponents""
</code></pre>

<p>is that possible? How?</p>

<p>Thank you!</p>
","3712591","","","","","2017-04-23 15:08:15","how to handle the import hell in react?","<javascript><node.js><reactjs><import><require>","2","1","","",""
"34985663","1","","","2016-01-25 05:25:06","","2","158","<p>I want to port my app to react-router 2.0 from 1.0. I am trying to do server side rendering on express. </p>

<h2>server.js code (1.0) (working)</h2>

<pre><code>var routes = require('./public/js/app.node.js');

app.get('*', function(req, res, next) {

  var location = new Location(req.path, req.query);

  try {
    Router.run(routes(), location, function(e, i, t) {
      var str = React.renderToString(
                  React.createElement(Router, i));
    });
  } catch(e) {
    return next();
  }
});
</code></pre>

<h2>server.js code (2.0) (Not working)</h2>

<pre><code>var routes = require('./public/js/app.node.js');

app.get('*', function(req, res, next) {

  var location = new Location(req.path, req.query);

  try {
  match({routes, location: req.url} , function (error, redirectLocation, renderProps) {
      if (error) {
        res.status(500).send(error.message);
      } else if (redirectLocation) {
        res.redirect(302, redirectLocation.pathname + redirectLocation.search);
      } else if (renderProps) {
        var str = renderToString(React.createElement(RoutingContext, renderProps));
        res.status(200).send(str);
      } else {
        res.status(404).send('Not found');
      }
  });
}
</code></pre>

<h2>routes.jsx:</h2>

<pre><code>  export default (withHistory, onUpdate) =&gt; {

  return (
    &lt;Provider store={store}&gt;
      &lt;Router history={history} onUpdate={onUpdate}&gt;
        &lt;Route path='/' component={BarcodeListing} /&gt;
      &lt;/Router&gt;
    &lt;/Provider&gt;
  );
};
</code></pre>

<p>The above code does not match <code>/</code>. Why is that. 
<code>console.log(req.url)</code> gives me <code>/</code>, then <code>/</code> in routes should match <code>/</code> in req.url right !!</p>
","3210476","","3210476","","2016-01-25 05:49:14","2016-01-25 05:49:14","How to setup server side rendering with react-router 2","<javascript><node.js><express><reactjs><react-router>","0","1","","",""
"34074064","1","34075255","","2015-12-03 19:00:51","","3","3628","<p>I am trying to use React &amp; React-router for server side rendering. So far, it's just a copy paste code from various sources. But I am getting syntax error (Not run-time error) when I try to run the app using node. Below is the code</p>

<p><strong>App.js</strong></p>

<pre><code>'use strict';
require('babel/register');

const express        = require('express');
const http           = require('http');
const handlebars     = require('express-handlebars');
const renderToString = require('react-dom').server;
const match          = require('react-router').match;
const RoutingContext = require('react-router').RoutingContext;
const Routes         = require('./routes');
const app            = express();
var server;

// JSX transpilation
require('node-jsx').install();

// Setting up handlebars
app.engine('.hbs', handlebars({
    extname: '.hbs',
    layoutsDir: 'views/server',
    partialsDir: 'views/server/partials'
}));

app.set('view engine', '.hbs');

// Mount Routes
app.use('*', function (req, res) {
    match({routes: routes, location: req.url}, (error, redirectLocation, renderProps) =&gt; {
        if (error) {
          res.status(500).send(error.message)
        } else if (redirectLocation) {
          res.redirect(302, redirectLocation.pathname + redirectLocation.search)
        } else if (renderProps) {
            console.log(renderProps);
            var pageData = {
                serverHtml: renderToString(&lt;RoutingContext {...renderProps} /&gt;)
            };
            console.log(pageData);
            res.render('base', pageData);
        } else {
          res.status(404).send('Not found')
        }
    });
});

server = http.createServer(app);

server.listen('3000', () =&gt; {
    console.log('Express server listening on port ' + 3000);
});
</code></pre>

<p>The Error that I get while running <code>node --harmony app.js</code> is</p>

<pre><code>serverHtml: renderToString(&lt;RoutingContext {...renderProps} /&gt;)
                                       ^
SyntaxError: Unexpected token &lt;
    at exports.runInThisContext (vm.js:73:16)
    at Module._compile (module.js:443:25)
    at Object.Module._extensions..js (module.js:478:10)
    at Module.load (module.js:355:32)
    at Function.Module._load (module.js:310:12)
    at Function.Module.runMain (module.js:501:10)
    at startup (node.js:129:16)
    at node.js:814:3
</code></pre>

<p>Do I need to install/transform(babelify/jsx) my code for processing the JSX style tags? But I didn't found any such thing stated in any tutorials online.</p>

<p>Resources I followed</p>

<ol>
<li><a href=""https://github.com/rackt/react-router/blob/master/docs/guides/advanced/ServerRendering.md"" rel=""nofollow"">React-router(Serverside Rendering)</a></li>
<li><a href=""https://ifelse.io/2015/08/27/server-side-rendering-with-react-and-react-router/"" rel=""nofollow"">Server Side Rendering by React</a></li>
</ol>
","1019746","","1019746","","2015-12-03 19:29:24","2016-10-04 03:50:15","Syntax Error: Unexpected token < while using renderToString(<RoutingContext {...renderProps} />","<javascript><node.js><reactjs><react-router>","2","4","1","",""
"34231501","1","","","2015-12-11 19:53:57","","0","764","<p>I've been building an isomorphic react app using node-jsx, browserify, reactify, etc. My code runs fine on the server, and components are mounted and rendered correctly. However, the react function doesn't seem to work, for instance, the handleClick function does not recognize alert(), or console.log() never prints out expected result on neither the server nor the client side console. Can anyone identify what's going on here?</p>

<p>UPDATE: Another thing I want to point out is, when I run the server and go to the browser, in the browser console(used chrome dev tool) I typed ""window.React"", it actually returned the React object. But console.log still doesn't do anything for click handler function.</p>

<p><strong>views/index.ejs</strong></p>

<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Shortened URL Generator&lt;/title&gt;
    &lt;link href='/style.css' rel=""stylesheet""&gt;
    &lt;link href=""css/griddle.css"" rel=""stylesheet"" /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1 id=""main-title""&gt;Welcome to Shortened URL Generator&lt;/h1&gt;

&lt;div id=""react-main-mount""&gt;
    &lt;%- reactOutput %&gt;
&lt;/div&gt;

&lt;!-- comment out main.js to see server side only rendering --&gt;
&lt;script src=""https://fb.me/react-with-addons-0.14.3.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://fb.me/react-dom-0.14.3.min.js""&gt;&lt;/script&gt;
&lt;script src=""/main.js""&gt;&lt;/script&gt;
&lt;script src=""//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js""&gt;&lt;/script&gt;
&lt;script src=""//fb.me/JSXTransformer-0.12.0.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""scripts/griddle.js""&gt;&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p><strong>routes/routes.js</strong></p>

<pre><code>    var React = require('react/addons'),
    ReactApp = React.createFactory(require('../components/ReactApp'));

    module.exports = function(app) {
    var storeUrls = {
        ""fb.com"": ""facebook.com""
    };
    app.get('/', function(req, res){
        // React.renderToString takes your component
        // and generates the markup
        var reactHtml = React.renderToString(ReactApp({}));
        // Output html rendered by react
        // console.log(myAppHtml);
        res.render('index.ejs', {reactOutput: reactHtml});
    });
    app.get('/:routeParam', function(req, res){

    });

};
</code></pre>

<p><strong>app/components/ReactApp.js</strong></p>

<pre><code>var TableComponent = require('./TableComponent');
var React = require('react/addons');
var urls = require('./url');
var Griddle = React.createFactory(require('griddle-react'));
var ReactApp = React.createClass({

componentDidMount: function () {
    console.log(""yes"");

},
handleClick: function() {
   // this.setState({liked: !this.state.liked});
    var longUrl = this.refs.inputUrl;
    urls.push({
        ""original url"": longUrl,
        ""shortened url"": ""/""
    })
    console.log(longurl);

},
render: function () {
    return (
        &lt;div&gt;
        &lt;div id=""form""&gt;
            &lt;form&gt;
             &lt;section&gt;Paste your long url here&lt;/section&gt;
             &lt;input ref=""inputUrl""  value={this.props.value} type=""text"" placeholder=""http://...."" /&gt;
             &lt;button onclick={this.handleClick} type=""submit"" value=""Submit""&gt;Shorten URL&lt;/button&gt;
            &lt;/form&gt;
        &lt;/div&gt;
            &lt;div id=""table-area""&gt;
                &lt;TableComponent /&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    )
}
});

module.exports = ReactApp;
</code></pre>

<p><strong>app/main.js</strong></p>

<pre><code>var React = require('react/addons');
var ReactApp = require('./components/ReactApp');
var TableComponent = require('./components/TableComponent');

var mountNode = document.getElementById('react-main-mount');
var mountTable= document.getElementById('table-area');

React.render(new ReactApp({}), mountNode);
React.render(new TableComponent({}), mountTable);
</code></pre>

<p><strong>server.js</strong>
<pre></p>

<pre><code>var express = require('express'),
path = require('path'),
app = express(),
port = 5000,
bodyParser = require('body-parser');

require('node-jsx').install();


// Include static assets. Not advised for production
app.use(express.static(path.join(__dirname, 'public')));
// Set view path
app.set('views', path.join(__dirname, 'views'));
// set up ejs for templating. You can use whatever
app.set('view engine', 'ejs');

// Set up Routes for the application
require('./app/routes/routes.js')(app);

//Route not found -- Set 404
app.get('*', function(req, res) {
    res.json({
    'route': 'Sorry this page does not exist!'
});
});

app.listen(port);
console.log('Server is Up and Running at Port : ' + port);
</code></pre>

<p><code></p>

<p><strong>Gulpfile.js</strong></p>

var gulp       = require('gulp');
var source = require('vinyl-source-stream'),
browserify = require('browserify');
gulp.task('scripts', function(){
return browserify({
   transform: [ 'reactify' ],
   entries: 'app/main.js'
})
.bundle()
.pipe(source('main.js'))
.pipe(gulp.dest('./public/'));
});
gulp.task('default', ['scripts']);
</code></pre>
","2146703","","2146703","","2015-12-11 20:37:44","2015-12-11 22:10:11","Isomorphic React - how to make react function as part of the window object","<javascript><gulp><browserify><isomorphic-javascript><reactify>","3","3","","",""
"34925717","1","34929045","","2016-01-21 13:54:29","","7","8772","<p>I'm working on moving my <code>react v0.14</code>+ <code>redux v3.0</code> + <code>react-router v1.0</code> codebase from client-side rendering to server-side rendering using <code>webpack v1.12</code> to bundle and code-split into chunks to load routes and components on-demand.</p>

<p>Im following and basing my setup on <a href=""https://github.com/rackt/example-react-router-server-rendering-lazy-routes"">https://github.com/rackt/example-react-router-server-rendering-lazy-routes</a> as I think it provides simplicity and great utilities. All day yesterday I have been working on moving to server-side rendering but I run into a few issues I haven't been able to solve and I'm not completely sure if they are because of <code>webpack</code> not being setup correctly, if am doing something wrong with <code>react-router</code> on the server/client or the routes config, or if its something I'm doing wrong with setting up <code>redux</code> that is causing these issues.</p>

<p>I run into the following issues:</p>

<ol>
<li>I'm able to load the initial page and everything works well but no other routes load and gives me <a href=""http://i.stack.imgur.com/YFga4.png"">GET http://localhost:3000/profile 404 (Not Found)</a></li>
<li>The index/home page javascript works but all assets(css) are rendered as <code>text/javascript</code> so the styles don't show up unless they are inline.</li>
</ol>

<h2>webpack.config.js</h2>

<pre class=""lang-js prettyprint-override""><code>var fs = require('fs')
var path = require('path')
var webpack = require('webpack')

module.exports = {

  devtool: 'source-map',

  entry: './client/client.jsx',

  output: {
    path: __dirname + '/__build__',
    filename: '[name].js',
    chunkFilename: '[id].chunk.js',
    publicPath: '/__build__/'
  },

  module: {
    loaders: [
      {
        test: /\.jsx?$/,
        exclude: /(node_modules|bower_components)/,
        loader: 'babel-loader'
      }
    ]
  },

  plugins: [
    new webpack.optimize.OccurenceOrderPlugin(),
    new webpack.optimize.DedupePlugin(),
    new webpack.optimize.UglifyJsPlugin({
      compressor: { warnings: false },
    }),
    new webpack.DefinePlugin({
      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development')
    })
  ]

}
</code></pre>

<h2>server.js</h2>

<pre class=""lang-js prettyprint-override""><code>import http from 'http';
import React from 'react';
import {renderToString} from 'react-dom/server';
import { match, RoutingContext } from 'react-router';
import {Provider} from 'react-redux';
import configureStore from './../common/store/store.js';

import fs from 'fs';
import { createPage, write, writeError, writeNotFound, redirect } from './server-utils.js';
import routes from './../common/routes/rootRoutes.js';

const PORT = process.env.PORT || 3000;

var store = configureStore();
const initialState = store.getState();

function renderApp(props, res) {
  var markup = renderToString(
    &lt;Provider store={store}&gt;
      &lt;RoutingContext {...props}/&gt;
    &lt;/Provider&gt;
  );
  var html = createPage(markup, initialState);
  write(html, 'text/html', res);
}

http.createServer((req, res) =&gt; {

  if (req.url === '/favicon.ico') {
    write('haha', 'text/plain', res);
  }

  // serve JavaScript assets
  else if (/__build__/.test(req.url)) {
    fs.readFile(`.${req.url}`, (err, data) =&gt; {
      write(data, 'text/javascript', res);
    })
  }

  // handle all other urls with React Router
  else {
    match({ routes, location: req.url }, (error, redirectLocation, renderProps) =&gt; {
      if (error)
        writeError('ERROR!', res);
      else if (redirectLocation)
        redirect(redirectLocation, res);
      else if (renderProps)
        renderApp(renderProps, res);
      else
        writeNotFound(res);
    });
  }

}).listen(PORT)
console.log(`listening on port ${PORT}`)
</code></pre>

<h2>server-utils</h2>

<p>Is the same as from the repo that I posted above <code>example-react-router-server-rendering-lazy-routes</code> just navigate to <code>/modules/utils/server-utils.js</code> in the repo.The only difference is the <code>createPage</code> function:</p>

<pre class=""lang-js prettyprint-override""><code>export function createPage(html, initialState) {
  return( `
  &lt;!doctype html&gt;
  &lt;html&gt;
    &lt;head&gt;
      &lt;meta charset=""utf-8""/&gt;
      &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;
      &lt;link rel=""stylesheet"" href=""./../bower_components/Ionicons/css/ionicons.min.css""&gt;
      &lt;link rel=""stylesheet"" href=""./../dist/main.css""&gt;
      &lt;title&gt;Sell Your Soles&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;div id=""app""&gt;${html}&lt;/div&gt;
      &lt;script&gt;window.__INITIAL_STATE__ = ${JSON.stringify(initialState)};&lt;/script&gt;
      &lt;script src=""/__build__/main.js""&gt;&lt;/script&gt;
    &lt;/body&gt;
  &lt;/html&gt;
  `);
}
</code></pre>

<h2>rootRoute.js</h2>

<pre class=""lang-js prettyprint-override""><code>// polyfill webpack require.ensure
if (typeof require.ensure !== 'function') require.ensure = (d, c) =&gt; c(require)

import App from '../components/App.jsx'
import Landing from '../components/Landing/Landing.jsx'

export default {
  path: '/',
  component: App,
  getChildRoutes(location, cb) {
    require.ensure([], (require) =&gt; {
      cb(null, [
        require('./UserProfile/UserProfileRoute.js'),
        require('./UserHome/UserHomeRoute.js'),
        require('./SneakerPage/SneakerPageRoute.js'),
        require('./Reviews/ReviewsRoute.js'),
        require('./Listings/ListingsRoute.js'),
        require('./Events/EventsRoute.js')
      ])
    })
  },
  indexRoute: {
    component: Landing
  }
}
</code></pre>

<h2>userProfileRoute.js</h2>

<pre class=""lang-js prettyprint-override""><code>import UserProfile from '../../components/UserProfile/UserProfile.jsx';

export default {
  path: 'profile',
  component: UserProfile
}
</code></pre>

<h2>client.js</h2>

<pre class=""lang-js prettyprint-override""><code>import React from 'react';
import { match, Router } from 'react-router';
import { render } from 'react-dom';
import { createHistory } from 'history';
import routes from './../common/routes/rootRoutes.js';
import {Provider} from 'react-redux';
import configureStore from './../common/store/store.js';


const { pathname, search, hash } = window.location;
const location = `${pathname}${search}${hash}`;

const initialState = window.__INITIAL_STATE__;
const store = configureStore(initialState);



// calling `match` is simply for side effects of
// loading route/component code for the initial location
match({ routes, location }, () =&gt; {
  render(
    &lt;Provider store={store}&gt;
      &lt;Router routes={routes} history={createHistory()} /&gt;
    &lt;/Provider&gt;,
    document.getElementById('app')
  );
});
</code></pre>
","3915146","","","","","2016-03-26 19:50:20","Using webpack and react-router for lazyloading and code-splitting not loading","<reactjs><webpack><react-router><redux>","2","0","2","",""
"41187292","1","","","2016-12-16 15:09:54","","0","162","<p>I'm trying to use the Apollo client and I am running into a few issues with dropping it into the react starter kit with redux.  <a href=""https://github.com/kriasoft/react-starter-kit/tree/feature/redux"" rel=""nofollow noreferrer"">https://github.com/kriasoft/react-starter-kit/tree/feature/redux</a></p>

<p>Trying to use the techniques from here: <a href=""http://dev.apollodata.com/react/server-side-rendering.html"" rel=""nofollow noreferrer"">http://dev.apollodata.com/react/server-side-rendering.html</a></p>

<p>But I get the error </p>

<pre><code>warning.js:36Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:
 (client) &lt;/div&gt;&lt;/header&gt;&lt;div data-reactid=""19""&gt;Lo
 (server) &lt;/div&gt;&lt;/header&gt;&lt;div class=""Home-root-2IM
</code></pre>

<p>Here's my implementation</p>

<pre><code>// server.js
...
const component = (
  &lt;App context={context}&gt;
    &lt;ApolloProvider client={context.client} store={context.store}&gt;
      {route.component}
    &lt;/ApolloProvider&gt;
  &lt;/App&gt;
);


await getDataFromTree(component);

data.children = ReactDOM.renderToString(component);
data.style = [...css].join('');
data.scripts = [
  assets.vendor.js,
  assets.client.js,
];
data.state = context.store.getState();
if (assets[route.chunk]) {
  data.scripts.push(assets[route.chunk].js);
}

const html = ReactDOM.renderToStaticMarkup(&lt;Html {...data} /&gt;);
res.status(route.status || 200);
res.send(`&lt;!doctype html&gt;${html}`);
...
</code></pre>

<p>And client side</p>

<pre><code>// client.js
...
const component = (
  &lt;App context={context}&gt;
    &lt;ApolloProvider client={context.client} store={context.store}&gt;
      {route.component}
    &lt;/ApolloProvider&gt;
  &lt;/App&gt;
);

appInstance = ReactDOM.render(
 component,
  container,
  () =&gt; onRenderComplete(route, location),
);
...


// Home.js

class Home extends React.Component {
  static propTypes = {
    collections: PropTypes.arrayOf(PropTypes.shape({
      id: PropTypes.string.isRequired,
      title: PropTypes.string.isRequired,
      subtitle: PropTypes.string.isRequired,
      photo: PropTypes.string,
    })).isRequired,
  };

  render() {
    const props = this.props;
    const { loading, allCollections } = props.data;

    if (loading) {
      return &lt;div&gt;Loading&lt;/div&gt;;
    } else {
      return (
        &lt;div className={s.root}&gt;
          &lt;div className={s.container}&gt;
            &lt;h1 className={s.title}&gt;Collections&lt;/h1&gt;
            &lt;ul&gt;
              {allCollections.map((collection) =&gt;
                &lt;li key={collection.id}&gt;
                  &lt;h3&gt;{collection.title}&lt;/h3&gt;
                  &lt;img src={collection.photo} width=""200""/&gt;
                &lt;/li&gt;
              )}
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      );
    }

  }
}

Home.propTypes = {
  data: PropTypes.shape({
    loading: PropTypes.bool.isRequired,
    allCollections: PropTypes.array,
  }).isRequired,
};


const HomeWithStyles =  withStyles(s)(Home);
const HomeWithData = graphql(getQuery)(HomeWithStyles);
export default connect()(HomeWithData);



// App.js
import React, { Children, PropTypes } from 'react';

const ContextType = {
  // Enables critical path CSS rendering
  // https://github.com/kriasoft/isomorphic-style-loader
  insertCss: PropTypes.func.isRequired,
  // Integrate Redux
  // http://redux.js.org/docs/basics/UsageWithReact.html
  store: PropTypes.shape({
    subscribe: PropTypes.func.isRequired,
    dispatch: PropTypes.func.isRequired,
    getState: PropTypes.func.isRequired,
  }).isRequired,
  client: PropTypes.object.isRequired,
};

/**
 * The top-level React component setting context (global) variables
 * that can be accessed from all the child components.
 *
 * https://facebook.github.io/react/docs/context.html
 *
 * Usage example:
 *
 *   const context = {
 *     history: createBrowserHistory(),
 *     store: createStore(),
 *   };
 *
 *   ReactDOM.render(
 *     &lt;App context={context}&gt;
 *       &lt;Layout&gt;
 *         &lt;LandingPage /&gt;
 *       &lt;/Layout&gt;
 *     &lt;/App&gt;,
 *     container,
 *   );
 */
class App extends React.PureComponent {

  static propTypes = {
    context: PropTypes.shape(ContextType).isRequired,
    children: PropTypes.element.isRequired,
  };

  static childContextTypes = ContextType;

  getChildContext() {
    return this.props.context;
  }

  render() {
    // NOTE: If you need to add or modify header, footer etc. of the app,
    // please do that inside the Layout component.
    return Children.only(this.props.children);
  }

}

export default App;
</code></pre>
","611750","","611750","","2016-12-17 18:45:12","2016-12-23 18:41:48","Getting checksum invalid warning when using apollo client isomorphically with react starter kit","<react-redux><isomorphic-javascript><react-starter-kit><react-apollo>","1","2","","",""
"34385690","1","34386489","","2015-12-20 20:48:29","","1","655","<p>When trying to render my react application on the server, I'm receiving the following error:</p>

<blockquote>
  <p>Error: Uncaught error: Invariant Violation: Element type is invalid:
  expected a string (for built-in components) or a class/function (for
  composite components) but got: undefined.</p>
</blockquote>

<p>Here is my server.js code, I've removed the server configuration for brevity.</p>

<pre><code>import hapi from 'hapi';
import inert from 'inert';
import path from 'path';
import fs from 'fs';
import React from 'react';
import { ReactDOM, renderToString } from 'react-dom/server';
import { RouterContext, ReactRouter, match } from 'react-router';
import { Provider } from 'react-redux';
import routes from './src/config/routes';
import store from './src/flux/store';

...
      match({routes, location: request.url.path}, function(err, redirectLocation, renderProps) {

        if (err) {
          reply(err.message).status(500);
        } else if (redirectLocation) {
          reply()
            .redirect(redirectLocation.pathname + redirectLocation.search)
            .code(302);

        } else if (renderProps) {

          var element = (
            &lt;RouterContext {...renderProps} /&gt;
          );

          console.log(element);

          reply(renderToString(element)).code(200);

        } else {
          reply('Page Not Found')
        }
     });
</code></pre>

<p>The renderProps block of the if statement is getting called, and this is where the error is thrown.</p>

<p>EDIT: When I console.log RouterContext after my import from react-router, I'm getting undefined.</p>

<p>You can view my package.json for versions here: <a href=""http://pastebin.com/mpb6XSKu"" rel=""nofollow"">http://pastebin.com/mpb6XSKu</a></p>
","324243","","324243","","2015-12-20 21:24:16","2015-12-20 22:19:20","React, redux, and react-router server side rendering","<reactjs><react-router><redux>","1","0","","",""
"35659860","1","","","2016-02-26 19:13:21","","6","1575","<p>How can I render images and css files on server side with React?</p>

<p>Here is my server code:</p>

<pre><code>const express = require('express')
const router = express.Router()
const ReactDOM = require('react-dom/server');

import Master from '../../../client/Master'

router.get('/', (req, res) =&gt; {
    res.render('test.html', {reactOutput: ReactDOM.renderToString(&lt;Master/&gt;)});
});
</code></pre>

<p>Master component:</p>

<pre><code>import React from ""react"";
import Intro from ""./pages/Intro"";
import Footer from ""./components/Footer"";
import Header from ""./components/Header"";

export default class Master extends React.Component {
    constructor() {
        super();
        this.state = {appStatus: 'INTRO'}
    }

    render() {
        let layout;
        switch (this.state.appStatus) {
            case ""INTRO"":
                layout = &lt;Intro/&gt;;
        }

        return (
            &lt;div&gt;
                &lt;Header/&gt;
                {layout}
                &lt;Footer/&gt;
            &lt;/div&gt;
        )
    }
}
</code></pre>

<p>But when I run server with babel I got this error:</p>

<blockquote>
  <p>/assets/img/logo.png: Unexpected character '?' (1:0)</p>
</blockquote>

<p>And this is the Header component which tries to require logo.</p>

<pre><code>import React from ""react"";
**import logo  from '../../assets/img/logo.png';**

export default class Header extends React.Component {
    constructor() {
        super();
    }

    render() {
        return (
            &lt;nav class=""navbar navbar-default""&gt;
                &lt;div class=""container-fluid""&gt;
                    &lt;div class=""navbar-header""&gt;
                        &lt;button type=""button"" class=""navbar-toggle collapsed"" data-toggle=""collapse"" data-target=""#bs-example-navbar-collapse-1"" aria-expanded=""false""&gt;
                            &lt;span class=""sr-only""&gt;Toggle navigation&lt;/span&gt;
                            &lt;span class=""icon-bar""&gt;&lt;/span&gt;
                            &lt;span class=""icon-bar""&gt;&lt;/span&gt;
                            &lt;span class=""icon-bar""&gt;&lt;/span&gt;
                        &lt;/button&gt;
                        &lt;a class=""navbar-brand"" href=""#""&gt;**&lt;img width=""250"" src={logo} alt=""""/&gt;&lt;/a&gt;**
                    &lt;/div&gt;


                &lt;/div&gt;
            &lt;/nav&gt;
        );
    }
}
</code></pre>

<p>But it works fine with webpack for client side..</p>
","3787583","","3787583","","2017-05-23 10:23:34","2017-07-18 17:56:37","How to render images with react on server side?","<javascript><node.js><image><reactjs><express>","1","0","4","",""
"33789373","1","33950358","","2015-11-18 20:07:08","","1","196","<p>Hopefully this doesn't sound too ridiculous but, is it fine to do the following?</p>

<pre><code>app.get('/', function(req, res) {
    res.send(ReactDOMServer.renderToString(MainLayout()));
});
</code></pre>

<p>where MainLayout() is a React class that contains the entire page.</p>

<pre><code>var React = require('react');

var MainLayout = React.createClass({
  getInitialState: function () {
      return {
          headerStyle : {'border': '1px solid #ccc'}
      };
  },
  changeStyle: function () {
      this.setState({headerStyle: {'border': '1px solid #ab1'}});
  },
  render: function() {
    return (
        &lt;html&gt;
            &lt;head&gt;
                &lt;title&gt;This is a test.&lt;/title&gt;
            &lt;/head&gt;
            &lt;body&gt;
                &lt;div onClick={this.changeStyle} style={this.state.headerStyle}&gt;
                    Hi {this.props.name}
                &lt;/div&gt;
                &lt;script type=""text/javascript"" src='/public/js/app.js'&gt;&lt;/script&gt;
            &lt;/body&gt;
        &lt;/html&gt;
    );
  }
});

module.exports = MainLayout;
</code></pre>

<p>I've managed to get the page to render, but my onClick doesn't seem to respond to my clicks after the page loads.</p>

<p>I just want to know if its possible doing this using Nodejs, React 0.14, and Babel with react presets.</p>
","1634454","","","","","2015-11-27 04:40:13","Can I res.send an entire page in a react class for nodejs isomorphic react?","<node.js><reactjs>","1","0","","",""
"41168615","1","","","2016-12-15 16:12:22","","0","601","<p>I have an application with webpack configured as a module bundler and babel as my js compiler. all on a node engine. I stetted up that when I run <code>npm run dev</code> the following flow will happen:</p>

<p>The <code>webpack-dev-server.js</code> will run. the file is the following:</p>

<pre><code>const Express = require('express');
const webpack = require('webpack');
const webpackConfig = require('./dev.config');
const compiler = webpack(webpackConfig);

const host = 'localhost';
const port = 8080;
const serverOptions = {
  contentBase: `http://${host}:${port}`,
  quiet: true,
  noInfo: true,
  hot: true,
  inline: true,
  lazy: false,
  publicPath: webpackConfig.output.publicPath,
  headers: { 'Access-Control-Allow-Origin': '*' },
  stats: { colors: true },
};

const app = new Express();

app.use(require('webpack-dev-middleware')(compiler, serverOptions));
app.use(require('webpack-hot-middleware')(compiler));

app.listen(port, function onAppListening(err) {
  if (err) {
    console.error(err);
  } else {
    console.info('==&gt; Webpack development server listening on port %s', port);
  }
});
</code></pre>

<p>Then the <code>server.js</code></p>

<pre><code>require('./../server.babel');
const path = require('path');
const WebpackIsomorphicTools = require('webpack-isomorphic-tools');
const rootDir = path.resolve(require('../server/config').rootDir);

global.__CLIENT__ = false;
global.__SERVER__ = true;
global.__DEVELOPMENT__ = process.env.NODE_ENV !== 'production';

if (__DEVELOPMENT__) {
  if (!require('piping')({
    hook: true,
    ignore: /(\/\.|~$|\.json|\.scss$)/i
  })) {
    return;
  }
}

global.webpackIsomorphicTools = new WebpackIsomorphicTools(require('../webpack/webpack-isomorphic-tools'))
  .development(__DEVELOPMENT__)
  .server(rootDir, () =&gt; {
    require('../server/server');
  });
</code></pre>

<p>express and React rendering:</p>

<pre><code>import 'babel-polyfill';
// Server
import express from 'express';
import session from 'express-session';
import cookieParser from 'cookie-parser';
// React
import React from 'react';
import ReactDOM from 'react-dom/server';
import createHistory from 'react-router/lib/createMemoryHistory';
import { match } from 'react-router';
// Redux
import { Provider } from 'react-redux';
import { ReduxAsyncConnect, loadOnServer } from 'redux-connect';
import { syncHistoryWithStore } from 'react-router-redux';
import path from 'path';
import csurf from 'csurf';
import bodyParser from 'body-parser';
// Relative imports
import Html from '../shared/html';
import proxy from './proxy';
import createStore from '../shared/redux/create';
import { staticPath } from './config';
import { getRoutes } from '../shared/routes';

require('dotenv').config({
  path: path.resolve(__dirname, '../.env'),
});

const SERVER_PORT = process.env.SERVER_PORT;
const APP_SECRET = process.env.APP_SECRET;
const API_PORT = process.env.API_PORT;
const API_HOST = process.env.API_HOST;

function renderPage({ renderProps, store, res, client, csrfToken }) {
  loadOnServer({ ...renderProps, store, helpers: { client } })
    .then(() =&gt; {
      const component = (
        &lt;Provider store={store} key=""provider""&gt;
          &lt;ReduxAsyncConnect {...renderProps} /&gt;
        &lt;/Provider&gt;
      );
      res.status(200);
      res.send('&lt;!doctype html&gt;\n' +
        ReactDOM.renderToString(
          &lt;Html
            assets={webpackIsomorphicTools.assets()}
            component={component}
            csrfToken={csrfToken}
            store={store}
          /&gt;,
        ),
      );
    })
    .catch((err) =&gt; {
      console.error(err.stack);
    });
}


const app = express();
const csrf = csurf();

// express middlewares
// app.use(favicon(path.resolve(__dirname, '../static/favicon.ico'))); @TODO favicon @ilanus
app.use(bodyParser.json());
app.use(express.static(staticPath));
app.use(cookieParser(APP_SECRET));
app.use(session({
  secret: APP_SECRET,
  saveUninitialized: true,
  resave: true,
}));
app.use(csrf);
app.use('/api', (req, res) =&gt; {
  if (!req.xhr) res.redirect('/');
  proxy.web(req, res, { target: `http://${API_HOST}:${API_PORT}` });
});
app.use((req, res) =&gt; {
  const csrfToken = req.csrfToken();
  if (__DEVELOPMENT__) {
    // Do not cache webpack stats: the script file would change since
    // hot module replacement is enabled in the development env
    webpackIsomorphicTools.refresh();
  }
  const memoryHistory = createHistory(req.originalUrl);
  const store = createStore({}, memoryHistory);
  const history = syncHistoryWithStore(memoryHistory, store);
  match({ history, routes: getRoutes(store), location: req.originalUrl },
    (error, redirectLocation, renderProps) =&gt; {
      if (redirectLocation) {
        res.redirect(redirectLocation.pathname + redirectLocation.search);
      } else if (error) {
        console.error('ROUTER ERROR:', error);
        res.status(500);
      } else if (renderProps) {
        renderPage({ renderProps, store, res, csrfToken });
      } else {
        res.status(404).send('Not found');
      }
    });
});

app.use((err, req, res) =&gt; {
  if (err === 'EBADCSRFTOKEN') {
    res.status(403);
    res.send('invalid csrf token');
  } else {
    res.status(500);
    res.send('Oops, internal server error');
  }
});

app.listen(SERVER_PORT, (error) =&gt; {
  if (error) {
    console.error(error);
  } else {
    console.info(`App started listening on port ${SERVER_PORT}`);
  }
});
</code></pre>

<p>Now whenever I try to <code>console.log('window', window, 'sessionStorage', sessionStorage);</code> within a <code>render()</code> function or <code>componentDidMount()</code> of a react component I end up with: <code>sessionStorage is not defined, window is not defined</code> errors. I guess that's because I am running the stack on the server-side and those are not available there what am I missing? </p>
","6732575","","","","","2016-12-15 20:11:37","ReactDOM.renderToString sessionStorage is not defined, window is not defined","<javascript><node.js><reactjs><webpack>","1","0","1","",""
"45266430","1","","","2017-07-23 14:50:37","","0","152","<p>I have a problem with setting up server side rendering with create-react-app boilerplate, consider the following code:</p>

<p>Here I'm getting data needed to prereder:</p>

<pre><code>app.use((req, res, next) =&gt; {
  getCategories().then((categories) =&gt; {
    req.categories = categories;
    next();
  })
})
</code></pre>

<p>Then getting bundled index.html like this:</p>

<pre><code>const index = fs.readFileSync((path.resolve(__dirname, '..', 'build', 'index.html')), 'utf8')
</code></pre>

<p>And finally here is function that is supposed to render app on server:</p>

<pre><code>app.use((req, res) =&gt; {
  const context = {}
  const store = configureStore()
  store.dispatch(req.categories)
  const html = renderToString(
    &lt;Provider store={store}&gt;
    &lt;StaticRouter location={req.url} context={context}&gt;
      &lt;Routes/&gt;
    &lt;/StaticRouter&gt;
    &lt;/Provider&gt;
  )
  if (context.url) {
    res.writeHead(301, {Location: context.url})
    res.end()
  } else {
    res.write(index.replace(
        /&lt;div id=""root""&gt;&lt;\/div&gt;/,
    `&lt;div id=""root""&gt;${html}&lt;/div&gt;`
    ));
    res.end()
  }
})
</code></pre>

<p>What I am getting is static html witouth style and javascript, just bunch of black and white text.</p>

<p>Consider this situation, when I add this before SSR function</p>

<pre><code>app.use(express.static(path.resolve(__dirname, '..', 'build')));
</code></pre>

<p>I got app as expected (with styles and javascript loaded) - but server side render function is not fired at all.</p>

<p>What am I supposed to do, how can I serve whole app with prerendered data, styles and javascript?</p>

<p>It would be great if I can render only static html with data on server (SEO issues), and then on client apply styles and javascript.</p>
","6287311","","","","","2017-07-23 14:50:37","Server side rendering with create-react-app","<reactjs><express><redux><react-router-v4><serverside-rendering>","0","1","","",""
"45267613","1","","","2017-07-23 16:52:39","","1","349","<p>I am trying to set up my own boilerplate for creating react app just to know what is going on behind the scenes.</p>

<p>I am stuck at server rendering using Webpack/ Express/ react-router v4. Just don't know how to solve it.</p>

<p>My <code>express.js</code> file looks like this:</p>

<pre><code>const express = require('express');
const morgan = require('morgan');
const path = require('path');
const React = require('react');
const ReactDOMServer = require('react-dom/server');
const StaticRouter = require('react-router').StaticRouter;
const App = require('./src/app');

const app = express();

// Views
app.set('view engine', 'ejs');
app.set('views', path.resolve(__dirname, 'src', 'templates'))

// Middlewares
app.use(morgan(':method :url :status :res[content-length] - :response-time ms'));
app.use(express.static(path.resolve(__dirname, 'dist')));

// Paths
app.get('*', (req, res) =&gt; {
  const context = {}
  const html = ReactDOMServer.renderToString(
    &lt;StaticRouter
      location={req.url}
      context={context}
    &gt;
      &lt;App/&gt;
    &lt;/StaticRouter&gt;
  )
  res.render('index', {reactOutput: html});
  // Then in my index.ejs put a &lt;%- reactOutput %&gt; 
});

const port = 8000;
app.listen(port, () =&gt; {
  console.log('Listening on port', port);
})
</code></pre>

<p>What are the next steps to make it work? What I was thinking:
1. Define new entry in <code>webpack.config.js</code> for <code>express.js</code>
2. Fire up the <code>express.bundle.js</code> created by Webpack using <code>node express.bundle.js</code></p>

<p>But as soon as I try to run <code>webpack -p</code> I get errors:</p>

<pre><code>ERROR in ./node_modules/express/lib/request.js
Module not found: Error: Can't resolve 'net' in '/Users/NYC/Desktop/JavaScript/Boilerplate/client/node_modules/express/lib'

ERROR in ./node_modules/express/lib/view.js
Module not found: Error: Can't resolve 'fs' in '/Users/NYC/Desktop/JavaScript/Boilerplate/client/node_modules/express/lib'

ERROR in ./node_modules/send/index.js
Module not found: Error: Can't resolve 'fs' in '/Users/NYC/Desktop/JavaScript/Boilerplate/client/node_modules/send'

ERROR in ./node_modules/etag/index.js
Module not found: Error: Can't resolve 'fs' in '/Users/NYC/Desktop/JavaScript/Boilerplate/client/node_modules/etag'

ERROR in ./node_modules/destroy/index.js
Module not found: Error: Can't resolve 'fs' in '/Users/NYC/Desktop/JavaScript/Boilerplate/client/node_modules/destroy'

ERROR in ./node_modules/mime/mime.js
Module not found: Error: Can't resolve 'fs' in '/Users/NYC/Desktop/JavaScript/Boilerplate/client/node_modules/mime'
</code></pre>
","5433335","","","","","2017-07-23 16:58:19","ExpressJS + Webpack + react-router v4","<node.js><reactjs><express><react-router><server-side>","1","0","1","",""
"32539357","1","32540332","","2015-09-12 13:25:48","","0","159","<p>I have a node module (data) that exports an object. This object has properties who's values change.</p>

<pre><code>var data = require('data');
var count = data.count;
</code></pre>

<p><code>data.count</code> is changing it's value (lets pretend it is seconds that are counting).</p>

<p>I use express and handlebars and i currently display the data like this:</p>

<pre><code>var express = require('express');
var router = express.Router();

router.get('/', function(req, res, next) {
    res.render('index', { title: 'Home', data: count });
});
</code></pre>

<p>Doing it this way requires the page to be refreshed to see the updated value. My question is: <strong>How can I display the value of count in real time without having to refresh the page?</strong></p>

<p>I have been looking into <strong>React</strong> but I don't really understand how to set it up. I read some tutorials talking about the react module (nom install react) but there is not much documentation on how to use it. I understand the easy guide on the react website but that inserts react script on the client.</p>

<p>If someone can point me in the right direction that would be great.</p>

<p>Thank you.</p>

<p><strong>UPDATE:</strong></p>

<p>So I installed <code>npm insatll react</code> and <code>npm install babel</code> and created a component in react that looks like this (<code>comp.jsx</code>):</p>

<pre><code>var React = require('react/addons');
var data = require('data');

var d = React.createClass({
    render: function() {
        return (
            &lt;h1&gt;{data.votes}&lt;/h1&gt;
        );
    }
});

module.exports.Component = d;
</code></pre>

<p>I included this component in my routes file that now looks like this:</p>

<pre><code>require('babel/register');
var React = require('react/addons');

var data = React.createFactory(require('comp.jsx').Component);

router.get('/', function(req, res, next) {
    var dataHtml = React.renderToString(data({}));
    res.render('index', { reactOutput: data });
});
</code></pre>

<p>The data is displayed in my handlebars template like this: <code>{{{reactOutput}}}</code>. The data is shown but still does not update in realtime, the page has to be refreshed to show the change of data.</p>

<p>Any ideas?</p>
","2553101","","2553101","","2015-09-12 14:59:16","2015-09-12 15:29:21","display data from node module in real time using react","<javascript><node.js><reactjs>","1","4","","",""
"44961697","1","44961979","","2017-07-07 02:37:49","","2","1375","<p>I'm working on setting up server-side rendering for my React/Express app, but I'm encountering a syntax error relating to the call to the <code>react-dom/server</code> <code>renderToString()</code> method.  I'm loosely following this tutorial - <a href=""http://crypt.codemancers.com/posts/2016-09-16-react-server-side-rendering/"" rel=""nofollow noreferrer"">http://crypt.codemancers.com/posts/2016-09-16-react-server-side-rendering/</a></p>

<p><code>index.js</code> (Express app root):</p>

<pre><code>'use strict'
require('babel-register')({
    presets: ['es2015', 'react']
});

const express = require('express')
const path = require('path')
const app = express()
const React = require('react')
const reactDomServer = require('react-dom/server')
const routes = require('./src/routes.jsx')
const reactRouter = require('react-router')
let { match, RouterContext } = reactRouter

app.get('*', (req, res) =&gt; {
    match({ routes: routes, location: req.url }, (err, redirect, props) =&gt; {
        const appHtml = reactDomServer.renderToString(&lt;RouterContext {...props}/&gt;)
        res.send(renderPage(appHtml))
    })
})
</code></pre>

<p>However, this causes the error:</p>

<pre><code>const appHtml = reactDomServer.renderToString(&lt;RouterContext {...props}/&gt;)
                                              ^
SyntaxError: Unexpected token &lt;
</code></pre>

<p>All of the similar examples that I've seen have a straight JSX component dropped in... what am I missing?</p>
","5203069","","5203069","","2017-07-07 02:50:59","2017-07-07 03:13:28","React/Express - 'Unexpected token <' in call to renderToString()","<javascript><reactjs><express><react-router>","2","0","1","",""
"43476977","1","","","2017-04-18 15:59:40","","1","362","<p>I'm working in a <code>Meteor</code> + <code>React</code> project that requires using <code>react-router</code> for server-side rendering (SSR). The current <code>react-router</code> version is <code>v3</code> and I followed a tutorial about SSR <a href=""https://github.com/reactjs/react-router-tutorial/tree/master/lessons/13-server-rendering"" rel=""nofollow noreferrer"">here</a>. The steps in summary are:  </p>

<ul>
<li>Create a common routes file</li>
<li>Include the routes file in client-side router</li>
</ul>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// index.js
import React from 'react'
import { render } from 'react-dom'
import { Router, browserHistory } from 'react-router'
// import routes and pass them into &lt;Router/&gt;
import routes from './modules/routes'

render(
  &lt;Router routes={routes} history={browserHistory}/&gt;,
  document.getElementById('app')
)</code></pre>
</div>
</div>
</p>

<ul>
<li>In the server-side: match the routes to the url, render the right component for each route  </li>
</ul>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import { WebApp } from 'meteor/webapp';
import express from 'express';

const app = express();
app.get('*', (req, res) =&gt; {
  // match the routes to the url
  match({ routes: routes, location: req.url }, (err, redirect, props) =&gt; {
    // `RouterContext` is what the `Router` renders. `Router` keeps these
    // `props` in its state as it listens to `browserHistory`. But on the
    // server our app is stateless, so we need to use `match` to
    // get these props before rendering.
    const appHtml = renderToString(&lt;RouterContext {...props}/&gt;)

    // dump the HTML into a template, lots of ways to do this, but none are
    // really influenced by React Router, so we're just using a little
    // function, `renderPage`
    res.send(renderPage(appHtml))
  })
})

function renderPage(appHtml) {
  return `
    &lt;!doctype html public=""storage""&gt;
    &lt;html&gt;
    &lt;meta charset=utf-8/&gt;
    &lt;title&gt;My First React Router App&lt;/title&gt;
    &lt;link rel=stylesheet href=/index.css&gt;
    &lt;div id=app&gt;${appHtml}&lt;/div&gt;
    &lt;script src=""/bundle.js""&gt;&lt;/script&gt;
   `
}
WebApp.connectHandlers.use(app);</code></pre>
</div>
</div>
</p>

<p>The problem here is that every time I navigate to a new route in client-side, it sends a new request to server to get the rendered page. In the tutorial app, there's only a single initial request that is sent to server, from that time the client will take over and handle routing (which is the correct/expected behaviour).<br>
PS: I use <code>react-router</code>'s <code>&lt;Link /&gt;</code> component for links to routes. This is how I render them:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>          </code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div className=""row""&gt;
    &lt;div className=""eight columns offset-by-two""&gt;
      &lt;nav className=""appFooter-nav""&gt;
        &lt;Link to=""/listeners"" className=""appFooter-nav-link""&gt;Life Guides&lt;/Link&gt;
        &lt;Link to=""/mission"" className=""appFooter-nav-link""&gt;Mission&lt;/Link&gt;
        &lt;Link to=""/contact"" className=""appFooter-nav-link""&gt;Contact&lt;/Link&gt;
        &lt;Link to=""/legals"" className=""appFooter-nav-link""&gt;Legals&lt;/Link&gt;
      &lt;/nav&gt;
    &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>

<p>This is how it's rendered:<br>
<a href=""https://i.stack.imgur.com/OKDpr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/OKDpr.png"" alt=""enter image description here""></a></p>
","2587129","","2587129","","2017-04-19 10:18:04","2017-04-19 10:18:04","Use react-router for SSR: client sends a new request to server for every route","<javascript><reactjs><meteor><react-router><serverside-rendering>","0","5","1","",""
"35179511","1","","","2016-02-03 14:17:34","","0","106","<p>Using the server rendering examples for <code>react-dom</code> causes syntax errors related to JSX:</p>

<pre><code>renderToString(&lt;RouterContext {...renderProps} /&gt;;
                                 ^

SyntaxError: Unexpected token &lt;
</code></pre>

<p>I am trying to use this in my Koa application but can't figure how to get Node to support it. Do the examples around the web assume that the code is processed with Babel?</p>
","1257262","","","","","2016-02-03 14:17:34","Server rendering syntax for react-dom?","<javascript><reactjs><react-router><koa><react-dom>","0","4","","",""
"48957606","1","48957785","","2018-02-23 23:24:20","","0","97","<p>I have a simple node.js app that should be responding to requests with pure HTML using React's <code>renderToString</code> function. The code for rendering and responding looks like this:</p>

<pre><code>const markup = renderToString(
    &lt;Provider {...stores}&gt;
        &lt;Router location={req.url} context={{}} history={browserHistory}&gt;
            &lt;Routes/&gt;
        &lt;/Router&gt;
    &lt;/Provider&gt;
);

res.status(200).send(markup);
</code></pre>

<p>And the HTML response:</p>

<pre><code>&lt;section data-reactroot=""""&gt;
    &lt;h1&gt;Header&lt;/h1&gt;
    &lt;div&gt;Body&lt;/div&gt;
&lt;/section&gt;
</code></pre>

<p>I don't want any trace of react in the output. Is there a way, when rendering with react, to not include the <code>data-reactroot</code> or any other traces of react?</p>
","5781737","","","","","2018-02-23 23:49:52","Node/react how to return pure html rendered with react and send to client","<javascript><node.js><reactjs><render-to-string>","2","0","","",""
"49716230","1","","","2018-04-08 09:04:36","","0","81","<p>I am working on a web project.
In this project we use server side rendering with node , express and react.
For fetching data and Redux , we use Redux-Saga.
There is only one problem.
Every page is rendered from server and when we get to browser, our app acts like a client side application.
If a page has some ajax calls, and that page renders from server, although it has all data it needs from server , in client side it makes the ajax calls.
I want to stop the additional ajax calls.
I want to skip the ajax calls for the requested page from server only.</p>

<p>this is index.jsx file for client side.</p>

<pre><code>import App from './App'
import ReactDOM from 'react-dom'
import React from 'react';
import { Provider } from 'react-redux';
import { ConnectedRouter } from 'react-router-redux'
import getStore from './getStore';
import createHistory from 'history/createBrowserHistory';

import './styles/styles.scss';

const history = createHistory();
const store = getStore(history);

if (module.hot) {
    module.hot.accept('./App', () =&gt; {
        const NextApp = require('./App').default;
        render(NextApp);
    });
}

const render = (_App) =&gt; {
    ReactDOM.render(
    &lt;Provider store={store}&gt;
        &lt;ConnectedRouter history={history}&gt;
            &lt;_App /&gt;
        &lt;/ConnectedRouter&gt;
    &lt;/Provider&gt;
    , document.getElementById(""AppContainer""));
};

store.subscribe(() =&gt; {
const state = store.getState();
if (state.items.length &gt; 0) {
    render(App);
}
});
const fetchDataForLocation = location =&gt; {
if (location.pathname === ""/"") {
    store.dispatch({ type: `REQUEST_FETCH_ITEMS` });
}
};
fetchDataForLocation(history.location);
 history.listen(fetchDataForLocation);
</code></pre>

<p>this is the index.js file for server</p>

<pre><code>import path from 'path';
import express from 'express';
import webpack from 'webpack';
import yields from 'express-yields';
import fs from 'fs-extra';
import App from '../src/App';
import { renderToString } from 'react-dom/server';
import React from 'react'
import { argv } from 'optimist';
import { ConnectedRouter } from 'react-router-redux';
import getStore from '../src/getStore'
import { Provider } from 'react-redux';
import createHistory from 'history/createMemoryHistory';
import open from 'open';
import { get } from 'request-promise';

const port = process.env.PORT || 4000;
const app = express();

const useServerRender = argv.useServerRender === 'true';
const inDebugMode = argv.inDebugMode == 'true';

let indexPath = inDebugMode ? '../public/index.html' : './public/index.html';
let mediaPath = inDebugMode ? '../src/styles/media' : './src/styles/media';

app.use('/media', express.static(mediaPath));

function* getItems() {
    let data = yield get(""http://localhost:3826/api/item/getall"", { gzip: true });
    return JSON.parse(data);
}

if (process.env.NODE_ENV === 'development') {
    const config = require('../webpack.config.dev.babel.js').default;
    const compiler = webpack(config);

    app.use(require('webpack-dev-middleware')(compiler, {
        noInfo: true,
        stats: {
            assets: false,
            colors: true,
            version: false,
            hash: false,
            timings: false,
            chunks: false,
            chunkModules: false
        }
    }));
    app.use(require('webpack-hot-middleware')(compiler));
} else {
    app.use(express.static(path.resolve(__dirname, '../dist')));
}

app.get(['/', '/aboutus'], function* (req, res) {
    let index = yield fs.readFile(indexPath, ""utf-8"");

    const initialState = {
        items: []
    };

    if (req.path == '/') {
        const items = yield getItems();
        initialState.items = items.data.items;
    }

    const history = createHistory({
        initialEntries: [req.path]
    });

    const store = getStore(history, initialState);

    if (useServerRender) {
        const appRendered = renderToString(
            &lt;Provider store={store}&gt;
                &lt;ConnectedRouter history={history}&gt;
                    &lt;App /&gt;
                &lt;/ConnectedRouter&gt;
            &lt;/Provider&gt;
        );
        index = index.replace(`&lt;%= preloadedApplication %&gt;`, appRendered)
    } else {
        index = index.replace(`&lt;%= preloadedApplication %&gt;`, `Please wait while we load the application.`);
    }
    res.send(index);
});

app.listen(port, '0.0.0.0', () =&gt; {
    console.info(`Listening at http://localhost:${port}`);
    if (process.env.NODE_ENV === 'development') {
        open(`http://localhost:${port}`);
    }
});
</code></pre>

<p>I think if somehow we are able to use server side store in client side, we may overcome this problem.</p>
","4287032","","4287032","","2018-04-08 09:28:52","2018-04-08 09:28:52","react + redux + saga + server side rendering + how to stop additional ajax calls for server side rendered page?","<ajax><reactjs><redux><serverside-rendering><isomorphic-javascript>","0","0","","",""
"35033788","1","35034055","","2016-01-27 09:45:41","","0","60","<p>I saw this <a href=""https://github.com/DavidWells/isomorphic-react-example"" rel=""nofollow"">https://github.com/DavidWells/isomorphic-react-example</a> and create another simple one,but the error message is can't find module app,is it miss  something?Or how should I change the code?thanks</p>

<p>server.js</p>

<pre><code>var express = require('express');
var exphbs  = require('express-handlebars');

var app = express();

require(""node-jsx"").install();
var React = require(""react"");
 App = React.createFactory(require(""app""));


app.engine('handlebars', exphbs());
app.set('view engine', 'handlebars');

app.get('/', function (req, res) {
    var markup = React.renderToString(App());  
    res.render('main', { 
     title: 'Express',
    markup: markup 
  });
});


app.listen(3000);
</code></pre>

<p>app.js</p>

<pre><code> var React = require(""react"");


var App = React.createClass({
  getInitialState() {
    return {
      search: """"
    };
  },
  render() {
    return (
      &lt;div className=""search-component""&gt;
        &lt;input type=""text"" onChange={this.changeSearch} /&gt;
        &lt;p&gt;&lt;span&gt;You are searching for: {this.state.search}&lt;/span&gt;&lt;/p&gt;
      &lt;/div&gt;
    );
  },
  changeSearch(event) {
    var text = event.target.value;

    this.setState({
      search: text
    });
  }
});


module.exports = App;
</code></pre>

<p>main.handlebars</p>

<pre><code> &lt;!DOYCYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
var as = ""as"";
&lt;/script&gt;

&lt;body&gt;
&lt;p&gt; main &lt;/p&gt;
{{{markup}}}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
","5584828","","5584828","","2016-01-27 10:15:22","2016-01-27 10:15:22","Node.js isomorphic-react-example error","<javascript><node.js><reactjs><handlebars.js>","1","2","","",""
"44610699","1","","","2017-06-18 00:32:26","","0","77","<p>I am trying to render a basic react component via node js .</p>

<p>Unfortunately i got some errors. I think this is related to es6.</p>

<p>The problem is i already wrote a lot of code in es6 and now i want to render it in node js. I can't rewrite my entire app, so how to import my components and make them compatible witch node js. </p>

<p>What is what i've tried since now :</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const filePath = path.resolve(__dirname, 'index.html')
	fs.readFile(filePath, 'utf8', (err, htmlData)=&gt; {
		if(err){
			return res.status(404).end()
		}

		const app = renderToString(&lt;ReactApp /&gt;)
		const RenderedApp = htmlData.replace('{{SSR}}',app)
		res.send(RenderedApp)
	})</code></pre>
</div>
</div>
</p>

<p>I got this error <code>SyntaxError: Unexpected token &lt;</code></p>

<p>This is because ReactApp is a react component</p>

<p>i don't know how to import it on my node.</p>

<p>Any solutions ?</p>

<p>thanks</p>
","8074886","","","","","2017-06-18 00:32:26","Cannot render my react app server side","<node.js><reactjs><jsx><babel-cli>","0","6","","",""
"34979865","1","34994752","","2016-01-24 18:43:01","","0","496","<p><code>react-redux-universal-hot-example</code> once had a universal router, see <a href=""https://github.com/erikras/react-redux-universal-hot-example/blob/7b7608ee6c3ccfdaa34f3f0326ff78a5e3f542ef/src/helpers/universalRouter.js"" rel=""nofollow"">universalRouter</a>, <a href=""https://github.com/erikras/react-redux-universal-hot-example/blob/7b7608ee6c3ccfdaa34f3f0326ff78a5e3f542ef/src/client.js"" rel=""nofollow"">client.js</a>, <a href=""https://github.com/erikras/react-redux-universal-hot-example/blob/7b7608ee6c3ccfdaa34f3f0326ff78a5e3f542ef/src/server.js"" rel=""nofollow"">server.js</a>. I'd like to create a slightly improved version of it that can render an error page if an API action returned an error. Also I use <code>react-router</code> 2 unlike what was used in RRUHE.</p>

<p>My problem is that when I press a link, the transition never occurs and <code>listenBefore</code> is never called on the client.</p>

<p>Some parts of my code:</p>

<p><code>universalRouter.js</code>:</p>

<pre><code>import React                  from 'react';
import {
  match,
  RouterContext,
  Router
}                             from 'react-router';
import { Provider }           from 'react-redux';

import fetchComponentData from './fetchComponentData';

export default function universalRouter(routes, location, store) {
  return new Promise((resolve, reject) =&gt; {
    rematch(routes, location, store, resolve, reject);
  });
}

function rematch(routes, location, store, resolve, reject, rematched = false) {
  match({routes, location}, (error, redirectLocation, renderProps) =&gt; {
    if (error) {
      return reject(error);
    }

    if (redirectLocation) {
      return resolve({
        redirectLocation
      });
    }

    fetchComponentData(store, renderProps.components, renderProps.params)
      .then(resolveWithComponent, (error) =&gt; {
        if (!rematched &amp;&amp; error.status) {
          rematch(routes, getErrorPagePath(error), store, resolve, reject, true);
        } else {
          reject(error);
        }
      });

    function resolveWithComponent() {
      const component = (
        &lt;Provider store={store}&gt;
          &lt;RouterContext {...renderProps}/&gt;
        &lt;/Provider&gt;
      );
      resolve({component, matchedRoutes: renderProps.routes})
    }
  });
}

// TODO Implement getErrorPagePath, for now return '/404'
function getErrorPagePath(error) {
  return '/404';
}
</code></pre>

<p><code>client.js</code>:</p>

<pre class=""lang-js prettyprint-override""><code>...
const renderApp = (location) =&gt; {
  return universalRouter(routes, location, store)
    .then(({component}) =&gt; {
      render(component, document.getElementById('react-view'));
    }, (error) =&gt; {
      // TODO Print error only in a dev mode.
      console.error(error);
    });
};

history.listenBefore((location, callback) =&gt; {
  console.log('this message is never printed to the console');
  renderApp(location)
    .then(callback);
});

renderApp(pathname + search);
</code></pre>

<p><code>server.js</code>:</p>

<pre class=""lang-js prettyprint-override""><code>...
universalRouter(routes, req.url, store)
    .then(({component, matchedRoutes}) =&gt; {
      const componentHTML = renderToString(component);
      const initialState = store.getState();
      const html = `
      &lt;!DOCTYPE html&gt;
      &lt;html&gt;
        &lt;head&gt;
          &lt;meta charset=""utf-8""&gt;
          &lt;link rel=""shortcut icon"" href=""/favicon.ico""&gt;
          &lt;title&gt;Redux Demo&lt;/title&gt;
          &lt;script&gt;
            window.__INITIAL_STATE__ = ${JSON.stringify(initialState)};
          &lt;/script&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;div id=""react-view""&gt;${componentHTML}&lt;/div&gt;
          &lt;script type=""application/javascript"" src=""/dist/bundle.js""&gt;&lt;/script&gt;
        &lt;/body&gt;
      &lt;/html&gt;
      `;
      res.status(getStatus(matchedRoutes)).send(html);
    }, (error) =&gt; {
      res.sendStatus(500);
      console.error(error)
    });

function getStatus(routes) {
  return routes.reduce((prev, curr) =&gt; curr.status || prev) || 200;
}
</code></pre>
","763768","","763768","","2016-01-25 08:15:45","2016-01-27 18:50:01","How to implement a universal router with react-router v2","<javascript><node.js><reactjs><react-router><isomorphic-javascript>","1","0","","",""
"44464082","1","","","2017-06-09 17:56:23","","0","533","<p><a href=""https://stackoverflow.com/questions/41486804/server-rendering-with-react-router-v4-and-express-js"">Following this stackoverflow post</a></p>

<p>I tried to set up server rendering with react-router-v4 </p>

<p>my <strong>routes.js</strong> file : </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var React = require('react');
import ReactDOM from 'react-dom';
import Appa from './components/app.js';
import Welcome from './components/welcome.js';
import { BrowserRouter as Router, Route,Redirect} from 'react-router-dom';

export default () =&gt;
&lt;Router&gt;
  &lt;div&gt;
    &lt;Route exact path=""/"" component={Appa} /&gt;
    &lt;Route path=""/home"" component={Welcome} /&gt;
  &lt;/div&gt;
  &lt;/Router&gt;;</code></pre>
</div>
</div>
</p>

<p><strong>server.js</strong></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import {renderToString} from 'react-dom/server';
import { match, RoutingContext,ServerRouter, createServerRenderContext } from 'react-router';
import Routes from './app/routes.js';
var express  = require('express');
const app = express();

app.use(function(req,res,next) {
const context = createServerRenderContext();
  let markup = renderToString(
    &lt;ServerRouter location={req.url} context={context} &gt; &lt;Routes /&gt; &lt;/ServerRouter&gt;);
  const result = context.getResult();

  if (result.redirect) {
    res.writeHead(301, {
      Location: result.redirect.pathname,
    });
    res.end();
  } else {
    if (result.missed) {
      res.writeHead(404);
      markup = renderToString(
        &lt;ServerRouter location={req.url} context={context}&gt; &lt;Routes /&gt; &lt;/ServerRouter&gt;);
    }
    res.write(markup);
    res.end();
  }

});

app.get('*', function(req,res,next){
 
  res.sendFile(path.resolve(__dirname ,'/dist/index.html'));
   
});</code></pre>
</div>
</div>
</p>

<p>Whenever my app routes to /home it  takes alot of time to load and eventually shows cannot get /home  Please help me identifying the mistake in code </p>
","8104572","","8104572","","2017-06-09 20:59:02","2017-06-09 20:59:02","server side rendering with react router v4","<reactjs><express><serverside-rendering><react-router-v4>","1","0","1","",""
"44475946","1","44479484","","2017-06-10 17:09:19","","5","323","<p>In react-router v3 we could know when server side rendering had not matched against the current url. This allowed me to pass the request to my <code>express.static</code> middleware instead of sending the rendered App.</p>

<p>In react-router v4, we must use </p>

<pre><code>    const htmlData = renderToString(
        &lt;StaticRouter
            location={req.url}
            context={context}
        &gt;
            &lt;App/&gt;
        &lt;/StaticRouter&gt;
    );
</code></pre>

<p>in order to render on the server side. However, it automatically redirects everything to <code>/</code>. Why does this behavior even exist? Couldn't we just have an error like we expect insted of it silently failing?</p>

<p>How could I know that nothing matched so that I can call <code>next()</code> and have the other express's routes do the job?</p>

<p>Here is the whole function which I'd like to use:</p>

<pre><code>app.get('*', (req, res, next) =&gt; {
    const context = {};
    const htmlData = renderToString(
        &lt;StaticRouter
            location={req.url}
            context={context}
        &gt;
            &lt;App/&gt;
        &lt;/StaticRouter&gt;
    );

    console.log(JSON.stringify(context, null, 4)); // empty object
    if (context.url) { // &lt;------------------------ Doesn't work (taken from example and thought it would contain the unmatched url)
        winston.info(`Passing ${req.url} along`);
        next(); // &lt;--------------- Never called even if no route matches.
    } else {
        res.send(pageContent.replace('&lt;div id=""main""&gt;&lt;/div&gt;',
            `&lt;div id=""main""&gt;${htmlData}&lt;/div&gt;`));
    }
});
</code></pre>

<p>I tried doing stuff based on <a href=""https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/server-rendering.md#404-401-or-any-other-status"" rel=""nofollow noreferrer"">this</a> but the <code>// somewhere else</code> is so precise, I couldn't understand it at all.</p>

<p>Here is my last attempt in case it is of any help. This is the <code>Router.jsx</code> file where I plan to define all my <code>Route</code>s.</p>

<pre><code>import React from 'react';
import PropTypes from 'prop-types';
import {
    BrowserRouter,
    Route,
} from 'react-router-dom';
import App from './components/App.jsx';

export const Status = ({ code, children }) =&gt; (
    &lt;Route render={({ staticContext }) =&gt; {
        if (staticContext) {
            staticContext.status = code;
        }
        return children;
    }}/&gt;
);

Status.propTypes = {
    code     : PropTypes.number.isRequired,
    children : PropTypes.node.isRequired,
};

export const NotFound = () =&gt; (
    &lt;Status code={404}&gt;
        &lt;div&gt;
            &lt;h1&gt;Sorry, can’t find that.&lt;/h1&gt;
        &lt;/div&gt;
    &lt;/Status&gt;
);

class Router extends React.Component {
    render() {
        return (
            &lt;BrowserRouter&gt;
                &lt;div&gt;
                    &lt;Route exact path=""/"" component={App}/&gt;
                    &lt;Route component={NotFound}/&gt;
                &lt;/div&gt;
            &lt;/BrowserRouter&gt;
        );
    }
}

export default Router;
</code></pre>

<p>(I know this doesn't make any sense at all since <code>StaticRouter</code> directly uses <code>App</code> without caring about <code>Router.jsx</code> but I have no <code>Route</code> at all inside <code>App</code> so I don't really understand how to do things, I guess.</p>
","4613742","","4613742","","2017-06-10 17:20:44","2017-06-12 19:13:21","Server rendering react-router v4 passthrough if 404","<node.js><reactjs><express><react-router><isomorphic-javascript>","1","0","1","",""
"35895550","1","35918459","","2016-03-09 15:18:00","","0","477","<p>So I have node.js + react and react-router and I want to generate the routes from a list taken from a database. How can I make something like this</p>

<pre><code>&lt;Route component={App}&gt;
  &lt;Route name=""Home"" path=""/"" component={Page}/&gt;
  &lt;Route name=""Page1"" path=""/page1"" component={Page}/&gt;
  &lt;Route name=""Page2"" path=""/page2"" component={Page}/&gt;
  ...
&lt;/Route&gt;
</code></pre>

<p>and use it in my application?
My current files look like this:</p>

<p>server.js</p>

<pre><code>var express = require('express');
var bodyParser = require('body-parser');
...
var routes = require('./app/routes');
...
app.use(function(req, res) {
  Router.match({ routes: routes.default, location: req.url }, function(err, redirectLocation, renderProps) {
    if (err) {
      res.status(500).send(err.message)
    } else if (redirectLocation) {
      res.status(302).redirect(redirectLocation.pathname + redirectLocation.search)
    } else if (renderProps) {
        var html = ReactDOM.renderToString(React.createElement(Router.RoutingContext, renderProps));
        //var page = swig.renderFile('views/index.html', { html: html });
        res.status(200).send('&lt;!DOCTYPE html&gt;&lt;html lang=""ro""&gt;&lt;head&gt;&lt;link rel=""stylesheet"" href=""./foundation-6/css/foundation.min.css""&gt;&lt;link rel=""stylesheet"" href=""./css/main.css""&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=""app""&gt;&lt;/div&gt;&lt;script src=""/socket.io/socket.io.js""&gt;&lt;/script&gt;&lt;/script&gt;&lt;script src=""./js/vendor.js""&gt;&lt;/script&gt;&lt;script src=""./js/vendor.bundle.js""&gt;&lt;/script&gt;&lt;script src=""./js/bundle.js""&gt;&lt;/script&gt;&lt;script src=""./foundation-6/js/foundation.min.js""&gt;&lt;/script&gt;&lt;script&gt;$(document).foundation();var socket = io();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;');
    } else {
      res.status(404).send('Page Not Found')
    }
  });
});
</code></pre>

<p>routes.js</p>

<pre><code>import React from 'react';
import {Route} from 'react-router';
import App from './components/App';
import Page from './components/Page';

export default (
  &lt;Route component={App}&gt;
    &lt;Route name=""Home"" path=""/"" component={Page}/&gt;
    &lt;Route name=""Test"" path=""/test"" component={Page}/&gt;
  &lt;/Route&gt;
);
</code></pre>

<p><strong>Edit</strong></p>

<p>I just want to get a list of pages. All of the pages will use the same component, but they will have different title and content. I can query the database, but I don't know hot to pass the object to the reactjs and generate routes based on it.</p>
","4356630","","4356630","","2016-03-09 15:52:24","2016-05-13 23:40:08","How do I get a list of react.js routes from a database?","<node.js><mongodb><reactjs><react-router>","2","3","","",""
"44660294","1","","","2017-06-20 18:14:18","","1","141","<p>I am trying to do server side rendering with react-router 4, but I am receiving this error when I reload the page with URL different from '/':</p>

<pre><code>TypeError: (0 , _reactRouter.createServerRenderContext) is not a function
</code></pre>

<p>My server file is:</p>

<pre><code>import express from 'express';
import React from 'react';
import expressStaticGzip from 'express-static-gzip';
import { renderToString } from 'react-dom/server';
import { ServerRouter, createServerRenderContext } from 'react-router';
import App from './app/components/App';

const app = express();

app.use('/', expressStaticGzip('dist'));

app.use((req, res) =&gt; {
  const context = createServerRenderContext();
  let markup = renderToString(
    &lt;ServerRouter location={req.url} context={context} &gt; &lt;App /&gt; &lt;/ServerRouter&gt;);
  const result = context.getResult();

  if (result.redirect) {
    res.writeHead(301, {
      Location: result.redirect.pathname,
    });
    res.end();
  } else {
    if (result.missed) {
      res.writeHead(404);
      markup = renderToString(
        &lt;ServerRouter location={req.url} context={context}&gt; &lt;App /&gt; &lt;/ServerRouter&gt;);
    }
    res.write(markup);
    res.end();
  }
});

app.listen(process.env.PORT || 3000, () =&gt; {
  console.info(`Listening port ${process.env.PORT || 3000}`);
});
</code></pre>

<p>My components are:</p>

<pre><code>const App = () =&gt; (
  &lt;div&gt;
    &lt;Header /&gt;
    &lt;Main /&gt;
  &lt;/div&gt;
);



const Main = () =&gt; (
  &lt;main&gt;
    &lt;Switch&gt;
      &lt;Route exact path=""/"" component={Dashboard} /&gt;
      &lt;Route path=""/attendance"" component={Attendance} /&gt;
    &lt;/Switch&gt;
  &lt;/main&gt;
);

const Header = () =&gt; (
  &lt;header&gt;
    &lt;nav&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;Link to=""/""&gt;Home&lt;/Link&gt;&lt;/li&gt;
        &lt;li&gt;&lt;Link to=""/attendance""&gt;Attendance&lt;/Link&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
  &lt;/header&gt;
);
</code></pre>

<p>I am new with react-router 4 and I do not know how to solve this problem.</p>

<p>Can anyone help me with this?</p>

<p>Thanks in advance.</p>
","4197747","","","","","2017-06-28 23:03:39","server side redering with react-router 4 is not working","<reactjs><express><serverside-javascript><react-router-v4>","0","0","","",""
"44023582","1","","","2017-05-17 11:28:57","","1","245","<p>I'm learning developing react.js server-side rendering web app, I'm using Express.js and Swig for the server-side</p>

<h3>Code</h3>

<p><em>server.js</em></p>

<pre><code>import express from 'express'
import path from 'path'

import React from 'react'
import { StaticRouter } from 'react-router'
import { renderToString } from 'react-dom/server'
import { Provider } from 'react-redux'

import setupSwig from 'setup.swig'
import { setupStore } from '../shared/redux/store'
import { ajaxFunction } from '../shared/services/Customer'

import App from '../shared/components/App'

const app = express()
app.use(express.static(path.resolve(__dirname, '..', '_public')))
setupSwig(app)

app.use((req, res) =&gt; {
    const url = req.url

    ajaxFunction()
        .then(({ data: customers }) =&gt; {
            const context = {}
            const store = setupStore({
                customers
            })

            const html = renderToString(
                &lt;Provider store={ store }&gt;
                    &lt;StaticRouter location={ url } context={ context }&gt;
                        &lt;App /&gt;
                    &lt;/StaticRouter&gt;
                &lt;/Provider&gt;
            )

            const initState = store.getState()

            res.render('./index.swig', { html, initState })
        })
    }
})

app.listen(3000)
</code></pre>

<p><em>client.js</em></p>

<pre><code>import React from 'react'
import { render } from 'react-dom'
import { Provider } from 'react-redux'
import { BrowserRouter } from 'react-router-dom'

import { setupStore } from '../shared/redux/store'
import App from '../shared/components/App'

const initState = window.__INIT_STATE__
delete window.__INIT_STATE__

const store = setupStore(initState)

render(&lt;Provider store={ store }&gt;
    &lt;BrowserRouter&gt;
        &lt;App /&gt;
    &lt;/BrowserRouter&gt;
&lt;/Provider&gt;, document.getElementById('reactApp'))
</code></pre>

<h3>Question</h3>

<p>On the <em>server.js</em> I use <code>&lt;StaticRouter location={ url } context={ context }&gt;</code> but I have no ideas how to make ((what <code>props</code> to pass with) the <code>&lt;BrowserRouter&gt;</code> on <em>client.js</em> redirect to specific URL e.g. <code>/customers</code>, <code>/about</code></p>

<p>If I did things wrong way please also guide</p>

<p>Thanks</p>
","1536973","","1536973","","2017-05-17 15:22:01","2017-05-17 15:22:01","Server-side rendering using react-router 4, how to render client version?","<reactjs><serverside-rendering><react-router-v4>","0","0","","",""
"36468293","1","36480567","","2016-04-07 06:30:04","","1","111","<p>I tried to send mail to the user who has submitted the application using reactjs and nodemailer but i am getting following error saying route not found.</p>

<pre><code>Warning: Location ""/contact?name=milan&amp;email=xedikaka%40gmail.com&amp;phone=9843698469&amp;city=Biratnagar&amp;state=biratnagar&amp;company=company&amp;title=developer&amp;home-airport=Truckee+%2F+Tahoe+%28TRK%29&amp;frequent-destinations=Monterey+%28MRY%29&amp;travel-type=business&amp;travel-frequency=daily&amp;travel-prefs=Saturday"" did not match any routes
</code></pre>

<p>Here is my code </p>

<pre><code>app.get('*', function(req, res) {
  var location = createLocation(req.url)
  match({routes: Routes, location: location}, function(error, redirectLocation, renderProps) {
    var handler = React.createElement(RoutingContext, objectAssign({}, renderProps))
    var content = React.renderToString(handler);
    var title = DocumentTitle.rewind();
    res.render('index', {content: content})
  })
});

app.post('/contact', function(req,res,next){
    var to = req.body.email;
    var transporter = nodemailer.createTransport({
        service:'Gmail',
        auth:{
            user:'******@gmail.com',
            pass:'***********'
        }
    });

     var mailOptions = {
      from: '&lt;noreply@domain.io&gt;',
      to: to,
      subject: 'Website contact form',
      text: 'Hello!'+req.body.name
    };

    transporter.sendMail(mailOptions, function(error,info){
        if(error){
            console.log('error is',error);
            res.redirect('/');
        }else{
            console.log('message sent');
            res.redirect('/');
        }
    })

});

var server = app.listen(port, function() {
  console.log('Server running on port ' + port);
});
</code></pre>

<p><strong>JoinUsForm.js(/join-us)</strong></p>

<pre><code>render: function() {
    return (
      &lt;div className='join-us-form-wrapper'&gt;
        &lt;form action = ""/contact"" method=""post"" onValidSubmit={this.onSubmit} onValid={this.enableButton} onInvalid={this.disableButton}&gt;

          &lt;TextInput name='name' label='Full Name' placeHolder='Full Name' required/&gt;
          &lt;TextInput name='email' type='email' validations=""isEmail"" label='Your Email' placeHolder='Your Email' required/&gt;
          &lt;TextInput name='phone' type='phone' label='Your Phone' placeHolder='Your Phone' required/&gt;

          &lt;TextInput name='city' label='City' placeHolder='City' required/&gt;

          &lt;div className='input-wrapper'&gt;
            &lt;label htmlFor='state'&gt;State&lt;/label&gt;
            &lt;input type='text' name='state' placeholder='State' /&gt;
          &lt;/div&gt;

          &lt;TextInput name='company' label='Company Name' placeHolder='Company Name'/&gt;
          &lt;TextInput name='title' label='Job Title' placeHolder='Job Title'/&gt;


          &lt;SelectInput name='home-airport' label='What is your home airport?' opts={homeAirportOptions} required /&gt;
          &lt;MultiSelectInput name='frequent-destinations' label='Which Destinations Do You Travel to Frequently?' opts={destinationOptions} required /&gt;

          &lt;SelectInput name='travel-type' label='Do you travel for business or pleasure?' opts={['business', 'pleasure']} required /&gt;
          &lt;SelectInput name='travel-frequency' label='How often do you travel?' opts={['daily', 'weekly', 'monthly']} required /&gt;

          &lt;SelectInput name='travel-prefs' label='Which days do you prefer to travel?' opts={travelPrefsOptions} required /&gt;


          &lt;input type=""submit"" className='submit-button button' value='Submit Your Application'/&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    );
  }

});

module.exports = JoinUsForm;
</code></pre>

<p>What have i done wrong? What is wrong with the route?</p>

<p>UPDATE:</p>

<p>I get this new error after defining method in form 
<a href=""https://i.stack.imgur.com/AKBiy.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AKBiy.png"" alt=""enter image description here""></a></p>
","5773335","","5773335","","2016-04-18 11:41:59","2016-04-18 11:41:59","Error in express route for submitting the mail to user using nodemailer and reactjs","<javascript><node.js><express><reactjs><nodemailer>","1","3","","",""
"36746267","1","36751934","","2016-04-20 14:03:03","","-1","55","<p>I was writing an app with react and to perform server-side rendering I did the following:</p>

<pre><code>var Component = require('myComponent');
var ComponentFactory = React.createFactory(Component);

/* GET home page. */
router.get('/', function (req, res, next) {
    res.render('index', {
        react: ReactDom.renderToString(ComponentFactory()),
    });
});
</code></pre>

<p>Now I'm rewriting the app but switched most of the javascript to ES6, but when I tried to create a factory with the component, it would not show up in the browser, instead I had to do the following:</p>

<pre><code>var router = express.Router();

/* GET home page. */
router.get('/', function(req, res, next) {
    res.render('index', { 
        reacthtml: ReactDom.renderToString(&lt;InfoBoxes /&gt;)***here***
    });
});
</code></pre>

<p>I had to just input the component in jsx syntax. Is this ES6 dependent or is there another reason why this may happen?</p>
","2939522","","","","","2016-04-20 20:31:14","react es6 server side rendering doesn't require a factory?","<javascript><reactjs><ecmascript-6>","1","3","","",""
"37056910","1","37057293","","2016-05-05 17:38:36","","1","145","<p>I'm migrating a react app to ES6 and moving events so they're bound in the constructor, here's a very basic example:</p>

<pre><code>import React from 'react';
import ReactDom from 'react-dom';

export default class Button extends React.Component {
    constructor() {
        super();
        this.click = this.click.bind(this);
    }
    click() {
        alert('hi');
    }
    render() {
        return (
            &lt;button onClick={this.click}&gt;click&lt;/button&gt;
        );
    }
}

if(typeof window !== 'undefined') {
    ReactDom.render(&lt;Button/&gt;, document.getElementById('button-spot'));
}
</code></pre>

<p>The button renders correctly, and there aren't any server/client errors, but when I click this button, nothing happens. I also tried <code>console.log()</code> and its not logging. Am I doing the <code>event.bind(this)</code> binding wrong?</p>

<p>more context:</p>

<p>my index.js router:</p>

<pre><code>router.get('/', function(req, res, next) {
    res.render('index', { 
        button: ReactDom.renderToString(&lt;Button/&gt;)
    });
});
</code></pre>

<p>html page:</p>

<pre><code>&lt;div id='button-spot'&gt;&lt;%-button%&gt;&lt;/div&gt;
</code></pre>

<hr>

<p><strong>EDIT</strong></p>

<hr>

<p>I tried Andre's suggestion below </p>

<pre><code>onClick={x =&gt; alert(1)}
</code></pre>

<p>and the event isn't firing, what could the issue be?</p>
","2939522","","2939522","","2016-05-05 18:00:36","2016-05-05 18:01:31","can't get es6 react to bind event","<reactjs><ecmascript-6>","1","8","","",""
"36606372","1","","","2016-04-13 18:15:01","","0","68","<p>So I've inherited a complete mess of a project that follows some unorthodox methods of server side rendering as outlined here: <a href=""https://stackoverflow.com/questions/28553904/client-routing-using-react-router-and-server-side-routing"">Client Routing (using react-router) and Server-Side Routing</a></p>

<p>Now I've been trying to upgrade it for the past week and probably wasted over 40 hours getting nowhere while I try to bring this mess to the proper and current state. It uses react 0.13.3 and I'd like to upgrade to at least 0.14.7 and react-router 2 but no matter how I try to approach this, the structure is so brittle that I continue to fail again and again. This is what I've got:</p>

<p>Client:</p>

<pre><code>import React from ""react"";
import Router from ""react-router"";
import routes from ""../shared/routes"";

Router.run(routes, Router.HistoryLocation, (Handler, state) =&gt; {
  React.render(&lt;Handler email =          {window.INITIAL_PROPS.email}
      urlData =        {window.INITIAL_PROPS.urlData}
      tagData =        {window.INITIAL_PROPS.tagData}
      talentData =     {window.INITIAL_PROPS.talentData}
      talentShowcase = {window.INITIAL_PROPS.talentShowcase}
      metrics =        {window.INITIAL_PROPS.metrics}
      loginData =      {window.INITIAL_PROPS.loginData}
      errorData =      {window.INITIAL_PROPS.errorData} /&gt;, document.getElementById('app'));
});
</code></pre>

<p>Server:</p>

<pre><code>import express from ""express"";
var session = require(""express-session"");
var zip = require('express-zip');
var bodyParser = require(""body-parser"");
var multer = require(""multer"");

import React from ""react"";
import Router from ""react-router"";
import routes from ""../shared/routes"";

const app = express();

app.set('views', './views');
app.set('view engine', 'jade');

var constants = require('../constants');

// Server Modules
var Index = require('./serverModules/Index');
var Search = require('./serverModules/Search');
var Admin = require('./serverModules/Admin');
var User = require('./serverModules/User');

app.use(express.static(__dirname + '/../../public/'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));
app.use(multer({dest: __dirname + '/../../public/' + 'assets/images/'}).single('Profile'));

app.use(session({
  secret: 'test session',
  resave: false,
  saveUninitialized: true
}));

Index(app, Router, routes, React);
Search(app, Router, routes, React);
Admin(app, Router, routes, React);
User(app, Router, routes, React);

// Redirect to Index Page on linking to a page which does not exist.
app.use(function (req, res, next) {

  res.redirect(""/"");
});

app.listen(process.env.PORT, function () {

  console.log('Server listening at port %s', process.env.PORT);
});
</code></pre>

<p>One of the <code>serverModules</code>(???) 'index':</p>

<pre><code>var constants = require('../../constants');
var functions = require('../serverFunctions');

// Database &amp; API Wrappers
var database = require('../database/databaseWrapper');
var smAPI = require('../socialMediaAPIs/socialMediaWrapper');

module.exports = function (app, Router, routes, React) {
  app.get('/', function (req, res) {
    var urlData = req.query;
    var session = req.session;
    var loginData = {};
    var email = undefined;
    // Check if the user is logged in.
    if (session.user === undefined) {
      res.redirect('/Login');
      return;
    } else {
      email = session.user.email;
      if (session.user.permissions !== undefined) {
        for (var i = 0; i &lt; session.user.permissions.length; ++i) {
          loginData[session.user.permissions[i]] = true;
        }
      }
    }
    // Store the size of the talent list if it exists
    if (session.user.lists !== undefined) {
      urlData.lists = [];
      for (var i = 0; i &lt; session.user.lists.length; ++i) {
        urlData.lists.push({name: session.user.lists[i].name, size: functions.getListSize(session.user.lists[i].talents)});
      }
    }
    Router.run(routes, req.url, Handler =&gt; {
      database.getIndexParams(function (tags, talents) {
        // Client-side variables.
        var props = {
          urlData: urlData,
          tagData: tags,
          loginData: loginData,
          email: email
        };
        let content = React.renderToString(
          &lt;Handler
            urlData={urlData}
            tagData={tags}
            loginData={loginData}
            email={email}
          /&gt;
        );
        res.render('index', {
          scontent: content,
          props: JSON.stringify(props),
          title: ""Project""
        });
      });
    });
  });
};
</code></pre>

<p>routes:</p>

<pre><code>import { Route, DefaultRoute } from ""react-router"";
import React from ""react"";

import AppRouter from ""./components/AppRouter"";
import AppHandler from ""./components/AppHandler"";
import SearchHandler from ""./components/SearchHandler"";
import AdminHandler from ""./components/AdminHandler"";
import AddUserHandler from ""./components/AddUserHandler"";
import LoginHandler from ""./components/LoginHandler"";
import PasswordHandler from ""./components/PasswordHandler"";
import ForgotPasswordHandler from ""./components/ForgotPasswordHandler"";

export default (
    &lt;Route name=""root"" handler={ AppRouter } path=""/""&gt;
        &lt;DefaultRoute handler={ AppHandler } /&gt;
        &lt;Route name=""Search"" handler={ SearchHandler } path=""Search"" /&gt;
        &lt;Route name=""Admin"" handler={ AdminHandler } path=""Admin"" /&gt;
        &lt;Route name=""AddUser"" handler={ AddUserHandler } path=""Admin/AddUser"" /&gt;
        &lt;Route name=""Login"" handler={ LoginHandler } path=""Login"" /&gt;
        &lt;Route name=""Password"" handler={ PasswordHandler } path=""ChangePassword"" /&gt;
        &lt;Route name=""ForgotPassword"" handler={ ForgotPasswordHandler } path=""ForgotPassword"" /&gt;
    &lt;/Route&gt;
);
</code></pre>

<p>AppRouter:</p>

<pre><code>import React from ""react"";
import { RouteHandler } from ""react-router"";

export default class AppHandler extends React.Component {
  render() {
    return (
      &lt;RouteHandler
        email={this.props.email}
        urlData={this.props.urlData}
        tagData={this.props.tagData}
        talentData={this.props.talentData}
        talentShowcase={this.props.talentShowcase}
        metrics={this.props.metrics}
        loginData={this.props.loginData}
        errorData={this.props.errorData}
      /&gt;
    );
  }
}
</code></pre>

<p>AppHandler:</p>

<pre><code>import React from ""react"";

var SearchHeader = require('./index/SearchHeader');
var User = require('./index/User');
var Footer = require('./Footer');

export default class AppHandler extends React.Component {
  render() {
    return (
      &lt;div&gt;
        &lt;div id=""backgroundWrapper""&gt;
          &lt;div id=""container""&gt;
            &lt;SearchHeader
              urlData={this.props.urlData}
              tagData={this.props.tagData}
              loginData={this.props.loginData}
              email={this.props.email}
              tagLine={true}
              minHeight={640}
            /&gt;
            &lt;User userData={this.props.talentShowcase}/&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;Footer /&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p>and this is what the LoginHandler looks like:</p>

<pre><code>import React from ""react"";

var Watermark = require('./Watermark');
var Login = require('./login/Login');
var Footer = require('./Footer');

export default class AppHandler extends React.Component {
  render() {
    return (
      &lt;div id=""content""&gt;
        &lt;div id=""backgroundWrapper"" style={{ ""height"": ""100%"" }}&gt;
          &lt;div id=""LoginWatermarkContainer""&gt;
            &lt;Watermark black={true}/&gt;
            &lt;span id=""LoginSubtitle""&gt;
              Login with your credentials below.
            &lt;/span&gt;
            &lt;div className=""LoginWatermarkSeparator""&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;Login errorData={this.props.errorData}/&gt;
        &lt;/div&gt;
        &lt;Footer positionStyle={{ ""bottom"": ""0"", ""position"": ""fixed"" }}/&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p>How does one upgrade this, preferably to the most current version and if possible please show step by step solution because I feel quite stupid after failing to upgrade this for over a week. I have seen crazy and brittle setups before, but this by far takes the cake. I feel really frustrated, please help!</p>
","4102907","","-1","","2017-05-23 12:23:53","2016-04-25 21:57:41","Brittle react-router 0.13.x isomorphic(universal) setup - How To Upgrade?","<reactjs><upgrade><react-router><serverside-rendering><isomorphic>","0","6","1","",""
"44670153","1","","","2017-06-21 08:00:13","","5","374","<p>I am new to graphql with react-appollo I would like to use react apollo with redux also server side rendering Every thing is fine my app is working but the problem is when my app render's it is actually recalling the api again it is not using my rendered state ..</p>

<p><a href=""https://i.stack.imgur.com/semIK.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/semIK.gif"" alt=""enter image description here""></a></p>

<p>server .js</p>

<pre><code>import express from 'express';
import bodyParser from 'body-parser';

import path from 'path';
import expressGraphQL from 'express-graphql';
import schema from './GraphQL/Schema';
import React from 'react';
import ReactDOMServer from 'react-dom/server'
import { StaticRouter } from 'react-router';
import { ApolloClient, createNetworkInterface, ApolloProvider } from 'react-apollo';
import { getDataFromTree } from ""react-apollo""
import store from '../client/Redux/Store/store';

import {serverClient} from './lib/apollo'

require('es6-promise').polyfill();
require('isomorphic-fetch');

import WApp from '../client/App';

//Dev HMR
import HMR from './serverUtils/HMR';

const app = express();
app.use(bodyParser.json());

app.use('/api', expressGraphQL({
    schema,
    graphiql: true
}));
app.use('/static',express.static('build'));
HMR(app);

function Html({ content, state }) {
    return (
        &lt;html&gt;
        &lt;body&gt;
        &lt;div id=""app""  dangerouslySetInnerHTML={{ __html: content }}/&gt;
        &lt;script src=""/static/app.js"" /&gt;
        &lt;script dangerouslySetInnerHTML={{
            __html: `window.__APOLLO_STATE__=${JSON.stringify(state).replace(/&lt;/g, '\\u003c')};`,
        }} /&gt;
        &lt;/body&gt;
        &lt;/html&gt;
    );
}

function createReactHandler(req) {
    return async function reactHandler(ctx) {
        const routeContext = {};
        const client = serverClient();

        const components = (
            &lt;StaticRouter location={req.url} context={routeContext}&gt;
                &lt;ApolloProvider store={store} client={client}&gt;
                    &lt;WApp /&gt;
                &lt;/ApolloProvider&gt;
            &lt;/StaticRouter&gt;
        );

        await getDataFromTree(components);

        // const html = ReactDOMServer.renderToString(components);

        // // Handle redirects
        // if ([301, 302].includes(routeContext.status)) {
        //     // 301 = permanent redirect, 302 = temporary
        //     ctx.status = routeContext.status;
        //
        //     // Issue the new `Location:` header
        //     ctx.redirect(routeContext.url);
        //
        //     // Return early -- no need to set a response body
        //     return;
        // }
        //
        // // Handle 404 Not Found
        // if (routeContext.status === 404) {
        //     // By default, just set the status code to 404.  You can add your
        //     // own custom logic here, if you want to redirect to a permanent
        //     // 404 route or set a different response on `ctx.body`
        //     ctx.status = routeContext.status;
        // }

        //   return html;
        // console.log(html)


    }
}



const HTML = ({ html,state}) =&gt; (

    &lt;html lang=""en"" prefix=""og: http://ogp.me/ns#""&gt;
    &lt;head&gt;
        &lt;meta charSet=""utf-8"" /&gt;
        &lt;meta httpEquiv=""X-UA-Compatible"" content=""IE=edge"" /&gt;
        &lt;meta httpEquiv=""Content-Language"" content=""en"" /&gt;
        &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1"" /&gt;

    &lt;/head&gt;
    &lt;body&gt;
    &lt;div
        id=""app""
        dangerouslySetInnerHTML={{ __html: html }} /&gt;
    &lt;script dangerouslySetInnerHTML={{
        __html: `window.__STATE__=${JSON.stringify(state)};`,
    }} /&gt;

    &lt;script src=""/static/app.js"" /&gt;

    &lt;/body&gt;
    &lt;/html&gt;
);

app.get('/*',(req,res) =&gt; {
    const routeContext = {};
    const client = serverClient();

    const components = (
        &lt;StaticRouter location={req.url} context={routeContext}&gt;
            &lt;ApolloProvider store={store} client={client}&gt;
                &lt;WApp /&gt;
            &lt;/ApolloProvider&gt;
        &lt;/StaticRouter&gt;
    );

    getDataFromTree(components).then(() =&gt; {
        const html = ReactDOMServer.renderToString(components);
        const initialState = {apollo: client.getInitialState()}

        console.log(client);

        res.send(`&lt;!DOCTYPE html&gt;\n${ReactDOMServer.renderToStaticMarkup(
            &lt;HTML
                html={html}
                state={initialState}
                 /&gt;,
        )}`)
    })
})




app.listen(3000,() =&gt; {
    console.log('Man I on')
})
</code></pre>

<p>store.js</p>

<pre><code>import { createStore, compose, applyMiddleware } from 'redux';
import { syncHistoryWithStore } from 'react-router-redux';
import thunk from 'redux-thunk';
import {createLogger} from 'redux-logger';


import client from '../apolloClient';
import rootReducer from '../Reducers'

//All Reducer
import {initialState as allPosts} from '../Reducers/AllPosts_Reucer';
const isProduction = process.env.NODE_ENV !== 'development';
const isClient = typeof document !== 'undefined';
const initialState = {
    allPosts
};

const middlewares = [thunk, client.middleware()];
const enhancers = [];

if (!isProduction &amp;&amp; isClient) {
    const loggerMiddleware = createLogger();
    middlewares.push(loggerMiddleware);

    if (typeof devToolsExtension === 'function') {
        const devToolsExtension = window.devToolsExtension;
        enhancers.push(devToolsExtension());
    }
}


const composedEnhancers = compose(
    applyMiddleware(...middlewares),
    ...enhancers
);
const store = createStore(
    rootReducer,
    {},

    composedEnhancers,
);

export default store;
</code></pre>

<p>apolloClient.js</p>

<pre><code>import ApolloClient, {
    createNetworkInterface,

} from 'apollo-client';
const isProduction = process.env.NODE_ENV !== 'development';
const testUrl = 'http://localhost:3000/api';

// const url = isProduction ? productionUrl : testUrl;
const url =  testUrl;


const client = new ApolloClient({

    networkInterface: createNetworkInterface({uri:testUrl}),
    dataIdFromObject:({id}) =&gt; id,
    initialState: (typeof window !=='undefined')? window.__STATE__:{},
    reduxRootSelector:state =&gt; state.custom

});

export default client;
</code></pre>

<p>Home.js</p>

<pre><code>import React,{Component} from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { graphql } from 'react-apollo';

import gql from 'graphql-tag';

import * as postActions from '../../Redux/Actions/postActions';


class Home extends Component{
    componentWillMount(){
        // console.log('From Will Mount',this.props.posts)
    }
    renderAllPost(){
        const {loading,posts} = this.props;

        if(!loading){
            return posts.map(data =&gt; {
                return &lt;li key={data.id}&gt;{data.title}&lt;/li&gt;
            })
        }else{
            return &lt;div&gt;loading&lt;/div&gt;
        }
    }
    render(){

        return(
            &lt;div&gt;

                {this.renderAllPost()}

            &lt;/div&gt;
        )
    }
}


//start from here
const GetallPosts = gql`
query getAllPosts{
  posts{
    id
    title
    body
  }
}
`;

const mapDispatchToProps = (dispatch) =&gt; ({
    actions:bindActionCreators(
        postActions,
        dispatch
    )
});


const ContainerWithData = graphql(GetallPosts,{
    props:({ data:{loading,posts} }) =&gt; ({
        posts,
        loading,
    })
})(Home)


export default connect(
    // mapStateToPros,
    // mapDispatchToProps
)(ContainerWithData)
</code></pre>
","5947166","","2312051","","2017-06-30 07:51:35","2017-06-30 07:51:35","How to avoid client re fetching in react-apollo SSR with redux?","<node.js><reactjs><redux><graphql><react-apollo>","1","0","","",""
"36405205","1","36405439","","2016-04-04 14:18:26","","1","143","<p>I've been working with react for a couple months now and I've been doing server side rendering successfully. Recently I started rewriting a personal app with ES6 + Babel. When I try to run <code>renderToString()</code> on a react component I get this error:</p>

<blockquote>
  <p>renderToString(): You must pass a valid ReactElement.</p>
</blockquote>

<p><strong>some code</strong></p>

<p><em>the component</em></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';


export class InfoBox extends React.Component {
    render() {
        return (
            &lt;div&gt;
                &lt;div className='info-box'&gt;
                    Hello
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }
}

if(typeof window !== 'undefined') {
    ReactDOM.render(&lt;InfoBox/&gt;, document.getElementById('info-box-mount-point'));
}
</code></pre>

<p><em>express index route</em></p>

<pre><code>import express from 'express';
import React from 'react';
import ReactDom from 'react-dom/server';
import InfoBox from '../react-components/info-box/info-box.jsx';

let router = express.Router();
let InfoBoxFactory = React.createFactory(InfoBox);

/* GET home page. */
router.get('/', function(req, res, next) {
    res.render('index', { 
        reacthtml: ReactDom.renderToString(InfoBoxFactory)
    });
});

module.exports = router;
</code></pre>

<p>another question: should I be saving my components as <code>.jsx</code> or <code>.js</code>? (I'm using <code>jsx</code> in the render method of the component for the html)</p>
","2939522","","18846","","2016-04-04 23:25:12","2016-04-04 23:25:12","getting an error when converting react component to string","<reactjs><ecmascript-6><babeljs>","1","0","1","",""
"44713510","1","","","2017-06-23 05:13:33","","0","664","<p>I try to play with react-router but can't make it working with browserify. I'm stuck with this error: </p>

<pre><code>events.js:182
      throw er; // Unhandled 'error' event
      ^

Error: Cannot find module 'react-router-dom' from '/usr/src/app'
    at /usr/src/app/node_modules/browserify/node_modules/browser-resolve/node_modules/resolve/lib/async.js:46:17
    at process (/usr/src/app/node_modules/browserify/node_modules/browser-resolve/node_modules/resolve/lib/async.js:173:43)
    at ondir (/usr/src/app/node_modules/browserify/node_modules/browser-resolve/node_modules/resolve/lib/async.js:188:17)
    at load (/usr/src/app/node_modules/browserify/node_modules/browser-resolve/node_modules/resolve/lib/async.js:69:43)
    at onex (/usr/src/app/node_modules/browserify/node_modules/browser-resolve/node_modules/resolve/lib/async.js:92:31)
    at /usr/src/app/node_modules/browserify/node_modules/browser-resolve/node_modules/resolve/lib/async.js:22:47
    at FSReqWrap.oncomplete (fs.js:152:21)
npm info lifecycle irregular_verbs@1.0.0~start: Failed to exec start script
</code></pre>

<p>My first js file is <code>server.js</code> which generate a bundle to load <code>app.js</code>.
I removed everything on my app.js file to be sure that no personal components create a conflict. So it is very light now! But still doesn't work.</p>

<p>My app.js file:</p>

<pre><code>var React = require('react');
require('react-router-dom');
React.render(&lt;div&gt;&lt;p&gt;Blop&lt;/p&gt;&lt;/div&gt;, document.getElementById('base_ihm'));
</code></pre>

<p>Without the <code>require('react-router-dom');</code>, everything works!</p>

<p>My <code>server.js</code>:</p>

<pre><code>var express = require('express');
var browserify = require('browserify');
var React = require('react');
var jsx = require('node-jsx');
var app = express();

// Constants
const PORT = 8080;

jsx.install();

// Enable compression
var compression = require('compression');
app.use(compression());

// Create a path name bundle.js which call app.js and apply browserify
app.use('/bundle.js', function(req, res) {
  res.setHeader('content-type', 'application/javascript');
  browserify('./app.js', {
    debug: true
  })
  .transform('reactify')
  .bundle()
  .pipe(res);
});

// static ressources
app.use(express.static(__dirname + '/static/css'));
app.use(express.static(__dirname + '/static/images'));

// Main route   
app.use('/', function(req, res) {

    res.setHeader('Content-Type', 'text/html');
    res.end(React.renderToStaticMarkup(

        React.createElement(
            'html', null,

            // Header
            React.createElement(
                'head', null,

                // Title
                React.createElement('title', null, 'Irregular Verbs'),

                // Meta
                React.createElement('meta', {charSet: 'UTF-8'}, null),
                React.createElement('meta', {name: 'viewport', content: 'width=device-width, initial-scale=1'}, null),

                // Custom CSS
                React.createElement('link', { rel: 'stylesheet', href:     'main.css' }, null)
            ),

            // Body
            React.DOM.body(
                null,
                React.DOM.div({
                    id: 'base_ihm',
                    dangerouslySetInnerHTML: {
                    __html:     React.renderToString(React.createElement('div', null))
                    }
                }),

                // Use the path create just before
                React.DOM.script({
                    src: '/bundle.js'
                })
            )
        )
    ));
});

var server = app.listen(PORT, function() {
  var addr = server.address();
  console.log('Listening @ http://%s:%d', addr.address, addr.port);
});
</code></pre>

<p><strong>Is react-router well installed?</strong></p>

<p>There is the content of my package.json file:</p>

<pre><code>{
  ""main"": ""server.js"",
  ""scripts"": {
    ""start"": ""node server.js""
  },
  ""dependencies"": {
    ""express"": ""^4.13.3"",
    ""body-parser"": ""^1.15.2"",
    ""node-jsx"": ""^0.13.3"",
    ""react"": ""^15.6.1"",
    ""react-dom"": ""^15.6.1"",
    ""react-router-dom"": ""^4.0.0"",
    ""browserify"": ""^14.4.0"",
    ""reactify"": ""^1.1.1"",
    ""mysql"": ""^2.11.1""
  }
}
</code></pre>

<p>I use <code>docker</code> and <code>docker-compose</code>. On my Dockerfile, I added <code>RUN npm ls</code> and <code>RUN ls node_modules</code>: I can see <code>react-router</code> and <code>react-router-dom</code>. So there are here!</p>

<p><strong>Any cache with docker?</strong></p>

<p>I rename my image to be sure to use the good one and not an old one.
I also restart my container using <code>docker-compose up --force-recreate</code>.
So I presume it is ok.</p>

<p><strong>Erreur with server.js where browserify is used</strong></p>

<p>I think I've made a mistake in my server.js file but I have no idea...
There are what I have tried with no success:</p>

<ol>
<li>I try to add a global:true then global:false at my transform('reactify')</li>
<li>In my Dockerfile, I try to add <code>npm install react-router-dom -g</code> to be sure it was installed</li>
<li>I finaly upgraded my versions. And also tried react-router-dom in version 4.1.1</li>
<li>I replace the <code>require('react-router-dom')</code> by <code>require('./node_modules/react-router-dom')</code> but get the same error (except it was the new path which wasn't found).</li>
</ol>

<p>Do you have any idea? 
Thank you for your help!</p>
","8201365","","","","","2017-07-25 03:53:37","Browserify cannot find module 'react-router-dom'","<reactjs><docker><react-router><browserify>","1","0","1","",""
"35979488","1","36003534","","2016-03-14 04:20:15","","0","971","<p>for my isomorphic application, i'm usign react router (<strong>2.0.1</strong>) and i need to handle authentication, so i used the <strong>onEnter</strong> hook , according to the documentation api. I need to handle authentication but getting </p>

<blockquote>
  <p>TypeError: transition.redirect is not a function</p>
</blockquote>

<p><em>routes.jsx file</em> </p>

<pre><code>**/**
 *
 * @param next
 * @param transition
 * @param callback
 */
function  requireAuth  (next, transition, callback) {
    if (!window.user){
        transition.abort();
        transition.redirect ({
            pathname: '/login',
            state: { nextPathname: next.location.pathname }
        }, transition);
    }
    else {
        callback(null, transition);
    }
}**



&lt;Router history={history} onUpdate={onUpdate} onEnter={requireAuth}&gt;
            &lt;Route path=""/rt/"" component={RealTime}/&gt;
            &lt;Route path=""/"" component={Blank}/&gt;
            {devRoutes}

 &lt;/Router&gt;
</code></pre>

<p><em>server.js file</em></p>

<pre><code>app.get('*', function(req, res, next) {
 Router.run(routes(), location, function(e, i, t) {
      var str = React.renderToString(
                  React.createElement(Router, i));
      res.send (str)
  }
}
</code></pre>
","4904189","","","","","2016-03-15 05:47:53","Server side react router onEnter handling, transition.redirect is not a function","<node.js><reactjs><react-router>","2","0","","",""
"37050115","1","","","2016-05-05 12:03:00","","4","2324","<p>How should I implement detecting mobile in my reactjs + express? I used <a href=""https://www.npmjs.com/package/mobile-detect"" rel=""nofollow"">mobile-detect</a> to determine if mobile but first I implemented it with <code>const md = new MobileDetect(window.navigator.userAgent)</code> but I remembered <code>window</code> doesn't exist when it's server loaded. The example in express section should work because that's the only place I could access <code>req</code> but how do I pass it in my react app to be used afterwards?</p>

<p><strong>UPDATE</strong></p>

<pre><code>// app.js

...
import { routes } from './routes';
import { match, RouterContext } from 'react-router';
import { renderToString } from 'react-dom/server';

...
const app = express();
app.use(express.static('public'));

app.set('view engine', 'ejs');

app.get('*', (req, res) =&gt; {
  // routes is our object of React routes defined above
  match({ routes, location: req.url }, (err, redirectLocation, props) =&gt; {
  if (err) { // something went badly wrong, so 500 with a message
    res.status(500).send(err.message);

  } else if (redirectLocation) { // we matched a ReactRouter redirect, so redirect from the server
    res.redirect(302, redirectLocation.pathname + redirectLocation.search);

  } else if (props) { // if we got props, that means we found a valid component to render for the given route
    const reducer = combineReducers(reducers);
    const store = applyMiddleware(...middlewares)(createStore)(reducer);

  ...
const server = http.createServer(app);
const port = process.env.PORT || 3003;

server.listen(port);
server.on('listening', () =&gt; {
  console.log('Listening on ' + port);
});

// client-render.js
import { routes } from './routes';
import { Router, browserHistory } from 'react-router'

ReactDOM.render(
  &lt;Provider store={store}&gt;
    &lt;Router onUpdate={() =&gt; {scrollTop(); handleNotifs(store)}} routes={routes} history={browserHistory} /&gt;
  &lt;/Provider&gt;,
  document.getElementById('app')
);

// routes.js
import AppComponent from './components/app';
import IndexComponent from './components/index';
...

const routes = {
  path: '',
  component: AppComponent,
  childRoutes: [{
    path: '/',
    component: IndexComponent,
    name: 'home'
  }, {...}]
}
</code></pre>
","978906","","978906","","2016-05-10 06:51:50","2016-05-13 01:59:17","Detecting mobile in an isomorphic reactjs","<express><mobile><reactjs><isomorphic-javascript>","1","2","0","",""
"45217755","1","","","2017-07-20 14:32:58","","1","367","<p>I'm trying to render react application on server, but it seems that renderToString function doesn't render markup properly, when I do console.log(markup) I'm getting something like this:</p>

<pre><code>&lt;div data-reactroot="""" data-reactid=""1"" data-react-checksum=""-1424217736""&gt;
&lt;!-- react-empty: 2 --&gt;&lt;!-- react-empty: 3 --&gt;&lt;!-- react-empty: 4 --&gt;&lt;!-- react-empty: 5 --&gt;&lt;/div&gt;
</code></pre>

<p>My code looks like this: </p>

<pre><code>app.use('*', (req, res) =&gt; {

  const context = {}
  const store = configureStore()


  const markup = renderToString(
    &lt;Provider store={store}&gt;
      &lt;StaticRouter
        location={req.url}
        context={context}
      &gt;
        &lt;Routes/&gt;
      &lt;/StaticRouter&gt;
    &lt;/Provider&gt;
  )

  console.log(markup)

  if (context.url) {
    // Somewhere a `&lt;Redirect&gt;` was rendered
    redirect(301, context.url)
  } else {
    // we're good, send the response
    res.send(`
      &lt;!doctype html&gt;
      &lt;head&gt;
      &lt;meta name=""google-site-verification"" content=""P5pcBDBR0SrpH4kFMOp5Ush5JxDdG-3oPhjKO8Zf5WE"" /&gt;
      &lt;/head&gt;
      &lt;body&gt;
      &lt;div id=""app""&gt;${markup}&lt;/div&gt;
      &lt;/body&gt;
    `)


}
})
</code></pre>

<p>I'm using React-Router v4</p>
","6287311","","","","","2017-07-20 14:32:58","Server Side Rendering - renderToString returns empty html","<javascript><reactjs><redux><react-router><serverside-rendering>","0","3","","",""
"36636409","1","","","2016-04-15 00:38:36","","0","202","<p>I'm trying to get react-router to run on the server with the simplest Hello World example, and whatever I do, the props in the callback is always undefined. Trying since two days, it seems the API has changed quite drastically and all answers I found where related to the old API.</p>

<p>So here the super simple code example:</p>

<pre><code>import http from 'http'
import React from 'react'
import { renderToString } from 'react-dom/server'
import { match, RoutingContext } from 'react-router'
import fs from 'fs'


class Home extends React.Component{
    render(){
        return &lt;div&gt;{this.props.children}&lt;/div&gt;         
    }
}

class Hello extends React.Component{
    render(){
        return &lt;h1&gt;Hello World&lt;/h1&gt;
    }
}

class Routes extends React.Component{
    render(){
        return (
            &lt;Route path=""/"" component={Home}&gt;
                &lt;Route path=""hello"" component={Hello} /&gt;
            &lt;/Route&gt;
        )
    }
}

http.createServer((req, res) =&gt; {

    match({ Routes, location: req.url }, (err, redirect, props) =&gt; {
        if (props){
            let markup = renderToString(&lt;RouterContext {...props}/&gt;)
            res.write(markup)
            res.end()
        } else {
            res.write(""not found"")
            res.end()
        }

    })  
}).listen(8888);
</code></pre>

<p>If I type in /hello in the browser, why does it say ""not found""? According to the documentation and API it should work like that.. what am I missing?</p>

<p>Thanks for your help!</p>
","5372417","","","","","2016-04-15 00:59:52","Server side rendering with react-router","<javascript><node.js><reactjs><react-router><isomorphic-javascript>","1","2","","",""
"37079847","1","48565807","","2016-05-06 19:13:42","","19","6856","<p>I'm working on an app using <a href=""http://leafletjs.com/"" rel=""noreferrer"">Leaflet</a> (via <a href=""https://github.com/PaulLeCam/react-leaflet"" rel=""noreferrer"">react-leaflet</a>). Leaflet directly manipulates the DOM. The react-leaflet library doesn't change that, it just gives you React components that you can use to control your Leaflet map in a React-friendly way.</p>

<p>In this app, I want to use custom map markers that are divs containing a few simple elements. The way to do that in Leaflet is to set your marker's <code>icon</code> property to a <a href=""http://leafletjs.com/reference.html#divicon"" rel=""noreferrer"">DivIcon</a>, in which you can set your custom HTML. You set that inner HTML by setting the DivIcon's <code>html</code> property to a string containing the HTML. In my case, I want that HTML to be rendered from a React component.</p>

<p>In order to do that, it seems like the correct approach is to use <code>ReactDOMServer.renderToString()</code> to render the Component that I want inside the map marker into a string, which I would then set as the <code>html</code> property of the DivIcon:</p>

<p><strong><em>MyMarker.js:</em></strong></p>

<pre><code>import React, { Component } from 'react'
import { renderToString } from 'react-dom/server'
import { Marker } from 'react-leaflet'
import { divIcon } from 'leaflet'

import MarkerContents from './MarkerContents'

export class MyMarker extends Component {
  render() {
    const markerContents = renderToString(&lt;MarkerContents data={this.props.data} /&gt;)
    const myDivIcon = divIcon({
      className: 'my-marker',
      html: markerContents
    })

    return (
      &lt;Marker
        position={this.props.position}
        icon={myDivIcon} /&gt;
    )
  }
}
</code></pre>

<p>However, according to the <a href=""https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostring"" rel=""noreferrer"">React docs</a>:</p>

<blockquote>
  <p>This [renderToString] should only be used on the server.</p>
</blockquote>

<p>Is this a strict rule, or is it only meant to dissuade people from circumventing ReactDOM's efficient management of the DOM?</p>

<p>I can't think of another (better) way to accomplish what I'm after. Any comments or ideas would be greatly appreciated.</p>
","1942085","","","","","2018-02-01 15:02:53","Is it ok to use ReactDOMServer.renderToString in the browser in areas where React isn't directly managing the DOM?","<reactjs><leaflet><react-dom>","2","7","2","",""
"36519829","1","36520024","","2016-04-09 16:46:38","","0","49","<p>I want to pass React Component from server-side, which is written in node.js. 
Code(server.js):</p>

<pre><code>var ReactDOMServer = require('react-dom/server');
var ReactApp = require('./console/ReactApp');
app.get('*', function(req, res, next){
  var reactHtml = ReactDOMServer.renderToString(&lt;ReactApp /&gt;);
  res.render('index',
   {reactOutput: reactHtml});
});
</code></pre>

<p>console/ReactApp.js:</p>

<pre><code>var React = require('react');    
var ReactApp = React.createClass({      
    render: function() {
        return &lt;div&gt;Hello World&lt;/div&gt;;
    }
});
module.exports = ReactApp;
</code></pre>

<p>In both files, '&lt;>' generated SyntaxError when running <code>node server.js</code></p>

<pre><code>var reactHtml = ReactDOMServer.renderToString(&lt;ReactApp /&gt;);
                                                ^
at exports.runInThisContext (vm.js:53:16)
    at Module._compile (module.js:373:25)
    at Object.Module._extensions..js (module.js:416:10)
    at Module.load (module.js:343:32)
    at Function.Module._load (module.js:300:12)
    at Module.require (module.js:353:17)
    at require (internal/module.js:12:17)
    at Object.&lt;anonymous&gt; (/.../www.js:7:11)
    at Module._compile (module.js:409:26)
    at Object.Module._extensions..js (module.js:416:10)
</code></pre>
","5682933","","","","","2016-04-09 17:03:08","'<' not recognized when using reactJS in server-side node.js","<javascript><node.js><reactjs>","1","0","","",""
"35959965","1","","","2016-03-12 16:01:42","","3","880","<p>I have a expressjs  app with the following code, what i am trying to do is to render a react component named <strong>Hello</strong> with the request to ""/"". Inside Hello component i am using two react-router Links, but these two Links doesn't render the href attributes.</p>

<p>I am using here react-router 2</p>

<p><strong>Server.js file</strong></p>

<pre><code>var express = require(""express"");
var app = express();
var React = require(""react"");
var ReactDOM = require(""react-dom/server"");

var Hello = React.createFactory(require(""./js/components/Hello""));
// The above is a reference to pre-compiled Hello.jsx to Hello.js using babel

app.set(""view engine"", ""ejs"");
app.set(""views"", ""./views"");

app.use(express.static(""./public""));

app.get(""/"", function (req, res) {
    res.render(""Home"",{data:ReactDOM.renderToString(Hello())});
});


app.listen(app.get(""port""), function () {
    console.log(""server started on port "" + app.get(""port""));
});
</code></pre>

<p><strong>Hello.jsx File</strong></p>

<pre><code>var React = require(""react"");
var Link = require(""react-router/lib/Link"");

var Hello = React.createClass({
   callMe:function(){
       alert(""Hurray"");
   },
   componentWillMount:function(){
        console.log(""componentWillMount fired"");
   },
   render:function(){
     //  console.log(this);
       return(
           &lt;div&gt;
                &lt;h2 onClick={this.callMe}&gt;Hello Boom Boom {this.props.name}&lt;/h2&gt;
                &lt;Link to=""/""&gt;Home&lt;/Link&gt;
                &lt;Link to=""/about""&gt;About&lt;/Link&gt;
                // above two Links rendering anchor tags without href attribute
           &lt;/div&gt;
       );
   }
});


module.exports = Hello;
</code></pre>

<p><strong>Home.ejs File</strong></p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html xmlns=""http://www.w3.org/1999/xhtml""&gt;
&lt;head&gt;

&lt;/head&gt;
&lt;body&gt;
    &lt;h2&gt;Welcome to home page&lt;/h2&gt;
    &lt;div id=""container""&gt;
        &lt;%- data %&gt;
    &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p><a href=""https://i.stack.imgur.com/iOszp.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iOszp.png"" alt=""in browser output""></a></p>
","1373377","","","","","2016-12-06 16:24:34","react-router Link doesn't render href attribute with server side rendering?","<express><reactjs><react-router><isomorphic-javascript>","2","0","1","",""
"45804800","1","","","2017-08-21 20:09:20","","0","56","<p>I am trying to set up ApolloJS with server side rendering, react, redux and react router but am not having much luck. I have tried setting up as per the documents but it doesn't appear to work. The graphQL request gets made however the data returned (that is then used as initial data) does not come back in the expected format. for example: </p>

<pre><code>data: 
      { '$ROOT_QUERY.shop.products({""first"":10}).edges.0.node': [Object],
        '$ROOT_QUERY.shop.products({""first"":10}).edges.0': [Object],
        '$ROOT_QUERY.shop.products({""first"":10}).edges.1.node': [Object],
        '$ROOT_QUERY.shop.products({""first"":10}).edges.1': [Object],
        '$ROOT_QUERY.shop.products({""first"":10})': [Object],
        '$ROOT_QUERY.shop': [Object],
        ROOT_QUERY: [Object] },
     optimistic: [],
     reducerError: null }
</code></pre>

<p>This data seems to look like my actual graphQl query and is not actually converting it into a response. I am using version 1.4.14 of react apollo.</p>

<p>Any idea if I am missing something?</p>

<p>client.js</p>

<pre><code>const client = new ApolloClient({
  networkInterface: createNetworkInterface({ uri: '/graphql' }),
  reduxRootSelector: store =&gt; store.apollo
});

const store = configureStore(client, window.__APOLLO_STATE__);
const MOUNT_NODE = document.getElementById(""root"");

render(
  &lt;ApolloProvider store={store} client={client}&gt;
    &lt;BrowserRouter&gt;
      &lt;App /&gt;
    &lt;/BrowserRouter&gt;
  &lt;/ApolloProvider&gt;
  , MOUNT_NODE);
</code></pre>

<p>server.js</p>

<pre><code>app.get(""*"", (req, res) =&gt; {

  const client = new ApolloClient({
    ssrMode: true,
    reduxRootSelector: store =&gt; store.apollo,
    networkInterface: createNetworkInterface({
      uri: `http://localhost:${PORT}/graphql`,
      opts: {},
    })
  });

  const store = configureStore(client);

  const component = (
    &lt;ApolloProvider client={client} store={store}&gt;
      &lt;StaticRouter location={req.url} context={{}}&gt;
        &lt;App /&gt;
      &lt;/StaticRouter&gt;
    &lt;/ApolloProvider&gt;
  );

  renderToStringWithData(component).then(content =&gt; {

    const initialState = {
      apollo: {
        data: client.getInitialState()
      }
    };

    console.log(client.getInitialState()) //The example data above gets returned here

    const html = &lt;Html content={content} initialState={initialState} /&gt;;

    res.send(`&lt;!doctype html&gt;\n${renderToStaticMarkup(html)}`);

  }).catch(err =&gt; {
    console.log(err);
    res.status(500).send('Oops');
  });
});
</code></pre>

<p>component with query</p>

<pre><code>const query = gql`{
    shop {
    products(first: 10) {
      edges {
        node {
          title
        }
      }
    }
  }
}`;

const Home = () =&gt; (
  &lt;DefaultLayout&gt;
    &lt;Button content='Click Here' /&gt;
    &lt;span&gt;home &lt;Link to=""/search""&gt;SEARCH&lt;/Link&gt;&lt;/span&gt;
  &lt;/DefaultLayout&gt;
);

const HomeWithData = graphql(query)(Home);
</code></pre>
","4843251","","","","","2017-08-21 20:09:20","ssr ApolloJS with react redux","<reactjs><apollo><react-apollo>","0","0","","",""
"45110293","1","45111124","","2017-07-14 19:24:56","","1","542","<p>I am extacting a tiny component from a bigger map component on an app using <a href=""http://leafletjs.com/"" rel=""nofollow noreferrer"">Leafet</a> and it seems impossible to include the JSX into the html string of Leafet DivIcon.</p>

<p>bigger map component render part:</p>

<pre><code>render () {
  const {tobject, strings} = this.props

  let circle = classes.redCircle

  if (tobject.lastPoint.activeEvents.ignition) {
    circle = classes.greenCircle
  }

  const icon = new window. L. DivIcon({
  html:
  ` &lt;div class= ${classes.tobjecticon}&gt;&lt;span class= ${classes.tobjecticontext}&gt;&lt;div class= ${circle}&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt; `
})
</code></pre>

<p>newly extacted component StatusCircle.js:</p>

<pre><code>import React from 'react'
import classes from './StatusCircle.scss'

export const StatusCircle = ({ status}) =&gt; {

  let circle = classes.redCircle

  if (status) {
    circle = classes.greenCircle
  }

  return (
    &lt;div className={circle} &gt;&lt;/div&gt;
  )
}

export default StatusCircle
</code></pre>

<p>My question seems similar to <a href=""https://stackoverflow.com/questions/37079847/is-it-ok-to-use-reactdomserver-rendertostring-in-the-browser-in-areas-where-reac"">this one</a>. I've tried <strong>renderToString()</strong> of StatusCircle, but using ReactDOM (deprecated there) and not <a href=""https://facebook.github.io/react/docs/react-dom-server.html"" rel=""nofollow noreferrer"">ReactDOMServer</a> and it didn't work saying there is no such function. Is it okay to use ReactDOMServer.renderToString() or .renderToStaticMarkup() to achieve this or is it better to leave unchanged without extraction?</p>
","6654410","","6654410","","2017-07-17 11:00:31","2017-07-17 11:00:31","Should I use ReactDOMServer.renderToString() or any other way to render a react component to a string?","<react-redux>","2","0","","",""
"35765711","1","","","2016-03-03 07:26:10","","0","441","<p>I am trying to build an isomorphic React application using NodeJs.</p>

<p>The node server.js file uses 'node-jsx-babel', to transpile the Jsx files of my react component.</p>

<p>on server.js i got </p>

<pre><code>require('node-jsx-babel').install({ extension: '.jsx'});
</code></pre>

<p>on my server route file, I call the react component like so.</p>

<pre><code>var React = require('react');
var ReactDOMServer = require('react-dom/server');
var Catalog = React.createFactory(require('./js/src/Components/Catalog/Catalog'));

app.get('/routename', function(req, res){


var reactHtml = ReactDOMServer.renderToString(Catalog({
    columns: 3,
    ...

    }));
    // Output html rendered by react

    res.render('reactSearch.ejs', {reactOutput: reactHtml});
    });
</code></pre>

<p>The Catalog component upon mounting makes an api call to another node api, and obtains some data, which is successfully obtained in it's state variable this.state.data. The render block of this component looks like this.</p>

<pre><code>render: function() {

var MenuList = this.state.data.menu.map(function(menuItem,index){

     return(
       &lt;li key={index}&gt;
           &lt;a className=""search_prevent"" href={menuItem.u}&gt; {menuItem.n} &lt;/a&gt;

       &lt;/li&gt;
     )
   });

return (
&lt;ul className=""menu""&gt;
   {MenuList}
&lt;/ul&gt;

)
}
</code></pre>

<p>Upon reloading the browser at <code>localhost:&lt;port&gt;/routename</code>, The Node Application crashes with this error.</p>

<pre><code>Warning: React can't find the root component node for data-reactid value `.3r0ietj75s.0.0.0.0.0.1`. If you're seeing this message, it probably means that you've loaded two copies of React on the page. At this time, only a single copy of React can be loaded at a time.
/Users/nikil/Documents/ReactIsomorphicDemo/node_modules/react/lib/ReactMount.js:715
    firstChildren[0] = deepestAncestor.firstChild;
</code></pre>

<p><strong>I can get the page to load fine without any errors if I remove the {MenuList} from inside the <code>&lt;ul&gt;</code> of the render block. If i replace {MenuList} with say Hello, the page renders with the ul and the word hello.
The application crashes when I try mapping through the data I obtained and assign it to the ul.</strong></p>

<p>I have ensured that the react component is not a sub dependency of any of my other components including React-DOM.</p>

<p>Below is an output of <strong>npm ls</strong> to show my dependency graph.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>─┬ algoliasearch@3.13.0
│ ├── agentkeepalive@2.0.3
│ ├─┬ debug@2.2.0
│ │ └── ms@0.7.1
│ ├─┬ debug-ms-fix-yui-compressor@2.2.2-future-reserved-word-fix-ms
│ │ └── algolia-ms@0.7.1-fix-future-reserved-words
│ ├─┬ envify@3.4.0
│ │ ├─┬ jstransform@10.1.0
│ │ │ ├── base62@0.1.1
│ │ │ ├── esprima-fb@13001.1001.0-dev-harmony-fb
│ │ │ └─┬ source-map@0.1.31
│ │ │   └── amdefine@1.0.0
│ │ └── through@2.3.8
│ ├── es6-promise@3.1.2
│ ├── events@1.1.0
│ ├── inherits@2.0.1
│ ├── load-script@1.0.0
│ ├── lodash@3.10.1
│ ├── lodash-compat@3.10.2
│ ├── querystring@0.2.0
│ ├── semver@5.1.0
│ └── tunnel-agent@0.4.2
├── ejs@2.4.1
├─┬ express@3.1.0
│ ├── buffer-crc32@0.1.1
│ ├── commander@0.6.1
│ ├─┬ connect@2.7.2
│ │ ├── bytes@0.1.0
│ │ ├── formidable@1.0.11
│ │ ├── pause@0.0.1
│ │ └── qs@0.5.1
│ ├── cookie@0.0.5
│ ├── cookie-signature@0.0.1
│ ├─┬ debug@2.2.0
│ │ └── ms@0.7.1
│ ├── fresh@0.1.0
│ ├── methods@0.0.1
│ ├── mkdirp@0.3.3
│ ├── range-parser@0.0.4
│ └─┬ send@0.1.0
│   └── mime@1.2.6
├── mime@1.2.11
├─┬ node-jsx-babel@0.14.2
│ ├─┬ babel-core@6.6.4
│ │ ├─┬ babel-code-frame@6.6.0
│ │ │ ├─┬ chalk@1.1.1
│ │ │ │ ├─┬ ansi-styles@2.2.0
│ │ │ │ │ └── color-convert@1.0.0
│ │ │ │ ├── escape-string-regexp@1.0.5
│ │ │ │ ├─┬ has-ansi@2.0.0
│ │ │ │ │ └── ansi-regex@2.0.0
│ │ │ │ ├─┬ strip-ansi@3.0.1
│ │ │ │ │ └── ansi-regex@2.0.0
│ │ │ │ └── supports-color@2.0.0
│ │ │ ├── esutils@2.0.2
│ │ │ ├── js-tokens@1.0.2
│ │ │ ├─┬ line-numbers@0.2.0
│ │ │ │ └── left-pad@0.0.3
│ │ │ └─┬ repeating@1.1.3
│ │ │   └─┬ is-finite@1.0.1
│ │ │     └── number-is-nan@1.0.0
│ │ ├─┬ babel-generator@6.6.4
│ │ │ ├─┬ detect-indent@3.0.1
│ │ │ │ ├── get-stdin@4.0.1
│ │ │ │ └── minimist@1.2.0
│ │ │ ├─┬ is-integer@1.0.6
│ │ │ │ └─┬ is-finite@1.0.1
│ │ │ │   └── number-is-nan@1.0.0
│ │ │ ├─┬ repeating@1.1.3
│ │ │ │ └─┬ is-finite@1.0.1
│ │ │ │   └── number-is-nan@1.0.0
│ │ │ └── trim-right@1.0.1
│ │ ├── babel-helpers@6.6.0
│ │ ├── babel-messages@6.6.0
│ │ ├─┬ babel-register@6.6.0
│ │ │ ├── core-js@2.1.3
│ │ │ ├─┬ home-or-tmp@1.0.0
│ │ │ │ ├── os-tmpdir@1.0.1
│ │ │ │ └── user-home@1.1.1
│ │ │ ├─┬ mkdirp@0.5.1
│ │ │ │ └── minimist@0.0.8
│ │ │ └─┬ source-map-support@0.2.10
│ │ │   └─┬ source-map@0.1.32
│ │ │     └── amdefine@1.0.0
│ │ ├─┬ babel-runtime@5.8.35
│ │ │ └── core-js@1.2.6
│ │ ├── babel-template@6.6.4
│ │ ├─┬ babel-traverse@6.6.4
│ │ │ ├── globals@8.18.0
│ │ │ ├─┬ invariant@2.2.0
│ │ │ │ └─┬ loose-envify@1.1.0
│ │ │ │   └── js-tokens@1.0.2
│ │ │ └─┬ repeating@1.1.3
│ │ │   └─┬ is-finite@1.0.1
│ │ │     └── number-is-nan@1.0.0
│ │ ├─┬ babel-types@6.6.4
│ │ │ ├── esutils@2.0.2
│ │ │ └── to-fast-properties@1.0.1
│ │ ├── babylon@6.6.4
│ │ ├── convert-source-map@1.2.0
│ │ ├─┬ debug@2.2.0
│ │ │ └── ms@0.7.1
│ │ ├── json5@0.4.0
│ │ ├── lodash@3.10.1
│ │ ├─┬ minimatch@2.0.10
│ │ │ └─┬ brace-expansion@1.1.3
│ │ │   ├── balanced-match@0.3.0
│ │ │   └── concat-map@0.0.1
│ │ ├── path-exists@1.0.0
│ │ ├── path-is-absolute@1.0.0
│ │ ├── private@0.1.6
│ │ ├── shebang-regex@1.0.0
│ │ ├── slash@1.0.0
│ │ └── source-map@0.5.3
│ └─┬ babel-preset-react@6.5.0
│   ├─┬ babel-plugin-syntax-flow@6.5.0
│   │ └─┬ babel-runtime@5.8.35
│   │   └── core-js@1.2.6
│   ├─┬ babel-plugin-syntax-jsx@6.5.0
│   │ └─┬ babel-runtime@5.8.35
│   │   └── core-js@1.2.6
│   ├─┬ babel-plugin-transform-flow-strip-types@6.6.4
│   │ └─┬ babel-runtime@5.8.35
│   │   └── core-js@1.2.6
│   ├─┬ babel-plugin-transform-react-display-name@6.5.0
│   │ └─┬ babel-runtime@5.8.35
│   │   └── core-js@1.2.6
│   ├─┬ babel-plugin-transform-react-jsx@6.6.4
│   │ ├─┬ babel-helper-builder-react-jsx@6.6.4
│   │ │ ├─┬ babel-types@6.6.4
│   │ │ │ ├─┬ babel-traverse@6.6.4
│   │ │ │ │ ├─┬ babel-code-frame@6.6.0
│   │ │ │ │ │ ├─┬ chalk@1.1.1
│   │ │ │ │ │ │ ├─┬ ansi-styles@2.2.0
│   │ │ │ │ │ │ │ └── color-convert@1.0.0
│   │ │ │ │ │ │ ├── escape-string-regexp@1.0.5
│   │ │ │ │ │ │ ├─┬ has-ansi@2.0.0
│   │ │ │ │ │ │ │ └── ansi-regex@2.0.0
│   │ │ │ │ │ │ ├─┬ strip-ansi@3.0.1
│   │ │ │ │ │ │ │ └── ansi-regex@2.0.0
│   │ │ │ │ │ │ └── supports-color@2.0.0
│   │ │ │ │ │ ├── js-tokens@1.0.2
│   │ │ │ │ │ └─┬ line-numbers@0.2.0
│   │ │ │ │ │   └── left-pad@0.0.3
│   │ │ │ │ ├── babel-messages@6.6.0
│   │ │ │ │ ├── babylon@6.6.4
│   │ │ │ │ ├─┬ debug@2.2.0
│   │ │ │ │ │ └── ms@0.7.1
│   │ │ │ │ ├── globals@8.18.0
│   │ │ │ │ ├─┬ invariant@2.2.0
│   │ │ │ │ │ └─┬ loose-envify@1.1.0
│   │ │ │ │ │   └── js-tokens@1.0.2
│   │ │ │ │ └─┬ repeating@1.1.3
│   │ │ │ │   └─┬ is-finite@1.0.1
│   │ │ │ │     └── number-is-nan@1.0.0
│   │ │ │ └── to-fast-properties@1.0.1
│   │ │ ├── esutils@2.0.2
│   │ │ └── lodash@3.10.1
│   │ └─┬ babel-runtime@5.8.35
│   │   └── core-js@1.2.6
│   └─┬ babel-plugin-transform-react-jsx-source@6.5.0
│     └─┬ babel-runtime@5.8.35
│       └── core-js@1.2.6
├─┬ react@0.14.7
│ ├─┬ envify@3.4.0
│ │ ├─┬ jstransform@10.1.0
│ │ │ ├── base62@0.1.1
│ │ │ ├── esprima-fb@13001.1001.0-dev-harmony-fb
│ │ │ └─┬ source-map@0.1.31
│ │ │   └── amdefine@1.0.0
│ │ └── through@2.3.8
│ └─┬ fbjs@0.6.1
│   ├── core-js@1.2.6
│   ├─┬ loose-envify@1.1.0
│   │ └── js-tokens@1.0.2
│   ├─┬ promise@7.1.1
│   │ └── asap@2.0.3
│   ├── ua-parser-js@0.7.10
│   └── whatwg-fetch@0.9.0
├── react-addons-css-transition-group@0.14.7
├── react-dom@0.14.7
├── react-pager@1.1.2
└─┬ rest-js@1.1.2
  ├── es6-promise@2.3.0
  └─┬ superagent@0.21.0
    ├── component-emitter@1.1.2
    ├── cookiejar@2.0.1
    ├─┬ debug@2.2.0
    │ └── ms@0.7.1
    ├── extend@1.2.1
    ├─┬ form-data@0.1.3
    │ ├── async@0.9.2
    │ └─┬ combined-stream@0.0.7
    │   └── delayed-stream@0.0.5
    ├── formidable@1.0.14
    ├── methods@1.0.1
    ├── qs@1.2.0
    ├─┬ readable-stream@1.0.27-1
    │ ├── core-util-is@1.0.2
    │ ├── inherits@2.0.1
    │ ├── isarray@0.0.1
    │ └── string_decoder@0.10.31
    └── reduce-component@1.0.1</code></pre>
</div>
</div>
</p>

<p>Not sure what is causing this problem. Would appreciate any thoughts that can help solve this problem. Thanks</p>
","909774","","1016716","","2016-03-08 12:16:55","2016-03-08 12:16:55","React can't find the root component node for data-reactid value `.3r0ietj75s.0.0.0.0.0.1` during Server Side Rendering in NodeJS","<node.js><reactjs><server><rendering>","1","0","","",""
"36323336","1","36323813","","2016-03-31 02:57:21","","7","1970","<p>I am trying to copy this fiddle:
<a href=""http://jsfiddle.net/jhudson8/135oo6f8/"" rel=""noreferrer"">http://jsfiddle.net/jhudson8/135oo6f8/</a></p>

<p>(I also tried this example
<a href=""http://codepen.io/adamaoc/pen/wBGGQv"" rel=""noreferrer"">http://codepen.io/adamaoc/pen/wBGGQv</a>
and the same <code>onClick</code> handler problem exists)</p>

<p>and make the fiddle work for server side rendering, using <code>ReactDOMServer.renderToString</code></p>

<p>I have this call:</p>

<pre><code>   res.send(ReactDOMServer.renderToString((
            &lt;html&gt;
            &lt;head&gt;

                &lt;link href={'/styles/style-accordion.css'} rel={'stylesheet'} type={'text/css'}&gt;&lt;/link&gt;

            &lt;/head&gt;

            &lt;body&gt;


            &lt;Accordion selected='2'&gt;
                &lt;AccordionSection title='Section 1' id='1'&gt;
                    Section 1 content
                &lt;/AccordionSection&gt;
                &lt;AccordionSection title='Section 2' id='2'&gt;
                    Section 2 content
                &lt;/AccordionSection&gt;
                &lt;AccordionSection title='Section 3' id='3'&gt;
                    Section 3 content
                &lt;/AccordionSection&gt;
            &lt;/Accordion&gt;
            &lt;/body&gt;
            &lt;/html&gt;
        )));
</code></pre>

<p>the Accordion element looks like so:</p>

<pre><code>const React = require('react');

const fs = require('fs');
const path = require('path');


const Accordion = React.createClass({

    getInitialState: function () {
        // we should also listen for property changes and reset the state
        // but we aren't for this demo
        return {
            // initialize state with the selected section if provided
            selected: this.props.selected
        };
    },

    render: function () {

        // enhance the section contents so we can track clicks and show sections
        const children = React.Children.map(this.props.children, this.enhanceSection);

        return (
            &lt;div className='accordion'&gt;
                {children}
            &lt;/div&gt;
        );
    },

    // return a cloned Section object with click tracking and 'active' awareness
    enhanceSection: function (child) {

        const selectedId = this.state.selected;
        const id = child.props.id;

        return React.cloneElement(child, {
            key: id,
            // private attributes/methods that the Section component works with
            _selected: id === selectedId,
            _onSelect: this.onSelect
        });
    },

    // when this section is selected, inform the parent Accordion component
    onSelect: function (id) {
        this.setState({selected: id});
    }
});


module.exports = Accordion;
</code></pre>

<p>and the AccordionSection component looks like so:</p>

<pre><code>const React = require('react');


const AccordionSection = React.createClass({

    render: function () {

        const className = 'accordion-section' + (this.props._selected ? ' selected' : '');

        return (
            &lt;div className={className}&gt;
                &lt;h3 onClick={this.onSelect}&gt;
                    {this.props.title}
                &lt;/h3&gt;
                &lt;div className='body'&gt;
                    {this.props.children}
                &lt;/div&gt;
            &lt;/div&gt;
        );
    },

    onSelect: function (e) {
        console.log('event:',e);
        // tell the parent Accordion component that this section was selected
        this.props._onSelect(this.props.id);
    }
});



module.exports = AccordionSection;
</code></pre>

<p>everything works, and the CSS is working, but the problem is that the onClick doesn't get registered. So clicking on the accordion elements does nothing. Does anyone know why the onClick handler might not get registered in this situation?</p>
","1223975","","1223975","","2016-03-31 03:05:53","2016-03-31 03:56:30","onClick handler not registering with ReactDOMServer.renderToString","<javascript><html><css><node.js><reactjs>","2","2","4","",""
"45813189","1","","","2017-08-22 08:58:39","","0","313","<p>I am trying to achieve Server side rendering with my create-react-app project. I don't really need routes for now because it's a single-page application. I have been going through some articles but they seem to be quite complicated to me. Could someone guide me about how to do it or could link me to some simpler articles please?</p>

<p>Here is the code till now:-</p>

<p>The main app component, which imports other components:-</p>

<pre><code>import React, { Component } from ""react"";
import HomePage from ""./HomePage"";
import ""./App.css"";

class App extends Component {

  render() {
    return(
      &lt;div&gt;
        &lt;HomePage/&gt;
      &lt;/div&gt;
    );
  }
}

export default App;
</code></pre>

<p>The Express code till now:-</p>

<pre><code>import express from ""express"";
import React from ""react"";
import { renderToString } from ""react-dom/server"";
import App from ""../src/App"";

const app = express();

app.use(express.static(""../public""));

app.get('*', (req, res) =&gt; {
    res.send(`
        &lt;!DOCTYPE html&gt;
        &lt;head&gt;
            &lt;title&gt;Universal React&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;div id=""root""&gt;${renderToString(&lt;App/&gt;)}&lt;/div&gt;
        &lt;/body&gt;
        &lt;/html&gt;
    `);
});

app.listen(3000, () =&gt; {
    console.log('Server running on PORT 3000');
})
</code></pre>

<p>All the articles or videos I have checked out till now use webpack and make changes to webpack.config.js file but I am using Create-react-app which comes with webpack included, there is no config file so I am a bit confused about how to make the required changes?</p>
","4947123","","","","","2018-02-19 20:46:06","create-react-app Server Side Rendering","<reactjs><express><serverside-rendering>","2","0","0","",""
"37905952","1","","","2016-06-19 09:54:51","","4","502","<p>I am recently trying to build an Universal app using <code>express</code> + <code>react</code> + <code>redux</code></p>

<p>here is a brief description on my problem:</p>

<p>I have successfully rendered react components to <strong>HTML</strong> and send it back to client via <strong>express</strong>'s <code>res.send(renderFullPage(html, initialState))</code>. the html is rendered correctly on the browser side. However, I kept on getting this error in the browser console:</p>

<p><code>
Uncaught SyntaxError: Unexpected token &lt;   ... bundle.js: 1`enter code here`
</code></p>

<p>when I proceed further into the problem by clicked on <strong>bundle.js: 1</strong> i saw:</p>

<p><code>
&lt;!doctype html&gt; (x)
</code></p>

<p>I spin up node server by running <code>npm run devServer</code> command in  <strong>package.json</strong>:</p>

<p>```</p>

<pre><code>{
  ""name"": ""universal"",
  ""version"": ""1.0.0"",
  ""author"": ""Bryan Huang"",
  ""description"": ""nodejs isomorphic package"",
  ""main"": ""index.js"",
  ""scripts"": {
    ""test"": ""mocha --compilers js:babel-core/register --recursive"",
    ""devServer"": ""nodemon server/bin/server.js"",
    ""buildServer"": ""babel server/server.js -d build"",
    ""startServer"": ""node build/server/server.js"",
    ""lint"": ""eslint . --ext .js --ext .jsx"",
    ""build"": ""webpack"",
    ""dev"": ""webpack-dev-server""
  }
  ...
}
</code></pre>

<p>```</p>

<p><strong>server/bin/server.js</strong>:</p>

<p>```</p>

<pre><code>const fs =  require('fs')
const path = require('path')
const config =  JSON.parse(fs.readFileSync(path.resolve(__dirname, '../..', '.babelrc'), 'utf-8'))
require('babel-register')(config)
require(path.resolve(__dirname, '../server.js'))
</code></pre>

<p>```</p>

<p><strong>server/server.js</strong></p>

<p>```</p>

<pre><code>import 'babel-polyfill'
import path from 'path'
import React from 'react'
import { renderToString } from 'react-dom/server'
import renderFullPage from './utils/render'
import { createStore } from 'redux'
import { Provider }  from 'react-redux'
import App from '../src/containers/App'
import reducers from '../src/reducers'
import express from 'express'

const app = express()

const staticPath = path.resolve(__dirname, '../..', 'static')

// serve static files.
app.use('/static', express.static(staticPath))

// Fired everytime the server side receives a request.
app.use(handleRender)
app.use(renderFullPage)

function handleRender (req, res) {
  // Create store.
  const store = createStore(reducers)

  // Render the component to string.
  const html = renderToString (
    &lt;Provider store={store}&gt;
      &lt;App /&gt;
    &lt;/Provider&gt;
  )

  // Get the initial state.
  const initialState = store.getState()

  // Send the rendered page back to client
  res.send(renderFullPage(html, initialState))
}


app.listen(3004, () =&gt; {
  console.log('listening in port 3004')
})
</code></pre>

<p>```</p>

<p>here is my <code>renderFullPage</code> function:</p>

<p>```</p>

<pre><code>export default function renderFullPage (html, initialState) {
  return `&lt;!doctype html&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;Universal App&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;div id='app'&gt;${html}&lt;/div&gt;
        &lt;script&gt;
          window.__INITIAL_STATE__ = ${JSON.stringify(initialState)}
        &lt;/script&gt;
        &lt;script src='build/bundle.js'&gt;&lt;/script&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  `
}
</code></pre>

<p>```</p>

<p>Did I do anything wrong that causes this problem?</p>
","2408262","","","","","2018-03-09 12:11:32","""Unexpected token < "" when doing react redux server side rendering","<javascript><reactjs><redux>","1","4","","",""
"37613853","1","40424776","","2016-06-03 12:00:43","","0","1315","<p>I'm developing isomorphic app with <code>react-router</code> &amp; <code>express</code>. I'm using react router in server side rendering. I want to have custom error pages, that will be sent upon either server-side error, rendering error or ofcourse- not found. But I'm having problems connecting the dots.
Here are my routes:</p>

<pre><code>&lt;Route component={Index} path=""/""&gt;
  &lt;IndexRoute component={Home} /&gt;
  &lt;Route component={Chart} path=""chart"" /&gt;
  &lt;Route component={Login} path=""login"" /&gt;
  &lt;Route component={Error} path=""error"" /&gt; //path=""*"" takes care only for not found,
                                             and it still sends the client a 200 status code
&lt;/Route&gt;
</code></pre>

<p>And here is my only express route:</p>

<pre><code>app.use((req, res, next) =&gt; {
  const location = createLocation(req.url);
  const css = [];
  match({ routes, location }, (err, redirectLocation, renderProps) =&gt; {
    if (err) {
      //500 internal error
      return next(err);
    }
    if(redirectLocation){
      //react-router redirect, no problems here
      return res.redirect(redirectLocation.path + redirectLocation.query);
    }
    if (!renderProps){
      //404 not found
      let error = new Error();
      error.message = ""Not Found"";
      error.status = 404;
      return next(err);
    }

    res.status(200).end(getHtml(renderProps));
  }
}

//...
//some regular express error handler to log in console and (as of right now) send simple text to client.
</code></pre>

<p>while <code>getHtml(renderProps)</code> generates html with <code>react</code>'s <code>renderToString()</code> on <code>&lt;RouterContext {...renderProps} /&gt;</code>.</p>

<p>I want to somehow route to the error component, which will have access to the error code using the router context (or some other way) so it will show an appropiate error.</p>

<p>Any ideas?</p>
","3137842","","","","","2016-11-04 14:08:36","Error handling in react router server-side","<javascript><express><reactjs><react-router>","2","0","1","",""
"44666170","1","","","2017-06-21 03:02:21","","1","209","<p>I think that I am doing something wrong with my React router.  I am a beginner to React/Redux so any help is really appreciated.  It could also be how I configured webpack, but my front end is showing nothing, but I am not getting any errors at all.  I'm not sure what the problem is, but my server starts, is able to populate mock data, and webpack compiles, so I think the backend works.</p>

<p>I'm so sorry for the wall of code but I really have no idea where I'm going wrong and I am a huge newbie to setup on this.  This is definitely the longest post I've ever written so I appreciate anyone taking a look at it.</p>

<p>My client/src/routes:  </p>

<pre><code>import React from 'react'
import {
  BrowserRouter as Router,
  Route,
  Link
} from 'react-router-dom'

import HomePage from './components/home/HomePage';  
import { Layout } from './components/Layout';  

export const App = () =&gt; (
  &lt;Layout&gt;
    &lt;Switch&gt;
      &lt;Route exact path=""/"" component={HomePage} /&gt;
    &lt;/Switch&gt;
  &lt;/Layout&gt;
);

export default App;
</code></pre>

<p>client/src/Homepage.js:</p>

<pre><code>import React from 'react';
import { Link } from 'react-router-dom';

class HomePage extends React.Component {
  render() {
    return (
      &lt;div id=""main""&gt;
        &lt;h1&gt;Hello&lt;/h1&gt;
        &lt;p&gt;World&lt;/p&gt;
      &lt;/div&gt;
    );
  }
}

export default HomePage;
</code></pre>

<p>client/src/Layout.js: </p>

<pre><code>import React from 'react';
import { Link } from 'react-router-dom';

export const Layout = props =&gt; (
  &lt;div className=""app-container""&gt;
    &lt;header&gt;
      &lt;Link to=""/""&gt;
      &lt;/Link&gt;
    &lt;/header&gt;
    &lt;div className=""app-content""&gt;{props.children}&lt;/div&gt;
    &lt;footer&gt;
    &lt;/footer&gt;
  &lt;/div&gt;
);

export default Layout;
</code></pre>

<p>client/src/App.jsx: </p>

<pre><code>import React from 'react';
import { Provider } from 'react-redux';
import configureStore from '../store/Store';  
import { syncHistoryWithStore } from 'react-router-redux';
import routes from '../routes';
import { BrowserRouter as Router } from 'react-router-dom'

const store = configureStore();

export default class AppRoutes extends React.Component {
  render() {
    return (
        &lt;Provider store={store}&gt;
          &lt;Router routes={routes} /&gt;
        &lt;/Provider&gt;
    );
  }
}
</code></pre>

<p>client/src/index.js:</p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router } from 'react-router-dom';
import AppRoutes from './startup/App';

ReactDOM.render(
  &lt;Router&gt;
    &lt;AppRoutes /&gt;
  &lt;/Router&gt;,
  document.getElementById('main')
);
</code></pre>

<p>server/views/index.ejs: </p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=""utf-8"" /&gt;
    &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1.0""&gt;
    &lt;title&gt;Buddie!&lt;/title&gt;
    &lt;link rel=""stylesheet"" href=""/css/style.css""&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=""main""&gt;&lt;%- markup -%&gt;&lt;/div&gt;
    &lt;script src=""/js/bundle.js""&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>server/app.js:</p>

<pre><code>/* eslint no-console: ""off""*/

import path from 'path';
import { Server } from 'http';
import Express from 'express';
import React from 'react';
import { renderToString } from 'react-dom/server';
import { StaticRouter as Router } from 'react-router-dom';
import { App } from '../client/src/startup/App';

const app = new Express();
const server = new Server(app);
const routes = require('../server/routes/index');

// use ejs templates
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// define the folder that will be used for static assets
app.use(Express.static(path.join(__dirname, 'static')));

app.use('/api/v1', routes)

// universal routing and rendering
app.get('*', (req, res) =&gt; {
  let markup = '';
  let status = 200;

  if (process.env.UNIVERSAL) {
    const context = {};
    markup = renderToString(
      &lt;Router location={req.url} context={context}&gt;
        &lt;App /&gt;
      &lt;/Router&gt;,
    );

    // context.url will contain the URL to redirect to if a &lt;Redirect&gt; was used
    if (context.url) {
      return res.redirect(302, context.url);
    }

    if (context.is404) {
      status = 404;
    }
  }

  return res.status(status).render('index', { markup });
});

// start the server
const port = process.env.PORT || 3000;
const env = process.env.NODE_ENV || 'production';
server.listen(port, (err) =&gt; {
  if (err) {
    return console.error(err);
  }
  return console.info(
    `
      Server running on http://localhost:${port} [${env}]
      Universal rendering: ${process.env.UNIVERSAL ? 'enabled' : 'disabled'}
    `);
});
</code></pre>

<p>webpack config:</p>

<pre><code>const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const webpack = require('webpack');

module.exports = {
  entry: './client/src/index.js',
  output: {
    path: path.join(__dirname, 'server', 'static', 'js'),
    filename: 'bundle.js'
  },
  resolve: {
    extensions: ['.js', '.jsx', '.json']
  },
  devServer: {
    historyApiFallback: true
  },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        use: [ 'babel-loader' ],
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({
      inject: 'body',
      filename: 'index.html'
    }),
    new webpack.optimize.OccurrenceOrderPlugin(),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin(),
    new webpack.DefinePlugin({
      'process.env.NODE_ENV': JSON.stringify('development')
    })
  ]
};
</code></pre>

<p>package.json scripts:</p>

<pre><code>  ""scripts"": {
    ""start"": ""npm run build:dev &amp;&amp; babel-node server/app.js"",
    ""start:dev"": ""export NODE_ENV=development &amp;&amp; npm run build:dev &amp;&amp; nodemon --exec babel-node -- src/server.js"",
    ""start:universal"": ""export UNIVERSAL=true &amp;&amp; npm run start"",
    ""start:dev:universal"": ""export NODE_ENV=development &amp;&amp; export UNIVERSAL=true &amp;&amp; npm run start:dev"",
    ""build"": ""NODE_ENV=production webpack -p"",
    ""build:dev"": ""webpack -d"",
    ""build:dev:watch"": ""webpack -d --watch""
  },
  ""dependencies"": {
    ""axios"": ""^0.16.2"",
    ""babel-polyfill"": ""^6.23.0"",
    ""babel-preset-node6"": ""^11.0.0"",
    ""babel-preset-react-hmre"": ""^1.1.1"",
    ""babel-preset-stage-0"": ""^6.24.1"",
    ""body-parser"": ""^1.17.2"",
    ""chalk"": ""^1.1.3"",
    ""classnames"": ""^2.2.5"",
    ""concurrently"": ""^3.4.0"",
    ""debug"": ""^2.6.8"",
    ""ejs"": ""^2.5.6"",
    ""express"": ""^4.15.3"",
    ""immutable"": ""^3.8.1"",
    ""jsx-loader"": ""^0.13.2"",
    ""morgan"": ""^1.8.2"",
    ""node-jsx"": ""^0.13.3"",
    ""nodemon"": ""^1.11.0"",
    ""normalizr"": ""^3.2.3"",
    ""pg"": ""^6.2.4"",
    ""react"": ""^15.6.1"",
    ""react-addons-test-utils"": ""15.0.2"",
    ""react-dom"": ""^15.6.1"",
    ""react-hot-loader"": ""^3.0.0-beta.7"",
    ""react-redux"": ""^5.0.5"",
    ""react-router-dom"": ""^4.1.1"",
    ""react-router-redux"": ""^4.0.8"",
    ""react-scripts"": ""^1.0.7"",
    ""react-slick"": ""^0.14.11"",
    ""redux"": ""^3.7.0"",
    ""redux-logger"": ""^3.0.6"",
    ""redux-mock-store"": ""1.0.2"",
    ""redux-thunk"": ""^2.2.0"",
    ""sequelize"": ""^4.1.0"",
    ""sequelize-cli"": ""^2.7.0"",
    ""webpack"": ""^3.0.0"",
    ""webpack-dev-server"": ""^2.4.5"",
    ""yargs"": ""^8.0.2""
  },
  ""proxy"": ""http://localhost:8000""
</code></pre>
","2824448","","2824448","","2017-06-22 01:28:10","2017-06-28 07:54:50","react router version 4 not showing anything","<node.js><reactjs><webpack><redux><react-router>","3","3","1","",""
"45497539","1","","","2017-08-04 02:51:14","","0","82","<p>I have the following code and I'm not really sure if it's compatible with react-router 3. Can someone advise? You can find the full code base at <a href=""https://github.com/robksawyer/keystone-react-template-mern"" rel=""nofollow noreferrer"">robksawyer/keystone-react-template-mern</a>.</p>

<p><strong>Update:</strong> I recently found the source of most of the code is from <a href=""https://github.com/makeomatic/redux-connect"" rel=""nofollow noreferrer"">makeomatic/redux-connect</a>. It appears there isn't a solution to getting this working with the latest version of react-router yet.</p>

<p>So, maybe to simplify my original question, is there a more production-happy way of handling such?</p>

<pre><code>import React from 'react';
import ReactDom from 'react-dom/server';
import { match } from 'react-router';
import { Provider } from 'react-redux';
import { ReduxAsyncConnect, loadOnServer } from 'redux-connect';
import configureStore from '../../../client/redux/configureStore';
import renderHTML from './helpers/render_html';
import Routes from '../../../client/routes';

const reactModule = (req, res, next) =&gt; {

    const store = configureStore();
    const state = store.getState();

    // This setting is required for material-ui server-side rendering
    //state.theme.userAgent = req.headers['user-agent'];

    // @see https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/api/match.md
    match({ routes: Routes, location: req.url }, (error, redirectLocation, renderProps) =&gt; {
      if (redirectLocation) {
        return res.redirect(301, redirectLocation.pathname + redirectLocation.search);
      }
      if (error) {
        return next({
          message: error.message,
          status: 500,
          success: false
        });
      }

      if (!renderProps) {
        return next();
      }

      loadOnServer({
        ...renderProps,
        store
      }).then(() =&gt; {
        const componentHTML = ReactDom.renderToString(
          &lt;Provider store={store} key=""provider""&gt;
            &lt;ReduxAsyncConnect {...renderProps} /&gt;
          &lt;/Provider&gt;
        );
        res.send(renderHTML(componentHTML, store.getState()));
      });
    });
};

export default reactModule;
</code></pre>
","67524","","67524","","2017-08-04 17:49:29","2017-08-04 17:49:29","Upgrading match() for react-router 3?","<javascript><reactjs><react-router><keystonejs>","0","0","","",""
"28000810","1","28001404","","2015-01-17 15:09:29","","0","74","<p>I have a react componente like this</p>

<pre><code>var Task = React.createClass({
  render: function () {
    return (
      &lt;div className=""task"" id={ this.props.task.uid }&gt;
        &lt;div className=""header""&gt;
          &lt;span&gt;task #{ this.props.task.uid }&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      )
  }
});
</code></pre>

<p>and when a task is created, I add this task to the task list inside an <code>create.js.erb</code> </p>

<pre><code>&lt;% if @task.errors.any? %&gt;
  $(""#error-alert"").removeClass('hidden')
&lt;% else %&gt;
  $('#task-modal').modal('hide')
  $('#tasks-list').prepend(React.renderToString(Task({ task: '&lt;%= @task.to_react %&gt;' })))
&lt;% end %&gt;
</code></pre>

<p>turns out that when the task component is prepended, he is prepended empty (just a box, without any text).<br>
I tried <code>&lt;%= @task.to_react.to_json.html_safe %&gt;</code> and also had no success  </p>

<p>My <code>Task#to_react</code> method:</p>

<pre><code>def to_react
   {
     role: role,
     need: need,
     result: result,
     uid: uid
   }
</code></pre>

<p>end</p>
","587406","","","","","2015-01-17 16:08:49","json generated by rails can't be recognized by react","<ruby-on-rails><json><ruby-on-rails-4><reactjs>","1","0","","",""
"37632753","1","37645171","","2016-06-04 16:52:40","","0","129","<p>I rebuilt my application to an isomorphic approach.
Everything worked fine on my local enviroment (node version local and online is the same)
But unfortunately after uploading the files to my webserver I get the following error message:</p>

<pre><code>SyntaxError: .../index.js: Unexpected token (74:62)
  72 |                       friends: friends
  73 |                     }
&gt; 74 |                     var reactString = ReactDOM.renderToString(&lt;IndexApp {...props}/&gt;)
                                                                     ^
</code></pre>

<p>This directly points to the &lt; in <code>&lt;IndexApp..</code></p>

<p>My requirement list looks as following:</p>

<pre><code>var React = require('react')
var ReactDOM = require('react-dom/server')

var IndexApp = require('../public/js/build/components/IndexApp').default
var PostApp = require('../public/js/build/components/PostApp').default
</code></pre>

<p>I can't find any proper solution to that. I gladly appreciate any hints.
Thank you.</p>
","4657699","","4657699","","2016-06-04 17:04:33","2016-06-05 18:26:28","Isomorphic react, unexpected token <","<javascript><node.js><reactjs><isomorphic-javascript>","3","0","","",""
"28650447","1","","","2015-02-21 19:41:49","","10","5690","<p>I have a simple reactJS component like this : </p>

<pre><code>var LikeCon = React.createClass({

    render: function() {
        return (
            &lt;span&gt;Like&lt;/span&gt;
        );
    }
});
</code></pre>

<p>This is placed in a file called Common.jsx. Im trying to use this LinkeCon component from antoher jsx file like this </p>

<pre><code>var FeedTopic = React.createClass({
        render: function() {
            var test = false;
            return (
                &lt;div className=""topic""&gt;
                        {LikeCon}
                &lt;/div&gt;

            );
        }
});
</code></pre>

<p>The problem is that this exception is thrown </p>

<blockquote>
  <p>Error while rendering ""FeedBox"" to ""react1"": ReferenceError: LikeCon
  is not defined</p>
</blockquote>

<p>This is how the import looks like on the Layoutpage </p>

<pre><code>&lt;script src=""@Url.Content(""~/Scripts/Common.jsx"")""&gt;&lt;/script&gt;
&lt;script src=""@Url.Content(""~/Scripts/Grid.jsx"")""&gt;&lt;/script&gt;
&lt;script src=""@Url.Content(""~/Scripts/Feed.jsx"")""&gt;&lt;/script&gt;
</code></pre>

<p>My thought was that if Common.jsx that contains the shared component was first, then the var would also be available to the other react components?</p>

<p>Edit :</p>

<p>this is placed on the Layout.cshtml</p>

<pre><code>&lt;script type=""text/jsx"" src=""@Url.Content(""~/Scripts/JSXTransformer.js"")""&gt;&lt;/script&gt;
&lt;script type=""text/jsx"" src=""@Url.Content(""~/Scripts/Common.jsx"")""&gt;&lt;/script&gt;
&lt;script type=""text/jsx"" src=""@Url.Content(""~/Scripts/Grid.jsx"")""&gt;&lt;/script&gt;
&lt;script type=""text/jsx"" src=""@Url.Content(""~/Scripts/Feed.jsx"")""&gt;&lt;/script&gt;
</code></pre>

<p>The component is now refered to with <code>&lt;LikeCon like=""0"" /&gt;</code> instead of <code>{LikeCon}</code>.</p>

<p>Edit 2 :</p>

<p>This is how I use the LikeCon</p>

<pre><code>var TopicComments = React.createClass({
    render: function() {
        var comment = this.props.data.map(function(com, i) {
            return (
            &lt;article key={i}&gt;
            &lt;div className=""commentCon""&gt;
                &lt;div className=""tUImgLnk""&gt;
                    &lt;a title={com.UserName} target=""_blank"" href={com.UserInfoUrl}&gt;
                        &lt;img className=""tUImg"" src={com.UserPicSrc} /&gt;
                    &lt;/a&gt;
                &lt;/div&gt;
                &lt;b&gt;&lt;a href=""#"" title={""Visit "" + com.UserName} target=""_blank""&gt;{com.UserName}&lt;/a&gt;&lt;/b&gt;&amp;nbsp;:&amp;nbsp;
                &lt;span className=""content""&gt;
                    {com.Message}
                &lt;/span&gt;
                &lt;div className=""status""&gt;
                    &lt;div className=""dateCreated dimText""&gt;
                        {com.DateCreated}
                    &lt;/div&gt;  
                    &lt;LikeCon initialLike={com.Like} initialLikeCount={com.LikeCount} objectId={com.Id} categoryKey={1} userId={this.props.userId} /&gt;
                    &lt;article&gt;&lt;/article&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;/article&gt;);
        }.bind(this));
        return(
            &lt;div className=""comments""&gt;
                {comment}
            &lt;/div&gt;
            );
    }
});
</code></pre>

<p>This is how the script import looks like</p>

<pre><code>    &lt;script src=""http://fb.me/react-0.12.2.js""&gt;&lt;/script&gt;
    &lt;script src=""@Url.Content(""~/Scripts/jquery-2.1.3.min.js"")""&gt;&lt;/script&gt;
    &lt;script src=""@Url.Content(""~/Scripts/jquery.autosize.min.js"")""&gt;&lt;/script&gt;
    &lt;script src=""@Url.Content(""~/Scripts/spin.min.js"")""&gt;&lt;/script&gt;
    &lt;script src=""@Url.Content(""~/Scripts/JSXTransformer.js"")""&gt;&lt;/script&gt;

    &lt;script src=""@Url.Content(""~/Scripts/Grid.jsx"")""&gt;&lt;/script&gt;
    &lt;script src=""@Url.Content(""~/Scripts/Feed.jsx"")""&gt;&lt;/script&gt;
    @RenderSection(""ScriptFoot"", required: false)
    @Html.ReactInitJavaScript()
&lt;/body&gt;
</code></pre>

<p>This is the exception I get : </p>

<blockquote>
  <p>Error while rendering ""FeedBox"" to ""react1"": ReferenceError: LikeCon
  is not defined    at React.createClass.render (Script Document
  [7]:83:33) ->         React.createElement(LikeCon, {initialLike:
  this.props.data.Like, i    at Script Document [2]:7021:34    at
  wrapper (Script Document [2]:12893:21)    at Script Document
  [2]:6563:14    at wrapper (Script Document [2]:12893:21)    at
  ReactMultiChild.Mixin.mountChildren (Script Document [2]:12352:42)<br>
  at ReactDOMComponent.Mixin._createContentMarkup (Script Document
  [2]:7801:32)    at Script Document [2]:7723:14    at wrapper (Script
  Document [2]:12893:21)    at Script Document [2]:6569:44    at wrapper
  (Script Document [2]:12893:21)    at Script Document [2]:6569:44    at
  wrapper (Script Document [2]:12893:21)    at Script Document
  [2]:13797:38    at Mixin.perform (Script Document [2]:16855:20)    at
  renderToString (Script Document [2]:13795:24)    at Script Document
  [9] [temp]:1:7 Line: 7021 Column:34</p>
</blockquote>
","365624","","290784","","2015-03-10 02:24:09","2016-03-09 15:31:14","How to use react components from other files","<javascript><asp.net><components><reactjs><react-jsx>","2","8","2","",""
"37355346","1","","","2016-05-20 20:29:32","","2","781","<p>I'm trying to include my facebook page plugin in my react app. I'm trying to achieve this using <a href=""https://github.com/nfl/react-helmet"" rel=""nofollow"">react-helmet</a> but I've run into an issue. If I put this in as a script tag as suggested by the docs, the script get's run twice yet only added to the <code>&lt;head&gt;</code> section once... I'm using a <a href=""https://github.com/erikras/react-redux-universal-hot-example"" rel=""nofollow"">starter kit</a>.</p>

<p>Here is what I've got</p>

<p>Html.jsx (responsible for rendering out the whole html page, <a href=""https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/helpers/Html.js"" rel=""nofollow"">link to file</a>):</p>

<pre><code>render() {
const {assets, component, store} = this.props
const content = component ? ReactDOM.renderToString(component) : ''
const head = Helmet.rewind()

return (
  &lt;html lang=""en-us""&gt;
    &lt;head&gt;
      ...
      {head.script.toComponent()}
      ...
)
</code></pre>

<p>In my App.jsx: </p>

<pre><code>&lt;Helmet
      script={[
        // {""type"": 'text/javascript', ""innerHTML"": `{!function(f,b,e,v,n,t,s){}...cut down for brevity;console.log('I was fired');}`}
      ]}
      {...config.app.head}/&gt;
</code></pre>

<p>Above log statement fires twice for some reason leading to an <code>Facebook Pixel Error: Duplicate Pixel ID: XYZ</code></p>

<p>Let me know if more information is needed</p>
","2422230","","","","","2017-04-07 07:48:49","Script tag runs twice in universal react application (FB Plugin)","<facebook><reactjs>","2","0","1","",""
"36822258","1","36822396","","2016-04-24 11:03:20","","0","160","<p>I am newbie with react.js . I want to make isomorphic react.js component . I wonder is it possible to make it without flux pattern ? Now I have little component and there is api fetch method inside component and as it seems this api call runs twice :( . </p>

<p>For more clarity, I want to render DOM in server side , and want to handle react.js component events in browser side . </p>

<p>My component looks like : </p>

<pre><code>Class MyComponent extends React.Component{

 // my component code 
 // components events 

 render() {} 

}


if (!is_server()) {


apiFetch.my_api_call(function (result) {
    ReactDom.render(&lt;MyComponent data={result.data}/&gt;, document.getElementById('navigation'))
});


}else{

apiFetch.my_api_call(function (result) {
    res.status(200).send(
        ReactDOMServer.renderToString(React.createElement(MyComponent, {data: result.data}))
    );
});
</code></pre>
","283192","","","","","2016-04-24 11:18:24","isomorphic react.js without flux","<javascript><reactjs><redux><reactjs-flux><isomorphic-javascript>","1","0","","",""
"45697397","1","","","2017-08-15 16:38:39","","1","155","<p>I have a HTML string that comes from the server, for example:</p>

<pre><code>const myString = '&lt;p&gt;Here goes the text [[dropdown]] and it continues&lt;/p&gt;`;
</code></pre>

<p>And I split this string into 3 parts so the result is the following:</p>

<pre><code>const splitString = [
  '&lt;p&gt;Here goes the text ',
  '[[dropdown]]',
  ' and it continues&lt;/p&gt;'
];
</code></pre>

<p>Then I process those 3 parts in order to replace the dropdown with a react component:</p>

<pre><code>const processedArr = splitString.map((item) =&gt; {
  if (/* condition that checks if it's `[[dropdown]]` */) {
    return &lt;Dropdown /&gt;;
  }
  return item;
}
</code></pre>

<p>So after all, I get the processed array, which looks like this:</p>

<pre><code>['&lt;p&gt;Here goes the text ', &lt;Dropdown /&gt;, ' and it continues&lt;/p&gt;']
</code></pre>

<p>When I render that, it renders the HTML as a text (obviously) with the <code>Dropdown</code> component (that renders properly) in between the text. The problem here is that I cannot use <code>{ __html: ... }</code> because it has to be used such as <code>&lt;div dangerouslySetInnerHTML={{ __html: ... }} /&gt;</code>. I cannot add <code>&lt;div&gt;</code> around the string because that would cut out the <code>&lt;p&gt;</code> tag.</p>

<p>I thought about splitting the parts into tags and then in some sort of loop doing something like: </p>

<pre><code>React.createElement(tagName, null, firstTextPart, reactComponent, secondTextPart);
</code></pre>

<p>but that would require fairly complex logic because there could be multiple <code>[[dropdown]]</code>s within one <code>&lt;p&gt;</code> tag and there could be nested tags as well.</p>

<p>So I'm stuck right now. Maybe I'm looking at the problem from a very strange angle and this could be accomplished differently in React. I know that React community discourages rendering HTML from strings, but I cannot go around this, I always have to receive the text from the server.</p>

<p>The only stackoverflow question I found relevant was <a href=""https://stackoverflow.com/questions/36898978/render-html-string-to-react-component-via-custom-parsing"">this one</a>, however that supposes that content coming from backend has always the same structure so it cannot be used in my case where content can be anything.</p>

<p>EDIT:
After some more digging, I found this <a href=""https://stackoverflow.com/questions/39988595/react-component-inside-dangerouslysetinnerhtml"">question and answer</a> which seems to be kinda solving my problem. But it still feels a bit odd to use <code>react-dom/server</code> package with its <code>renderToString</code> method to translate my component into a string and then concatenate it. But I'll give it a try and will post more info if it works and fits my needs.</p>
","1167573","","1167573","","2017-08-15 19:39:06","2018-04-30 18:57:18","Render custom react component within HTML string from server","<javascript><reactjs>","2","0","","",""
"27845709","1","27846068","","2015-01-08 17:08:06","","1","458","<p>I'm using react on the server side, but currently html has no line breaks or indents.  that's fine for production, but in development I'd like line breaks and indents.</p>

<p>Is there a way to tell react to use indents when rendering in either <code>React.renderToString</code> or <code>React.renderToStaticMarkup</code>?</p>
","516474","","","","","2015-01-08 17:28:55","Get linebreaks/indents with react.renderToStaticMarkup?","<javascript><node.js><reactjs>","1","0","","",""
"37603414","1","37603614","","2016-06-02 22:55:10","","1","813","<p>I have created a universal React app based on <a href=""http://blog.lunarlogic.io/2015/how-to-create-a-universal-reactjs-application-with-bare-reactjs/"" rel=""nofollow noreferrer"">this tutorial</a> however I'm getting </p>

<pre><code>'Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components).'
</code></pre>

<p>in Chrome Dev tools. Looking at the compiled code I can see an object which is undefined - <code>_reactRouter2.default</code>. On the surface everything seems to be working ok, I can navigate between pages, I can use the back button in the browser, but I don't understand that error. Can anyone shed some light on how I might fix it?</p>

<p>Here is a screenshot showing how <code>_reactRouter2.default</code> is constructed and that it is undefined. <a href=""https://i.stack.imgur.com/4jVCx.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/4jVCx.png"" alt=""Screenshot of router construction""></a></p>

<p>Here are some relevant code snippets:</p>

<p><a href=""https://github.com/stuartleyland/packed-it-webapp/blob/master/src/routes.js"" rel=""nofollow noreferrer""><strong>src/routes.js</strong></a></p>

<pre><code>import React from 'react';
import { Route } from 'react-router';

import Main from './components/Main.js';
import Login from './components/Login.js';
import ListsOverview from './components/ListsOverview.js';

export default (
  &lt;Route path=""/"" component={Main}&gt;
    &lt;Route path=""/login"" component={Login} /&gt;
    &lt;Route path=""/overview"" component={ListsOverview} /&gt;
  &lt;/Route&gt;
);
</code></pre>

<p><a href=""https://github.com/stuartleyland/packed-it-webapp/blob/master/src/application.js"" rel=""nofollow noreferrer""><strong>src/application.js</strong></a></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import Router from 'react-router';
import Routes from './routes';

import { createHistory } from 'history'

const history = createHistory()

var app = document.getElementById('app');

ReactDOM.render(&lt;Router history={history} routes={Routes} /&gt;, app);
</code></pre>

<p><a href=""https://github.com/stuartleyland/packed-it-webapp/blob/master/server.js"" rel=""nofollow noreferrer""><strong>server.js</strong></a></p>

<pre><code>import React from 'react';
import { match, RouterContext } from 'react-router';
import ReactDOMServer from 'react-dom/server';
import Express from 'express';
import http from 'http';
import Routes from './src/routes';
import Webpack from 'webpack';
import WebpackMiddleware from 'webpack-dev-middleware';
import DefaultConfig from './webpack/default.config.js';
import DevConfig from './webpack/development.config.js';

let app = Express();
let port = process.env.PORT || DefaultConfig.Port;
const isDevelopment = process.env.NODE_ENV !== 'production';
const isProduction = process.env.NODE_ENV === 'production';

app.engine('ejs', require('ejs').__express);
app.set('view engine', 'ejs');
app.use(Express.static(DefaultConfig.Dist));

if (isDevelopment) {
  const compiler = Webpack(DevConfig);
  app.use(WebpackMiddleware(compiler, {
    publicPath: DevConfig.output.publicPath,
    noInfo: true
  }));
}

if (isProduction) {
  app.set('views', DefaultConfig.Dist);
}

app.use((req, res) =&gt; {
  match({ routes: Routes, location: req.url }, (error, redirectLocation, renderProps) =&gt; {
    if (error) {
      res.status(500).send(error.message);
    } else if (redirectLocation) {
      res.redirect(302, redirectLocation.pathname + redirectLocation.search);
    } else if (renderProps) {
      res.render('index', {
        isDevelopment: isDevelopment,
        app: ReactDOMServer.renderToString(&lt;RouterContext {...renderProps} /&gt;)
      });
    } else {
      res.status(404).send('Not found');
    }
  })
});

http.createServer(app).listen(port, function() {
  console.log('Express server listening on port ' + port);
});
</code></pre>

<p><a href=""https://github.com/stuartleyland/packed-it-webapp/blob/master/package.json"" rel=""nofollow noreferrer""><strong>package.json</strong></a></p>

<pre><code>{
  ""name"": ""packed-it"",
  ""version"": ""1.0.0"",
  ""description"": ""Application for managing packing lists"",
  ""scripts"": {
    ""start"": ""nodemon --exec babel-node -- server.js"",
    ""build"": ""rimraf dist &amp;&amp; NODE_ENV=production webpack --config ./webpack/production.config.js --progress --profile --colors"",
    ""production"": ""NODE_ENV=production npm start""
  },
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""git+ssh://git@github.com/stuartleyland/packed-it.git""
  },
  ""author"": ""Stuart Leyland"",
  ""license"": ""MIT"",
  ""bugs"": {
    ""url"": ""https://github.com/stuartleyland/packed-it/issues""
  },
  ""homepage"": ""https://github.com/stuartleyland/packed-it#readme"",
  ""dependencies"": {
    ""ejs"": ""^2.4.2"",
    ""express"": ""^4.13.3"",
    ""history"": ""^3.0.0"",
    ""moment"": ""^2.13.0"",
    ""nodemon"": ""^1.9.2"",
    ""react"": ""^15.0.2"",
    ""react-dom"": ""^15.0.2"",
    ""react-router"": ""^2.4.0""
  },
  ""devDependencies"": {
    ""babel-cli"": ""^6.9.0"",
    ""babel-core"": ""^6.8.0"",
    ""babel-loader"": ""^6.2.4"",
    ""babel-plugin-syntax-jsx"": ""^6.8.0"",
    ""babel-preset-es2015"": ""^6.6.0"",
    ""babel-preset-react"": ""^6.3.13"",
    ""babel-preset-stage-0"": ""^6.5.0"",
    ""html-webpack-plugin"": ""^2.19.0"",
    ""node-jsx"": ""^0.13.3"",
    ""npm-watch"": ""^0.1.4"",
    ""react-hot-loader"": ""^1.3.0"",
    ""rimraf"": ""^2.5.2"",
    ""webpack"": ""^1.13.0"",
    ""webpack-dev-middleware"": ""^1.6.1""
  }
}
</code></pre>

<p>All of the code is available in <a href=""https://github.com/stuartleyland/packed-it-webapp"" rel=""nofollow noreferrer"">this Github repository</a> in case I've missed anything relevant.</p>
","336752","","","","","2016-06-02 23:18:29","reactRouter2.default undefined using Babel","<javascript><node.js><reactjs><react-router><babeljs>","1","0","1","",""
"37625136","1","37669504","","2016-06-04 00:16:52","","3","542","<p>I'm trying to set up an isomorphic server-side rendering React app using Webpack, but am getting this error when I try turning my React code into a string using renderToString: </p>

<pre><code>Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components).
Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.
</code></pre>

<p>I stop getting this error when I comment out the line with the renderToString function (of course, the app still doesn't work - I just no longer get an error message).</p>

<p>I've tried passing renderToString <code>&lt;RootApp /&gt;</code> and <code>React.createElement(RoutingContext</code> instead of making a factory, and neither of those has worked. Using <code>React.createElement</code> resulted in the same error, and using <code>&lt;RootApp /&gt;</code> threw an <code>unexpected token &lt; error</code>.</p>

<p>And ideas on what could be going on?</p>

<p>My app looks like: </p>

<p>app.js</p>

<pre><code>""use strict""

require(""babel-register"");
const Express = require('express');
const BodyParser = require('body-parser');
const Path = require('path');
const Fs = require('fs');
const Url = require('url');
const ReactRouter = require('react-router');
const React = require('react');
const ReactDOMServer = require('react-dom/server');

const app = Express();
app.set('view engine', 'ejs');

app.get('*', (req, res) =&gt; {
  let RootApp = require('./components/app.jsx');
  let rootAppFactory = React.createFactory(RootApp);
  let reactHtml = ReactDOMServer.renderToString(rootAppFactory({}));
  res.render('index', {reactOutput: reactHtml});
})

if (process.env.NODE_ENV !== 'test') {
  let port = process.env.port || 4000;
  app.listen(port);
  console.log('Listening on port', port);
} else {
  module.exports = app;
}
</code></pre>

<p>app.jsx</p>

<pre><code>import React, {Component} from 'react';
import ReactDOM from 'react-dom';

class App extends Component {

  render() {
    return (
      &lt;div&gt;
        {this.props.children}
      &lt;/div&gt;
    )
  }

}

export default App;
</code></pre>

<p>index.ejs</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;

    &lt;meta charset=""utf-8""&gt;
    &lt;meta http-equiv=""X-UA-Compatible"" content=""IE=edge""&gt;
    &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;
    &lt;meta name=""description"" content=""""&gt;
    &lt;meta name=""author"" content=""""&gt;

    &lt;title&gt;Vjeverica&lt;/title&gt;

  &lt;/head&gt;

  &lt;body&gt;
    &lt;div id=""root""&gt;
      &lt;%- reactOutput %&gt;
    &lt;/div&gt;
    &lt;script src=""bundle.js""&gt;&lt;/script&gt;

  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
","6368700","","","","","2016-06-07 02:18:32","""Invariant Violation"" Using React Server renderToString on Server-Side","<node.js><reactjs><isomorphic-javascript><serverside-rendering>","1","0","0","",""
"45820608","1","","","2017-08-22 14:36:34","","0","261","<p>I know I have to send my email through my express server. But when I am on the client side and I press the button ""send"" how am I supposed to send all my data to my server? I tried to use ""axios"" to make a POST request something like this:</p>

<pre><code>axios.post(""http://localhost:8081/test"").then(response =&gt; {
  console.log('response ------&gt; ', response);
}).catch(err =&gt; {
  console.log('err ------&gt; ', err);
})
</code></pre>

<p>On my server side, I tried something like this:</p>

<pre><code>app.get('/test', (req, res) =&gt; {
  console.log('-------------&gt; server.js -------------&gt; 1');
});
</code></pre>

<p>But it doesn't seem to work because of my react-router I think but I am not sure and I am lost :/</p>

<p>Here is my react-router server side, if it can help you:</p>

<pre><code>app.get('*', (req, res) =&gt; {
  match({ routes: routes, location: req.url }, (err, redirect, props) =&gt; {
    if (err) {
      res.status(500).send(err.message)
    } else if (redirect) {
      res.redirect(redirect.pathname + redirect.search)
    } else if (props) {
      const appHtml = renderToString(
        &lt;Provider store={store}&gt;
          &lt;RouterContext {...props}/&gt;
        &lt;/Provider&gt;
      )
      res.send(renderPage(appHtml))
    } else {
      res.status(404).send('Not Found')
    }
  })
})
</code></pre>

<p>When I try the example above, I have an error like this</p>

<pre><code>bundle.client.js:44249 POST http://localhost:8081/test 404 (Not Found)
bundle.client.js:18995 err ------&gt;  Error: Request failed with status code 404
        at createError (bundle.client.js:44313)
        at settle (bundle.client.js:44753)
        at XMLHttpRequest.handleLoad (bundle.client.js:44148)
</code></pre>
","5674760","","5674760","","2017-08-22 14:41:04","2017-08-22 14:41:04","Send e-mail with react","<javascript><reactjs><email><react-router><sendgrid>","0","10","","",""
"29060523","1","29066370","","2015-03-15 12:20:22","","2","887","<p>In my serverside react rendering, I pass a property to the JSX:</p>

<pre><code>markup: React.renderToString(Admin({ field1: ""Hallo"" }))
</code></pre>

<p>The JSX looks like this:</p>

<pre><code> &lt;MaterialTextField hintText=""field1"" floatingLabelText=""field1"" type=""text"" name=""field1"" value={this.props.field1} /&gt;
</code></pre>

<p>Now, I ned to render the JSX also on clientside for having the event listeners, etc.:</p>

<pre><code>React.render(
    &lt;Admin /&gt;,
    document.getElementById('react-app')
);
</code></pre>

<p>The problem is: Because the rendered markups are not the same, the value of the text-field gets lost. How could I fix that?</p>
","2908119","","","","","2015-03-15 21:57:00","Clientside react-script overrides serverside rendered props","<javascript><reactjs><isomorphic-javascript>","2","0","1","",""
"29102327","1","","","2015-03-17 14:52:42","","1","499","<p>I'm trying render my react component in the server but I'm having some problems, I followed this article </p>

<p><a href=""http://augustl.com/blog/2014/jdk8_react_rendering_on_server/"" rel=""nofollow"">http://augustl.com/blog/2014/jdk8_react_rendering_on_server/</a></p>

<p>this is my code</p>

<pre><code>(def nashorn (.getEngineByName (ScriptEngineManager.) ""nashorn""))

(defn &lt;render-react-comp [template-name data]
  (let [remove-react-prefix (fn [react-word] (clojure.string/replace react-word #""react-"" """"))]
    (go
      (dlet [component-name (remove-react-prefix template-name)
             template (&lt;! (&lt;react-template! component-name))
             lib (&lt;! (&lt;get-react-lib))
             evaluation-string
                  (str ""React.renderToString("" component-name ""("" (write-str data) ""))"")]

            (. nashorn eval ""var global = this;"")
            (. nashorn eval ""var console = {}"")
            (. nashorn eval ""console.debug = print;"")
            (. nashorn eval ""console.warn = print;"")
            (. nashorn eval ""console.log = print;"")
            (. nashorn eval (.toString lib))
            (. nashorn eval template)
            (. nashorn eval evaluation-string))))) ;;&lt;---fails here!!!
</code></pre>

<p>the dlet macro print this</p>

<p>all these bindings are Strings...</p>

<pre><code>component-name : MyComponent
template : var MyComponent = React.createClass({
    render: function () {
        return React.DOM.h1(null, 'Hi, ' + this.props.msg)
    }
})

evaluation-string : React.renderToString(MyComponent({""msg"":""HI!!!!!""}))
lib : ""....react lib here ...a lot of lines""
</code></pre>

<p>this is the error message..fails in the evaluation-string line</p>

<pre><code>Exception in thread ""async-dispatch-27"" java.lang.Error: javax.script.ScriptException: TypeError: Cannot read property ""__reactAutoBindMap"" from undefined in &lt;eval&gt; at line number 5816
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1148)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
Caused by: javax.script.ScriptException: TypeError: Cannot read property ""__reactAutoBindMap"" from undefined in &lt;eval&gt; at line number 5816
    at jdk.nashorn.api.scripting.NashornScriptEngine.throwAsScriptException(NashornScriptEngine.java:586)
    at jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:570)
    at jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:525)
    at jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:521)
    at jdk.nashorn.api.scripting.NashornScriptEngine.eval(NashornScriptEngine.java:192)
    at javax.script.AbstractScriptEngine.eval(AbstractScriptEngine.java:264)
    at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:93)
    at clojure.lang.Reflector.invokeInstanceMethod(Reflector.java:28)
    at debgtest.viewEngine$_LT_render_react_comp$fn__11415$state_machine__6788__auto____11416$fn__11418.invoke(viewEngine.clj:126)
    at debgtest.viewEngine$_LT_render_react_comp$fn__11415$state_machine__6788__auto____11416.invoke(viewEngine.clj:111)
    at clojure.core.async.impl.ioc_macros$run_state_machine.invoke(ioc_macros.clj:940)
    at clojure.core.async.impl.ioc_macros$run_state_machine_wrapped.invoke(ioc_macros.clj:944)
    at debgtest.viewEngine$_LT_render_react_comp$fn__11415.invoke(viewEngine.clj:111)
    at clojure.lang.AFn.run(AFn.java:22)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    ... 2 more
Caused by: &lt;eval&gt;:5816 TypeError: Cannot read property ""__reactAutoBindMap"" from undefined
    at jdk.nashorn.internal.runtime.ECMAErrors.error(ECMAErrors.java:58)
    at jdk.nashorn.internal.runtime.ECMAErrors.typeError(ECMAErrors.java:214)
    at jdk.nashorn.internal.runtime.ECMAErrors.typeError(ECMAErrors.java:186)
    at jdk.nashorn.internal.runtime.ECMAErrors.typeError(ECMAErrors.java:173)
    at jdk.nashorn.internal.runtime.Undefined.lookupTypeError(Undefined.java:128)
    at jdk.nashorn.internal.runtime.Undefined.lookup(Undefined.java:113)
    at jdk.nashorn.internal.runtime.linker.NashornLinker.getGuardedInvocation(NashornLinker.java:98)
    at jdk.internal.dynalink.support.CompositeTypeBasedGuardingDynamicLinker.getGuardedInvocation(CompositeTypeBasedGuardingDynamicLinker.java:176)
    at jdk.internal.dynalink.support.CompositeGuardingDynamicLinker.getGuardedInvocation(CompositeGuardingDynamicLinker.java:124)
    at jdk.internal.dynalink.support.LinkerServicesImpl.getGuardedInvocation(LinkerServicesImpl.java:144)
    at jdk.internal.dynalink.DynamicLinker.relink(DynamicLinker.java:232)
    at jdk.nashorn.internal.scripts.Script$\^eval\_$7.L:4-1$L:4974$L:5802$L:5803(&lt;eval&gt;:5816)
    at jdk.nashorn.internal.scripts.Script$\^eval\_.runScript(&lt;eval&gt;:1)
    at jdk.nashorn.internal.runtime.ScriptFunctionData.invoke(ScriptFunctionData.java:535)
    at jdk.nashorn.internal.runtime.ScriptFunction.invoke(ScriptFunction.java:209)
    at jdk.nashorn.internal.runtime.ScriptRuntime.apply(ScriptRuntime.java:378)
    at jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:568)
    ... 18 more
</code></pre>

<p>I'm using the latest react version,  please let me know if you has idea what could be the issue, thanks so much guys!...</p>
","1050817","","","","","2015-03-24 03:17:27","error rendering facebook react with java (clojure) in the server: Cannot read property ""__reactAutoBindMap""","<clojure><reactjs><nashorn><isomorphic-javascript>","1","0","","",""
"45785656","1","","","2017-08-20 18:42:57","","1","302","<p>I'm trying to server-render content for my app that uses react-router v4,redux, and express but I get <code>Browser history needs a DOM</code> error in the terminal. I also use react-router-config to keep my routes more organized. Saw a solution that suggested that one should create the store on the server, so I tried copypasting the code from store.js file to the server, however it didn't work out. What can I do to fix this extremely unpleasant error?</p>

<p>routes.js</p>

<pre><code>const routes = (
        {
            component: App,
            routes: [
                {
                    path: '/',
                    exact:true,
                    component: Home
                },
                {
                    path: '/login',
                    exact:true,
                    component: Login
                },
                {
                    path: '/registration',
                    exact:true,
                    component: Registration
                },
                {
                    path: '/person/:id',
                    exact:true,
                    component: UserPage
                },
                {
                    path: '/myPage',
                    exact:true,
                    component: MyPage
                },
                {
                    path: '/goodBye',
                    exact:true,
                    component: GoodBye
                },
                {
                    path: '*',
                    component: NoMatch
                }
            ]
        }
    );
</code></pre>

<p>App.js</p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
//import '../styles/app.scss'
import {Provider} from 'react-redux';
import {Grid} from 'react-bootstrap';
import store from './store/store';
import routes from './routes';
import { createBrowserHistory } from 'history';
import { syncHistoryWithStore } from 'react-router-redux';
import { renderRoutes } from 'react-router-config';
import { BrowserRouter as Router} from 'react-router-dom';
import { ConnectedRouter, Switch } from 'connected-react-router';

class App extends React.Component {
    render() {
        return (
            &lt;Provider store={store}&gt;
                &lt;Grid fluid={true}&gt;
                    &lt;ConnectedRouter history={createBrowserHistory()}&gt;
                        &lt;Switch&gt;
                            {renderRoutes(routes)}
                        &lt;/Switch&gt;
                    &lt;/ConnectedRouter&gt;
                &lt;/Grid&gt;
            &lt;/Provider&gt;
        );   
    }
} 

const isBrowser = typeof window !== 'undefined';

if(isBrowser) {
  ReactDOM.render(&lt;App/&gt;, document.getElementById('root'));
}
</code></pre>

<p>Route handler:</p>

<pre><code>import express from 'express';
import React, {Component} from 'react';
import { renderToString } from 'react-dom/server';
import routes from '../../js/routes';
import {StaticRouter} from 'react-router';
import { renderRoutes } from 'react-router-config';
import { Provider } from 'react-redux';
import store from '../../js/store/store';
const router = express.Router();

router.get('*',(req,res) =&gt; {
    let context = {};
    const content = renderToString(
        &lt;Provider store={store}&gt;
            &lt;StaticRouter location={req.url} context={context}&gt;
                {renderRoutes(routes)}
            &lt;/StaticRouter&gt;
        &lt;/Provider&gt;
    );
    if(context.status === 404) {
        res.status(404);
    }
    res.render('index', {title: 'Express', data: store.getState(), content });
});
</code></pre>
","7725632","","","","","2017-08-20 18:42:57","Browser history needs a DOM error when rendering react-router v4 and redux on the server","<node.js><reactjs><redux><react-router><react-router-v4>","0","0","","",""
"38380541","1","","","2016-07-14 17:26:20","","1","511","<p>I have this on my server</p>

<pre><code>app.get('*', function(req, res) {
  match({ routes, location: req.url }, (error, redirectLocation, renderProps) =&gt; {
    const body = renderToString(&lt;RouterContext {...renderProps} /&gt;)
    res.send(`
      &lt;!DOCTYPE html&gt;
          &lt;html&gt;
            &lt;head&gt;
              &lt;link href=""//cdn.muicss.com/mui-0.6.5/css/mui.min.css"" rel=""stylesheet"" type=""text/css"" /&gt;
            &lt;/head&gt;
            &lt;body&gt;
              &lt;div id=""root""&gt;${body}&lt;/div&gt;
              &lt;script defer src=""assets/app.js""&gt;&lt;/script&gt;
            &lt;/body&gt;
          &lt;/html&gt;
          `)
  })
})
</code></pre>

<p>And this on the client side</p>

<pre><code>import { Router, hashHistory, browserHistory, match } from 'react-router'
let history = browserHistory

//client side, will become app.js
match({ routes, location, history }, (error, redirectLocation, renderProps) =&gt; {
  render(&lt;Router {...renderProps} /&gt;, document.getElementById('root'))
})
</code></pre>

<p><strong>the problem</strong>
It works only when I remove the (let history = browserHistory), but it adds the /#/ hash prefix to my url(which I don't want to happen).</p>

<p>When I leave the let (history = browserHistory) there, it throws an error</p>

<p><em>Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:
(client) &lt; ! -- react-empty: 1 -
(server) &lt; section data-reactro</em></p>

<p>The error message is pretty clear, however, I don't understand why it works with the hashHistory but fails with the browserHistory</p>
","3894788","","3894788","","2016-07-14 17:38:53","2016-07-14 18:58:02","react-router - server side rendering match","<match><react-router><universal><serverside-rendering>","1","0","","",""
"46793989","1","","","2017-10-17 15:38:45","","1","196","<p>I am having serious difficulty getting a working server-side rendering solution using <code>React</code>, <code>Redux</code>, <code>Redux-Thunk</code> and <code>React-Router</code>.</p>

<p>At the moment, my solution works on the client-side following the basic guidelines and this post: <a href=""https://codepen.io/stowball/post/a-dummy-s-guide-to-redux-and-thunk-in-react"" rel=""nofollow noreferrer"">https://codepen.io/stowball/post/a-dummy-s-guide-to-redux-and-thunk-in-react</a>. For the scope of simplicity, I will be using the code from that blog as my example. The only alteration is that I have added a <code>console.log(""X"");</code> to the reducer function <code>items</code> so that I know when it is called. The resultant function is:</p>

<pre><code>export function items(state = [], action) {
    switch (action.type) {
        case 'ITEMS_FETCH_DATA_SUCCESS':
            console.log('X');
            return action.items;

        default:
            return state;
    }
}
</code></pre>

<p>and I also set the <code>itemsFetchData</code> function to return the promise, becoming:</p>

<pre><code>export function itemsFetchData(url) {
    return (dispatch) =&gt; {
        dispatch(itemsIsLoading(true));

        return fetch(url)
            .then((response) =&gt; {
                if (!response.ok) {
                    throw Error(response.statusText);
                }

                dispatch(itemsIsLoading(false));

                return response;
            })
            .then((response) =&gt; response.json())
            .then((items) =&gt; dispatch(itemsFetchDataSuccess(items)))
            .catch(() =&gt; dispatch(itemsHasErrored(true)));
    };
}
</code></pre>

<p>As I need server-side rendering. I setup Express to consume my middleware <code>handleRender</code> which in turn calls <code>renderFullPage</code> that returns the HTML string. The Express implementation can be assumed correct. My <code>handleRender</code> looks like the below</p>

<pre><code>export function handleRender(req, res) {
  // Create a new Redux store instance
  const store = configureStore();

  const { dispatch } = store;

  dispatch(itemsFetchData(''http://5826ed963900d612000138bd.mockapi.io/items'')).then(() =&gt; {
    console.log(""Y"");
    // Render the component to a string
    const html = renderToString(
      &lt;Provider store={store}&gt;
        &lt;div id=""app""&gt;
          &lt;StaticRouter context={{}} location={req.url}&gt;
            &lt;Main /&gt;
          &lt;/StaticRouter&gt;
        &lt;/div&gt;
      &lt;/Provider&gt;
    );

    // Grab the initial state from our Redux store
    const preloadedState = store.getState();

    // Send the rendered page back to the client
    res.send(renderFullPage(html, preloadedState));
  });
}
</code></pre>

<p>Using the above code, <code>Y</code> is printed to the console, but <code>X</code> is never printed, meaning the reducer function is not being called. If I remove the <code>then</code> from the promise in my handleRender, thus becoming:</p>

<pre><code>dispatch(itemsFetchData(''http://5826ed963900d612000138bd.mockapi.io/items''));
console.log(""Y"");
// ... remaining code remains unaltered
</code></pre>

<p>The reducer function is being called correctly and the Redux store updated correctly, however since this is asynchronous the <code>handleRender</code> would have returned the HTML already.</p>

<p>Any help would be greatly appreciated. It's been a long day.</p>
","2315681","","2315681","","2017-10-18 08:12:09","2017-10-18 08:12:09","Async server-side rendering using redux & react","<javascript><reactjs><redux><react-router><redux-thunk>","1","3","","",""
"29676221","1","29676588","","2015-04-16 13:28:29","","2","879","<p>I post again about it and ask if there is a solution to skip following react exception in some cases:</p>

<blockquote>
  <p>Uncaught Error: Invariant Violation: You're trying to render a
  component to the document using server rendering but the checksum was
  invalid. This usually means you rendered a different component type or
  props on the client from the one on the server, or your render()
  methods are impure. React cannot handle this case due to cross-browser
  quirks by rendering at the document root. You should look for
  environment dependent code in your components and ensure the props are
  the same client and server side.</p>
</blockquote>

<p>I understand react tries to keep integrity but for that kind of scenario it makes no real sense.</p>

<p>my component renders itself with client context and screen resolution, and server rendering is made with ExpressJS.</p>

<p>here an extract of simple ui component called 'App':</p>

<pre><code>getDefaultProps: function() {
   // here is size by default
   return {
      size: 500
    }
  },
render: function() {
    return (
      &lt;div&gt;&lt;myComponent size={this.props.size} /&gt;&lt;/div&gt;
    );
}
</code></pre>

<p>On client side, something like:</p>

<pre><code>var height = // jquery stuff to get client screen height
//var height = 500; // in this case works as both client/server size are equal
React.render(App({size:height}), document);
</code></pre>

<p>On server side, something like:</p>

<pre><code>var markup = React.renderToString(APP());
res.send(markup);
</code></pre>

<p>Any ideas to avoid that annoying exception will be welcome.</p>

<p>Thanks</p>

<p>Julien</p>
","2205050","","","","","2015-04-16 13:45:41","react checksum was invalid : client screen height property not applicable on server side","<reactjs>","1","0","","",""
"46822265","1","","","2017-10-19 03:06:32","","0","35","<p>I'm using the <code>renderToStringWithData</code> for SSR</p>

<p><a href=""http://dev.apollodata.com/react/server-side-rendering.html#renderToStringWithData"" rel=""nofollow noreferrer"">http://dev.apollodata.com/react/server-side-rendering.html#renderToStringWithData</a></p>

<p>The problem comes when a single query fails, the whole response from apollo client fails.</p>

<pre><code>import { renderToStringWithData } from ""react-apollo""
const client = new ApolloClient(....);

renderToStringWithData(app).then((content) =&gt; {
  // The whole state will fail if only one query fails.
  const initialState = client.getInitialState();
  const html = &lt;Html content={content} state={initialState} /&gt;;
  res.status(200);
  res.send(`&lt;!doctype html&gt;\n${ReactDOM.renderToStaticMarkup(html)}`);
  res.end();
});
</code></pre>

<p>How can I get the state from the querys that din't failed?</p>
","1013206","","1013206","","2017-10-19 15:17:42","2017-10-19 15:17:42","Set default values when a query/mutation fails on SSR renderToStringWithData","<graph><react-apollo><apollo-client>","0","0","","",""
"29269089","1","29276165","","2015-03-26 00:32:57","","0","403","<p>I'm having some serious troubles in getting react set up with rendering on the server side.. 
Here are my relevant files to the problem I'm having: <a href=""https://bitbucket.org/snippets/imattacus/g9r6"" rel=""nofollow"">https://bitbucket.org/snippets/imattacus/g9r6</a></p>

<p>I have been following tutorials online and I'm just doing what I see other people doing - but I'm under the impression I have made a react Component (class?) and I need to react.createElement() on the component i've made so it can be rendered.</p>

<p>But I don't understand how to do this because createElement requires a position in the DOM?</p>

<p>I'm only new to react, so I may have completely misunderstood something along the way - but can you guys see any problem in my code that would produce the 'invariant error' unable to use renderToString on invalid ReactElement?</p>

<p>Thanks! </p>
","4103072","","","","","2015-03-26 10:34:58","Isomorphic React, unable to render as string because I haven't got a valid react Element?","<node.js><express><reactjs><reactjs-flux><react-jsx>","1","0","","",""
"37551273","1","","","2016-05-31 16:39:56","","0","344","<p>I am trying to use Typescript with <a href=""https://github.com/DefinitelyTyped/tsd"" rel=""nofollow""><code>tsd</code></a> (haven't upgraded to <a href=""https://github.com/typings/typings"" rel=""nofollow""><code>typings</code></a> yet), React, and JSX together... oh my! Talk about build system intricacies...</p>

<p>My <code>.tsx</code> file (Typescript + JSX) compiles fine (using <code>gulp-typescript</code>) when I use <code>import * as React from 'react'</code>. I get an error, however, when I use a <code>require</code> statement:</p>

<pre><code>./typings/react/react-global.d.ts(17,1): error TS2440: Import declaration conflicts 
with local declaration of 'React'
</code></pre>

<p>I wouldn't have been surprised if I just imported it wrong and there is some difference between old <code>require</code> and new <code>import</code> that I haven't grokked yet, but I thought the particular type conflict error I got was strange. </p>

<p><strong>Just so I understand how imports interact with global tsd declarations better, why does the <code>require</code> statement cause an error here?</strong></p>

<p>Here is my <code>index.tsx</code>:</p>

<pre><code>/// &lt;reference path=""../typings/tsd.d.ts"" /&gt;

const config = require('../config')
const express = require('express')
const reactDomServer = require('react-dom/server')
const app = express()

// THIS WORKS
import * as React from 'react'

// THIS DOES NOT
//const React = require('react')

app.get('/', (req, res) =&gt; {
  const element = &lt;h1&gt;Hello Denver!&lt;/h1&gt;
  res.send(reactDomServer.renderToString(element))
})

const server = app.listen(process.env.port || config.port, () =&gt;
  console.log(`Server listening on port ${server.address().port}!`)
)
</code></pre>

<p>Here is my <code>../typings/tsd.d.ts</code>:</p>

<pre><code>/// &lt;reference path=""react-router/history.d.ts"" /&gt;
/// &lt;reference path=""react-router/react-router.d.ts"" /&gt;
/// &lt;reference path=""react/react-addons-create-fragment.d.ts"" /&gt;
/// &lt;reference path=""react/react-addons-css-transition-group.d.ts"" /&gt;
/// &lt;reference path=""react/react-addons-linked-state-mixin.d.ts"" /&gt;
/// &lt;reference path=""react/react-addons-perf.d.ts"" /&gt;
/// &lt;reference path=""react/react-addons-pure-render-mixin.d.ts"" /&gt;
/// &lt;reference path=""react/react-addons-test-utils.d.ts"" /&gt;
/// &lt;reference path=""react/react-addons-transition-group.d.ts"" /&gt;
/// &lt;reference path=""react/react-addons-update.d.ts"" /&gt;
/// &lt;reference path=""react/react-dom.d.ts"" /&gt;
/// &lt;reference path=""react/react-global.d.ts"" /&gt;
/// &lt;reference path=""react/react.d.ts"" /&gt;
/// &lt;reference path=""node/node.d.ts"" /&gt;
/// &lt;reference path=""express-serve-static-core/express-serve-static-core.d.ts"" /&gt;
/// &lt;reference path=""express/express.d.ts"" /&gt;
/// &lt;reference path=""mime/mime.d.ts"" /&gt;
/// &lt;reference path=""serve-static/serve-static.d.ts"" /&gt;
</code></pre>
","480608","","","","","2016-06-01 01:41:07","Why does require('react') cause ""Import declaration conflicts"" with typescript?","<javascript><reactjs><typescript><jsx><tsd>","1","5","","",""
"38323044","1","","","2016-07-12 07:56:18","","2","606","<p>I'm using php to post data to node.js to render reactjs components server side. </p>

<p>The debug console shows that error <code>Unexpected token ILLEGAL</code> occurs when variable <code>component</code> returns <code>undefined</code>. </p>

<pre><code>React = require('react'),
ReactDOM = require('react-dom/server'),
require('babel-core/register');
app.post('/something', function (req, res) {
    try {
        var view = './src/ItemPage';
        var component = require(view); &lt;&lt;&lt;====== Error
        var props = req.body || null;
        res.status(200).send(
            ReactDOM.renderToString(
                React.createElement(component, props)
            )
        );
    } catch (err) {
        res.status(500).send(err.message);
    }
});
</code></pre>

<p>The problem is due to importing the css script from grommet UI library in order to include css in the <code>bundle.js</code>. If I remove that style import line, the script is running okay. Why does the following class returns undefined in node? Is there a syntax error? It is compiled fine in webpack. </p>

<p>ItemPage Class:</p>

<pre><code>import React from 'react';
import Tabs from 'grommet/components/Tabs';
import Tab from 'grommet/components/Tab';
import 'grommet/grommet.min.css'; &lt;&lt;=== Error !!!!

export default class ItemPage extends React.Component {

    render(){ return &lt;Tabs&gt;
        &lt;Tab title=""First Title""&gt;
            &lt;h3&gt;First Tab&lt;/h3&gt;
            &lt;p&gt;Contents of the first tab !&lt;/p&gt;
        &lt;/Tab&gt;
        &lt;Tab title=""Second Title""&gt;
            &lt;h3&gt;Second Tab&lt;/h3&gt;
            &lt;p&gt;Contents of the second tab&lt;/p&gt;
        &lt;/Tab&gt;
        &lt;Tab title=""Third Title""&gt;
            &lt;h3&gt;Third Tab!&lt;/h3&gt;
            &lt;p&gt;Contents of the third tab&lt;/p&gt;
        &lt;/Tab&gt;
      &lt;/Tabs&gt;
    }
}


module.exports = ItemPage;
</code></pre>
","2598292","","","","","2016-07-12 09:18:14","Unexpected token ILLEGAL error importing css script in reactjs es6 file","<javascript><node.js><reactjs><ecmascript-6><babeljs>","1","6","","",""
"37869908","1","","","2016-06-16 21:49:26","","8","476","<p>I am looking for the angular 2 equivalent of <code>react-dom/server.renderToString</code></p>

<pre><code>import { renderToString } from 'react-dom/server';    
// Render the component to a string
const html = renderToString(
  &lt;App /&gt;
);
</code></pre>

<p>What is the simplest code example to transform a directive/component into HTML using NodeJs?</p>

<p>I guess it should be possible with one of these packages:</p>

<ul>
<li><p>@angular/compiler - v2.0.0-rc.2 </p></li>
<li><p>@angular/platform-server -
v2.0.0-rc.2</p></li>
</ul>
","159319","","159319","","2016-06-19 13:51:41","2016-06-20 14:23:35","angular 2 equivalent of react renderToString","<javascript><angularjs><node.js><angular>","2","2","1","",""
"29320363","1","","","2015-03-28 17:36:00","","9","7596","<p>For the last week now I've been completely at a loss for how to set up server side rendering with React. This is a new project but it's an express server and I'm attempting to render just a super simple hello world react app which uses react-router-component..</p>

<p>I think the best way for me to get some help is to share the code I have right now and I'm hoping somebody can please tell me what I'm doing wrong! I've followed tutorial after tutorial and tried all sorts of different things but I keep getting error after error!</p>

<p>This is my app.js for the express server, the relevant code is the * route if you scroll down a bit:</p>

<pre><code>require('node-jsx').install({extension: '.jsx'});
var React = require('react');

var App = require('./src/App.jsx');

var request = require('superagent');
var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var url = require('url');

//Database and Passport requires
var mongoose = require('mongoose');
var passport = require('passport');
var LocalStrategy = require('passport-local');

// var api = require('./routes/api');

var app = express();

app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

// uncomment after placing your favicon in /public
//app.use(favicon(__dirname + '/public/favicon.ico'));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(require('express-session')({
  secret: 'secret',
  resave: false,
  saveUninitialized: false
}));
app.use(passport.initialize());
app.use(passport.session());
app.use(express.static(path.join(__dirname, 'public')));

//passport config
var Account = require('./models/account');
passport.use(new LocalStrategy(Account.authenticate()));
passport.serializeUser(Account.serializeUser());
passport.deserializeUser(Account.deserializeUser());

//mongoose
mongoose.connect('mongodb://localhost/database');

//THIS is the relevant section that renders React and sends to client
app.get('*', function(req, res, next){
  var path = url.parse(req.url).pathname;
  React.renderToString(
    React.createFactory(App({path : path})),
    function(err, markup) {
      res.send('&lt;!DOCTYPE html&gt;' + markup);
    }
  );
});


// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});


module.exports = app;
</code></pre>

<p>the App.jsx file being required in the app.js file:</p>

<pre><code>/**
 * @jsx React.DOM
 */

var React = require('react');
var Router = require('react-router-component');
var Locations = Router.Locations;
var Location = Router.Location;
var Index = require('./components/Index.jsx');


var App = React.createClass({
    render: function() {
        return (
              &lt;html&gt;
                &lt;head lang=""en""&gt;
                    &lt;meta charSet=""UTF-8""/&gt;
                    &lt;title&gt;React App&lt;/title&gt;
                &lt;/head&gt;
                &lt;body&gt;
                    &lt;div id=""main""&gt;
                        &lt;Locations path={this.props.path}&gt;
                            &lt;Location path=""/"" handler={Index} /&gt;
                        &lt;/Locations&gt;
                    &lt;/div&gt;
                    &lt;script type=""text/javascript"" src=""./javascripts/bundle.js""&gt;&lt;/script&gt;
                &lt;/body&gt;
               &lt;/html&gt;
        )
    }
});

module.exports = App;
</code></pre>

<p>and the Index.jsx file required in the App.jsx:</p>

<pre><code>var React = require('react');

 var Index = React.createClass({
    render: function() {
        return (
        &lt;div className=""test""&gt;
            &lt;span&gt;Whats going on&lt;/span&gt;
        &lt;/div&gt;
        )
    }
 });

 module.exports = Index; 
</code></pre>

<p>I'm only showing you my most recent attempt at getting this to work here but rest assured I've tried all different methods to render a react component, such as renderComponentToString, I've also tried React.renderToString(React.createElement(App)) etc etc.. </p>

<p>But now I keep getting this error ""Cannot read property '__reactAutoBindMap' of undefined"" </p>

<p>Please Help!!! :) Thanks</p>
","4103072","","","","","2015-06-09 00:57:39","Cannot read property '__reactAutoBindMap' of undefined","<javascript><node.js><express><reactjs><reactjs-flux>","2","3","1","",""
"47152243","1","","","2017-11-07 07:31:09","","0","112","<p>I have an app which is server side rendered, and then the client side code hydrates the dom. I am using react 16 and react router 4. How do i scroll to the top of the page when i click on a link, but maintain the scroll when i go back to the original screen.</p>

<p>server side code</p>

<pre><code>  const markup = ReactDOMServer.renderToString(
    &lt;StaticRouter location={ request.url } context={ context }&gt;
      &lt;App /&gt;
    &lt;/StaticRouter&gt;
  );
</code></pre>

<p>App.js</p>

<pre><code>class App extends Component&lt;{}, {}&gt; {
  render() {
    return (
      &lt;div&gt;
        &lt;Switch&gt;
          &lt;Route exact path='/' component={ Homepage } /&gt;
          &lt;Route  path='/learn-mode' component={ LearnMore } /&gt;
        &lt;/Switch&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p><strong>Client  code</strong></p>

<pre><code>import { hydrate } from 'react-dom';
import App from './App';
import React from 'react';

hydrate((
  &lt;BrowserRouter&gt;
    &lt;App /&gt;
  &lt;/BrowserRouter&gt;
), document.getElementById('root'));
</code></pre>

<p>Most of the solutions i read online dealt with pure client rendered app and couldnt find a conclusive solution for an isomorphic. Any help here would be good.</p>
","5298398","","5298398","","2017-11-07 11:13:06","2017-11-07 11:13:06","Scroll to top when route changes on server rendered react app","<javascript><reactjs><react-router-v4><serverside-rendering>","0","0","1","",""
"38816754","1","","","2016-08-07 17:30:36","","0","96","<p>I tried to get my head around how to render React on the server side. I use webpack to create the JS bundle for the client. I found this question on  <a href=""https://stackoverflow.com/questions/30626410/server-side-rendering-with-react-react-router-and-express"">here</a> the server part (my app.js) looks like this:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>//...other express configuration

const routes = require('../jsx/routes');
const React = require('react');
const {RoutingContext, match} = require('react-router');
const hist = require('history');

app.use((req, res, next) =&gt; {
  const location = hist.createLocation(req.path);
  match({
    routes: routes,
    location: location,
  }, (err, redirectLocation, renderProps) =&gt; {
    if (redirectLocation) {
      res.redirect(301, redirectLocation.pathname + redirectLocation.search);
    } else if (err) {
      console.log(err);
      next(err);
      // res.send(500, error.message);
    } else if (renderProps === null) {
      res.status(404)
        .send('Not found');
    } else {
      res.send('&lt;!DOCTYPE html&gt;' + React.renderToString(&lt;RoutingContext {...renderProps}/&gt;));
    }
  });
});

    //...other express configuration</code></pre>
</div>
</div>
</p>

<p>I couldn't find out how to make this part work, since in Node there is no JSX/ES6 available:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>res.send('&lt;!DOCTYPE html&gt;' + React.renderToString(&lt;RoutingContext {...renderProps}/&gt;));</code></pre>
</div>
</div>
</p>

<p>So I tried to use babel/register to compile JSX and ES6 in app.js as follows in my server.js, where I then require my app.js:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>require('babel-core/register')({
    presets: ['es2015', 'react']
});</code></pre>
</div>
</div>
</p>

<p>When I start my server I get then:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>SyntaxError: /.../assets/app.scss: Unexpected token (1:0)
&gt; 1 | @import './shared/mixins/colors';</code></pre>
</div>
</div>
</p>

<p>So obvioulsy babel/register is not enough to render my React components, what else could I do/use to get it working?</p>
","1864315","","-1","","2017-05-23 11:44:19","2016-08-07 17:30:36","How to use react router, react and webpack together for server side rendering?","<node.js><reactjs><webpack><react-router><react-dom-server>","0","3","","",""
"38258479","1","","","2016-07-08 03:25:33","","5","719","<p>My website is written in PHP. Node.js is also set up for socket.io. I have been thinking about server-side rendering with Reactjs so I can reuse the views. Planning to use v8js extension, but then I came across <a href=""https://blog.frankdejonge.nl/rendering-reactjs-templates-server-side/"" rel=""nofollow"">this article</a> talking about two possible solutions:</p>

<p>1.Use v8js extension and React-PHP-V8Js</p>

<p>2.Send data from php to node.js to render views, example:</p>

<p>node.js</p>

<pre><code>require(""babel/register"");  
var React = require('react');  
var express = require('express');  
var path = require('path');  
var bodyParser = require('body-parser');

var app = express();  
app.use(bodyParser.json());  
app.use('/', function(req, res) {  
    try {
        var view = path.resolve('./views/' + req.query.module);
        var component = require(view);
        var props = req.body || null;
        res.status(200).send(
            React.renderToString(
                React.createElement(component, props)
            )
        );
    } catch (err) {
        res.status(500).send(err.message);
    }
});
</code></pre>

<p>php </p>

<pre><code>use GuzzleHttp\Client;

$app-&gt;get('/{name:.*?}', function($name) use ($app) {
    $client = new Client(['base_url' =&gt; 'http://localhost:3000']);
    $response = $client-&gt;post('/', [
        'json' =&gt; ['name' =&gt; ucfirst($name ?: 'World')],
        'query' =&gt; ['module' =&gt; 'hello'],
    ]);
    $contents = $response-&gt;getBody()-&gt;getContents();

    return response($contents, 200);
});
</code></pre>

<p>The author says he would prefer the second method because the first one:</p>

<blockquote>
  <p>Unless you're comfortable installing (and updating) libv8 and   the
  V8Js PECL extension on your production machines,   this is not an
  option. Personally, I wouldn't go this route.   Installing the
  dependencies is cumbersome, dependency management   is tricky, and
  there aren't many resources to guide you along   the way.   <strong>In
  addition, you'll need to account for the fact that your  javascript
  builds should not be bundled with react if you want   to re-use
  them</strong>.</p>
</blockquote>

<p>Could you tell me what he means by ""javascript builds not being able to bundle with react""? I have been thinking about using <code>v8js</code> + <code>React-PHP-V8Js</code> so I would like to understand some of the drawbacks of it. Also, would you prefer the second method (node.js as template rendering service)? I have node.js running already so this seems to be a good suggestion. </p>
","2598292","","4233593","","2016-07-13 22:53:43","2016-07-17 06:49:23","Is node.js with reactjs as php template rendering service a good idea?","<php><node.js><reactjs>","3","0","2","",""
"47225975","1","47296004","","2017-11-10 15:18:43","","0","209","<p>Find <strong>Edits</strong> at the bottom.</p>

<p>I have been really researching a lot of tutorials and even the documentation of the react training server side rendering located here: <a href=""https://reacttraining.com/react-router/web/guides/server-rendering"" rel=""nofollow noreferrer"">https://reacttraining.com/react-router/web/guides/server-rendering</a></p>

<p>Something that has been a problem for me is using other routes in order to have a full stack application. So for example we will use the MERN stack
(<code>mongodb</code> <code>express</code> <code>React/Redux</code> <code>nodejs</code>). Lets say we have two routes in the </p>

<p><code>app.js</code> like so: </p>

<pre><code>app.use('/users', users);
app.use('/posts', posts);
</code></pre>

<p>and our Server Side Rendering is set up like most of these tutorials, actually I couldn't find one that did not set it up this way, and to save time I will just put where the SSR code would go. If you don't know how to do SSR then please look at the docs in the link I gave above. I think it may not be needed, but if it is let me know and I could add a simple set up.</p>

<p>Something like:</p>

<pre><code>app.get('*', (req, res) =&gt; { //server side rendering code here});
</code></pre>

<p>So the problem here is that it hits every route and inside of server side rendering for <code>React Router 4</code>, most people will use <code>matchRoutes</code> function and pass in their routes that they use for the react side. </p>

<p>Okay so I have explained a lot, but not really what the problem is:</p>

<p><strong>PROBLEM:</strong> When on the react side, lets say using an action and we will use axios for a simple example here.</p>

<p>If I do:</p>

<pre><code>axios.get('/posts')
.then(response =&gt; { 
 console.log(response.data);
 })
.catch(err =&gt; {
 console.log(err);
 });
</code></pre>

<p>This runs into a problem. And for any of you who know express and SSR well you will know why. The <code>app.get('*')</code> is hitting every route or in better words every route request will go through here, the problem is that when we send a request to <code>/posts</code> one of two cases will happen.</p>

<p><strong>Case 1:</strong> there is a client side route <code>/posts</code> in the routes file for react side and this case will return the server side html as the <code>response.data</code> which is obviously not what we want.</p>

<p><strong>Case 2:</strong> there is no client side route <code>/posts</code> in the routes file for react side and this case will return a 404 error or something similar to route or page not found if you set up your SSR correctly.</p>

<p>I need a way to be able to use my back-end, but be able to use the SSR for react as well. </p>

<p><strong>Possible Solution?</strong></p>

<ol>
<li><p>Use some type of proxy and say if <code>/api/routename</code> then use the proxy that way your calls don't get pushed through the <code>app.get('*')</code>.</p></li>
<li><p>Or some way of only doing SSR on individual routes. </p></li>
<li><p>Or excluding certain routes, but being able to use all of the client side routes. In this I mean if I have client side <code>/users</code> and an express side <code>/users</code>, I don't want the client side to break if I exclude <code>/users</code>, but some how still exclude the express side.</p></li>
</ol>

<p>I'm not totally sure how to do these solutions of if they are possible, but I need to be able to use my express routes, and I can't find a concrete way on how to do it, or what is best practice. </p>

<p><strong>EDITS:</strong></p>

<p>server side app.js:</p>

<pre><code>require('babel-core/register')({
  presets: ['env', 'react', 'stage-0', 'stage-1']
});

const pkg_json = require('./package.json');
const vertex = require('vertex360')({ site_id: pkg_json.app });
var renderer = require('./renderer.js');

// initialize app
const app = vertex.app();

// import routes
const index = require('./routes/index');
const api = require('./routes/api');
const users = require('./routes/users');

// set routes
app.use('/api/users', users);

// hopefully will be used on every Route, this should handle SSR RR4
app.use(renderer);

module.exports = app;
</code></pre>

<p>renderer.js:</p>

<pre><code>import React from 'react';
import { renderToString } from 'react-dom/server';
import { StaticRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import { renderRoutes } from 'react-router-config';
import serialize from 'serialize-javascript';
import { Helmet } from 'react-helmet';
import { matchRoutes } from 'react-router-config';

import routes from './src/routes';
import createStore from './src/stores';

function handleRender(req, res) {
  const store = createStore.configure(null); // create Store in order to get data from redux

  const promises = matchRoutes(routes, req.path)
    .map(({ route }) =&gt; {
      // Matches the route and loads data if loadData function is there
      return route.loadData ? route.loadData(store) : null;
    })
    .map(promise =&gt; {
      if (promise) {
        return new Promise((resolve, reject) =&gt; {
          promise.then(resolve).catch(resolve); // lets all data load even if route fails
        });
      }
    });

  Promise.all(promises).then(() =&gt; {
    const context = {};
    if (context.url) {
      return res.redirect(301, context.url); // redirect for non auth users
    }

    if (context.notFound) {
      res.status(404); // set status to 404 for unknown route
    }

    const content = renderToString(
      &lt;Provider store={store}&gt;
        &lt;StaticRouter location={req.path} context={context}&gt;
          &lt;div&gt;{renderRoutes(routes)}&lt;/div&gt;
        &lt;/StaticRouter&gt;
      &lt;/Provider&gt;
    );

    const initialState = serialize(store.getState());

    const helmet = Helmet.renderStatic();

    res.render('index', { content, initialState, helmet });
  });
}

module.exports = handleRender;
</code></pre>

<p>React entry point:</p>

<pre><code>import React from 'react';
import { renderToString } from 'react-dom/server';
import { StaticRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import { renderRoutes } from 'react-router-config';
import serialize from 'serialize-javascript';
import { Helmet } from 'react-helmet';
import { matchRoutes } from 'react-router-config';

import routes from './src/routes';
import createStore from './src/stores';

function handleRender(req, res) {
  const store = createStore.configure(null); // create Store in order to get data from redux

  const promises = matchRoutes(routes, req.path)
    .map(({ route }) =&gt; {
      // Matches the route and loads data if loadData function is there
      return route.loadData ? route.loadData(store) : null;
    })
    .map(promise =&gt; {
      if (promise) {
        return new Promise((resolve, reject) =&gt; {
          promise.then(resolve).catch(resolve); // lets all data load even if route fails
        });
      }
    });

  Promise.all(promises).then(() =&gt; {
    const context = {};
    if (context.url) {
      return res.redirect(301, context.url); // redirect for non auth users
    }

    if (context.notFound) {
      res.status(404); // set status to 404 for unknown route
    }

    const content = renderToString(
      &lt;Provider store={store}&gt;
        &lt;StaticRouter location={req.path} context={context}&gt;
          &lt;div&gt;{renderRoutes(routes)}&lt;/div&gt;
        &lt;/StaticRouter&gt;
      &lt;/Provider&gt;
    );

    const initialState = serialize(store.getState());

    const helmet = Helmet.renderStatic();

    res.render('index', { content, initialState, helmet });
  });
}

module.exports = handleRender;
</code></pre>
","8551819","","8551819","","2017-11-13 16:09:00","2017-11-14 22:06:04","How to add additional express routes in react server side rendering to use as backend","<reactjs><express><redux><serverside-rendering><react-router-dom>","1","5","","",""
"39429383","1","","","2016-09-10 18:39:40","","2","197","<p>I was able to set up <code>react-hot-loader</code> to work properly bundling my client js and pushing changes to browser and applying there (except <code>[react-router] You cannot change &lt;Router routes&gt;; it will be ignored</code> warning).
I'm using my own server with <code>koa</code>, <code>koa-webpack-dev-middleware</code> and <code>koa-webpack-hot-middleware</code>, that processes webpack and hot. It also handles server rendering of my app with this code</p>

<pre><code>export default function *renderReact() {
  const history = createMemoryHistory();
  const store   = makeStore(history);

  const [redirectLocation, renderProps] = yield match.bind(null, { routes, location: this.url, history });

  if (redirectLocation) {
    return this.redirect(redirectLocation.pathname + redirectLocation.search)
  }

  if (renderProps == null) {
    return this.throw(404, 'Not found')
  }

  const rootElement = (
    &lt;Provider store={store} key=""provider""&gt;
      &lt;RouterContext {...renderProps} /&gt;
    &lt;/Provider&gt;
  );

  this.body = renderApp({
    html:  yield store.renderToString(ReactDOMServer, rootElement),
    state: JSON.stringify(store.getState())
  });
}
</code></pre>

<p>The problem is with my server side code: <code>hot</code> works only for client code and updates changes on the fly, but my server code does not get updated on changes as scripts a loaded on server start and on page reload i get not updated rendered page from server and then it updates with new client code.
and react warning <code>Warning: React attempted to reuse markup in a container but the checksum was invalid...</code>
The question is: how to handle code changes related to server rendering part on server not restarting the app as it breaks hot loading?</p>
","3263646","","3263646","","2016-09-11 08:28:44","2016-09-15 10:29:49","Using react-hot-loader 3 with own server","<node.js><reactjs><webpack><webpack-dev-server><react-hot-loader>","0","0","2","",""
"38784573","1","","","2016-08-05 08:24:32","","1","131","<p>I'm using webpack, redux and react together, i was on a react 13 but some module i have to use depend on react 15.3, so i update my react with npm-check, but now i have some trouble.</p>

<p>I have a syntax error , unexpected token on this code since react 15.3 and i dont see why.
This is a screenshot of the error in my console :
<a href=""http://i.stack.imgur.com/t5ZNg.png"" rel=""nofollow"">error_message</a></p>

<p>This is the portion of code who doesn't work in react 15.3</p>

<pre class=""lang-js prettyprint-override""><code> import express from 'express';

import webpack from 'webpack';
import webpackConfig from '../../webpack.config';
import webpackDevMiddleware from 'webpack-dev-middleware';
import webpackHotMiddleware from 'webpack-hot-middleware';

import React from 'react';
import renderToString from 'react-dom/server'
import { RoutingContext, match } from 'react-router';
import { Provider } from 'react-redux';
import history from 'history';
import { fetchComponentDataBeforeRender } from '../common/api/fetchComponentDataBeforeRender';

import configureStore from '../common/store/configureStore';
import routes from '../common/routes';
import packagejson from '../../package.json';

const app = express();
const renderFullPage = (html, initialState) =&gt; {
  return `
    &lt;!doctype html&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;meta charset=""utf-8""&gt;
        &lt;title&gt;4AilesTrophy&lt;/title&gt;
        &lt;link rel=""stylesheet"" type=""text/css"" href=""/static/app.css""&gt;
        &lt;script src=""https://use.fontawesome.com/b8520993ca.js""&gt;&lt;/script&gt;
        &lt;link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/balloon-css/0.3.0/balloon.min.css""&gt;

        &lt;!-- Latest compiled and minified CSS --&gt;
        &lt;link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"" integrity=""sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7"" crossorigin=""anonymous""&gt;

        &lt;!-- Optional theme --&gt;
        &lt;link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css"" integrity=""sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r"" crossorigin=""anonymous""&gt;
        &lt;!-- JQUERY (bootstrap need it) --&gt;
        &lt;script src=""https://code.jquery.com/jquery-2.2.4.min.js"" integrity=""sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="" crossorigin=""anonymous""&gt;&lt;/script&gt;
        &lt;!-- Latest compiled and minified JavaScript --&gt;
        &lt;script src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"" integrity=""sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS"" crossorigin=""anonymous""&gt;&lt;/script&gt;
        &lt;script type=""text/javascript"" src=""https://cdn.emailjs.com/dist/email.min.js""&gt;&lt;/script&gt;
        &lt;!-- API GoogleMaps --&gt;
        &lt;script async defer
          src=""https://maps.googleapis.com/maps/api/js?key=AIzaSyBNTUcCcssN7akhQRr4EG1Yfkhh6REnszE&amp;callback=initMap""&gt;
        &lt;/script&gt;
        &lt;script type=""text/javascript""&gt;
           (function(){
              emailjs.init(""user_BVUmJcKBthIuCTTxsaxC9"");
           })();
        &lt;/script&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;div id=""root""&gt;${html}&lt;/div&gt;
        &lt;script&gt;
          window.__INITIAL_STATE__ = ${JSON.stringify(initialState)};
        &lt;/script&gt;
        &lt;script src=""/static/bundle.js""&gt;&lt;/script&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  `;
}

if(process.env.NODE_ENV !== 'production'){
  const compiler = webpack(webpackConfig);
  app.use(webpackDevMiddleware(compiler, { noInfo: true, publicPath: webpackConfig.output.publicPath }));
  app.use(webpackHotMiddleware(compiler));
}else{
  app.use('/static', express.static(__dirname + '/../../dist'));
}

app.get('/*', function (req, res) {

  const location = history.createLocation(req.url);

  match({ routes, location }, (err, redirectLocation, renderProps) =&gt; {

    if(err) {
      console.error(err);
      return res.status(500).end('Internal server error');
    }

    if(!renderProps)
      return res.status(404).end('Not found');

    const store = configureStore();

    const InitialView = (
      &lt;Provider store={store}&gt;

          &lt;RoutingContext {...renderProps} /&gt;

      &lt;/Provider&gt;
    );

    //This method waits for all render component promises to resolve before returning to browser
    fetchComponentDataBeforeRender(store.dispatch, renderProps.components, renderProps.params)
      .then(html =&gt; {
        const componentHTML = ReactDOMServer.renderToString(InitialView);
        const initialState = store.getState();
        res.status(200).end(renderFullPage(componentHTML,initialState))
      })
      .catch(err =&gt; {
        console.log(err)
        res.end(renderFullPage("""",{}))
      });

  });

});



const server = app.listen(80, function () {
  const host = server.address().address;
  const port = server.address().port;
  console.log('Example app listening at http://%s:%s', host, port);
});
</code></pre>

<p>Before, in react 13 , i wrote it and it worked</p>

<pre class=""lang-js prettyprint-override""><code>const InitialView = (
  &lt;Provider store={store}&gt;
    {() =&gt; &lt;RoutingContext {...renderProps} /&gt;}
  &lt;/Provider&gt;
);
</code></pre>

<p>instead of this : </p>

<pre><code>const InitialView = (
  &lt;Provider store={store}&gt;
      &lt;RoutingContext {...renderProps} /&gt;
  &lt;/Provider&gt;
);
</code></pre>

<p>If anyone can help me, it would be very helpful :)
Have a good day everyone</p>

<p>EDIT : </p>

<p>There is my .babelrc file </p>

<pre><code>    {

 ""plugins"": [""transform-object-rest-spread""],
  ""presets"": [
    ""react"",
    ""es2015"",
    ""stage-2""
  ]
}
</code></pre>

<p>And there is my webpack configuartion :</p>

<pre><code>webpackConfig = merge(webpackConfig,{


  devtool: 'inline-source-map',
    module: {
      loaders: [{
        test: /\.js$/,
        loader: 'babel',
        exclude: /node_modules/,
        include: __dirname,
        query: {
          optional: ['runtime'],
          stage: 2,
          env: {
            development: {
              plugins: [
                'react-transform'
              ],
              extra: {
                'react-transform': {
                  transforms: [{
                    transform:  'react-transform-hmr',
                    imports: ['react'],
                    locals:  ['module']
                  }]
                }
              }
            }
          }
        }
      },
      { test: /\.(png|jpg|gif|jpeg)$/, loader: 'url-loader?limit=8192'},
      { test: /\.css$/, loader: 'style-loader!css-loader' }
    ]},
    entry : [
      'webpack-hot-middleware/client',
      './src/client/index.js'
    ],
    plugins : [
      new webpack.HotModuleReplacementPlugin()
    ]  
  });
</code></pre>

<p>And i tried to fit the content of the .babelrc file in my webpack config, but i didn't change nothing :(</p>
","5743168","","5743168","","2016-08-08 08:11:53","2016-08-08 08:11:53","Update my project from react 13 to react 15.3 and got some errors","<reactjs><webpack><redux><babel>","0","6","0","",""
"30386465","1","30389581","","2015-05-22 00:17:17","","0","693","<p>I want to be able to make an API call in a Flummox action and transition differently depending on the response. I can pass the router into the action call but am looking for advice on a potentially better way.</p>

<p>UPDATE:</p>

<p>The correct answer is below but I wanted to add some detail to this.</p>

<p>I'm doing an isomorphic app that 1. needs to get data from an api and 2. may need to redirect based on the api response. Whatever I do needs to work through an express.js app and through react.</p>

<p>I made a small lib that does the api call and return some results. I pass it an object (query params object from express for the server-side or a similar object I create for the react-side). This lib makes the request, determines if a redirect is needed and passes back errors, path (string), redirect (boolean), and data (json).</p>

<p>In express, if the redirect boolean is true, I just redirect to it with the current query params. If it's false, I pass the data to flux through an action which updates a store. I then renderToString with react, serialize stores so the clint-side can bootstrap, and send a rendered page to the client.</p>

<p>In react, the redirect boolean isn't important, I get the response back from my lib, pass the data to my flux action, and just transition to whatever the path is. There's really no notion of redirection. Just go to the path no matter what.</p>

<p>Hopefully this is helpful to someone.</p>
","184532","","184532","","2015-05-22 14:13:22","2015-05-22 14:13:22","Accessing react-router from flummox action/store","<reactjs><flux><react-router><flummox>","1","0","","",""
"47516297","1","47517957","","2017-11-27 17:07:39","","1","169","<p>I am following this tutorial - <a href=""https://www.youtube.com/watch?v=Smk2FusU_70"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=Smk2FusU_70</a> (Right at the 28:38 mark)</p>

<p>However it came out before v4 and I'm getting an error: </p>

<pre><code>/Users/morganallen/Desktop/react_ssr/myapp/server/index.js:55
            match({routes, location: req.url}, (error, redirect, ssrData) =&gt; {
            ^

TypeError: match is not a function
    at fs.readFile (/Users/morganallen/Desktop/react_ssr/myapp/server/index.js:55:13)
    at tryToString (fs.js:455:3)
    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:442:12)
</code></pre>

<p>I saw in this answer it looks like he's having a similar issue - <a href=""https://stackoverflow.com/questions/42797543/whats-wrong-with-this-reactrouter-match-implementation"">What&#39;s wrong with this ReactRouter.match() implementation?</a></p>

<p>Although I'm not quite sure make the change in the <code>else{}</code> statement for <code>match({})</code></p>

<p>What should I do to make it work? </p>

<pre><code>require('import-export')
require('babel-core/register')({presets: ['es2015', 'react']})

const http = require('http')
const path = require('path')
const fs = require('fs')
const express = require('express')
const react = require('react')
const reactRouter = require('react-router')
const reactDomServer = require('react-dom/server')


const renderToString = reactDomServer.renderToString


const match = reactRouter.match

const RouterContext = reactRouter.RouterContext

const staticFiles = [
    '/static/*',
    '/logo.svg',
    '/asset-manifest.json',
    '/favicon.ico'
]

const app = express()

app.server = http.createServer(app)

app.use(express.static('../build'))


staticFiles.forEach(file =&gt; {
    app.get(file, (req, res) =&gt; {
        const filePath = path.join(__dirname, '../build', req.url)
        res.sendFile(filePath)
    })
})

const routes = require('../src/routes').default()

app.get('*', (req, res) =&gt; {

    const error = () =&gt; res.status(404).send('404')

    const htmlFilePath = path.join(__dirname, '../build', 'index.html')

    fs.readFile(htmlFilePath, 'utf8', (err, htmlData) =&gt; {

        if(err) {
            error()
        }
        else{
            match({routes, location: req.url}, (error, redirect, ssrData) =&gt; {
                if(error){
                    error()
                }
                else if(redirect){
                    res.redirect(302, redirect.pathname + redirect.search)
                }
                else if(ssrData){
                    const ReactApp = renderToString(react.createElement(RouterContext, srrData) )
                    const RenderApp = htmlData.replace('{{SSR}}', ReactApp)
                    res.status(200).send(RenderApp)
                }
                else{
                    error()
                }
            })
        }
    })
})

app.server.listen( process.env.PORT || 8080)
console.log(app.server.address().port)
</code></pre>

<p>My package.json file</p>

<pre><code>{
  ""name"": ""myapp"",
  ""version"": ""0.1.0"",
  ""private"": true,
  ""dependencies"": {
    ""babel-core"": ""^6.26.0"",
    ""babel-preset-es2015"": ""^6.24.1"",
    ""babel-preset-react"": ""^6.24.1"",
    ""import-export"": ""^1.0.1"",
    ""react"": ""^16.1.1"",
    ""react-dom"": ""^16.1.1"",
    ""react-router"": ""^4.2.0"",
    ""react-router-dom"": ""^4.2.2"",
    ""react-scripts"": ""1.0.17""
  },
  ""scripts"": {
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
    ""test"": ""react-scripts test --env=jsdom"",
    ""eject"": ""react-scripts eject""
  }
}
</code></pre>
","9015965","","9015965","","2017-11-27 17:15:38","2017-11-27 20:07:47","react + SSR: TypeError: match is not a function","<javascript><node.js><reactjs>","1","7","","",""
"37767137","1","","","2016-06-11 18:20:10","","0","413","<p>I am trying to work on node, and I'll be the first to admit it is a bit beyond me. Without a good list of tutorials, and troubleshooting being limited, I am doing my best to ask as few questions as I can, in the proper fashion. I believe I am messing up a require, but it could just be I do not fully understand renderToString. I am running node, express, and react, and eventually, I'd like to work with the MERN stack.</p>

<pre><code>var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
import React from ""react"";
import { renderToString } from ""react-dom/server"";
</code></pre>

<p>Those are just my imports, and stuff automatically loaded by the express CLI. Just thought I'd include them in case they were relevant.</p>

<pre><code>function render(filePath, options, callback){

  function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
  }

  let views = require(filePath);
  let name = filePath.slice(filePath.lastIndexOf(""/"") + 1, -4);
  let componentName = capitalizeFirstLetter(name);
  let Component = views[componentName];
  // current problem is believed to be an import issue. I don't know for sure,
  // but the data seems to be mutated and not in a React form.
  let markup = renderToString(&lt;Component model={options} /&gt;)
  return callback(null, markup);
}

app.set('views', path.join(__dirname, 'views'));
app.engine(""jsx"", render);
app.set('view engine', 'jsx');
</code></pre>

<p>My views are written in JSX and stored in the views folder. I am trying to compile them into raw html and css and javascript, and I think this is the way to do it.</p>

<pre><code>This is my index route, if it matters.

var express = require('express');
var router = express.Router();

/* GET home page. */
router.get('/', function(req, res, next) {
res.render('index', { title: 'Express' });
});

module.exports = router;
</code></pre>

<p>Here is an example of one of my views. This one is the index view.</p>

<pre><code>import React from ""react"";

import Layout from ""./layout.jsx"";

class Index extends React.Component {
  constructor(props){
  super(props);
  }

  render(){
    return (
    &lt;Layout&gt;
      &lt;h1&gt;
        {this.props.model.title}
      &lt;/h1&gt;
      &lt;p&gt;
        Welcome to &lt;strong&gt;{this.props.model.title}&lt;/strong&gt;
      &lt;/p&gt;
    &lt;/Layout&gt;
    );
  }
}

export { Index };
</code></pre>

<p>Here is the error output:</p>

<pre><code>Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components). Check the render method of `Index`.
undefined
Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components). Check the render method of `Error`.
undefined
Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components). Check the render method of `Error`.
GET / 500 472.717 ms - 1527
Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. Check the render method of `Error`.
    at invariant (/Users/Tim/dev/express/myPage2/node_modules/react/node_modules/fbjs/lib/invariant.js:38:15)
    at [object Object].instantiateReactComponent [as _instantiateReactComponent] (/Users/Tim/dev/express/myPage2/node_modules/react/lib/instantiateReactComponent.js:85:134)
    at [object Object].ReactCompositeComponentMixin.performInitialMount (/Users/Tim/dev/express/myPage2/node_modules/react/lib/ReactCompositeComponent.js:355:36)
    at [object Object].ReactCompositeComponentMixin.mountComponent (/Users/Tim/dev/express/myPage2/node_modules/react/lib/ReactCompositeComponent.js:244:21)
    at Object.ReactReconciler.mountComponent (/Users/Tim/dev/express/myPage2/node_modules/react/lib/ReactReconciler.js:46:35)
    at /Users/Tim/dev/express/myPage2/node_modules/react/lib/ReactServerRendering.js:43:36
    at ReactServerRenderingTransaction.Mixin.perform (/Users/Tim/dev/express/myPage2/node_modules/react/lib/Transaction.js:136:20)
    at renderToStringImpl (/Users/Tim/dev/express/myPage2/node_modules/react/lib/ReactServerRendering.js:38:24)
    at renderToString (/Users/Tim/dev/express/myPage2/node_modules/react/lib/ReactServerRendering.js:68:10)
    at View.render (app.js:30:15)
</code></pre>

<p>I am really trying hard to learn node. I would love any helpful feedback and I am hoping to fix this problem! Thanks for the advice guys! I am pretty decent at React for client side code, but it is kicking my butt on the server. Lol!</p>
","5734819","","5734819","","2016-06-13 05:09:15","2016-06-14 20:47:00","rendering react server-side is causing an error","<javascript><node.js><express><reactjs>","1","6","","",""
"46245894","1","","","2017-09-15 18:54:55","","0","126","<p>App.js has a link to  - I am not understanding if I need action creators/reducers? if so how to wire it up with server side rendering?</p>

<p>Basically on load of otherComponent - should make an API call from server.js by path and inject response back to the component - where does react actions fit in this picture?</p>

<p>server.js:</p>

<pre><code>app.get('/test', (req, res) =&gt; {
    res.send(&lt;otherComponent /&gt;); -&gt; this is returning json right now? How to handle this path for example here - where this should make an api call.
});

app.get('*', (req, res) =&gt; {
  res.send(`
            &lt;!doctype html&gt;
            &lt;html&gt;
                &lt;head&gt;
                    &lt;title&gt;My website&lt;/title&gt;
                    &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;
            &lt;/head&gt;
                &lt;body&gt;
                    &lt;div id='app'&gt;${renderToString(
                        &lt;Provider store={createStore(reducers)}&gt;
                            &lt;StaticRouter location={req.url} context={{}}&gt;
                                &lt;App /&gt;
                            &lt;/StaticRouter&gt;
                        &lt;/Provider&gt;
                    )}&lt;/div&gt;
                    &lt;script src='bundle.js'&gt;&lt;/script&gt;

                &lt;/body&gt;
            &lt;/html&gt;
        `);
});
</code></pre>
","6633817","","6633817","","2017-09-15 22:25:40","2017-09-16 10:16:50","simple server/client routing react-express(nodejs)","<node.js><reactjs><render-to-string><react-dom-server>","3","0","","",""
"39888623","1","39888692","","2016-10-06 06:03:18","","2","1504","<p>I am very new to reactJs and just started to learn the features of reactJS. I am trying to figure out a way to pass the value from nodeJS to reactJS via server side rendering concept.</p>

<p>In the below example, I was able to define a react component and add it in server and render it in UI but I am not sure how to pass the data to the component that can be used inside the component render function.</p>

<p><strong>client.js</strong></p>

<pre><code>var React=require('react');
var ReactDOM=require('react-dom');
var Component=require('./Component.jsx');


ReactDOM.render(
    React.createElement(Component),document
);
</code></pre>

<p><strong>Component.jsx</strong></p>

<pre><code>var React=require('react'),
Request=require('superagent')


module.exports = React.createClass({
getInitialState: function () {
    return {

    };
  },
  componentWillMount: function () {

  },

  componentDidMount: function() {
    clearInterval(this.intervalID)
  },

  _handleClick: function () {
    alert('You clicked!')
  },

    render:function(){
    return(
        &lt;html&gt;
        &lt;head&gt;
            &lt;title&gt; ReactJS - demo &lt;/title&gt;
            &lt;link rel='stylesheet' href='/style.css'/&gt;
        &lt;/head&gt;
        &lt;body&gt;
        &lt;div&gt;
            &lt;h1&gt;react js testing&lt;/h1&gt;
            &lt;p&gt;This is so cool&lt;/p&gt;
            &lt;button onClick={this._handleClick}&gt;Click Me!&lt;/button&gt;
        &lt;/div&gt;
        &lt;script src='/bundle.js'/&gt;
        &lt;/body&gt;
        &lt;/html&gt;
        );
    }

});
</code></pre>

<p><strong>Server.js</strong></p>

<pre><code>require('babel-register')({
    presets:['react']
});
var express = require('express');
var app=express();
var React=require('react');
var ReactDOMServer=require('react-dom/server');
var Component=require('./Component.jsx');

app.use(express.static('public'));
app.get('/',function(request,response){
    var html=ReactDOMServer.renderToString(
        React.createElement(Component)
    )
    response.send(html)
});

var PORT=4444;
app.listen(PORT,function(){
    console.log(""Node js listening in port:""+ PORT);
})
</code></pre>

<p><strong>Update 1:</strong></p>

<p>I am now able to pass the value to the server side rendered component as below</p>

<pre><code>React.createElement(Component,{object:...})
</code></pre>

<p>Now the server side setup works fine. </p>

<p>I need to make this <code>{object:...}</code> available in my client.js also for client side functionality to work. Any idea how to get this value in client.js?</p>
","955140","","955140","","2016-10-06 17:51:50","2016-10-06 17:51:50","How to pass data in server side rendering to reactjs component from node","<node.js><reactjs><babel><serverside-rendering>","1","0","1","",""
"45822925","1","47717286","","2017-08-22 16:35:23","","2","692","<p>I am using react-helmet and on the client all is good in the inspect window and the tags are being outputted correctly. However, when I boot up in production and the SSR kicks in the tags aren't shown in the source and I'm getting no errors at all.</p>

<p>I tried logging the 'stringified' title tag too and got:</p>

<pre><code>&lt;title data-react-helmet=""true""&gt;&lt;/title&gt;
</code></pre>

<p>Here is some code:</p>

<p>This is one of the page components where I'm setting the tags from, the 3 page components are all set up identically to this. (I've simplified the components render function and data object as they are quite large and I'm sure these aren't at fault.)</p>

<pre><code>import React, { Component } from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import { Link } from 'react-router-dom';
import { Helmet } from 'react-helmet';

// Components
import WorkGrid from 'universal/components/Grid';
import Wrapper from 'universal/components/Wrapper';
import Container from 'universal/components/Container';
import Hero from 'universal/components/Hero';
import PageWrapper from 'universal/components/PageWrapper';
import GridHeader from 'universal/components/GridHeader';

const data = {};

class Work extends PageComponent {

  render () {
    return (
      &lt;PageWrapper ref=""root""&gt;
        &lt;Helmet&gt;
          &lt;title&gt;Work&lt;/title&gt;
          &lt;meta name=""description"" content=""Work Description"" /&gt;
        &lt;/Helmet&gt;
        &lt;h1&gt;Work Page&lt;/h1&gt;
      &lt;/PageWrapper&gt;
    );
  }
}

export default connect(state =&gt; ({
  theme: state.ui.theme
}), { changeTheme }, null, { withRef: true })(Work);
</code></pre>

<p>This is some of the server code, specifically where the SSR goes down and I'm calling Helmet.renderStatic();</p>

<pre><code>    // Node Modules
import fs from 'fs';
import {basename, join} from 'path';

// Libraries
import React from 'react';
import {StaticRouter} from 'react-router';
import {renderToString} from 'react-dom/server';

// styled-components
import { ServerStyleSheet, ThemeProvider } from 'styled-components';
import { theme } from '../universal/constants';

// Redux
// import {push} from 'react-router-redux';
import createStore from 'data/redux/createStore.js';
import createHistory from 'history/createMemoryHistory';
import { Provider } from 'react-redux';

// Third Party Scripts
import * as thirdPartyScripts from './thirdPartyScripts.js';

// Helmet
import {Helmet} from 'react-helmet';

function renderApp(url, res, store, assets) {
  const PROD = process.env.NODE_ENV === 'production';
  const context = {};

  const {
    manifest,
    app,
    vendor
  } = assets || {};

  let state = store.getState();

  const stylesheet = new ServerStyleSheet();

  const initialState = `window.__INITIAL_STATE__ = ${JSON.stringify(state)}`;
  const Layout =  PROD ? require( '../../build/prerender.js') : () =&gt; {};

  const root = PROD &amp;&amp; renderToString(
    stylesheet.collectStyles(
      &lt;Provider store={store}&gt;
        &lt;ThemeProvider theme={theme}&gt;
          &lt;StaticRouter location={url} context={context}&gt;
            &lt;Layout /&gt;
          &lt;/StaticRouter&gt;
        &lt;/ThemeProvider&gt;
      &lt;/Provider&gt;
    )
  );

  const styleTags = stylesheet.getStyleTags();

  const seo = Helmet.renderStatic();

  console.log(seo.title.toString());

  const html = `&lt;!DOCTYPE html&gt;
    &lt;html lang=""en""&gt;
    &lt;head&gt;
        &lt;meta charset=""UTF-8""&gt;
        &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;

        ${seo.title.toString()}
        ${seo.meta.toString()}
        ${seo.link.toString()}

        &lt;link rel=""shortcut icon"" href=""/favicon.ico""&gt;
        &lt;link rel=""icon"" sizes=""16x16 32x32 64x64"" href=""/favicon.ico""&gt;
        &lt;link rel=""apple-touch-icon"" href=""/favicon-57.png""&gt;
        &lt;link rel=""apple-touch-icon"" sizes=""114x114"" href=""/favicon-114.png""&gt;
        &lt;link rel=""apple-touch-icon"" sizes=""72x72"" href=""/favicon-72.png""&gt;
        &lt;link rel=""apple-touch-icon"" sizes=""144x144"" href=""/favicon-144.png""&gt;
        &lt;link rel=""apple-touch-icon"" sizes=""60x60"" href=""/favicon-60.png""&gt;
        &lt;link rel=""apple-touch-icon"" sizes=""120x120"" href=""/favicon-120.png""&gt;
        &lt;link rel=""apple-touch-icon"" sizes=""76x76"" href=""/favicon-76.png""&gt;
        &lt;link rel=""apple-touch-icon"" sizes=""152x152"" href=""/favicon-152.png""&gt;
        &lt;link rel=""apple-touch-icon"" sizes=""180x180"" href=""/favicon-180.png""&gt;
        &lt;meta name=""msapplication-TileColor"" content=""#FFFFFF""&gt;
        &lt;meta name=""msapplication-TileImage"" content=""/favicon-144.png""&gt;
        &lt;meta name=""msapplication-config"" content=""/browserconfig.xml""&gt;

        ${ styleTags }

        ${PROD ? '&lt;link rel=""stylesheet"" href=""/static/prerender.css"" type=""text/css"" /&gt;' : ''}

        &lt;link href=""${thirdPartyScripts.googleFont}"" rel=""stylesheet"" type=""text/css""&gt;

        &lt;script&gt;${thirdPartyScripts.googleAnalytics}&lt;/script&gt;
    &lt;/head&gt;

    &lt;body&gt;
      &lt;script&gt;${initialState}&lt;/script&gt;
      ${PROD ? `&lt;div id=""root""&gt;${root}&lt;/div&gt;` : '&lt;div id=""root""&gt;&lt;/div&gt;'}

      ${PROD ? `&lt;script&gt;${manifest.text}&lt;/script&gt;` : ''}

      &lt;script&gt;${thirdPartyScripts.facebookPixel}&lt;/script&gt;

      &lt;script async src=""${thirdPartyScripts.googleAnalyticsSrc}""&gt;&lt;/script&gt;
      ${PROD ? `&lt;script src=""${vendor.js}""&gt;&lt;/script&gt;` : ''}
      &lt;script src=""${PROD ? app.js : './static/app.js'}""&gt;&lt;/script&gt;
    &lt;/body&gt;
    &lt;/html&gt;`;

  res.send(html);
}
</code></pre>

<p>Also, I am using React Router v4 if that's of any help. </p>
","6505931","","","","","2017-12-08 15:24:10","react-helmet outputting empty strings on server-side","<reactjs><react-router><serverside-rendering><react-helmet>","1","1","","",""
"45996307","1","","","2017-09-01 08:41:17","","1","78","<p>I am using the Meteor's server render package with React router v4 but I am getting a TypeError, that Meteor.subscribe is not a function, I am unable to figure out as to why this happening or what is exactly wrong</p>

<p>Here is my code on the client:</p>

<pre><code>import React from 'react';
import { Meteor } from 'meteor/meteor';
import { render } from 'react-dom';
import {RenderRoutes} from '../imports/api/routes.jsx'
import { onPageLoad } from 'meteor/server-render';
import ReactDOM from 'react-dom';

import {
  Router,
  Route,
  Link,
  Switch
 } from 'react-router-dom'
import createBrowserHistory from 'history/createBrowserHistory'

const history = createBrowserHistory()

const Application = () =&gt; (
   &lt;Router history={history}&gt;
      &lt;RenderRoutes/&gt;
   &lt;/Router&gt;
);

onPageLoad(()=&gt; {
   ReactDOM.render(&lt;Application/&gt;, document.getElementById('react-root'));
});
</code></pre>

<p>And on the server:</p>

<pre><code>onPageLoad((sink) =&gt; {
   const context = {};

   const App = props =&gt; (
      &lt;StaticRouter location={props.location} context={context}&gt;
       &lt;RenderRoutes/&gt;
      &lt;/StaticRouter&gt;
   );

  sink.renderIntoElementById('app', renderToString(&lt;App location=
   {sink.request.url} /&gt;));
  });
</code></pre>

<p>I was able to get a very simple app properly working using the above, it's the subscriptions and createcontainer which are bringing in the error, is there a separate way to deal with them?</p>

<p>Here is how I'm subscribing on the client:</p>

<pre><code>export default createContainer(() =&gt; {
  const handle1 = Meteor.subscribe('categories');
  const handle2 = Meteor.subscribe('subcategories');
  const handle3 = Meteor.subscribe('products');
  const isReady1 = handle1.ready()
  const isReady2 = handle2.ready()
  const isReady3 = handle3.ready()
  return {
    products: isReady3 ? Products.find({}).fetch() : [],
    categories: isReady1 ? Categories.find({}).fetch() : [],
    subcats: isReady2 ? SubCategories.find({}).fetch(): [],
  };
 }, B2C);
</code></pre>

<p>It would be great if you could figure out what's happening or what mistake I'm making
Thanks</p>
","7799872","","","","","2017-09-01 18:21:16","TypeError of Meteor.subscribe function on using Meteor' server render in react router v4","<meteor><server><react-router>","1","0","","",""
"38489980","1","38573549","","2016-07-20 20:11:23","","1","104","<p>I get this error:</p>

<pre><code>Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.
</code></pre>

<p>When trying to use <code>ReactDOMServer.renderToStaticMarkup</code>.</p>

<p>This is my react app:</p>

<pre><code>""use strict"";
import React from 'react'

module.exports = () =&gt; {
    return (
        &lt;div&gt;&lt;/div&gt;
    );
};
</code></pre>

<p>And this is my node server rendering code:</p>

<pre><code>""use strict"";
const path = require('path');
const webpack = require('webpack');
const React = require('react'), ReactDOMServer = require('react-dom/server'),
DOM = React.DOM, body = DOM.body, div = DOM.div, script = DOM.script;
webpack({
    target: ""node"",
    entry: [
        path.resolve(__dirname, '../js', 'app.js'),
    ],
    module: {
        loaders: [
            {
                exclude: /node_modules/,
                loader: 'babel',
                test: /\.js$/,
            },
        ]
    },
    output: {filename: 'app.bundle.js', path: __dirname},
},() =&gt; {
    const App = React.createFactory(require('./app.bundle.js'));
    let html = ReactDOMServer.renderToStaticMarkup(body(null,
        div({
            id: 'root', dangerouslySetInnerHTML: {
                __html: ReactDOMServer.renderToString(App())
            }
        })
    ));
});
</code></pre>

<p>Does anyone have an idea what cause this error and how to fix this?</p>

<p>Thanks in advance.</p>
","2413761","","2413761","","2016-07-21 07:28:17","2016-07-25 16:58:24","got ""Element type is invalid: expected a string"" when trying to server side rendering react","<node.js><reactjs><webpack><server-rendering>","1","0","","",""
"39112673","1","39112706","","2016-08-24 00:31:21","","1","807","<p>I am rendering a react class using node js as so...</p>

<pre><code>var express = require('express');
var router = express.Router();

var React = require('react');
var reactDom = require('react-dom/server');
var App = React.createFactory(require('../components/index'));

router.get('/', function(req,res) {
    var reactHtml = reactDom.renderToString(App({}));
    res.render('../../tutorHub/views/index.jade', {reactOutput: reactHtml});
});
module.exports = router;
</code></pre>

<p>The page gets rendered fine, but no function that I add gets called. For example, in my <code>App</code> class...</p>

<pre><code>class App extends React.Component {
    constructor(props) {
        super(props);    
    }
    getClass() {
        return ""a_class"";
    }

    render() {
        return (
            &lt;div className={this.getClass}&gt;&lt;/div&gt;
        );
    }
}

module.exports = App;
</code></pre>

<p>The <code>getClass</code> function is not called. Instead the className becomes the code</p>

<pre><code>class = getClass() {
    return ""a_class"";
}
</code></pre>

<p>instead of simply <code>a_class</code> when I check the html. For some reason, rather than the function being called, it is simply saved as a string and placed in to the className.</p>

<p>Why is this happening? I am not able to call any functions I make. Can someone help me out?</p>
","4333347","","5108418","","2016-08-24 00:38:50","2016-08-24 00:38:50","react function not being called","<javascript><node.js><reactjs>","1","0","","",""
"47336589","1","47787935","","2017-11-16 18:19:03","","1","1025","<p>I am using <code>react-router-dom</code> and I am guessing that this is causing the problem, but I have no clue where to even start looking or how to fix it. I also am getting errors like <code>Warning: Did not expect server HTML to contain a &lt;nav&gt; in &lt;div&gt;</code>.</p>

<p>As I stated, I'm not really sure where to look so if you think there is certain code that would be helpful please let me know and I will post it. Otherwise, I can post my code that I use to do SSR.</p>

<p><strong>EDIT</strong>: Exact error: <code>Warning: Prop</code>href<code>did not match. Server: ""/profile/5a073dc44cb45b00125e5c82"" Client: ""profile/5a073dc44cb45b00125e5c82""</code></p>

<p>I have checked the client and it has <code>/profile/:id</code> so not sure where it says there is not a <code>/</code>, as for the other error with the <code>&lt;nav&gt;</code> in <code>&lt;div&gt;</code> , I have a <code>nav</code> inside my header , but I'm not really sure how to go about ""fixing"" that.</p>

<pre><code>import React from 'react';
import { renderToString } from 'react-dom/server';
import { StaticRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import { renderRoutes } from 'react-router-config';
import serialize from 'serialize-javascript';
import { Helmet } from 'react-helmet';
import { matchRoutes } from 'react-router-config';

import routes from './src/routes';
import createStore from './src/stores';

function handleRender(req, res) {
  let initial = {};

  if (req.vertexSession != null &amp;&amp; req.vertexSession.user != null) {
    initial.user = { currentUser: req.vertexSession.user };
  }
  const store = createStore.configure(initial); // create Store in order to get data from redux

  const promises = matchRoutes(routes, req.path)
    .map(({ route, match }) =&gt; {
      // Matches the route and loads data if loadData function is there
      return route.loadData
        ? route.loadData(store)
        : route.loadDataWithMatch ? route.loadDataWithMatch(store, match) : null;
    })
    .map(promise =&gt; {
      if (promise) {
        return new Promise((resolve, reject) =&gt; {
          promise.then(resolve).catch(resolve); // lets all data load even if route fails
        });
      }
    });

  Promise.all(promises).then(() =&gt; {
    const context = {};
    if (context.url) {
      return res.redirect(301, context.url); // redirect for non auth users
    }

    if (context.notFound) {
      res.status(404); // set status to 404 for unknown route
    }
    const content = renderToString(
      &lt;Provider store={store}&gt;
        &lt;StaticRouter location={req.path} context={context}&gt;
          &lt;div&gt;{renderRoutes(routes)}&lt;/div&gt;
        &lt;/StaticRouter&gt;
      &lt;/Provider&gt;
    );
    // console.log(store.getState());
    const initialState = serialize(store.getState());

    const helmet = Helmet.renderStatic();

    res.render('index', { content, initialState, helmet });
  });
}

module.exports = handleRender;
</code></pre>
","8551819","","8551819","","2017-11-16 18:28:51","2017-12-13 07:47:59","Warning Prop `href` did not match. using react server-side-rendering","<javascript><reactjs><server-side><serverside-rendering>","1","2","","",""
"39193496","1","","","2016-08-28 16:37:14","","0","181","<p>I am trying server-side rendering using node js, React, Redux and React-Router.</p>

<p>I followed react-router server-side tutorial but I am only getting root route, no matter what route I put. As you see in the routes.js, I have a route to detail.</p>

<p>I tried <strong>path=""detail""</strong> as well 
and Link is like below</p>

<pre><code> &lt;Link to=""/detail""&gt; Detail&lt;/Link&gt;
</code></pre>

<p>When I click that link, it does not even give me error like ""no matched route to /detail"".</p>

<p>If you want to see all codes - <a href=""https://github.com/intelcoder/pokedex-korean/tree/serverSide"" rel=""nofollow"">git repo</a></p>

<p>Here is my code</p>

<p><strong>routes.js</strong></p>

<pre><code>export default ([
    &lt;Route path=""/""  component={App}&gt;
        &lt;Route path=""/detail"" component={DetailView}/&gt;
    &lt;/Route&gt;
]);
</code></pre>

<p><strong>server.js</strong></p>

<pre><code>    app.get('/*',(req,res)=&gt;{
    match({ routes:routes, location: req.url }, (error, redirectLocation, renderProps) =&gt; {
        if (error) {
            res.status(500).send(error.message)
        } else if (redirectLocation) {
            res.redirect(302, redirectLocation.pathname + redirectLocation.search)
        } else if (renderProps) {
            const store =  createStore(Reducers);
            const html = renderToString(
                &lt;Provider store={store}&gt;
                    &lt;RouterContext {...renderProps} /&gt;
                &lt;/Provider&gt;
            );
            res.status(200).send(renderFullPage(html, store));
        } else {
            res.status(404).send('Not found')
        }
    })
});
</code></pre>

<p><strong>renderFullPage</strong> - this basically injects html from rederToString to html string </p>

<pre><code> &lt;div id=""app""&gt;${html}&lt;/div&gt;
 &lt;script&gt;
    window.__PRELOADED_STATE__ = ${JSON.stringify(preloadedState)}
 &lt;/script&gt;
</code></pre>

<p><strong>client.js(index.js)</strong></p>

<pre><code>const history =createBrowserHistory();
match({ history, routes }, (error, redirectLocation, renderProps) =&gt; {
    ReactDom.render(
        &lt;Provider store={store}  &gt;
            &lt;Router {...renderProps} /&gt;
        &lt;/Provider&gt; , document.getElementById('app'))
});
</code></pre>

<p><strong>App.js</strong> </p>

<pre><code>class App extends React.Component {
    render() {
        return (
            &lt;div&gt;
                &lt;div className=""container""&gt;
                    &lt;PokemonContainer /&gt;
                &lt;/div&gt;
            &lt;/div  &gt;
        )
    };
}
</code></pre>

<p>Thank you for look into it and please give me any opinion about this.</p>
","3882878","","3882878","","2016-08-28 18:26:55","2016-08-29 08:56:22","Server-side rendering(express) with react router does not work","<express><reactjs><redux><react-router>","2","0","","",""
"30962637","1","30963342","","2015-06-21 08:29:40","","2","1021","<p>An initial server rendering for my homepage route ( / ) works fine.</p>

<p>Also, subsequent client side navigation to ( /#/page2 ) works fine.</p>

<p>However, if I load /#/page2 directly from the address bar, the server rendered homepage loads in the browser first and then visibly transitions to /#/page2, which is not what I want. I want only /#/page2 to show up without first flashing the homepage.</p>

<p>What's happening is that node is serving up the homepage for the request to /, and then when the response hits the client, the client is running the route handler for /#/page2. Both are behaving correctly. But it's not what I want.</p>

<p>How do I avoid this behavior?</p>

<p>I think what I need is a way to for both the server and client to be aware of the different routes and both be able to handle them (isomorphically), however, the fragment part of the url is not known to the server.</p>

<p>Anyone else have this problem?</p>

<p>This problem isn't react specific. It is specific to SSR to a deep link.</p>

<p>My node router handles ""/"" as follows</p>

<pre><code>router.get('/', function(req, res) {
  var React = require('react');
  var Router = require('react-router');
  var Routes = require(""../app/clapi-routes.jsx"");

  var router = Router.create({location: req.url, routes: Routes});
  router.run(function(Handler, state) {
    var html = React.renderToString(&lt;Handler/&gt;);
    return res.render('index.ejs', {html:html});
  })
});
</code></pre>

<p>index.ejs is just:</p>

<pre><code>&lt;html lang=""en""&gt;
  &lt;head&gt;
  &lt;meta charset=""UTF-8""&gt;
  &lt;link rel=""stylesheet"" href=""/css/json-inspector.css""/&gt;
  &lt;/head&gt;
&lt;body style=""margin:0""&gt;
  &lt;%- html %&gt;
  &lt;script src=""/build/bundle.js""&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
","560585","","560585","","2015-06-22 06:56:17","2015-06-22 06:56:17","react server side rendering with client side routing","<javascript><reactjs><single-page-application><isomorphic-javascript>","2","5","3","",""
"39261851","1","39262248","","2016-09-01 02:34:41","","1","1455","<p>I am using node js to render my react component...</p>

<pre><code>var express = require('express');
var router = express.Router();

var React = require('react');
var reactDom = require('react-dom/server');
var App = React.createFactory(require('../components/index'));

router.get('/', function(req,res) {
    var reactHtml = reactDom.renderToString(App({exists: false}));
    res.render('../../tutorHub/views/index.jade', {reactOutput: reactHtml});
});
module.exports = router;
</code></pre>

<p>I am trying to pass a prop, <code>exists: false</code>, to the component.</p>

<p>But in my actual component when I try to <code>console.log</code>...</p>

<pre><code>render(){

    console.log(this.props.exists);
        return (
            &lt;Register /&gt;
        );
}
</code></pre>

<p>I get <code>undefined</code> rather than <code>true</code>.</p>

<p>How can I fix this? Is this because the browser is re-rendering the page?    </p>
","4333347","","","","","2016-09-01 03:27:28","how to pass prop server side react","<javascript><node.js><reactjs>","2","0","1","",""
"38465295","1","38492193","","2016-07-19 17:50:54","","0","107","<p>I have this router in my app:</p>

<pre><code>&lt;Router history={ browserHistory } &gt;
    &lt;Route path=""/"" component={Header}&gt;
        &lt;IndexRoute component={Main} /&gt;
        &lt;Route path=""view"" component={ViewItem} /&gt;
    &lt;/Route&gt;
&lt;/Router&gt;
</code></pre>

<p>Whenever I'm trying to render the /view it renders the indexroute for a split second and then renders the /view completely. Note: I'm using server side rendering for react-router.</p>

<p>Thanks</p>

<p>EDIT:</p>

<p>Server side code:</p>

<pre><code>router.get('/', function (req, res) {
    match({ routes, location: req.url }, (error, redirectLocation, renderProps) =&gt; {
        if (error) {
            res.status(500).send(error.message)
        } else if (redirectLocation) {
            res.redirect(302, redirectLocation.pathname + redirectLocation.search)
        } else if (renderProps) {
            // You can also check renderProps.components or renderProps.routes for
            // your ""not found"" component or route respectively, and send a 404 as
            // below, if you're using a catch-all route.

            const store = createStore(reducers);

            const html = renderToString(
                &lt;Provider store={store}&gt;
                    &lt;RouterContext {...renderProps} /&gt;
                &lt;/Provider&gt;
            )

            const initialState = store.getState();
            res.status(200).send(renderFullPage(html, initialState));
        } else {
            res.status(404).send('Not found')
        }
    })
});


function renderFullPage(html, initialState) {
    return `
    &lt;!DOCTYPE html&gt;
    &lt;html lang=""en""&gt;
    &lt;head&gt;
        &lt;!-- Required meta tags always come first --&gt;
        &lt;meta charset=""utf-8""&gt;
        &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1, shrink-to-fit=no""&gt;
        &lt;meta http-equiv=""x-ua-compatible"" content=""ie=edge""&gt;

        &lt;!-- Bootstrap CSS --&gt;
        &lt;link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/css/bootstrap.min.css"" integrity=""sha384-y3tfxAZXuh4HwSYylfB+J125MxIs6mR5FOHamPBG064zB+AFeWH94NdvaCBm8qnd"" crossorigin=""anonymous""&gt;
        &lt;link rel=""stylesheet"" href=""stylesheets/main.css""&gt;
    &lt;/head&gt;
    &lt;body&gt;

        &lt;div id=""reactbody""&gt;&lt;div&gt;${html}&lt;/div&gt;&lt;/div&gt;
        &lt;script&gt;
            window.__INITIAL_STATE__ = ${JSON.stringify(initialState)}
          &lt;/script&gt;
        &lt;script src=""../bin/app.bundle.js""&gt;&lt;/script&gt;
        &lt;!-- jQuery first, then Bootstrap JS. --&gt;
        &lt;script src=""https://www.atlasestateagents.co.uk/javascript/tether.min.js""&gt;&lt;/script&gt;
        &lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js""&gt;&lt;/script&gt;
        &lt;script src=""https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/js/bootstrap.min.js"" integrity=""sha384-vZ2WRJMwsjRMW/8U7i6PWi6AlO1L79snBrmgiDpgIWJ82z8eA5lenwvxbMV1PAh7"" crossorigin=""anonymous""&gt;&lt;/script&gt;
    &lt;/body&gt;
    &lt;/html&gt;
    `
}
</code></pre>
","4230471","","4230471","","2016-07-20 21:56:38","2016-07-20 22:55:44","react-router jumping from IndexRoute when rendering child route","<reactjs>","2","4","1","",""
"47584828","1","","","2017-12-01 00:26:01","","0","240","<p>I am building an isomorphic react-redux app on top of NodeJS. I am rendering my homePage from the server. However, my styles are not reflected in my rendered view. I would like to import stylesheets just how I do it on the client side. I tried <a href=""https://stackoverflow.com/questions/36507147/webpack-es6-how-to-import-stylesheets"">this article</a> and <a href=""https://stackoverflow.com/questions/30347722/importing-css-files-in-isomorphic-react-components"">this</a> too, but neither of them actually got me what I want to achieve.</p>

<p>Here are more details on the project.</p>

<p>.babelrc</p>

<pre><code>{
 ""presets"": [ ""es2015"", ""react"", ""stage-0""],
 ""plugins"": [""transform-decorators-legacy"", [""transform-assets"", {
            ""extensions"": [""scss""],
            ""name"": ""[name].[ext]?[sha512:hash:base64:7]"",
          }]]
 }
</code></pre>

<p>webpack.config.js</p>

<pre><code>const path = require('path');
module.exports = [
    {
      name: 'client',
      target: 'web',
      entry: './routes/client.jsx',
      output: {
        path: path.join(__dirname, 'assets'),
        filename: 'client.js',
        publicPath: '/assets/',
      },
      resolve: {
        extensions: ['.js', '.jsx']
      },
      devtool: 'source-map',
      module: {
        rules: [
            {
                test: /\.(js|jsx)$/,
                exclude: /(node_modules\/)/,
                use: [{ loader: 'babel-loader'}]
            },
            {
                test: /\.scss$/,
                use: [
                    { loader: 'isomorphic-style-loader' },
                    {
                        loader: 'css-loader',
                        options: {
                            modules: true,
                            importLoaders: 1,
                            localIdentName: '[name]__[local]___[hash:base64:5]',
                            sourceMap: true
                        }
                    },
                    { loader: 'sass-loader'}
                ]
            }
        ],
    },
}];
</code></pre>

<p>server.js</p>

<pre><code>import express from 'express'
import React from 'react'
import { createStore } from 'redux'
import { Provider } from 'react-redux'
import MainStore from './views/store/MainStore'
import { StaticRouter } from 'react-router-dom';
import Routes from './routes/routes';
import Template from './views/templates/template';
import { Helmet } from 'react-helmet';
import { renderToString } from 'react-dom/server'
import ReactDOMServer from 'react-dom/server';
import ContextProvider from './routes/contextProvider'

const webpackDevMiddleware = require('webpack-dev-middleware')
const config = require('./webpack/webpack.development.config.js')
const webpack = require('webpack')
const app = express()
const port = 3000
const compiler = webpack(config);

let preloadedState = { shipper: {view: ""from_server""} }

app.use('/assets', express.static('./assets'))
app.use(webpackDevMiddleware(compiler, {
   publicPath: ""/assets/"",
}));

app.use(handleRender);

function handleRender(req, res) {
   // Create a new Redux store instance
   const store = createStore(MainStore, preloadedState)
   const css = new Set(); // CSS for all rendered React components
   const context = { insertCss: (...styles) =&gt; styles.forEach(style =&gt;   
   css.add(style._getCss())) }

   const html = renderToString(
     &lt;Provider store={store}&gt;
        &lt;StaticRouter context={context}&gt;
            &lt;ContextProvider context={context}&gt;
            &lt;Routes /&gt;
        &lt;/ContextProvider&gt;
        &lt;/StaticRouter&gt;
     &lt;/Provider&gt;
  )
  const finalState = store.getState()
  const helmet = Helmet.renderStatic();
  const preloadedState = store.getState()
  res.send(renderFullPage(html, preloadedState));
 }

 function renderFullPage(html, finalState) {
    return `
      &lt;!doctype html&gt;
      &lt;html&gt;
         &lt;head&gt;
            &lt;title&gt;Redux Universal Example&lt;/title&gt;
            &lt;style type=""text/css""&gt;${[...css].join('')}&lt;/style&gt;
         &lt;/head&gt;
         &lt;body&gt;
             &lt;div id=""root""&gt;${html}&lt;/div&gt;
             &lt;script&gt;
                window.__PRELOADED_STATE__ = ${JSON.stringify(preloadedState).replace(/&lt;/g, '\\u003c')}
             &lt;/script&gt;
             &lt;script src=""./assets/client.js""&gt;&lt;/script&gt;
         &lt;/body&gt;
    &lt;/html&gt;
    `
  }

app.listen(port)
</code></pre>

<p>contextProvider.js</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Routes from './routes.jsx';

export default class ContextProvider extends Component {
   static childContextTypes = {
   insertCss: PropTypes.func,
}

 getChildContext() {
    return { ...this.props.context }
  }

 render() {
    const { children, ...props } = this.props
    return React.cloneElement(children, props)
  }
}
</code></pre>

<p>I am importing it in my homePresenter as</p>

<pre><code>import homePageStyle from './home.scss';
</code></pre>

<p>and using it in my div in the same component as </p>

<pre><code>&lt;div className=""component""&gt;
</code></pre>

<p>If I change this to</p>

<pre><code>&lt;div className={homePageStyle.component}&gt;
</code></pre>

<p>I get an error on the browser </p>

<pre><code>TypeError: style._getCss is not a function at server.js:52:84
</code></pre>

<p>On the browser, I could see that the div has class name as 'component'; it;'s just it is not inheriting the styles.</p>

<p>Any suggestions on what I am missing here?</p>
","6164284","","6164284","","2017-12-02 23:12:42","2017-12-06 10:24:13","Importing stylesheet in a server rendered react view - TypeError: style._getCss is not a function","<reactjs><sass><redux><isomorphic-style-loader>","1","2","","",""
"47339342","1","","","2017-11-16 21:26:24","","0","130","<p>I am using react/redux/node/express</p>

<p>I have an app that has initial state loaded by using SSR. The home page works just fine except a warning about <code>Prop href did not match...</code>. Otherwise everything that is suppose to be rendered and loaded in the initial state is.</p>

<p>The problem comes when I click on a <code>&lt;Link&gt;</code> tag for example, one of my link tags are <code>&lt;Link to='/users'&gt;</code>. This is what happens:</p>

<p><a href=""https://i.stack.imgur.com/tdsj0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tdsj0.png"" alt=""enter image description here""></a></p>

<p>Now when I first saw this I thought that I just had loaded the initial state incorrectly on the server side however if we view the page source the exact data I want is indeed there:</p>

<p><a href=""https://i.stack.imgur.com/nC0Yc.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nC0Yc.png"" alt=""enter image description here""></a></p>

<p>So a couple of things to note here that I have tried.</p>

<ol>
<li>Going directly to <code>localhost:3000/users</code> will load the page correctly.</li>
<li>Refreshing the page after navigating to it will also load the page correctly.</li>
<li>Using an <code>&lt;a&gt;</code> tag instead will fix the problem (I want to use the Link tag)</li>
</ol>

<p>Here is what runs over every express route to do SSR:</p>

<pre><code>import React from 'react';
import { renderToString } from 'react-dom/server';
import { StaticRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import { renderRoutes } from 'react-router-config';
import serialize from 'serialize-javascript';
import { Helmet } from 'react-helmet';
import { matchRoutes } from 'react-router-config';

import routes from './src/routes';
import createStore from './src/stores';

function handleRender(req, res) {
  let initial = {};

  if (req.vertexSession != null &amp;&amp; req.vertexSession.user != null) {
    initial.user = { currentUser: req.vertexSession.user };
  }
  const store = createStore.configure(initial); // create Store in order to get data from redux

  const promises = matchRoutes(routes, req.path)
    .map(({ route, match }) =&gt; {
      // Matches the route and loads data if loadData function is there
      return route.loadData
        ? route.loadData(store)
        : route.loadDataWithMatch ? route.loadDataWithMatch(store, match) : null;
    })
    .map(promise =&gt; {
      if (promise) {
        return new Promise((resolve, reject) =&gt; {
          promise.then(resolve).catch(resolve); // lets all data load even if route fails
        });
      }
    });

  Promise.all(promises).then(() =&gt; {
    const context = {};
    if (context.url) {
      return res.redirect(301, context.url); // redirect for non auth users
    }

    if (context.notFound) {
      res.status(404); // set status to 404 for unknown route
    }
    console.log(req.url);
    const content = renderToString(
      &lt;Provider store={store}&gt;
        &lt;StaticRouter location={req.url} context={context}&gt;
          &lt;div&gt;{renderRoutes(routes)}&lt;/div&gt;
        &lt;/StaticRouter&gt;
      &lt;/Provider&gt;
    );
    // console.log(store.getState());
    const initialState = serialize(store.getState());

    const helmet = Helmet.renderStatic();

    res.render('index', { content, initialState, helmet });
  });
}

module.exports = handleRender;
</code></pre>
","8551819","","","","","2017-11-16 21:26:24","<Link> tag in does not render redux state in server side rendering for react","<javascript><reactjs><serverside-rendering><react-router-dom>","0","0","","",""
"39668467","1","","","2016-09-23 19:45:33","","1","131","<p>I am having troubles to render different components on on diff URL.</p>

<p>In the app views are rendered with node on server, but for some reason it shows the same page for any url.</p>

<p>app.js</p>

<pre><code>/** @jsx React.DOM */
var React = require('react');
var ReactDOM = require('react-dom');

var Router = require('react-router').Router;
var Route = require('react-router').Route;
var hashHistory = require('react-router').hashHistory;

var MyApp = require('./components/MyApp.react');
var Test = require('./components/Test.react');

ReactDOM.render(
  &lt;Router history={hashHistory}&gt;
    &lt;Route path=""/"" component={MyApp}/&gt;
    &lt;Route path=""/test"" component={Test}/&gt;
  &lt;/Router&gt;,
  document.getElementById('myapp-app')
);
</code></pre>

<p>MyApp.react.js</p>

<pre><code>var React = require('react');

module.exports = MyApp = React.createClass({
render: function(){
return (&lt;div&gt;home&lt;/div&gt;)
      }
    });
</code></pre>

<p>Test.react.js</p>

<pre><code>var React = require('react')
module.exports = Test = React.createClass({
  render: function(){
    return (&lt;div&gt;test&lt;/div&gt;)
  }
});
</code></pre>

<p>server.js</p>

<pre><code>var app = express();    
...here i omit other settings...
app.get('/', routes.index);
app.get('/test', routes.test);
</code></pre>

<p>routes.js</p>

<pre><code>module.exports = {
  index: function(req, res) {
    res.render('home',{
        markup:ReactDOMServer.renderToString(MyApp())
      }
    );
},
  test: function(req,res){
    res.render('test',{
        markup:ReactDOMServer.renderToString(Test())
      }
    );
  }
}
</code></pre>

<p>home.handlebars</p>

<pre><code>&lt;div&gt;{{{markup}}}&lt;/div&gt;
</code></pre>

<p>test.handlebars</p>

<pre><code>&lt;div&gt;{{{markup}}}&lt;/div&gt;
</code></pre>

<p>Things work for me, but each time for both - / and /test i get same - home page...</p>
","2915603","","2915603","","2016-09-23 20:20:36","2016-09-23 20:20:36","Multipage react app","<node.js><reactjs>","0","8","","",""
"40815996","1","","","2016-11-26 07:23:27","","0","240","<p>While I try to <code>renderToString</code> in my server.js file, it says:</p>

<blockquote>
  <p>Invariant Violation: Could not find ""store"" in either the context or props of ""Connect(Show)"". Either wrap the root component in a , or explicitly pass ""store"" as a prop to ""Connect(Show)"".</p>
</blockquote>

<p>I am trying to run my app with react-helmet.</p>

<p><strong>server.js</strong></p>

<pre><code>require('babel-core/register');

const renderToString = require('react-dom/server').renderToString;
var express          = require('express');
const path           = require('path');
const RouterContext  = require('react-router').RouterContext;
const match          = require('react-router').match;
const Router         = require('react-router').Router;
const React          = require('react');
const ReactDOM       = require('react-dom');
const Helmet         = require('react-helmet');
const routes         = require('./src/routes');


console.log('1');
const port = process.env.PORT || 8080 ;
var app = express();

app.set('port', process.env.PORT || 8080);
app.use(express.static(__dirname));


app.get('*', (req, res) =&gt; {
    match({routes: routes.default, location: req.url}, (err, redirectLocation, renderProps)=&gt; {
        console.log('2');
        console.log(err);
        if (err) {
            return res.status(500).send(err.message);
        }
        if (redirectLocation) {
            return res.redirect(302, redirectLocation.pathname + redirectLocation.search);
        }
        console.log('3');
        let markup;
        let rendered = renderToString(React.createElement(RouterContext , renderProps));
        console.log('4');
        let head = Helmet.rewind();
        if (renderProps) {
            markup = `
            &lt;!DOCTYPE html&gt;
            &lt;html&gt;
              &lt;head&gt;
                &lt;meta charset=""utf-8""/&gt;
                ${head.title}
                ${head.meta}
                ${head.link}
              &lt;/head&gt;
              &lt;body&gt;
                &lt;div id=""app""&gt;
                ${rendered}
                &lt;/div&gt;
                &lt;script src=""bundle.js""&gt;&lt;/script/&gt;
              &lt;/body&gt;
            &lt;/html&gt;`
        }
        console.log('5');
        res.write(markup);
        res.end();
        console.log('6');

    });

});

app.listen(port);
console.log('Server started!');
</code></pre>

<p><strong>routes.js</strong></p>

<pre><code>import React from 'react';
import { Route, IndexRoute } from 'react-router';
import App from './components/app';
import Show from './components/show';


const routes = (
    &lt;Route path=""/"" component={App}&gt;
        &lt;Route path=""/:id"" component={Show}/&gt;
    &lt;/Route&gt;
);

export default routes;
</code></pre>

<p><strong>src/index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';
import { Router, browserHistory } from 'react-router';
import reducers from './reducers';
import routes from './routes';
import promise from 'redux-promise';

const createStoreWithMiddleware = applyMiddleware(promise)(createStore);

ReactDOM.render(
  &lt;Provider store={createStoreWithMiddleware(reducers)}&gt;
    &lt;Router history={browserHistory} routes={routes} /&gt;
  &lt;/Provider&gt;
  , document.querySelector('.container'));
</code></pre>
","1666543","","1848578","","2016-11-26 07:28:21","2016-11-26 19:33:32","renderToString could not find store","<node.js><reactjs><react-router>","1","1","","",""
"39933051","1","39933473","","2016-10-08 13:37:32","","0","377","<p>I searched a lot and didn't find any implementation to load data async in react server side before render the markup without any flux (redux) implementation. 
Here's the view (both api and views together):</p>

<pre><code>class Home extends React.Component {
  constructor(props) {
    super(props); 
    this.state = {meta: []};
  }

  componentDidMount() {
    Request.get('http://example.com/api/users').then((resp) =&gt; {
      this.setState({meta: resp.body});
    });

  }

  render() {
    return (
      &lt;div&gt;
        {this.state.meta.map((m, i) =&gt; {
          &lt;p key={i}&gt;{m.user}&lt;/p&gt;
        })}
    );
  }
}
</code></pre>

<p>The router file (router.js):</p>

<pre><code>export default (
    &lt;Route component={App} path=""/""&gt;
        &lt;IndexRoute component={Home}/&gt;
    &lt;/Route&gt;
);
</code></pre>

<p>And this is what I use on server (with react-router) </p>

<pre><code>app.use((req, res) =&gt; {

    Router.match({routes: routes, location: req.url}, (err, redirectLocation, renderProps) =&gt; {
        if(err) res.status(500).send(err.message);

        else if(redirectLocation)
            res.status(302).redirect(redirectLocation.pathname + redirectLocation.search);

        else if(renderProps) {
                var html = ReactDOM.renderToString(&lt;RouterContext {...renderProps}/&gt;);
                res.render(""layout"", {body: html});
        }
        else res.status(404).send(""Page not Found"");
    })
});
</code></pre>

<p>I know some basic thing that attach api calls to each router url and then resolve the <code>renderToString()</code> after that. But I don't understand how to do that with react-router.
I don't want to use any library or flux or redux implementation.</p>
","2092405","","","","","2016-10-08 14:19:18","How to render component in react server side with async data","<javascript><reactjs><react-router><server-rendering>","1","0","0","",""
"30662401","1","","","2015-06-05 08:59:17","","1","558","<p>My simple web app have two pages. (Express as server)</p>

<p>/home</p>

<p>/item</p>

<ol>
<li><p>To test if the page is render in both server and client. I print a text to the console. I can see the text 'render' in console of server and client, if i directly type the url localhost:3000/item in browser. However, if I access the item page via the <code>&lt;Link to=""item""&gt;Item&lt;/Link&gt;</code> in home page. I can see the 'render' in client side only but not in server side? So I think it is not render in server side. Or am I misunderstanding something? can anyone tell me?</p></li>
<li><p>another question is: I would like to use the same code to generate a phonegap app running in android. Is there a problem if I use React server side rendering? Or should I use React client side rendering and then call a restful to get data?</p></li>
<li><p>one more question: 
when I use this code in server it give me a ""unexpected token &lt;"" error</p></li>
</ol>

<p>React.renderToString(&lt; Handler /&gt;)</p>

<p>So that I changed to </p>

<pre><code>React.renderToString(React.createElement(Handler))
</code></pre>

<p>How to setup the server so that it know how to parse jsx code?</p>

<p>Thanks everyone</p>

<p>item.js</p>

<pre><code>var React = require('react'),
DOM = React.DOM, div = DOM.div, button = DOM.button, ul = DOM.ul, li = DOM.li    

// This is just a simple example of a component that can be rendered on both
// the server and browser

module.exports = React.createClass({
    getInitialState: function() {
        console.log('getInitialState');      
        return {
            count: 0//this.props.initialCount
        };
    },

    _increment: function() {
      console.log('_increment');
      this.setState({ count: this.state.count + 1 });
    },

    render: function() {
        console.log('render');
        return div({onClick:this._increment}, this.state.count);                  
    }
});
</code></pre>

<p>server.js</p>

<pre><code>app.use(function (req, res) {
  Router.run(routes, req.path, function (Handler) {    
    res.send('&lt;!DOCTYPE html&gt;' + React.renderToString(React.createElement(Handler)));
  });
});
</code></pre>

<p>browser.js</p>

<pre><code>var React = require('react');
var Router = require('react-router');
var routes = require('./routes');

//var Info = require ('./pages/info.jsx');


 /*React.render(
        &lt;h1&gt;Hello, world!&lt;/h1&gt;,
        document.getElementById('main')
      );*/

Router.run(routes, Router.HistoryLocation, function (Handler) {
  React.render(&lt;Handler /&gt;, document);
});
</code></pre>
","2902485","","2902485","","2015-06-05 09:08:35","2015-06-07 20:37:28","React Server Side Rendering with react-router","<reactjs><react-router>","1","3","1","",""
"48811204","1","","","2018-02-15 15:51:25","","1","180","<p>After I implementing async routes (I use <a href=""https://github.com/smooth-code/loadable-components"" rel=""nofollow noreferrer"">loadable-components</a>) with my react SSR project. I found the <code>staticContext</code> won't work. If I use static route component instead of async component the <code>staticContext</code> works as expectation. Any suggestion for it?</p>

<p>Here's my <code>NotFound</code> page:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import Helmet from 'react-helmet';

import styles from './styles.scss';

type Props = { staticContext: Object };

export default ({ staticContext }: Props) =&gt; {
  // I assing the 404 status here
  if (staticContext) staticContext.status = '404';

  return (
    &lt;div className={styles.NotFound}&gt;
      &lt;Helmet title=""Oops"" /&gt;
      &lt;p&gt;Oops, Page was not found!&lt;/p&gt;
    &lt;/div&gt;
  );
};</code></pre>
</div>
</div>
</p>

<p>Then I check the status from my <code>server.js</code>:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>...

const staticContext = {};
      const AppComponent = (
        &lt;Provider store={store}&gt;
          {/* Setup React-Router server-side rendering */}
          &lt;StaticRouter location={req.url} context={staticContext}&gt;
            {renderRoutes(routes)}
          &lt;/StaticRouter&gt;
        &lt;/Provider&gt;
      );

      if (staticContext.url) {
        res.status(301).setHeader('Location', staticContext.url);
        res.end();

        return;
      }

      // Extract loadable state from application tree (loadable-components setup)
      getLoadableState(AppComponent).then(loadableState =&gt; {
        const head = Helmet.renderStatic();
        const assets = webpackIsomorphicTools.assets();
        const htmlContent = renderToString(AppComponent);
        const initialState = store.getState();
        const loadableStateTag = loadableState.getScriptTag();

        // I can't get the ""404"" error 
        const status = staticContext.status === '404' ? 404 : 200;

...</code></pre>
</div>
</div>
</p>

<p>react: 16.2.0
react-router: 4.2.2
node: 9.5.0</p>
","4362337","","4362337","","2018-02-15 17:47:39","2018-02-15 17:47:39","How to get react-router v4 ""staticContext"" working with async routes?","<reactjs><react-router><code-splitting>","0","0","","",""
"48465652","1","","","2018-01-26 16:38:02","","0","79","<p>I'm using Sails JS and I would like to use React for the front. I already did a grunt task with babel and browserify to generate a single js file where will be my React app for the front part.</p>

<p>Now to implement isomorphism, in my sails controller, I would like to transform a component to a string that I could just pass to the view, but I have an error on the line where is reactDOMServer.renderToString.</p>

<pre><code>list: function(req, res) {
fs.readFile('assets/jsx/component/App.jsx', function (err, data) {
  const component = sails.react.createFactory(data.toString());
  const html = sails.reactDOMServer.renderToString(component());
  console.log(html);
  res.view(""view/myview"", {html: html});
});
}
</code></pre>

<p>This is the error :</p>

<p><a href=""https://i.stack.imgur.com/5bsZd.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5bsZd.png"" alt=""sails react error server side""></a></p>

<p>I guess I should do something like this to get my component</p>

<pre><code>var component = require(""assets/jsx/components/App.js"")
</code></pre>

<p>But I don't find how to require something in a sails controller.</p>

<p>Could you please help me or put me on the right way ?</p>

<p>I was helping me of this tutorials which is not with sails : <a href=""http://soat.developpez.com/tutoriels/node-js/introduction-isomorphisme-react-node-js/"" rel=""nofollow noreferrer"">http://soat.developpez.com/tutoriels/node-js/introduction-isomorphisme-react-node-js/</a></p>

<p>Here is my App.jsx : </p>

<pre><code>import React, { Component } from 'react';

class App extends Component {

  render() {
     return (
      &lt;p&gt;Trol&lt;/p&gt;
  );
 }
}

export default App;
</code></pre>
","5077962","","","","","2018-01-26 16:38:02","Sails + React ReactDOMServer.renderToString error","<node.js><reactjs><sails.js><server-side><isomorphism>","0","0","","",""
"32392585","1","","","2015-09-04 07:36:02","","3","243","<p>I'm trying to find a way to lower the possibilities for mistake when working with three tiers of information. Let me try to explain.</p>

<p>I'm building a web app with: </p>

<ul>
<li>Node.js</li>
<li>mongodb</li>
<li>react (with server side rendering)</li>
<li>flux (alt.js)</li>
<li>browserify</li>
</ul>

<p>The data flows can be one of these two:</p>

<ol>
<li><p>User ask for a page -> data helper getting the proper data from the db -> passing to alt.js bootstrap to fill all the stores -> asking react to build the app (renderToString) and components rendering the view -> retuning to the client</p></li>
<li><p>User updates something -> flux action is sent (calling server with ajax) -> data helper preparing the data to be saved in the db -> saving and returning the result to the client -> store updates the state -> react component updates his view</p></li>
</ol>

<p>There are three places that need to know the data structure: </p>

<ol>
<li>The data helper in the server that export the proper data from the data structure and send to the mongodb or gets the data from the db and build the data structure</li>
<li>The flux store that updates his state after user action</li>
<li>The component that render the view from the state</li>
</ol>

<p>This means that if I want to change the data structure (even if to change the name of one of the properties) I will have to change it in three places which can be very risky and prone for mistakes.</p>

<p>Is there a way to achieve data coupling in JS?</p>
","628659","","628659","","2015-09-04 19:11:12","2015-09-04 19:11:12","Strategies for data coupling when working with node.js + react server side rendering + flux + mongodb","<javascript><node.js><mongodb><reactjs>","2","6","","",""
"48880731","1","","","2018-02-20 08:27:43","","1","306","<p>I'm trying to render react application on server, but it seems that renderToString function doesn't render routes html only header and footer. By looking at the code of the page you can see only the header and footer that the server returned from App.js. But the code that is in the routes is not on the page.</p>

<p>I'm using React-Router v4. My code looks like this:</p>

<p>server.js</p>

<pre><code>import express from 'express';
import React from 'react';
import { renderToString } from 'react-dom/server';
import {StaticRouter} from 'react-router-dom';
import createMemoryHistory from 'history/createMemoryHistory';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';
import { ConnectedRouter, routerMiddleware } from 'react-router-redux';
import { multiClientMiddleware } from 'redux-axios-middleware';
import ReactDOMServer from 'react-dom/server';
import api from ""../src/actions/api"";
import rootReducer from ""../src/reducers/index"";
import routes from '../src/routes/routes';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import getMuiTheme from 'material-ui/styles/getMuiTheme';
import Helmet from ""react-helmet"";
import render from './render';

const app = express();

global.navigator = { userAgent: 'all' };
app.use(express.static('assets'));

app.get('*', (req,res)=&gt;{
const helmet = Helmet.renderStatic();
const axiosMiddlewareOptions = {};
const history = createMemoryHistory();
const appRouterMiddleware = routerMiddleware(history);
const createStoreWithMiddleware = applyMiddleware(multiClientMiddleware(api, axiosMiddlewareOptions), appRouterMiddleware)(createStore);
const store = createStoreWithMiddleware(rootReducer);

const context = {};

const appWithRouter = (
    &lt;Provider store={store}&gt;
        &lt;MuiThemeProvider muiTheme={getMuiTheme()}&gt;
            &lt;StaticRouter location={req.url} context={context}&gt;
                &lt;ConnectedRouter history={history} children={routes}/&gt;
            &lt;/StaticRouter&gt;
        &lt;/MuiThemeProvider&gt;
    &lt;/Provider&gt;
);

if (context.url) {
    res.redirect(context.url);
    return
}

const html = ReactDOMServer.renderToString(appWithRouter);

res.status(200).send(render(html, helmet))
});

app.listen(8080, ()=&gt;{
    console.log('Server is Listening')
});
</code></pre>

<p>render.js</p>

<pre><code>export default (html, helmet) =&gt; `
    &lt;!DOCTYPE html&gt;
    &lt;html ${helmet.htmlAttributes.toString()}&gt;
        &lt;head&gt;
            &lt;meta charset=""UTF-8""&gt;
            ${helmet.title.toString()}
            &lt;base href=""/""/&gt;
            &lt;link href=""./img/favikin-hw.png"" rel=""shortcut icon"" type=""image/x-icon"" /&gt;
            &lt;link href=""./build/stylesheet.css"" rel=""stylesheet""&gt;
            &lt;meta name=""viewport"" content="" width=device-width, maximum-scale=1""&gt;
        &lt;/head&gt;

        &lt;body&gt;
            &lt;div class=""wrapper""&gt;${html}&lt;/div&gt;
            &lt;script type=""text/javascript"" src=""./build/app.js""&gt;&lt;/script&gt;
        &lt;/body&gt;
    &lt;/html&gt;

`;
</code></pre>

<p>App.js</p>

<pre><code>import React, { Component, PropTypes } from ""react"";
import Header from '../components/Header/Header';
import Footer from '../components/Footer/Footer';


class App extends Component {
  render() {
    return (
        &lt;div className=""wrapper-box""&gt;
            &lt;div className=""inner-wrapper""&gt;
                &lt;Header/&gt;
                {this.props.children}
            &lt;/div&gt;
            &lt;Footer/&gt;
        &lt;/div&gt;
    );
   }
  }

 App.propTypes = {
    children: PropTypes.object.isRequired
 };

 export default App;
</code></pre>

<p>roures.js</p>

<pre><code>import React from 'react';
import App from '../containers/App';
import {
   Route,
   Switch
} from 'react-router-dom';
import MainPage from '../containers/MainPage/MainPage';
import DetailPage from '../components/DetailPage/DetailPage';
import AboutProject from '../containers/AboutProject/AboutProject';
import Contacts from '../containers/Contacts/Contacts';
import SectionPage from '../containers/SectionPage/SectionPage';
import SearchPage from '../containers/SearchPage/SearchPage';
import NoMatch from '../containers/NoMatch/NoMatch';


export default (
&lt;App&gt;
&lt;div&gt;
    &lt;Switch&gt;
        &lt;Route exact={true} path='/' component={MainPage} /&gt;
        &lt;Route path='/about_the_project' component={AboutProject} /&gt;
        &lt;Route path='/contacts' component={Contacts} /&gt;
        &lt;Route path=""/search-results/:category/:term"" component={SearchPage}/&gt;
        &lt;Route exact={true} path='/:name' component={SectionPage} /&gt;
        &lt;Route path=""/articles/:slug"" component={DetailPage}/&gt;
        &lt;Route path=""/events/:slug"" component={DetailPage}/&gt;
        &lt;Route path=""/news/:slug"" component={DetailPage}/&gt;
        &lt;Route path=""/interviews/:slug"" component={DetailPage}/&gt;
        &lt;Route path=""/technologies/:slug"" component={DetailPage}/&gt;
        &lt;Route path='*' component={NoMatch}/&gt;
    &lt;/Switch&gt;
&lt;/div&gt;
&lt;/App&gt;
)
</code></pre>

<p>client.js</p>

<pre><code>import React from 'react';
import { render } from 'react-dom';
import createBrowserHistory from 'history/createBrowserHistory';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';
import { ConnectedRouter, routerMiddleware } from 'react-router-redux';
import { multiClientMiddleware } from 'redux-axios-middleware';
import api from ""./actions/api"";
import rootReducer from ""./reducers/index"";
import routes from './routes/routes';
import { BrowserRouter } from 'react-router-dom';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import '../assets/css/bootstrap.min.css';
import '../assets/style.css';
import '../node_modules/react-datetime/css/react-datetime.css';
import '../node_modules/react-select/dist/react-select.min.css';

const axiosMiddlewareOptions = {};

const history = createBrowserHistory();
const appRouterMiddleware = routerMiddleware(history);
const createStoreWithMiddleware = applyMiddleware(multiClientMiddleware(api, axiosMiddlewareOptions), appRouterMiddleware)(createStore);
const store = createStoreWithMiddleware(rootReducer, {}, window.devToolsExtension ? window.devToolsExtension() : f =&gt; f);

render(
&lt;Provider store={store}&gt;
    &lt;MuiThemeProvider&gt;
        &lt;ConnectedRouter history={history} children={routes}/&gt;
    &lt;/MuiThemeProvider&gt;
&lt;/Provider&gt;,
document.querySelector('.wrapper'));
</code></pre>
","9338466","","","","","2018-02-20 08:27:43","Server Side Rendering - ReactDOMServer.renderToString returns empty routes html (router 4)","<reactjs><react-router><react-redux><react-router-v4><server-rendering>","0","2","1","",""
"48829972","1","","","2018-02-16 15:29:15","","0","51","<p>I've only been developing with Meteor 1.4 for a while, and now made the jump to 1.6. Things sure have changed (for the worse).</p>

<p>Meteor used to be so easy to get started with. Now everything is a jumbled mess. It seems like every package wants to insert itself right at the start, so that you can't just import it and use it anymore, you have to change the setup/boilerplate of your app to get it to work. That also means the official documentation is useless because it can't account for every package you want to use.</p>

<p>Anyway, I want to get started with <code>react-router</code> and <code>server-render</code>, which also requires <code>react-helmet</code> (I think). All of these are new to me and hey, they want to insert themselves right away and they all have awful documentation to begin with. </p>

<p>Here's what I have so far, based on googling:</p>

<p><strong><code>lib/main.js</code>:</strong></p>

<pre><code>import React from 'react'

import { Helmet } from 'react-helmet'

import App from '../imports/ui/App.js'

if (Meteor.isClient) {
  import { hydrate } from 'react-dom'

  hydrate(&lt;App /&gt;, document.getElementById('app'))
}

else {
  import { renderToString } from 'react-dom/server'
  import { onPageLoad } from 'meteor/server-render'
  import NodeCache from 'node-cache'

  const renderCache = new NodeCache({stdTTL: 432000})

  onPageLoad((sink) =&gt; {
    const path = sink.request.url.path
    let htmlString = renderCache.get(path)
    if (!htmlString) {
      htmlString = renderToString(&lt;App location={path} /&gt;)
      const helmet = Helmet.renderStatic()

      renderCache.set(path, htmlString)
      renderCache.set(path + ""_title"", helmet.title.toString())
      renderCache.set(path + ""_meta"", helmet.meta.toString())
      renderCache.set(path + ""_link"", helmet.link.toString())
    }

    sink.appendToHead(renderCache.get(path + ""_title""))
    sink.appendToHead(renderCache.get(path + ""_meta""))
    sink.appendToHead(renderCache.get(path + ""_link""))
    sink.renderIntoElementById(""app"", htmlString);
  })

}
</code></pre>

<p>And then <code>App.js</code> is just an empty component right now.</p>

<p>I don't know where to put my routing, or how (the docs assume you already know, for some reason). I think it also needs to insert itself in the <code>hydrate()</code> method on the client, but the example I got it from did not do that so I don't really know.</p>

<p>I don't know whether to put my <code>main.html</code> on the client or both client and server.</p>

<p><strong>I don't know how to set titles and meta tags and whatnot for each route.</strong> (I thought this would actually be in the documentation for <code>react-helmet</code> since that's all it's supposed to do but no...)</p>

<p>Can anyone help me with the rest of this boilerplate? I have no idea what's going on in the Meteor world anymore.</p>
","4746897","","","","","2018-02-16 15:29:15","Meteor setup (boilerplate) with server-render and react-router?","<javascript><reactjs><meteor>","0","2","","",""
"48707030","1","","","2018-02-09 13:30:51","","0","471","<p>I am trying to implement server-side-rendering in my react app. I can't access the DOM with server implementation of react, react-dom and react-router. I either have ""Browser history needs a DOM"" errors. </p>

<p>So my guess is there is something wrong in the way I am wrapping up my component on server or client side.</p>

<p>I will share my structure and important files which are involved in this exercise !</p>

<p>server.js</p>

<pre><code>import React from 'react';
import { renderToString } from 'react-dom/server';
// import { StaticRouter } from 'react-router';
import {StaticRouter} from 'react-router-dom';
import createBrowserHistory from 'history/createBrowserHistory';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';
import { ConnectedRouter, routerMiddleware } from 'react-router-
redux';
import { multiClientMiddleware } from 'redux-axios-middleware';
import api from ""../src/actions/api"";
import rootReducer from ""../src/reducers/index"";
import routes from '../src/routes/routes';

const app = express();

app.use(express.static('public'));

app.get('*', (req,res)=&gt;{

const axiosMiddlewareOptions = {
    interceptors: {
        request: [
            (action, config) =&gt; {
                if (sessionStorage.token) {
                    config.headers['Authorization'] = 'Token '+ sessionStorage.token;
                }

                return config
            }
        ]
    }
};
const history = createBrowserHistory();
const appRouterMiddleware = routerMiddleware(history);
const createStoreWithMiddleware = 
applyMiddleware(multiClientMiddleware(api, axiosMiddlewareOptions), 
appRouterMiddleware)(createStore);
const store = createStoreWithMiddleware(rootReducer, {}, 
window.devToolsExtension ? window.devToolsExtension() : f =&gt; f);

const context = {};
const html = renderToString(
    &lt;Provider store={store}&gt;
        &lt;StaticRouter location={req.url} context={context}&gt;
            &lt;ConnectedRouter history={history} children={routes}/&gt;
        &lt;/StaticRouter&gt;
    &lt;/Provider&gt;
);

res.send(`
    &lt;!DOCTYPE html&gt;
    &lt;html&gt;
        &lt;head&gt;
            &lt;meta charset=""UTF-8""&gt;
            &lt;title&gt;Title&lt;/title&gt;
            &lt;base href=""/""/&gt;
            &lt;link href=""assets/img/favikin-hw.png"" rel=""shortcut 
 icon"" type=""image/x-icon"" /&gt;
            &lt;meta name=""viewport"" content="" width=device-width, 
 maximum-scale=1""&gt;
        &lt;/head&gt;

        &lt;body&gt;
            &lt;div class=""wrapper""&gt;${html}&lt;/div&gt;
        &lt;/body&gt;

    &lt;/html&gt;

`)
});

app.listen(process.env.PORT || 8080, ()=&gt;{
   console.log('Server is Listening')
});
</code></pre>

<p>index.js</p>

<pre><code>import React from 'react';
import { render } from 'react-dom';
import createBrowserHistory from 'history/createBrowserHistory';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';
import { ConnectedRouter, routerMiddleware } from 'react-router-redux';
import { multiClientMiddleware } from 'redux-axios-middleware';
import api from ""./actions/api"";
import rootReducer from ""./reducers/index"";
import routes from './routes/routes';
import { BrowserRouter } from 'react-router-dom';

import '../assets/css/bootstrap.min.css';
import '../assets/style.css';
import '../node_modules/react-datetime/css/react-datetime.css';
import '../node_modules/react-select/dist/react-select.min.css';

const axiosMiddlewareOptions = {
    interceptors: {
    request: [
        (action, config) =&gt; {
            if (sessionStorage.token) {
                config.headers['Authorization'] = 'Token '+     sessionStorage.token;
            }

            return config
        }
    ]
    }
};
const history = createBrowserHistory();
const appRouterMiddleware = routerMiddleware(history);
const createStoreWithMiddleware =     applyMiddleware(multiClientMiddleware(api, axiosMiddlewareOptions),     appRouterMiddleware)(createStore);
const store = createStoreWithMiddleware(rootReducer, {},     window.devToolsExtension ? window.devToolsExtension() : f =&gt; f);

render(
    &lt;Provider store={store}&gt;
        &lt;ConnectedRouter history={history} children={routes}/&gt;
    &lt;/Provider&gt;,
document.querySelector('.wrapper'));
</code></pre>

<p>App.js</p>

<pre><code>import React, { Component, PropTypes } from ""react"";
import Header from '../components/Header/Header';
import Footer from '../components/Footer/Footer';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';

class App extends Component {
    render() {
        return (
        &lt;MuiThemeProvider&gt;
            &lt;div className=""wrapper-box""&gt;
                &lt;div className=""inner-wrapper""&gt;
                    &lt;Header/&gt;
                    {this.props.children}
                &lt;/div&gt;
                &lt;Footer/&gt;
            &lt;/div&gt;
        &lt;/MuiThemeProvider&gt;
    );
    }
}

App.propTypes = {
    children: PropTypes.object.isRequired
};

export default App;
</code></pre>

<p>routes.js</p>

<pre><code>import React from 'react';
import App from '../containers/App';
import {
    Route,
    Switch
} from 'react-router-dom';
import MainPage from '../containers/MainPage/MainPage';
import DetailPage from '../components/DetailPage/DetailPage';
import AboutProject from '../containers/AboutProject/AboutProject';
import Contacts from '../containers/Contacts/Contacts';
import SectionPage from '../containers/SectionPage/SectionPage';
import SearchPage from '../containers/SearchPage/SearchPage';
import NoMatch from '../containers/NoMatch/NoMatch';


export default (
&lt;App&gt;
    &lt;div&gt;
        &lt;Switch&gt;
            &lt;Route exact={true} path='/' component={MainPage} /&gt;
            &lt;Route path='/about_the_project' component={AboutProject} /&gt;
            &lt;Route path='/contacts' component={Contacts} /&gt;
            &lt;Route path=""/search-results/:category/:term"" component={SearchPage}/&gt;
            &lt;Route exact={true} path='/:name' component={SectionPage} /&gt;
            &lt;Route path=""/articles/:slug"" component={DetailPage}/&gt;
            &lt;Route path=""/events/:slug"" component={DetailPage}/&gt;
            &lt;Route path=""/news/:slug"" component={DetailPage}/&gt;
            &lt;Route path=""/interviews/:slug"" component={DetailPage}/&gt;
            &lt;Route path=""/technologies/:slug"" component={DetailPage}/&gt;
            &lt;Route path='*' component={NoMatch}/&gt;
        &lt;/Switch&gt;
    &lt;/div&gt;
    &lt;/App&gt;
)
</code></pre>
","9338466","","","","","2018-02-20 07:05:46","Browser history needs a DOM ( react-router 4 )","<reactjs><react-router><react-redux><react-router-v4><serverside-rendering>","2","1","","",""
"33111732","1","","","2015-10-13 20:09:48","","2","474","<p>I'm new to universal rendering.  I have a wildcard route in express that should catch anything that's not prepended with <code>/api</code>.</p>

<p>It looks like this: </p>

<pre><code>module.exports = function(req, res){
const location = createLocation(req.url);
const store = configureStore();
match({routes, location}, (err, redirectLocation, renderProps) =&gt; {
  if (err) {
    console.error('Error!', err);
    return res.status(500).end('Internal server error');
  }
  if (!renderProps) return res.status(404).end('Not found.');

  const InitialComponent = (

    &lt;div style={{ width: '80%' }}&gt;
      &lt;Provider store={store}&gt;
        &lt;RoutingContext {...renderProps} /&gt;
      &lt;/Provider&gt;
    &lt;/div&gt;
  );
  const initialState = store.getState();

 // | | | |                                         | | | |
 // v v v v running this will cause server to crash v v v v

  const componentHTML = ReactDOMServer.renderToString(InitialComponent);

  console.log('Component html? ', componentHTML);
  const html = `

  &lt;!DOCTYPE html&gt;
    &lt;html lang=""en""&gt;
    &lt;head&gt;
        &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1"" /&gt;
        &lt;base href=""/"" /&gt;
        &lt;title&gt;rūh collective: server&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id=""react-app""&gt;${html}&lt;/div&gt;
        &lt;script src=""bundle.js""&gt;&lt;/script&gt;
    &lt;/body&gt;
    &lt;/html&gt;
    `

      res.send(html);

    });
}
</code></pre>

<p>This successfully sends to the server, because I see that the title has the ruh:server included.</p>

<p>Right after the page loads, the server crashes saying pointing to <code>events.js:82</code></p>

<p>If I comment out the <code>ReactDOMServer.renderToString</code> and I remove the reference in the html the server loads and does not crash.</p>

<p>If I run <code>ReactDOMServer.renderToString</code> and DO NOT EVEN REFERENCE IT, the server still crashes on load.  Commenting out will allow the server to live.</p>

<p>Here is my webpack config:</p>

<pre><code>var webpack = require('webpack');
var path = require('path');
var ExtractTextPlugin = require('extract-text-webpack-plugin');

const commonLoaders = [
  {
    test: /\.js$/,
    exclude: /node_modules/,
    loader: 'react-hot',
  }, {
    test: /\.js$/,
    exclude: /node_modules/,
    loader: 'babel-loader',
    query: {
      stage: 0,
    }
  },
  {
    test: /\.jsx$/,
    loader: 'babel-loader',
    query: {
      stage: 0,
    }
  },
  { test: /\.css$/, loader: ""style-loader!css-loader"" },
  {
    test: /\.html$/,
    loader: 'file?name=[name].[ext]',
  },
  {
    test: /\.(jpe?g|png|gif|svg)$/i,
    loaders: [
      'file?hash=sha512&amp;digest=hex&amp;name=[hash].[ext]',
      'image-webpack?bypassOnDebug&amp;optimizationLevel=7&amp;interlaced=false',
    ]
  }
];

//const assetsPath = path.join(__dirname, 'dist');
const publicPath = path.join(__dirname, 'dist');

module.exports = 
  {
    name: 'browser',
    entry: [
      'webpack-dev-server/client?http://localhost:8080',
      'webpack/hot/only-dev-server',
      './browser/js/main.js',
    ],
    output: {
      filename: 'bundle.js',
      path: __dirname + '/dist',
      publicPath: 'http://localhost:8080/',
    },
    plugins: [
      new webpack.HotModuleReplacementPlugin(),
      new webpack.NoErrorsPlugin(),
    ],
    module: {
      loaders: commonLoaders.concat([
        {test: /\.scss$/, loader: 'style!css!sass?sourceMap'},
      ])
    }
  }
</code></pre>

<p>If I comment out the line <code>const componentHTML</code> etc, the server will run, but it's not rendering universally. I can try to replicate the issue if anyone is interested</p>
","2747829","","2747829","","2015-10-14 01:11:38","2015-10-14 01:11:38","React Universal Webpack App Crashes After ReactDOMServer.renderToString(<App />)","<javascript><reactjs><universal><isomorphic-javascript>","0","4","","",""
"37935577","1","37936603","","2016-06-21 04:24:53","","0","243","<p>I would like to know why I am unable to render react-bootstrap's modal on the server.</p>

<p>When I do the following on the server, I get <code>&lt;!-- react-empty: 1 --&gt;</code>:</p>

<pre><code>renderToString(
  &lt;Modal&gt;
    &lt;Modal.Header closeButton&gt;
      some text
    &lt;/Modal.Header&gt;

    &lt;Modal.Body&gt;
      some text
    &lt;/Modal.Body&gt;
  &lt;/Modal&gt;
));
</code></pre>

<p>It seems that <code>&lt;Modal&gt;</code> does not render anything but rather attaches a modal to the DOM using JavaScript. But I am not too sure how it works. Any suggestions on how to render a react-bootstrap's modal on server?</p>

<p><em>I also saw <a href=""https://github.com/react-bootstrap/react-bootstrap/issues/717"" rel=""nofollow"">this issue</a> but it seems not directly related.</em></p>

<p>Version: react-bootstrap 0.29.4, react 15.1.0, react-dom 15.1.0.</p>
","3958148","","","","","2016-06-21 05:58:28","Can't render react-bootstrap modal on server","<twitter-bootstrap><reactjs><react-bootstrap>","1","0","","",""
"29396843","1","","","2015-04-01 17:13:30","","22","15333","<p>I am working on an isomorphic javascript app with express + react.  We started out using jade for server side templates for static content, but combining the two is quickly becoming unwieldy. We have ended up with something like this:</p>

<p>In the express routes:</p>

<pre><code>router.get(""/"", function(req, res) {
  var webpackStats = require('../../config/webpack-stats.json');
  var reactHtml = React.renderToString(HiwApp({}));
  var slideshowHtml = React.renderToString(slideshowApp({}));
  var config = {
    webpackStats: webpackStats,
    reactOutput: reactHtml,
    slideshowHtml: slideshowHtml
  };
  res.render(""how_it_works/howitworks"", config);
});
</code></pre>

<p>In Jade:</p>

<pre><code>body
  .company-logo.center
  #react-main-mount
    != reactOutput
  include ./content_block_1.jade

  include ./content_block_2.jade

  #slideshow-main-mount
    != slideshowHtml
</code></pre>

<p>This is very brittle-if we want jsx then a jade template then more jsx, we have to make sure we get the order right.</p>

<p>My idea is to do it <em>all</em> with jsx. I know there is React.renderToStaticMarkup for this sort of thing, but that doesn't solve the problem of mixing dynamic with static pages.  </p>

<p>The big questions: if we decide to do all of this with jsx (say layout.jsx which contains all components), then call <code>React.renderToString(App({});</code>, will this be a major performance hit? If so, is there a better way to do it to easily combine static and dynamic blocks?</p>
","1703484","","","","","2016-06-04 17:16:31","Combining react and jade","<javascript><node.js><express><pug><reactjs>","2","1","10","",""
"30626410","1","30720330","","2015-06-03 17:04:58","","29","15229","<p>I'm trying to set up server-side rendering for my react app and I'm trying to use the great <a href=""https://github.com/rackt/react-router"" rel=""nofollow noreferrer"">react-router</a> module to allow it to handle non-js situations (some crawlers, when a user had js turned off for some reason). However, I'm running into trouble. I've been using the great response here <a href=""https://stackoverflow.com/a/28558545/3314701"">https://stackoverflow.com/a/28558545/3314701</a> as a guide of sorts, but I'm getting strange errors thrown at me. I get a persistent <code>Syntax Error</code> when trying to use <code>react.renderToString()</code>. Am I setting up the server-side rendering incorrectly, missing something obvious, or anything else?</p>

<p>My setup:</p>

<p><strong>Really basic Express server</strong></p>

<pre><code>require('babel/register');

var app = express();


// misc. express config...

var Router = require('react-router'),
    routes = require('../jsx/app').routes,
    React = require('react');


app.use(function(req, res, next) {
  var router = Router.create({location: req.url, routes: routes});
  router.run(function(Handler, state) {
    console.log(Handler);
    var html = React.renderToString(&lt;Handler/&gt;);
    return res.render('react_page', {html: html});
  });
});
</code></pre>

<p><strong>Top-level react <code>&lt;App/&gt;</code> component</strong></p>

<pre><code>// Shims
require('intl');
require('es5-shim');

var React = require('react/addons'),
  Router = require('react-router'),
  Nav = require('./nav'),
  injectTapEventPlugin = require(""react-tap-event-plugin""),


  window.React = React; // export for http://fb.me/react-devtools

// Intl
var ReactIntl = require('react-intl'),
  IntlMixin = ReactIntl.IntlMixin;

var Route = Router.Route,
  DefaultRoute = Router.DefaultRoute,
  NotFoundRoute = Router.NotFoundRoute,
  RouteHandler = Router.RouteHandler;


var App = React.createClass({
      mixins: [IntlMixin],

      getInitialState: function() {
        return {
          connected: false,
          loaded: false,
          user: true
        };
      },
      render: function() {
          return ( 
            &lt;div className=""container-fluid""&gt;
              &lt;Nav/&gt;
              &lt;RouteHandler/&gt;
              &lt;Footer/&gt;
            &lt;/div&gt;
      );
  }

});

var routes = (
&lt;Route name=""Home"" path=""/"" handler={App}&gt;
    &lt;DefaultRoute name=""Welcome "" handler={Welcome}/&gt;
    &lt;Route name=""Bar"" path=""/bar"" handler={Bar}&gt;
    &lt;Route name=""foo"" path=""/foo"" handler={Foo}&gt;&lt;/Route&gt;
 &lt;/Route&gt;
);

Router.run(routes, Router.HistoryLocation , function(Handler) {
  React.render(&lt;Handler/&gt;, document.getElementById('app'));
});

module.routes = routes;
</code></pre>

<p>output: </p>

<pre><code>flo-0,1,2 (err):       &lt;div className=""progressbar-container"" &gt;
flo-0,1,2 (err):       ^
flo-0,1,2 (err): SyntaxError: Unexpected token &lt;
flo-0,1,2 (err):     at exports.runInThisContext (vm.js:73:16)
flo-0,1,2 (err):     at Module._compile (module.js:443:25)
flo-0,1,2 (err):     at Module._extensions..js (module.js:478:10)
flo-0,1,2 (err):     at Object.require.extensions.(anonymous function) [as .js] (/Users/user/Code/foobar/apps/flo/node_modules/babel/node_modules/babel-core/lib/babel/api/register/node.js:161:7)
flo-0,1,2 (err):     at Module.load (module.js:355:32)
flo-0,1,2 (err):     at Function.Module._load (module.js:310:12)
flo-0,1,2 (err):     at Function.&lt;anonymous&gt; (/Users/user/.nvm/versions/node/v0.12.4/lib/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
flo-0,1,2 (err):     at Function.cls_wrapMethod (/Users/user/Code/foobar/apps/bar/node_modules/newrelic/lib/shimmer.js:230:38)
flo-0,1,2 (err):     at Function.&lt;anonymous&gt; (/Users/user/Code/foobar/apps/bar/node_modules/pmx/lib/transaction.js:62:21)
flo-0,1,2 (err):     at Module.require (module.js:365:17)
flo-0,1,2 (err):     at require (module.js:384:17)
</code></pre>
","3314701","","-1","","2017-05-23 12:02:31","2016-04-10 17:26:16","Server side rendering with react, react-router, and express","<javascript><node.js><express><reactjs><react-router>","1","2","22","",""
"48817285","1","","","2018-02-15 22:23:26","","8","414","<p>I am attempting SSR with React router's <code>StaticRouter</code>. </p>

<p><strong>express.js</strong> <em>(server)</em></p>

<pre><code>const html = ReactDOMServer.renderToString(
    &lt;StaticRouter location={req.url} context={context}&gt;
        &lt;App /&gt;
    &lt;/StaticRouter&gt;
);

res.status(200).send(`
    &lt;!DOCTYPE html&gt;
    &lt;html&gt;
        &lt;head&gt;
            &lt;link rel=""stylesheet"" href=""/app.css"" type=""text/css""/&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;div id=""app""&gt;${html}&lt;/div&gt;
        &lt;/body&gt;
    &lt;/html&gt;
`);
</code></pre>

<p>Serving of static files:</p>

<pre><code>app.use(express.static(path.resolve(__dirname, ""../dist/client"")));
</code></pre>

<p><strong>App.js</strong> <em>(shared)</em></p>

<pre><code>import React from ""react"";
import { Switch, Route } from ""react-router"";

export default () =&gt; {
    return (
        &lt;Switch&gt;
            ...
        &lt;/Switch&gt;
    );
};
</code></pre>

<p><strong>index.jsx</strong> <em>(client)</em></p>

<pre><code>import React from ""react"";
import { BrowserRouter } from ""react-router-dom"";
import ReactDOM from ""react-dom"";
import App from ""./App"";

ReactDOM.render(
    &lt;BrowserRouter&gt;
        &lt;App/&gt;
    &lt;/BrowserRouter&gt;,
    document.getElementById(""app"")
);
</code></pre>

<p><strong>./styles/Main.scss</strong></p>

<pre><code>.header {
    background-color: #002933;
}
</code></pre>

<p>I have 2 webpack configurations, 1 for the client &amp; 1 for the server:</p>

<p><strong>webpack.config.dev.js</strong></p>

<pre><code>const nodeExternals = require(""webpack-node-externals"");
const webpack = require(""webpack"");
const ExtractTextPlugin = require(""extract-text-webpack-plugin"");

module.exports = {
    devtool: ""cheap-module-eval-source-map"",
    entry: {
        app: [
            ""eventsource-polyfill"",
            ""webpack-hot-middleware/client"",
            ""webpack/hot/only-dev-server"",
            ""react-hot-loader/patch"",
            ""./client/index.jsx"",
        ],
        vendor: [
            ""react"",
            ""react-dom"",
        ],
    },
    output: {
        path: `${__dirname}/dist/client`,
        ...
    },
    ...
    module: {
        loaders: [
            ...
            }, {
                test: /\.scss$/,
                exclude: /node_modules/,
                loader: ExtractTextPlugin.extract({
                    fallback: ""style-loader"",
                    use: [
                        {
                            loader: ""css-loader"",
                            query: {
                                localIdentName: ""[hash:8]"",
                                modules: true
                            }
                        }, {
                            loader: ""postcss-loader""
                        }, {
                            loader: ""sass-loader""
                        }
                    ]
                }),
            },
        ],
    },
    plugins: [
        new ExtractTextPlugin({
            filename: ""[name].css"",
            allChunks: true
        }),
    ]
};
</code></pre>

<p><strong>webpack.config.server.js</strong></p>

<pre><code>const ExternalsPlugin = require(""webpack-externals-plugin"");

module.exports = {
    ...
    output: {
        path: `${__dirname}/dist/`,
        filename: ""server.bundle.js"",
    },
    ...
    resolve: {
        ...
        modules: [
            ""client"",
        ],
    },
    module: {
        loaders: [
            {
                test: /\.(js|jsx)$/,
                exclude: /node_modules/,
                loader: ""babel-loader"",
            }, {
               test: /\.scss$/,
               loader: 'style-loader!css-loader/locals?module&amp;localIdentName=[name]__[local]___[hash:base64:5]!sass-loader',
            },
        ],
    },
    plugins: [
        new ExternalsPlugin({
            type: ""commonjs"",
            include: `${__dirname}/node_modules/`,
        }),
    ],
};
</code></pre>

<p>I have a JSX file where the <code>.header</code> should be applied to:</p>

<pre><code>import React from ""react"";

import Links from ""./Links.jsx"";
import profilePic from ""../../img/brand/profilePic.jpg"";

import styles from ""../../styles/Main.scss"";

export default class Header extends React.Component {
    constructor() {
        super();
    }

    render() {
        return (
            &lt;header className={styles.header}&gt;
                &lt;img src={profilePic} alt=""Professional Picture""/&gt;
                &lt;h5&gt;{this.props.pageName}&lt;/h5&gt;
                &lt;Links/&gt;
            &lt;/header&gt;
        );
    }
}
</code></pre>

<p>This throws the error:</p>

<pre><code>TypeError: Cannot read property 'header' of undefined
    at Header.render (E:/Documents/Projects/website/client/js/components/Header.jsx:22:30)
    at resolve (E:\Documents\Projects\website\node_modules\react-dom\cjs\react-dom-server.node.development.js:2149:18)
    at ReactDOMServerRenderer.render (E:\Documents\Projects\website\node_modules\react-dom\cjs\react-dom-server.node.development.js:2260:22)
    at ReactDOMServerRenderer.read (E:\Documents\Projects\website\node_modules\react-dom\cjs\react-dom-server.node.development.js:2234:19)
    at Object.renderToString (E:\Documents\Projects\website\node_modules\react-dom\cjs\react-dom-server.node.development.js:2501:25)
    at E:/Documents/Projects/website/server/config/lib/express.js:204:31
    at Layer.handle [as handle_request] (E:\Documents\Projects\website\node_modules\express\lib\router\layer.js:95:5)
    at trim_prefix (E:\Documents\Projects\website\node_modules\express\lib\router\index.js:317:13)
    at E:\Documents\Projects\website\node_modules\express\lib\router\index.js:284:7
    at Function.process_params (E:\Documents\Projects\website\node_modules\express\lib\router\index.js:335:12)
    at next (E:\Documents\Projects\website\node_modules\express\lib\router\index.js:275:10)
    at p3p (E:\Documents\Projects\website\node_modules\lusca\lib\p3p.js:15:9)
    at E:\Documents\Projects\website\node_modules\lusca\index.js:59:28
    at xframe (E:\Documents\Projects\website\node_modules\lusca\lib\xframes.js:12:9)
    at E:\Documents\Projects\website\node_modules\lusca\index.js:59:28
    at xssProtection (E:\Documents\Projects\website\node_modules\lusca\lib\xssprotection.js:16:9)
</code></pre>

<p>When running the application, webpack reports that the stylesheet <strong>has</strong> been loaded:</p>

<p><a href=""https://i.stack.imgur.com/3lOSa.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/3lOSa.png"" alt=""enter image description here""></a></p>

<p><strong>EDIT</strong></p>

<p>Other than an ES6 import, I have attempted to use CommonJS' <code>require()</code> as in <a href=""https://github.com/Hashnode/mern-starter/blob/master/client/App.js#L13"" rel=""nofollow noreferrer"">MERN</a> but still no look...</p>

<p>When I build my server webpack config, I am now getting the error:</p>

<pre><code>ERROR in (webpack)-dev-middleware/node_modules/mime/index.js
Module not found: Error: Can't resolve './types/standard' in 'E:\Documents\Projects\website\node_modules\webpack-dev middleware\node_modules\mime'
 @ (webpack)-dev-middleware/node_modules/mime/index.js 4:26-53
 @ (webpack)-dev-middleware/index.js
 @ ./server/config/lib/express.js
 @ ./server/config/lib/app.js
 @ ./server/server.js
</code></pre>

<p>I am not sure if this a red-herring or not in this situation or not but thought it worth mentioning here as I am quite lost. Feel as though I am clutching at straws at this point.</p>

<p>This is my <code>.babelrc</code>:</p>

<pre><code>{
    ""presets"": [
        ""react"",
        ""es2015"",
        ""stage-0""
    ],
    ""plugins"": [
        ""react-hot-loader/babel"",
        ""transform-decorators-legacy""
    ],
    ""env"": {
        ""server"": {
            ""plugins"": [
                [
                    ""css-modules-transform"", {
                        ""preprocessCss"": ""./loaders/sass-loader.js"",
                        ""generateScopedName"": ""[hash:8]"",
                        ""extensions"": ["".scss""]
                    }
                ]
            ]
        },
        ""production"": {
            ""presets"": [
                ""es2015"",
                ""react"",
                ""react-optimize"",
                ""es2015-native-modules"",
                ""stage-0""
            ]
        }
    }
}
</code></pre>

<p>I was attempting to go back to basics and have my babel handle server-side bundling instead of webpack. This was built from a <a href=""https://medium.com/@mattvagni/server-side-rendering-with-css-modules-6b02f1238eb1"" rel=""nofollow noreferrer"">tutorial</a> for SSR with CSS modules I was kindly linked to by @mootrichard</p>

<p><strong>EDIT 2</strong></p>

<p>A few observations which might help...when using an es6 import for stylesheets:</p>

<pre><code>import styles from ""../../styles/Main.scss"";
</code></pre>

<p>and log <code>styles</code> into the console, it returns <strong>undefined</strong> <em>(evidence that it cannot find the file for some reason)</em>.</p>

<p>When putting the <code>&lt;link&gt;</code> tag in the <code>head</code> for the initial page, the <code>&lt;link&gt;</code> tag is present in the markup but <strong>not</strong> in the network:</p>

<p><a href=""https://i.stack.imgur.com/Ek8xh.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Ek8xh.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/GzY21.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/GzY21.png"" alt=""enter image description here""></a></p>

<p>However, when navigating to <code>localhost:8000/app.css</code>, a positive response with the styling is sent back:</p>

<p><a href=""https://i.stack.imgur.com/WyWBU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WyWBU.png"" alt=""enter image description here""></a></p>

<p>If the browser can find the bundled version standalone, then why is it not being loaded in my initial page? <em>(The path is correct)</em></p>
","4400016","","4400016","","2018-02-25 18:06:03","2018-02-25 18:06:03","No loading/serving of stylesheets - react","<javascript><reactjs><webpack>","2","10","","",""
"41788821","1","","","2017-01-22 08:25:47","","7","1256","<p>I worked a lot with server side rendering with RR 3 so I wanted to see how it works in the context of v4. I followed the tutorial from the website, but because the rendering is happening now together with the route match, there's no way to implement prefetching data as before.</p>

<p>Here's how I used to do server rendering with v3:
<a href=""https://github.com/alexnm/react-seed/blob/master/server/index.js"" rel=""noreferrer"">https://github.com/alexnm/react-seed/blob/master/server/index.js</a></p>

<p>Based on the match function, I would call all the prefetch functions from all the component tree and then wait with a <code>Promise.all</code> for them to finish, then trigger the <code>renderToString</code> function and return the html.</p>

<p>In RR4, we have only the <code>&lt;ServerRouter&gt;</code> component, so the current solution I came with is duplicating the render code:
<a href=""https://github.com/FortechRomania/react-redux-complete-example/blob/master/src/server/index.js"" rel=""noreferrer"">https://github.com/FortechRomania/react-redux-complete-example/blob/master/src/server/index.js</a></p>

<p>I'm also using the <code>render</code> function on the <code>&lt;Match&gt;</code> tag to trigger the prefetch actions. It's ugly and introduces all sorts of dependencies in the parent component of the page I want to render with prefetched data.</p>

<p>What am I missing here? Has anyone found a better solution for this scenario? I haven't found anything useful yet.</p>
","4598479","","","","","2017-05-25 08:12:16","Server rendering with react-router v4 and prefetching data","<javascript><reactjs><react-router><server-rendering>","1","9","2","",""
"40082284","1","","","2016-10-17 09:02:47","","0","530","<p>I have frontend running in react + flux +node and backend running in Java.
I am using superagent to post requests from the react action to the backend which is successfully happening and I am trying to send custom headers from backend which is also working fine and getting  sent from the backend to frontend as I can see in the browsers networks(debugging for request and response).However when I try to access the headers in the react action I don't see it.Can someone please guide me how Can I handle this?</p>

<p>The custom header which I want to access is X-Token but I cant see it in the response from superagent in react action.
The react action function looks as below:</p>

<pre><code>login(payload) {
        request.post(someurl+'/login')
            .send({
                username: payload.userEmail,
                password: payload.userPassword
                })
            .set('Accept', 'application/json')
            .end(function(err, res){
                if (err || !res.ok) {

                } else {
                    console.log(res.headers) //it doesnt give x-token header.

                }
            });
    }
}
</code></pre>

<p>Below is my Server js content:</p>

<pre><code>var app = express();
app.options('*', cors());

app.set('port', process.env.PORT || 3001);
app.use(compression());
app.use(logger('dev'));
app.use(bodyParser.urlencoded({
    extended: true
}));
app.use(bodyParser.json());

app.use(function (req, res, next) {
         // Website you wish to allow to connect
         res.setHeader('Access-Control-Allow-Origin', '*');

         // Request methods you wish to allow
         res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');

         // Request headers you wish to allow
         res.setHeader(""Access-Control-Allow-Headers"", ""X-Token,Origin,X-Requested-With,content-type"");

         // Set to true if you need the website to include cookies in the requests sent
         // to the API (e.g. in case you use sessions)
         res.setHeader('Access-Control-Allow-Credentials', true);

         // Pass to next layer of middleware
         next();
     });


app.use(express.static(path.join(__dirname, 'public')));

app.engine('html', consolidate['swig']);
app.set('view engine', 'html');
app.set('views', './views');


 app.use(function(req, res) {
   Router.match({ routes: routes.default, location: req.url }, function(err, redirectLocation, renderProps) {
     if (err) {
       res.status(500).send(err.message)
     } else if (redirectLocation) {
       res.status(302).redirect(redirectLocation.pathname + redirectLocation.search)
     } else if (renderProps) {
       var html = ReactDOM.renderToString(React.createElement(Router.RoutingContext, renderProps));
       var page = swig.renderFile('views/index.html', { html: html });
       res.status(200).send(page);
     } else {
       res.status(404).send('Page Not Found')
     }
   });
 });

require('./app/routes/server-route')(app, express);
var server = require('http').createServer(app);


server.listen(app.get('port'), function() {
   console.log('Express server listening on port ' + app.get('port'));
});
</code></pre>

<p>Thanks in advance for the help.</p>
","5288327","","5288327","","2016-10-18 08:23:07","2016-10-18 08:23:07","Unable to get custom headers in react response","<node.js><express><reactjs><cors><reactjs-flux>","1","0","","",""
"40085482","1","","","2016-10-17 11:41:49","","0","460","<p>I have a react application. It has two pages - AddStatus and ViewStatus. Both are react components.</p>

<p>My requirement is - I have to send an email daily at a particular time with details as seen in ViewStatus screen.</p>

<p>I can set up node-mailer and node-scheduler to do that. But how do i render the ViewStatus component from backend. How do i get the HTML of viewStatus screen.</p>

<p>I tried using renderToString method of ReactDOMServer like below in my server.js but getting error</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var App = React.createFactory(require('../ViewStatus'))

var p = ReactDOMServer.renderToString(App());</code></pre>
</div>
</div>
</p>

<pre><code>  Error: locals[0] does not appear to be a `module` object with Hot Module replace
ment API enabled. You should disable react-transform-hmr in production by using
  `env` section in Babel configuration. See the example in README: https://github.
 com/gaearon/react-transform-hmr
</code></pre>

<p>Another approach I though of is using react-router but I am not sure how to trigger the route from backend.</p>

<p>How do I get the HTML of my viewstatus component in my server.js</p>
","2362960","","","","","2016-10-17 11:56:23","send html rendered by react as email body in node js","<javascript><node.js><reactjs><react-router><isomorphic-javascript>","1","0","","",""
"46761715","1","","","2017-10-16 01:18:26","","1","449","<p>I made a page by using nodejs+react+redux.
I made a edit button in the page and want to edit my data.</p>

<p>Now I select KUMAMOTO-CTI and change the priority from 5 to 10.I use ajax to get data from database to fill the blank.Before I submit it I can get the right data from database.But when I change priority and click to edit it again.The filled data will be wrong.I have to refresh it to get the right data.</p>

<p>And sometimes it will become like this:<a href=""https://i.stack.imgur.com/0O90j.png"" rel=""nofollow noreferrer"">Error</a></p>

<p>Could anybody tell me how to solve it?</p>

<p>Here is the pic:<a href=""https://i.stack.imgur.com/KDRD8.png"" rel=""nofollow noreferrer"">progress</a></p>

<p>Here is my code.</p>

<p>server.js</p>

<pre><code>const Koa = require('koa')
const Router = require('koa-router')
const cors = require('koa2-cors')
const app = new Koa()
const router = new Router()
import { createStore } from 'redux'
import { Provider } from 'react-redux'
import serversReducer from '../client/reducers/reducer'
import { renderToString } from 'react-dom/server'

const store = createStore(serversReducer)

const views = require('koa-views')
const co = require('co')
const convert = require('koa-convert')
const json = require('koa-json')
const onerror = require('koa-onerror')
const bodyparser = require('koa-bodyparser')
const logger = require('koa-logger')
const debug = require('debug')('koa2:server')
const path = require('path')
//const ReactDOMServer = require('react-dom/server')
const React = require('react')
const config = require('./config')
const routes = require('./routes')
const mongoose = require('mongoose')
const stateSchema = require('./models/State')
const mission = require('./models/port')
const port = process.env.PORT || config.port

import Main from '../client/containers/Main'

mongoose.connect('mongodb://127.0.0.1:27017/monitor', {
    useMongoClient: true
});
mongoose.Promise = global.Promise;

var State = mongoose.model(""State"", stateSchema);

// error handler
onerror(app)
// middlewares
app.use(bodyparser())
    .use(json())
    .use(logger())
    .use(cors())
    .use(require('koa-static')(__dirname + '/public'))
    .use(views(path.join(__dirname, '/views'), {
        options: {
            settings: {
                views: path.join(__dirname, 'views')
            }
        },
        map: {
            'ejs': 'ejs'
        },
        extension: 'ejs'
    }))
    .use(router.routes())
    .use(router.allowedMethods())

// logger
app.use(async(ctx, next) =&gt; {
    const start = new Date()
    await next()
    const ms = new Date() - start
    console.log(`${ctx.method} ${ctx.url} - $ms`)
})

router.get('/', async(ctx, next) =&gt; {

    const staticMarkup = await renderToString(
        &lt;Provider store={store}&gt;
            &lt;Main /&gt;
        &lt;/Provider&gt;
    )

    const preloadedState = store.getState();
    //console.log(preloadedState);

    await ctx.render('index', {
        reduxData: preloadedState,
        helloComponentMarkup: staticMarkup
    })
})

router.post('/show', async(ctx, next) =&gt; {

    ctx.body = 'ok';
    let newArray = [];

    await State.find({}, function(err, doc) {
        if (err) {
            return;
        }
        doc.forEach(function(element, index) {
            newArray.push(element);
        })
        ctx.response.body = JSON.stringify(newArray);
    }).sort({
        priority: 1
    })
})

router.post('/edit', async(ctx, next) =&gt; {

    ctx.body = 'ok'

    await State.update({
        _id: ctx.request.body.querymark
    }, {
        $set: {
            server_name: ctx.request.body.servername,
            jp_name: ctx.request.body.jpname,
            ip_address: ctx.request.body.ipaddress,
            port: ctx.request.body.port,
            priority: ctx.request.body.priority
        }
    }, function(err, doc) {
        if (err) {
            return;
        }
    })
})

router.post('/create', async(ctx, next) =&gt; {

    ctx.body = 'ok'

    await new State({
        server_name: ctx.request.body.servername,
        jp_name: ctx.request.body.jpname,
        ip_address: ctx.request.body.ipaddress,
        port: ctx.request.body.port,
        priority: ctx.request.body.priority
    }).save(function(err) {
        if (err)
            console.log(err.toString());
    })
})

router.post('/delete', async(ctx, next) =&gt; {

    ctx.body = 'ok'

    await State.remove({
        _id: ctx.request.body.id
    }, function(err, doc) {
        if (err) {
            return;
        }
    });
})

routes(router)

app.on('error', function(err, ctx) {
    console.log(err)
    logger.error('server error', err, ctx)
})

module.exports = app.listen(config.port, () =&gt; {
    console.log(`Listening on http://localhost:${config.port}`)
    console.log(__dirname);
})
</code></pre>

<p>ListContainer.js</p>

<pre><code>import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { Router, Route, hashHistory } from 'react-router'
import { Segment, Icon, Table, Modal, Button, Form } from 'semantic-ui-react'
const axios = require('axios')
class ListContainer extends Component {
    static propTypes = {
        test_data: PropTypes.object.isRequired,
        post_data: PropTypes.object.isRequired,
        onDeleteServer: PropTypes.func,
        onEditServer: PropTypes.func,
        initServers: PropTypes.func,
        index: PropTypes.number
    }

    constructor(props) {
        super(props)
        this.state = ({
            servername: props.post_data.server_name,
            jpname: props.post_data.jp_name,
            ipaddress: props.post_data.ip_address,
            port: props.post_data.port,
            priority: props.post_data.priority
        })
    }

    static defaultProps = {
        servers: []
    }

    handleDeleteServer(index) {
        if (this.props.onDeleteServer) {
            this.props.onDeleteServer(this.props.index)
        } else {
            console.log(""error"")
        }
    }

    /*handleEditServer(index) {
        if (this.props.onEditServer) {
            this.props.onEditServer(this.props.index)
        } else {
            console.log(""error"")
        }
        this.setState({
            open: false
        })
    }*/

    handleServerNameChange(event) {
        this.setState({
            servername: event.target.value
        })
    }

    handleJPNameChange(event) {
        this.setState({
            jpname: event.target.value
        })
    }

    handleIPChange(event) {
        this.setState({
            ipaddress: event.target.value
        })
    }

    handlePORTChange(event) {
        this.setState({
            port: event.target.value
        })
    }

    handlePriorityChange(event) {
        this.setState({
            priority: event.target.value
        })
    }

    handleSubmit(index) {
        axios.post('/edit', {
            querymark: this.props.post_data._id,
            servername: this.state.servername,
            jpname: this.state.jpname,
            ipaddress: this.state.ipaddress,
            port: this.state.port,
            priority: this.state.priority
        }).then((response) =&gt; {
            var new_data;
            if (response.data.success === false) {
                alert(""error"")
            } else {
                window.location.reload();
                //console.log(this.props.post_data)
                dispatch(onEditServer(index, {
                    querymark: this.props.post_data._id,
                    servername: this.state.servername,
                    jpname: this.state.jpname,
                    ipaddress: this.state.ipaddress,
                    port: this.state.port,
                    priority: this.state.priority
                }))
            }
        }).catch(() =&gt; {
        })
        this.setState({
            open: false
        })
    }

    state = {
        open: false
    }

    show = (size, dimmer) =&gt; () =&gt; this.setState({
        size,
        dimmer,
        open: true
    })
    close = () =&gt; this.setState({
        open: false
    })

    render() {
        const {open, size, dimmer} = this.state
        const post_data = this.props.post_data
        var updated_time = (new Date(post_data.updated_at)).toLocaleString().replace('/T/', '').replace('/\../+', '')
        var state_color = (post_data.state == ""green"") ? ""green"" : ""red""
        var icon_name = (post_data.state == ""green"") ? ""smile"" : ""warning sign""
        return (
            &lt;Table.Row&gt;
                &lt;Table.Cell&gt;&lt;Icon name={icon_name} color={state_color}/&gt;&lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;{post_data.jp_name}&lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;{post_data.ip_address}&lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;{post_data.port}&lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;{updated_time}&lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;{post_data.priority}&lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;
                    &lt;div&gt;
                        &lt;Icon link name='settings' color='purple' onClick={this.show('small', 'blurring')} /&gt;
                        &lt;Modal size={size} dimmer={dimmer} open={open} onClose={this.close} closeIcon&gt;
                        &lt;Modal.Header&gt;Edit&lt;/Modal.Header&gt;             
                        &lt;Modal.Content&gt;
                            &lt;Modal.Description&gt;
                                &lt;Form&gt;
                                &lt;Form.Group width='equal'&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;Server Name&lt;/label&gt;
                                    &lt;input value={this.state.servername} onChange={this.handleServerNameChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;JP Name&lt;/label&gt;
                                    &lt;input value={this.state.jpname} onChange={this.handleJPNameChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;/Form.Group&gt;
                                &lt;Form.Group width='equal'&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;IP Address&lt;/label&gt;
                                    &lt;input value={this.state.ipaddress} onChange={this.handleIPChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;Priority&lt;/label&gt;
                                    &lt;input value={this.state.priority} onChange={this.handlePriorityChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;/Form.Group&gt;
                                &lt;Form.Group&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;Port&lt;/label&gt;
                                    &lt;input value={this.state.port} onChange={this.handlePORTChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;/Form.Group&gt;
                                &lt;/Form&gt;
                            &lt;/Modal.Description&gt;
                        &lt;/Modal.Content&gt;
                        &lt;Modal.Actions&gt;
                        &lt;Button color='black' onClick={this.close}&gt;
                            Nope
                        &lt;/Button&gt;
                        &lt;Button positive icon='checkmark' labelPosition='right' content=""Submit"" onClick={this.handleSubmit.bind(this)} /&gt;
                        &lt;/Modal.Actions&gt;
                        &lt;/Modal&gt;
                    &lt;/div&gt;
                &lt;/Table.Cell&gt;
                &lt;Table.Cell&gt;&lt;Icon link name='trash' color='purple' onClick={this.handleDeleteServer.bind(this)} /&gt;&lt;/Table.Cell&gt;
            &lt;/Table.Row&gt;
        )
    }
}

const mapStateToProps = (state) =&gt; {
    return {
        servers: state.servers
    }
}

const mapDispatchToProps = (dispatch) =&gt; {
    return {
        onEditServer: (index, data) =&gt; {
            dispatch(editServer(index, data))
        },
    }
}

export default connect(
    mapStateToProps,
    mapDispatchToProps
)(ListContainer)
</code></pre>

<p>SegmentContainer.js</p>

<pre><code>import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { Container, Loader, Table, Grid, Icon, Button, Modal, Form } from 'semantic-ui-react'
import SegmentList from '../components/SegmentContainer'
import { initServers, deleteServer, editServer } from '../reducers/reducer'
import MenuFix from '../components/Menu'
const axios = require('axios')

class SegmentContainer extends Component {
    static propTypes = {
        servers: PropTypes.array,
        initServers: PropTypes.func,
        onDeleteServer: PropTypes.func,
        onAddServer: PropTypes.func
    }

    constructor() {
        super()
        //this._loadData()
        this.state = {
            servername: '',
            jpname: '',
            ipaddress: '',
            priority: ''
        }
    }

    componentWillMount() {
        this._loadData()
    }

    componentDidMount() {
        if (this.timer) {
            clearInterval(this.timer)
        }
        this.timer = setInterval(() =&gt; {
            this._loadData()
        }, 3000)
    }

    componentWillUnmount() {
        clearInterval(this.timer)
    }

    _loadData() {
        let sorted_data = [];
        let posts_data = [];
        let response = axios.post('/show')
            .then((response) =&gt; {
                Object.keys(response.data).forEach(function(index) {
                    sorted_data.push(response.data[index]);
                })

                function _dataCompare(a, b) {
                    if (a.priority &gt; b.priority)
                        return 1;
                    if (a.priority &lt; b.priority)
                        return -1;
                    return 0;
                }

                sorted_data.forEach((item, index) =&gt; {
                    posts_data.push(item);
                })
                posts_data.sort(_dataCompare);
                this.props.initServers(posts_data)
            //dispatch(initServers(posts_data))
            }).catch(() =&gt; {
        })

    }

    handleDeleteServer(index) {
        const {servers} = this.props
        axios.post('/delete', {
            id: servers[index]._id
        }).then((response) =&gt; {
            if (response.data.success === false) {
                alert(""error"");
            } else {
                window.location.reload();
            }
        }).catch(() =&gt; {
        })
        if (this.props.onDeleteServer) {
            this.props.onDeleteServer(index)
        }
    }

    /*handleEditServer(index) {
        const {servers} = this.props
        axios.post('/edit', {
            querymark: this.props.servers._id,
            servername: this.state.servername,
            jpname: this.state.jpname,
            ipaddress: this.state.ipaddress,
            port: this.state.port,
            priority: this.state.priority
        }).then((response) =&gt; {
            if (response.data.success === false) {
                alert(""error"")
            } else {
                //window.location.reload();
                dispatch(onEditServer(index, {
                    querymark: this.props.servers._id,
                    servername: this.state.servername,
                    jpname: this.state.jpname,
                    ipaddress: this.state.ipaddress,
                    port: this.state.port,
                    priority: this.state.priority
                }))
            }
        }).catch(() =&gt; {
        })
        this.setState({
            open: false
        })
    }*/

    handleCreate(server) {
        axios.post('/create', {
            servername: this.state.servername,
            jpname: this.state.jpname,
            ipaddress: this.state.ipaddress,
            port: this.state.port,
            priority: this.state.priority
        }).then((response) =&gt; {
            if (response.data.success === false) {
                alert(""error"");
            } else {
                window.location.reload()
                dispatch(onAddServer(index, {
                    servername: this.state.servername,
                    jpname: this.state.jpname,
                    ipaddress: this.state.ipaddress,
                    port: this.state.port,
                    priority: this.state.priority
                }))
            }
        }).catch(() =&gt; {
        })
        this.setState({
            open: false
        })
    }

    handleServerNameChange(event) {
        this.setState({
            servername: event.target.value
        })
    }

    handleJPNameChange(event) {
        this.setState({
            jpname: event.target.value
        })
    }

    handleIPChange(event) {
        this.setState({
            ipaddress: event.target.value
        })
    }

    handlePORTChange(event) {
        this.setState({
            port: event.target.value
        })
    }

    handlePriorityChange(event) {
        this.setState({
            priority: event.target.value
        })
    }

    state = {
        open: false
    }
    show = (size, dimmer) =&gt; () =&gt; this.setState({
        size,
        dimmer,
        open: true
    })

    close = () =&gt; this.setState({
        open: false
    })

    render() {
        const {open, size, dimmer} = this.state
        return (
            &lt;Grid&gt;
            &lt;MenuFix /&gt; 
            &lt;Container style = {{
                marginTop: '6em'
            }}&gt;
                &lt;Table unstackable&gt;
                    &lt;Table.Header&gt;
                        &lt;Table.Row&gt;
                        &lt;Table.HeaderCell colSpan='8'&gt;
                            &lt;Button basic color='violet' floated='right' icon labelPosition='left' primary size='tiny' onClick={this.show('small', 'blurring')}&gt;
                                &lt;Icon link color='violet' name='add' /&gt;Add
                            &lt;/Button&gt;
                            &lt;Modal size={size} dimmer={dimmer} open={open} onClose={this.close} closeIcon&gt;
                            &lt;Modal.Header&gt;Add&lt;/Modal.Header&gt;
                            &lt;Modal.Content&gt;
                                &lt;Modal.Description&gt;
                                    &lt;Form&gt;
                                &lt;Form.Group width='equal'&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;Server Name&lt;/label&gt;
                                    &lt;input value={this.state.servername} onChange={this.handleServerNameChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;JP Name&lt;/label&gt;
                                    &lt;input value={this.state.jpname} onChange={this.handleJPNameChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;/Form.Group&gt;
                                &lt;Form.Group width='equal'&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;IP Address&lt;/label&gt;
                                    &lt;input value={this.state.ipaddress} onChange={this.handleIPChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;Priority&lt;/label&gt;
                                    &lt;input value={this.state.priority} onChange={this.handlePriorityChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;/Form.Group&gt;
                                &lt;Form.Group&gt;
                                &lt;Form.Field&gt;
                                    &lt;label&gt;Port&lt;/label&gt;
                                    &lt;input value={this.state.port} onChange={this.handlePORTChange.bind(this)} /&gt;
                                &lt;/Form.Field&gt;
                                &lt;/Form.Group&gt;
                                &lt;/Form&gt;
                                &lt;/Modal.Description&gt;
                            &lt;/Modal.Content&gt;
                            &lt;Modal.Actions&gt;
                                &lt;Button color='black' onClick={this.close}&gt;
                                    Nope
                                &lt;/Button&gt;
                                &lt;Button positive icon='checkmark' labelPosition='right' content=""Submit"" onClick={this.handleCreate.bind(this)} /&gt;
                            &lt;/Modal.Actions&gt;
                            &lt;/Modal&gt;
                        &lt;/Table.HeaderCell&gt;
                        &lt;/Table.Row&gt;
                        &lt;Table.Row&gt;
                            &lt;Table.HeaderCell&gt;State&lt;Loader active inline size='small' /&gt;&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;Server Name&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;IP Address&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;Port&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;Updated&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;Priority&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;Edit&lt;/Table.HeaderCell&gt;
                            &lt;Table.HeaderCell&gt;Delete&lt;/Table.HeaderCell&gt;
                        &lt;/Table.Row&gt;
                    &lt;/Table.Header&gt;
                    &lt;SegmentList posts_data = {this.props.servers} onDeleteServer={this.handleDeleteServer.bind(this)} /&gt;
                &lt;/Table&gt;
            &lt;/Container&gt;
            &lt;/Grid&gt;
        )
    }
}

const mapStateToProps = (state) =&gt; {
    return {
        servers: state.servers
    }
}

const mapDispatchToProps = (dispatch) =&gt; {
    return {
        initServers: (servers) =&gt; {
            dispatch(initServers(servers))
        },
        onDeleteServer: (index) =&gt; {
            dispatch(deleteServer(index))
        },
        onEditServer: (index, data) =&gt; {
            dispatch(editServer(index, data))
        },
        onAddServer: (server) =&gt; {
            dispatch(addServer(server))
        }
    }
}

export default connect(
    mapStateToProps,
    mapDispatchToProps
)(SegmentContainer)
</code></pre>

<p>reducer.js</p>

<pre><code>//action types
const INIT_SERVERS = 'INIT_SERVERS'
const ADD_SERVER = 'ADD_SERVER'
const DELETE_SERVER = 'DELETE_SERVER'
const EDIT_SERVER = 'EDIT_SERVER'

//reducer

export default function(state, action) {
    if (!state) {
        state = {
            servers: []
        }
    }
    switch (action.type) {
    case INIT_SERVERS:
        return {
            servers: action.servers
        }
    case ADD_SERVER:
        return {
            servers: [...state.servers, action.server]
        }
    case EDIT_SERVER:
        return {
            servers: [...state.servers.slice(0, action.index), Object.assign({}, state.servers[action.index], {
                done: true
            }), ...state.servers.slice(action.index + 1)]
        /*servers: Object.assign([...state.servers], {
            [index]: action.data
        })*/
        //servers: Object.assign({}, state[action.index], action.data)
        }
    case DELETE_SERVER:
        return {
            servers: [
                ...state.servers.slice(0, action.index),
                ...state.servers.slice(action.index + 1)
            ]
        }
    default:
        return state
    }
}

// action creators
export const initServers = (servers) =&gt; {
    return {
        type: INIT_SERVERS,
        servers
    }
}

export const addServer = (server) =&gt; {
    return {
        type: ADD_SERVER,
        server
    }
}

export const deleteServer = (index) =&gt; {
    return {
        type: DELETE_SERVER,
        index
    }
}

export const editServer = (index, data) =&gt; {
    return {
        type: EDIT_SERVER,
        index,
        data
    }
}
</code></pre>

<p>SegmentList.js</p>

<pre><code>import React, { Component, PropTypes } from 'react'
import ListContainer from '../containers/ListContainer'


export default class SegmentList extends Component {
    static propTypes = {
        posts_data: PropTypes.array,
        onDeleteServer: PropTypes.func,
    //onEditServer: PropTypes.func
    }
    static defaultProps = {
        posts_data: []
    }

    handleDeleteServer(index) {
        if (this.props.onDeleteServer) {
            this.props.onDeleteServer(index)
        }
    }

    /*handleEditServer(index) {
        if (this.props.onEditServer) {
            this.props.onEditServer(index)
        }
    }*/

    render() {
        return (
            &lt;div&gt;
                {this.props.posts_data.map((data, i) =&gt; &lt;ListContainer
                post_data={data}
                key={i}
                index={i} onDeleteServer={this.handleDeleteServer.bind(this)} /&gt;
            )}
            &lt;/div&gt;
        )
    }
}
</code></pre>
","8763651","","8763651","","2017-10-18 06:17:49","2017-10-18 06:17:49","How can I get the right data from database with react","<javascript><node.js><ajax><reactjs><react-redux>","1","0","","",""
"32940111","1","","","2015-10-05 01:25:08","","2","760","<ul>
<li>using react as engine <a href=""https://github.com/reactjs/express-react-views"" rel=""nofollow"">https://github.com/reactjs/express-react-views</a> vs</li>
<li>calling react renderToString and then reander with other engine <a href=""https://strongloop.com/strongblog/node-js-react-isomorphic-javascript-why-it-matters/"" rel=""nofollow"">https://strongloop.com/strongblog/node-js-react-isomorphic-javascript-why-it-matters/</a></li>
<li>may be others like res.send  + renderToString</li>
</ul>
","2677275","","3993662","","2015-10-05 01:25:41","2015-10-05 01:25:41","Pros and cons of using only express+react instead of express+react+jade/ejs","<node.js><express><reactjs><pug><ejs>","0","1","1","2016-04-09 08:11:44",""
"47431317","1","","","2017-11-22 09:44:40","","0","169","<p>I am trying to render my react app from the server express but it is throwing me an error:</p>

<pre><code>throw err;
      ^

SyntaxError: /Users/f/Documents/GitHub/my-app/server/app.js: Unexpected token (34:6)
  32 |   const context = {};
  33 |   const markup = ReactDOMServer.renderToString(
&gt; 34 |       &lt;StaticRouter location={req.url} context={context}&gt;
     |       ^
  35 |         &lt;App /&gt;
  36 |       &lt;/StaticRouter&gt;
  37 |   );
    at Parser.pp$5.raise (/Users/f/Documents/GitHub/my-app/node_modules/babylon/lib/index.js:4454:13)
    at Parser.pp.unexpected (/Users/f/Documents/GitHub/my-app/node_modules/babylon/lib/index.js:1761:8)
    at Parser.pp$3.parseExprAtom (/Users/f/Documents/GitHub/my-app/node_modules/babylon/lib/index.js:3750:12)
    at Parser.pp$3.parseExprSubscripts (/Users/f/Documents/GitHub/my-app/node_modules/babylon/lib/index.js:3494:19)
    at Parser.pp$3.parseMaybeUnary (/Users/f/Documents/GitHub/my-app/node_modules/babylon/lib/index.js:3474:19)
    at Parser.pp$3.parseExprOps (/Users/f/Documents/GitHub/my-app/node_modules/babylon/lib/index.js:3404:19)
    at Parser.pp$3.parseMaybeConditional (/Users/f/Documents/GitHub/my-app/node_modules/babylon/lib/index.js:3381:19)
    at Parser.pp$3.parseMaybeAssign (/Users/f/Documents/GitHub/my-app/node_modules/babylon/lib/index.js:3344:19)
    at Parser.pp$3.parseExprListItem (/Users/f/Documents/GitHub/my-app/node_modules/babylon/lib/index.js:4312:16)
    at Parser.pp$3.parseCallExpressionArguments (/Users/f/Documents/GitHub/my-app/node_modules/babylon/lib/index.js:3573:20)
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
</code></pre>

<p>//server.js</p>

<pre><code>// server/app.js
import path from 'path';
import express from 'express';
import morgan from 'morgan';
import React from 'react';
const ReactDOMServer = require('react-dom/server');
import { StaticRouter } from 'react-router-dom';
import { App } from '../src/App';
const app = express();

// Setup logger
app.use(morgan(
    ':remote-addr - :remote-user [:date[clf]] "":method :url HTTP/:http-version"" :status :res[content-length] :response-time ms'));
// use ejs templates
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Serve static assets
app.use(express.static(path.resolve(__dirname, '..', 'build')));

// Always return the main index.html, so react-router render the route in the client
// app.get('*', (req, res) =&gt; {
//   console.log('hi from app.get');
//
//   res.sendFile(path.resolve(__dirname, '..', 'build', 'index.html'));
// });



// universal routing and rendering
app.get('*', (req, res) =&gt; {
  const context = {};
  const markup = ReactDOMServer.renderToString(
      &lt;StaticRouter location={req.url} context={context}&gt;
        &lt;App /&gt;
      &lt;/StaticRouter&gt;
  );

  // context.url will contain the URL to redirect to if a &lt;Redirect&gt; was used
  if (context.url) {
    return res.redirect(302, context.url);
  }

  // TODO manage 404
  const status = context.matchedRoutes.page.is404 ? 404 : 200;
  return res.status(status).render('index', { markup });
});



module.exports = app;
</code></pre>

<p>and my app</p>

<pre><code>export const App = () =&gt; (
    &lt;div className=""App""&gt;
      &lt;Helmet title=""You Are Doing Great"" /&gt;
      &lt;Header /&gt;
      &lt;Routes /&gt;
      &lt;Footer /&gt;
    &lt;/div&gt;
);
export default App;
</code></pre>

<p>and my routes like this </p>

<pre><code>const Switches = props =&gt; (
  &lt;Switch&gt;
    &lt;Route exact path=""/"" component={Home} /&gt;
    &lt;Route exact path=""/projects"" component={Home} /&gt;
    &lt;Route path=""/projects/:ProjectId"" component={SingleProject} /&gt;
    &lt;Route component={NotFound} contextData={{ is404: true }} /&gt;
  &lt;/Switch&gt;
);
</code></pre>

<p>what i am trying to do is to render the react app from my server. I get an error in webstorm that renderToString is a unresolved function or method.</p>

<p>I don't understand what i am missing here.
i used <a href=""https://github.com/ReactTraining/react-router/issues/4789"" rel=""nofollow noreferrer"">this Github</a> reference.</p>
","7053185","","6748913","","2017-11-22 10:07:31","2017-11-22 10:07:31","Serving React app on the server ReactDOMServer.renderToString and StaticRouter","<reactjs><react-router>","1","0","","",""
"40482990","1","","","2016-11-08 09:14:04","","0","76","<p>I am using react for creating a sample page which has server side rendering using <strong>renderToString()</strong> for SEO friendly pages.</p>

<p>this is my server.js code</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>app.get('*', (req, res) =&gt; {
  match(
    { routes, location: req.url },
    (err, redirectLocation, renderProps) =&gt; {
      // in case of error display the error message
      if (err) {
        return res.status(500).send(err.message);
      }
      // generate the React markup for the current route
      let markup;
      if (renderProps) {
        markup = renderToString(&lt;RouterContext{...renderProps}/&gt;);
      } else { 
        res.status(404);
      }
      // render the index template with the embedded React markup
      return res.render('index', { markup });
    }
  );
});</code></pre>
</div>
</div>
</p>

<p>My page is search page which is static initially and when the user enters the input it fetches data from backend and renders a list of components in the same page.</p>

<p>When I see view page source in browser, I can see only the initial static content, not the html of list which renders after the backend response.</p>

<p>What is the right method to get the updated HTML when the component state changes.</p>
","1066839","","","","","2017-03-17 12:47:24","HTML markup does not change when the UI changes in isomorphic react web app","<reactjs><ejs><isomorphic-javascript><serverside-rendering>","2","0","","",""
"41441181","1","","","2017-01-03 10:18:18","","0","344","<p>I get the following errors:</p>

<pre><code>bundle.js:1079 Warning: render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.printWarning @ bundle.js:1079warning @ bundle.js:1103_renderSubtreeIntoContainer @ bundle.js:11201render @ bundle.js:11271181../components/LoginForm/index.jsx @ bundle.js:20603s @ bundle.js:1e @ bundle.js:1(anonymous function) @ bundle.js:1
bundle.js:1079 Warning: render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.printWarning @ bundle.js:1079warning @ bundle.js:1103_renderSubtreeIntoContainer @ bundle.js:11241render @ bundle.js:11271181../components/LoginForm/index.jsx @ bundle.js:20603s @ bundle.js:1e @ bundle.js:1(anonymous function) @ bundle.js:1
bundle.js:1079 Warning: validateDOMNesting(...): &lt;html&gt; cannot appear as a child of &lt;body&gt;. See body &gt; App &gt; html.printWarning @ bundle.js:1079warning @ bundle.js:1103validateDOMNesting @ bundle.js:17187mountComponent @ bundle.js:7165mountComponent @ bundle.js:12249performInitialMount @ bundle.js:6038mountComponent @ bundle.js:5925mountComponent @ bundle.js:12249performInitialMount @ bundle.js:6038mountComponent @ bundle.js:5925mountComponent @ bundle.js:12249mountComponentIntoNode @ bundle.js:10953perform @ bundle.js:14898batchedMountComponentIntoNode @ bundle.js:10975perform @ bundle.js:14898batchedUpdates @ bundle.js:9984batchedUpdates @ bundle.js:13020_renderNewRootComponent @ bundle.js:11169_renderSubtreeIntoContainer @ bundle.js:11250render @ bundle.js:11271181../components/LoginForm/index.jsx @ bundle.js:20603s @ bundle.js:1e @ bundle.js:1(anonymous function) @ bundle.js:1
bundle.js:1079 Warning: Unknown DOM property charset. Did you mean charSet?
    in meta (created by App)
    in head (created by App)
    in html (created by App)
    in AppprintWarning @ bundle.js:1079warning @ bundle.js:1103validateProperty @ bundle.js:9503warnUnknownProperties @ bundle.js:9521handleElement @ bundle.js:9545onBeforeMountComponent @ bundle.js:9550callHook @ bundle.js:9587emitEvent @ bundle.js:9599onBeforeMountComponent @ bundle.js:9876mountComponent @ bundle.js:12246mountChildren @ bundle.js:11627_createContentMarkup @ bundle.js:7337mountComponent @ bundle.js:7204mountComponent @ bundle.js:12249mountChildren @ bundle.js:11627_createContentMarkup @ bundle.js:7337mountComponent @ bundle.js:7204mountComponent @ bundle.js:12249performInitialMount @ bundle.js:6038mountComponent @ bundle.js:5925mountComponent @ bundle.js:12249performInitialMount @ bundle.js:6038mountComponent @ bundle.js:5925mountComponent @ bundle.js:12249mountComponentIntoNode @ bundle.js:10953perform @ bundle.js:14898batchedMountComponentIntoNode @ bundle.js:10975perform @ bundle.js:14898batchedUpdates @ bundle.js:9984batchedUpdates @ bundle.js:13020_renderNewRootComponent @ bundle.js:11169_renderSubtreeIntoContainer @ bundle.js:11250render @ bundle.js:11271181../components/LoginForm/index.jsx @ bundle.js:20603s @ bundle.js:1e @ bundle.js:1(anonymous function) @ bundle.js:1
bundle.js:1079 Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:
 (client) &lt;meta data-reactid=""3
 (server) &lt;div data-reactid=""6""printWarning @ bundle.js:1079warning @ bundle.js:1103_mountImageIntoNode @ bundle.js:11356mountComponentIntoNode @ bundle.js:10961perform @ bundle.js:14898batchedMountComponentIntoNode @ bundle.js:10975perform @ bundle.js:14898batchedUpdates @ bundle.js:9984batchedUpdates @ bundle.js:13020_renderNewRootComponent @ bundle.js:11169_renderSubtreeIntoContainer @ bundle.js:11250render @ bundle.js:11271181../components/LoginForm/index.jsx @ bundle.js:20603s @ bundle.js:1e @ bundle.js:1(anonymous function) @ bundle.js:1
bundle.js:826 Uncaught Error: Unable to find element with ID 2.(…)
</code></pre>

<p>I'm trying to follow the react tutorial <a href=""https://facebook.github.io/react/tutorial/tutorial.html"" rel=""nofollow noreferrer"">https://facebook.github.io/react/tutorial/tutorial.html</a> which I must say is pretty poor. Also the tutorials which exist on the net are a mix of the different versions which some using deprecated methods etc. it's a jungle!</p>

<p>render method:</p>

<pre><code>'use strict';

import React from 'react';

export default class LoginForm extends React.Component {
  constructor(props) {
    super(props);

    this.state = { isToggleOn: true };

    this.submitFormClick = this.submitFormClick.bind(this);
  }

  submitFormClick(e) {
    e.preventDefault();

    this.setState(prevState =&gt; ({
      isToggleOn: !prevState.isToggleOn
    }));
  }

  render() {
    return (
      &lt;div&gt;{this.state.isToggleOn ? 'TRUE TOGGLE' : 'FALSE TOGGLE'}
        &lt;form role=""form"" onSubmit=""""&gt;
          &lt;input type=""text"" name=""username"" /&gt;
          &lt;br /&gt;
          &lt;input type=""password"" name=""password"" /&gt;
          &lt;br /&gt;
          &lt;button onClick={this.submitFormClick}&gt;Login&lt;/button&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p>entrance method in index.js file:</p>

<pre><code>ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));
</code></pre>

<p>main.html:</p>

<pre><code>&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=""utf-8"" /&gt;
  &lt;title&gt;index.html&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=""root""&gt;&lt;/div&gt;
  &lt;script src=""static/bundle.js""&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>

<p>How I render it server side:</p>

<pre><code>const App = React.createFactory(AppComponent);
const html = ReactDOMServer.renderToString(App({}));

res.setHeader('Content-Type', 'text/html; charset=utf-8');
res.status(200)
  .send(html);
</code></pre>
","1137669","","","","","2017-01-03 10:32:11","Multiple errors with reactjs example","<javascript><node.js><reactjs>","1","0","1","",""
"41486804","1","","","2017-01-05 13:52:12","","3","2769","<p>I'm trying to set up server-side rendering with the newest version of react-router v.4. I followed this tutorial <a href=""https://react-router.now.sh/ServerRouter"" rel=""nofollow noreferrer"">https://react-router.now.sh/ServerRouter</a>.   </p>

<p>I get following error when I refresh browser: <strong>Invariant Violation: React.Children.only expected to receive a single React element child.</strong></p>

<p>my <strong>routes.jsx</strong> file:</p>

<pre><code>export default () =&gt;
  &lt;div&gt;
    &lt;Header /&gt;
    &lt;Match pattern=""/"" component={Home} /&gt;
    &lt;Match pattern=""/about"" component={About} /&gt;
    &lt;Miss component={NotFound} /&gt;
  &lt;/div&gt;;
</code></pre>

<p>and in <strong>index.jsx</strong> I'm rendering app</p>

<pre><code>import  BrowserRouter from 'react-router';    
import Routes from './routes';

ReactDOM.render(&lt;BrowserRouter&gt; &lt;Routes /&gt; &lt;/BrowserRouter&gt;, document.getElementById('app'));
</code></pre>

<p>Now as server I'm using <strong>express.js</strong>. Here is my configuration:</p>

<pre><code>import  Routes  from '../routes';

server.use((req, res) =&gt; {
  const context = createServerRenderContext();
  let markup = renderToString(
    &lt;ServerRouter location={req.url} context={context} &gt; &lt;Routes /&gt; &lt;/ServerRouter&gt;);
  const result = context.getResult();

  if (result.redirect) {
    res.writeHead(301, {
      Location: result.redirect.pathname,
    });
    res.end();
  } else {
    if (result.missed) {
      res.writeHead(404);
      markup = renderToString(
        &lt;ServerRouter location={req.url} context={context}&gt; &lt;Routes /&gt; &lt;/ServerRouter&gt;);
    }
    res.write(markup);
    res.end();
  }
});
</code></pre>

<p>I didn't find any tutorial for server-rendering with this version of react-routes except official. 
Can anyone help me what I'm doing wrong ? thanks.   </p>
","3055526","","3055526","","2017-01-05 15:52:05","2017-10-14 17:16:27","server rendering with react-router v4 and express.js","<javascript><node.js><reactjs><express><react-router>","5","0","1","",""
"49154914","1","","","2018-03-07 14:57:49","","4","175","<p>I created new boilerplate for react16.</p>

<p><a href=""https://github.com/jasonvillalon/react16-boilerplate"" rel=""nofollow noreferrer"">https://github.com/jasonvillalon/react16-boilerplate</a></p>

<p>its working when running in development using: </p>

<pre><code>npm start
npm start:webpack
</code></pre>

<p>but when running in production it throws error on renderToString</p>

<pre><code>NODE_ENV=production npm start
</code></pre>

<p>the webpack succeeds without error but when rendering the page the error occur:</p>

<pre><code>ERROR: TypeError: Cannot set property 'getCurrentStack' of undefined
at setCurrentDebugStack (webpack:///./node_modules/react-dom/cjs/react-dom-server.node.development.js?:1816:48)
at ReactDOMServerRenderer.read (webpack:///./node_modules/react-dom/cjs/react-dom-server.node.development.js?:2225:13)
at renderToString (webpack:///./node_modules/react-dom/cjs/react-dom-server.node.development.js?:2494:29)
at _callee$ (webpack:///./src/server.jsx?:66:49)
at tryCatch (/Users/jasonvillalon/Documents/fun-projects/from-scratch/node_modules/babel-polyfill/node_modules/regenerator-runtime/runtime.js:65:40)
at Generator.invoke [as _invoke] (/Users/jasonvillalon/Documents/fun-projects/from-scratch/node_modules/babel-polyfill/node_modules/regenerator-runtime/runtime.js:303:22)
at Generator.prototype.(anonymous function) [as next] (/Users/jasonvillalon/Documents/fun-projects/from-scratch/node_modules/babel-polyfill/node_modules/regenerator-runtime/runtime.js:117:21)
at step (webpack:///./src/server.jsx?:27:191)
at eval (webpack:///./src/server.jsx?:27:437)
at new Promise (&lt;anonymous&gt;)
</code></pre>

<p>any body have an idea what is going on?</p>

<p>Best Regards,
Jason</p>
","2526483","","2526483","","2018-03-07 16:14:16","2018-03-07 16:14:16","ReactDOM RSS renderToString production error","<reactjs><webpack><react-hot-loader><ssr>","0","2","2","",""
"33403549","1","33403843","","2015-10-28 23:46:47","","7","3801","<p>I can't access the DOM with server implementation of react, react-dom and react-router.  I either have ReferenceError: document is not defined, or Browser history needs a DOM errors.</p>

<p>Server entry:</p>

<pre><code>module.exports = function( req, res, next ) {
  match({ routes, location: req.url }, (error, redirectLocation, renderProps) =&gt; {
    if (error) {
        res
            .status(500)
            .send(error.message);
    } else if (redirectLocation) {
        res.redirect(302, redirectLocation.pathname + redirectLocation.search);
    } else if (renderProps) {
        res
            .status( 200 )
            .set( 'Content-Type', 'text/html' )
            .send( '&lt;!doctype html&gt;' +
                renderToString(
                    [ &lt;RoutingContext {...renderProps} /&gt;,
                    &lt;HtmlDocument /&gt; ]
                )
            );
    } else {
        res
            .status(404)
            .send('Not found');
    }
  })
};
</code></pre>

<p>client.js:</p>

<pre><code>import { render } from 'react-dom';
import routes from './routes';

render( routes, document.getElementById('app') )
</code></pre>

<p>routes.jsx:</p>

<pre><code>import React from 'react';
import { Router, Route, IndexRoute } from 'react-router';
import createBrowserHistory from 'history/lib/createBrowserHistory';

import Application from './Application';
import Index from './pages/index';
import App from './pages/app';
import Auth from './pages/auth';
import Login from './pages/auth/components/Login';
import Signup from './pages/auth/components/Signup';
import NotFound from './pages/notFound';

var routes = (
  &lt;Router history={createBrowserHistory()}&gt;
    &lt;Route path=""/"" component={Application}&gt;
    &lt;IndexRoute component={Index} /&gt;
        &lt;Route path=""app"" component={App} onEnter={ App.requireAuth } /&gt;
        &lt;Route path=""auth"" component={Auth} /&gt;
            &lt;Route path=""signup"" component={Signup} /&gt;
            &lt;Route path=""login"" component={Login} /&gt;
        &lt;Route path=""*"" component={NotFound} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);

export default routes;
</code></pre>

<p>Thanks in advance for help.</p>
","5071750","","","","","2017-07-26 16:49:41","Cannot access DOM with server-side render - react 0.14.1, react-dom 0.14.1 and react-router 1.0.0-rc3","<javascript><reactjs><react-router>","1","2","3","",""
"40994076","1","","","2016-12-06 11:18:39","","4","337","<p>Im using <code>create-react-app</code> tool for building my first react application with <code>react-routes</code> and now I would like to use server side rendering to avoid loading all pages at once.</p>

<p>I followed guides and installed express.js, separated client-side and server-side with .js files and run it with</p>

<pre><code>NODE_ENV=production babel-node --presets 'react,es2015' src/server.js
</code></pre>

<p>But I get an error when app is trying to compile sass @import statements. I think I have to serve assets first, but I don't know how to insert webpack functions in server.js logic</p>

<p>create-react-app also has <code>npm run build</code> command for production build and create js and css files, so maybe there is some way to skip assets parts while compiling server.js ?</p>

<p><strong>Server.js</strong> file contents</p>

<pre><code>import path from 'path';
import { Server } from 'http';
import Express from 'express';
import React from 'react';
import { renderToString } from 'react-dom/server';
import { match, RouterContext } from 'react-router';
import routes from './routes';
import NoMatch from './pages/NoMatch';

// initialize the server and configure support for ejs templates
const app = new Express();
const server = new Server(app);
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// define the folder that will be used for static assets
app.use(Express.static(path.join(__dirname, 'static')));

// universal routing and rendering
app.get('*', (req, res) =&gt; {
  match(
    { routes, location: req.url },
    (err, redirectLocation, renderProps) =&gt; {

      // in case of error display the error message
      if (err) {
        return res.status(500).send(err.message);
      }

      // in case of redirect propagate the redirect to the browser
      if (redirectLocation) {
        return res.redirect(302, redirectLocation.pathname + redirectLocation.search);
      }

      // generate the React markup for the current route
      let markup;
      if (renderProps) {
        // if the current route matched we have renderProps
        markup = renderToString(&lt;RouterContext {...renderProps}/&gt;);
      } else {
        // otherwise we can render a 404 page
        markup = renderToString(&lt;NoMatch/&gt;);
        res.status(404);
      }

      // render the index template with the embedded React markup
      return res.render('index', { markup });
    }
  );
});

// start the server
const port = process.env.PORT || 3000;
const env = process.env.NODE_ENV || 'production';
server.listen(port, err =&gt; {
  if (err) {
    return console.error(err);
  }
  console.info(`Server running on http://localhost:${port} [${env}]`);
});
</code></pre>
","5365389","","3204136","","2017-06-14 15:40:31","2017-06-14 15:40:31","create-react-app for server-side rendering","<reactjs>","0","1","","",""
"42130897","1","","","2017-02-09 07:44:18","","3","579","<p>I'm adding authentication into my app, which uses react-router.And react router is handling my login/signup page.Also I'm using passport for authentication and passport authentication is working fine.</p>

<p>But I do experience a problem using this when my passport has a successful authentication and I'm redirecting to my dashboard page.</p>

<p><strong>server.js:-</strong></p>

<pre><code>app.get('/auth/google/callback',
passport.authenticate('google', {
successRedirect: '/dashboard',
failureRedirect: '/',
 }));



 app.get('*',(req, res) =&gt; {
  if (process.env.NODE_ENV === 'development') {
    webpackIsomorphicTools.refresh();
  }
  const memoryHistory = createHistory(req.originalUrl);
  const store=configureStore(memoryHistory);
  const history = syncHistoryWithStore(memoryHistory, store);

  function hydrateOnClient() {
    res.send(`&lt;!doctype html&gt;${ReactDOM.renderToString(&lt;Default assets={webpackIsomorphicTools.assets()} store={store} /&gt;)}`);
  }

  match({ history, routes: routes(store), location: req.originalUrl },
  (error, redirectLocation, renderProps) =&gt; {
    if (redirectLocation) {
      res.redirect(redirectLocation.pathname + redirectLocation.search);
    } else if (error) {
      console.error('ROUTER ERROR:', pretty.render(error));
      res.status(500);
      hydrateOnClient();
    } else if (renderProps) {
      const component = (
        &lt;Provider store={store} key=""provider""&gt;
          &lt;RouterContext {...renderProps} /&gt;
        &lt;/Provider&gt;
      );

      res.status(200);

      global.navigator = { userAgent: req.headers['user-agent'] };

      res.send(`&lt;!doctype html&gt;${ReactDOM.renderToStaticMarkup(&lt;Default assets={webpackIsomorphicTools.assets()} component={component} store={store} /&gt;)}`);
    } else {
      res.status(404).send('Not found');
    }
  });
});
</code></pre>

<p>What's the best way to derive a URL on the server side to a dashboard route served by react-router?</p>
","7397626","","7397626","","2017-02-09 08:03:31","2017-02-16 05:26:25","Redirect into react-router from express","<node.js><reactjs><express><react-router>","0","0","","",""
"48320657","1","48340374","","2018-01-18 11:49:35","","0","221","<p>I'm using <code>react-router-redux@5.0.0-alpha.9</code> and I haven't found a workaround to capture the <code>&lt;Redirect&gt;</code> URL on Server Side Rendering.</p>

<p>Use cases:</p>

<ul>
<li>Not identified user tries to access a secure route, <code>&lt;Redirect&gt;</code> sends the user to login route.</li>
<li>Already logged in user tries to access login form, <code>&lt;Redirect&gt;</code> sends the user to main private route.</li>
</ul>

<p>Right now the redirect is happening in the browser but it would be great to provide a way for capturing <code>&lt;Redirect&gt;</code> URL and send a proper redirect from the server.</p>

<p>I would love to do something similar to the <code>&lt;StaticRouter&gt;</code> solution (using <code>context</code> with <code>&lt;ConnectedRouter&gt;</code>)</p>

<pre><code>import { ConnectedRouter } from 'react-router-redux';

const context = {};
const app = renderToString(
  &lt;Provider store={store}&gt;
    &lt;ConnectedRouter history={history} isSSR context={context}&gt;
      &lt;Application /&gt;
    &lt;/ConnectedRouter&gt;
  &lt;/Provider&gt;
);

if (context.url) {
  const HTTP_FOUND = 302;

  res.writeHead(HTTP_FOUND, { Location: context.url });
  res.end();
}
</code></pre>

<p>I've tried <code>history.listen</code> as well and it's not firing the location change.</p>

<pre><code>import { ConnectedRouter } from 'react-router-redux';
import createHistory from 'history/createMemoryHistory';

const context = {};
const history = createHistory({
  initialEntries: [req.url], // req.url comes from express server
  initialIndex: 0,
});

history.listen(location =&gt; {
  // this gets never called
  console.log('History changed!', location);
});

const app = renderToString(
  &lt;Provider store={store}&gt;
    &lt;ConnectedRouter history={history} isSSR&gt;
      &lt;Application /&gt;
    &lt;/ConnectedRouter&gt;
  &lt;/Provider&gt;
);
</code></pre>
","7810859","","","","","2018-01-19 12:35:41","How to get react-router-redux redirect URL in SSR","<redux><history.js><react-router-redux>","1","0","1","",""
"32789537","1","32789708","","2015-09-25 19:43:27","","4","817","<p>I'm with version 1.0.0-rc1 and my match function won't render my route correctly.</p>

<p>This is my server </p>

<pre><code>import express from 'express';
import React from 'react';
import createLocation from 'history/lib/createLocation'
import Router, { match, RoutingContext } from 'react-router';
import createRoutes from './create-routes';

const app = express();
const routes = createRoutes();

app.use((req, res) =&gt; {
  let location = createLocation(req.url);

  match({ routes, location }, (error, redirectLocation, renderProps) =&gt; {
    if (redirectLocation)
      res.status(301).redirect(redirectLocation.pathname + redirectLocation.search)
    else if (error)
      res.status(500).send(error.message)
    else if (renderProps == null)
      res.status(404).send('Not found')
    else
      res.send(React.renderToString(&lt;RoutingContext {...renderProps}/&gt;))
  });
});

export default app;
</code></pre>

<p>This is my routes</p>

<pre><code>import React from 'react';
import { Route } from 'react-router';
import Application from './components/Application.react';
import Home from './components/Home.react';

export default function() {
  return (
    &lt;Route path=""/"" component={Application}&gt;
      &lt;Route path=""home"" component={Home} /&gt;
    &lt;/Route&gt;
  );
}
</code></pre>

<p>What do i do wrong in this? When i ask for /home, it should render <code>&lt;h1&gt;Home&lt;/h1&gt;</code> instead of <code>&lt;h1&gt;Application&lt;/h1&gt;</code>. Just simple as that.</p>

<p>I based this on this <a href=""https://github.com/rackt/react-router/blob/master/docs/guides/advanced/ServerRendering.md"" rel=""nofollow"">https://github.com/rackt/react-router/blob/master/docs/guides/advanced/ServerRendering.md</a></p>

<p>Thank you</p>
","5369102","","","","","2015-09-25 20:01:59","Server side react-router won't render my routes","<node.js><express><reactjs><react-router>","1","0","1","",""
"42181682","1","42182007","","2017-02-11 21:55:41","","4","2429","<p>I am trying to wire up a minimum proof-of-concept to render a single React component server-side.</p>

<p>When I run my app, I get an error:</p>

<p><code>SyntaxError: express.js: Unexpected token (10:41)</code></p>

<p>And the offending line is:</p>

<pre><code>&gt; 10 |   res.send(ReactDOMServer.renderToString(&lt;Component msg={msg} /&gt;));
     |                                          ^
</code></pre>

<p>This is my <code>package.json</code>:</p>

<pre><code>{
  ""name"": ""ssrReact"",
  ""version"": ""1.0.0"",
  ""main"": ""index.js"",
  ""license"": ""MIT"",
  ""scripts"": {
    ""start"": ""nodemon express.js --exec babel-node --presets es2015,stage-2""
  },
  ""dependencies"": {
    ""express"": ""^4.14.1"",
    ""react"": ""^15.4.2"",
    ""react-dom"": ""^15.4.2""
  },
  ""devDependencies"": {
    ""babel-cli"": ""^6.22.2"",
    ""babel-preset-es2015"": ""^6.22.0"",
    ""babel-preset-stage-2"": ""^6.22.0"",
    ""nodemon"": ""^1.11.0""
  }
}
</code></pre>

<p>This is my <code>Component.js</code>:</p>

<pre><code>import React from 'react';

class Component extends React.Component {
  render() {
    return &lt;h1&gt;Hello, {this.props.msg}&lt;/h1&gt;;
  }
}

export default Component;
</code></pre>

<p>This is my <code>express.js</code>:</p>

<pre><code>import express from 'express';
import React from 'react';
import ReactDOMServer from 'react-dom/server';
import Component from './Component';

const app = express();

function home (req, res) {
  const msg = req.params.msg || 'Hello';
  res.send(ReactDOMServer.renderToString(&lt;Component msg={msg} /&gt;));
}

app.get('/', home);
app.get('/:msg', home);

app.listen(3333);
</code></pre>

<p>What do I need to change in order to allow Express to serve a React component?</p>

<p>Thanks for the help.</p>
","1322427","","","","","2017-02-11 22:33:11","Using express and es6 to render react and jsx server side","<node.js><reactjs><express><ecmascript-6><jsx>","1","0","1","",""
"33427226","1","","","2015-10-30 00:52:42","","6","1562","<p>In React there's a renderToString and renderToStaticMarkup.</p>

<p>As far as I know renderToString retains all the react-id attributes which makes it slower to load.  So when is using renderToString actually better?</p>
","4062907","","","","","2015-10-30 03:07:51","React - What is the difference between renderToString and renderToStaticMarkup","<reactjs>","1","0","","",""
"42183312","1","42931258","","2017-02-12 01:35:49","","0","333","<p>So my application requires a link to be included in Google's InfoWindow, however, the infoWindow's content only accepts a string. For the life of me, I can't figure out how to pass a <code>&lt;Link&gt;</code> into content. My component is set up like</p>

<pre><code>import React, { Component } from 'react';
import { connect } from 'react-redux';
import { fetchWells } from '../actions/index';
import { Link } from 'react-router'

class Map extends Component {
  constructor(props) {
    super(props);
  }
  componentDidMount() {
    const markers = [];
    this.props.fetchWells();
    const map = new google.maps.Map(this.refs.map, {
      zoom: 7,
      center: {
        lat: this.props.route.lat,
        lng: this.props.route.lng
      }
    });
    this.setState( { map })
  };

  renderMarkerContent(id) {
    return &lt;Link to={`wells/${id}`}&gt;Link&lt;/Link&gt;;
  }

  componentWillReceiveProps(nextProps) {
    const markers = [];
    console.log(nextProps.wells)
    nextProps.wells.forEach((well) =&gt; {
      if (well.location === null) return;
      console.log(well)
      const marker = new google.maps.Marker({
        position: { lat: well.location.coordinates[0], lng: well.location.coordinates[1]},
        map: this.state.map
      });
      const infoWindow = new google.maps.InfoWindow({
        content: this.renderMarkerContent(),
      });
      marker.addListener('click', () =&gt; {
        infoWindow.open(map, marker)
      });
      markers.push(marker)
    })
  }
</code></pre>

<p>I'm pretty new to React, so I feel like there is a way to maybe Render the content as a separate component maybe? Or somehow render the <code>&lt;Link&gt;</code> tag and stringify it. Any clues?</p>

<p><strong>EDIT</strong></p>

<p>So I've gotten the links to render using by passing a function that returns the <code>&lt;Link&gt;</code></p>

<pre><code>renderMarkerContent(id) {
    return ReactDOMServer.renderToString(&lt;Link to={`wells/${id}`}&gt;Well Page&lt;/Link&gt;)
}
</code></pre>

<p>Not sure if this is the best solution, but it doesn't fully render and gives me an <code>&lt;a&gt;</code> element without the href. </p>
","6531573","","1016716","","2017-02-12 08:42:35","2017-03-29 16:59:55","Render react-router <Link> inside google InfoWindow","<javascript><google-maps><reactjs><react-router>","1","0","","",""
"42793452","1","","","2017-03-14 18:07:12","","1","218","<p>We are using react-rails gem v1.10.0 to incorporate react in our rails app. The <code>renderToString</code> method is used in order to create a popover effect as such</p>

<pre><code>popover = React.createElement Popover, user: @props.user, avatar: @imageSrc()
React.renderToString(popover)
</code></pre>

<p>however I am getting a <code>Uncaught TypeError: React.renderToString is not a function</code></p>

<p>This used to work fine but I think I'm getting the error now because <code>renderToString</code> is under <a href=""https://facebook.github.io/react/docs/react-dom-server.html"" rel=""nofollow noreferrer"">RenderDOMServer</a>. Unfortunately, when I try </p>

<pre><code>ReactDOMServer.renderToString(element)
</code></pre>

<p>I get an <code>Uncaught ReferenceError: ReactDOMServer is not defined</code></p>

<p>How do I get ReactDOMServer in the application so I can use the <code>renderToString</code> method?</p>
","2841163","","","","","2017-03-14 18:07:12","react-rails React.renderToString is not a function","<ruby-on-rails><reactjs><react-rails>","0","4","1","",""
"42821551","1","","","2017-03-15 22:04:48","","6","3460","<p>I can't fix this error...
I start server, everything is ok, since I refresh localhost:3000
Then it show me an error:</p>

<p>TypeError: (0 , _reactRouter.match) is not a function</p>

<p>I have installed ""react-router"": ""^4.0.0""</p>

<pre><code>import Express from 'express';
import {RouterContext, match} from 'react-router';
import {renderToString } from 'react-dom/server';
import React from 'react';
import routes from './routes.js'



var app = new Express();
app.set('view engine', 'ejs');
app.set('views',__dirname);


//////////////////////////////////////////////////////////////////////
app.get('*', (req, res) =&gt; {
    match(
        { routes, location: req.url },
        (err, redirectLocation, renderProps) =&gt; {

            if (err) {
                return res.status(500).send(err.message);
            }

            if (redirectLocation) {
                return res.redirect(302, redirectLocation.pathname + redirectLocation.search);
            }

            var markup;
            if (renderProps) {
                // if the current route matched we have renderProps
                markup = renderToString(&lt;RouterContext {...renderProps}/&gt;);
            } else {
                // otherwise we can render a 404 page
                markup = renderToString(&lt;NotFoundPage/&gt;);
                res.status(404);
            }

            // render the index template with the embedded React markup
            return res.render('index', { markup });
        }
    );
});
//////////////////////////////////////////////////////////////////////////////////


var port = process.env.PORT || 3000;
app.listen(port, ()=&gt;{
    console.log('Server is listening on port ' + port );
});
</code></pre>
","7225546","","","","","2017-09-02 11:07:51","Routing, Universal apps (Nodejs, React), Error (0 , _reactRouter.match) is not a function","<javascript><reactjs><react-router><isomorphic-javascript>","1","0","1","",""
"50545594","1","","","2018-05-26 17:54:31","","0","22","<pre><code>    // renderToString
try {
    initView = renderToString(
        &lt;Provider store={store}&gt;
            &lt;StaticRouter location={location} context={context}&gt;
                {renderRoutes(routes)}
            &lt;/StaticRouter&gt;
        &lt;/Provider&gt;
    );
    console.log('lzr======');
    console.log(initView);
    console.log('lzr======');
}
</code></pre>

<p>with running this, get initView like below:</p>

<pre><code>&lt;div data-reactroot=""""&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=""common-side-bar""&gt;&lt;a href=""/""&gt;&lt;div class=""bar-top""&gt;&lt;/div&gt;&lt;/a&gt;&lt;div class=""pandect""&gt;&lt;span class=""icon-pandest""&gt;&lt;/span&gt;some thing&lt;/div&gt;&lt;div class=""menu""&gt;&lt;ul style=""width:180px"" class=""ant-menu ant-menu-inline ant-menu-dark ant-menu-root"" role=""menu"" aria-activedescendant="""" tabindex=""0""&gt;&lt;li class=""ant-menu-submenu-inline ant-menu-submenu""&gt;&lt;div style=""padding-left:24px"" class=""ant-menu-submenu-title"" aria-expanded=""false"" aria-owns=""iot$Menu"" aria-haspopup=""true""&gt;&lt;span&gt;&lt;i class=""icon-iothub common-icon""&gt;....
</code></pre>

<p>i did initView.indexOf('check') and get -1. can anyone give me a help, thanks.</p>
","6050214","","","","","2018-05-26 17:54:31","React renderToString not have data-react-checksum","<reactjs><checksum><ssr><render-to-string>","0","0","","",""
"50660038","1","","","2018-06-02 18:40:39","","0","45","<p>Here is Rendering method:</p>

<pre><code>const makeUniversalHTML = (req, res, preloadedState) =&gt; {
const App = require('../../client/App')
const store = configureStore(preloadedState)
const context = {}
const html = renderToString(
&lt;App store={store} Router={StaticRouter} routerProps={{ location: 
req.url, context }} userAgent={req.headers['user-agent']} /&gt;)

const title = DocumentTitle.rewind()
let terminate = false

if (context.url) {
  res.redirect(302, context.url)
  terminate = true
 }

return { title, html, terminate }
}
</code></pre>

<p>HERE IS My APP COMPONENT</p>

<pre><code>     import React from ""react""
     import PropTypes from 'prop-types'
     import { Provider } from ""react-redux""
     import { Route, Switch, Redirect } from ""react-router-dom""
     import getMuiTheme from ""material-ui/styles/getMuiTheme""
     import { DragDropContextProvider } from ""react-dnd""
     import HTML5Backend from ""react-dnd-html5-backend""
     // import { AppBar, Drawer, Paper } from 'material-ui'
    import { connect } from 'react-redux'

    // src
     import { getCurrentUser } from './utils'
     import styles from ""./App.scss""
     import './styles/css/bootstrap.scss'

     // custom
     import './styles/css/layout.scss'
     import './styles/css/theme.scss'
     import './styles/css/ui.scss'
     import './styles/css/app.scss'
     import MUITheme from ""../config/theme""

     import {PageLogin} from ""./components""


      const mapStateToProps = (state, ownProps) =&gt; {
        const user = getCurrentUser(state)
        return { user }
       }
      @connect(mapStateToProps)
        export default class App extends React.Component {
        static propTypes = {
        userAgent: PropTypes.string,
        store: PropTypes.object,
      }

      static childContextTypes = {
       muiTheme: PropTypes.object
      }

      constructor(props) {
       super(props)
       }
      getChildContext() {
      const { userAgent } = this.props
      const theme = userAgent ? Object.assign({ userAgent }, MUITheme) : 
       MUITheme

       return {
         muiTheme: getMuiTheme(theme)
          }
        }
       render() {
        const { store, Router, routerProps } = this.props
        const paperStyle = {
          left: this.props.user ? 256 : 0,
           width: '100%',
          height: '100%',
         backgroundColor: '#F5F5F5',
        }

       return (
        &lt;DragDropContextProvider backend={HTML5Backend}&gt;
        &lt;Provider store={store}&gt;
          &lt;Router {...routerProps}&gt;
            &lt;div&gt;
              &lt;Navigation /&gt;

                &lt;Switch&gt;

                  &lt;PublicRoute path=""/login"" component={PageLogin} /&gt;

                &lt;/Switch&gt;

            &lt;/div&gt;
          &lt;/Router&gt;
        &lt;/Provider&gt;
      &lt;/DragDropContextProvider&gt;
    )
  }
}
</code></pre>

<p>I am getting these error if unviersal rendering true</p>

<blockquote>
  <p>Invariant Violation: Element type is invalid: expected a string (for
  built-in components) or a class/function (for composite components)
  but got: object.</p>
</blockquote>

<p>and second error is </p>

<blockquote>
  <p>window is not defined</p>
</blockquote>

<p>I know that when universal rendering is true,react component is render from server side and window object is not available.but you can  see i am not using window object in my code still i am getting this error </p>
","9384827","","4137483","","2018-06-02 22:32:24","2018-06-02 22:32:24","React Server side rendering (renderToString failed ):window is not defined","<reactjs><react-dom-server>","0","5","","",""
"33522816","1","","","2015-11-04 13:10:36","","4","828","<p>I have a simple app which shows a list of comments by users. When a user is clicked the app should go to <code>/users/&lt;id&gt;</code> and show a new page with the users details that will be queried from a MongoDB. Im having trouble to understand where should that logic be.</p>

<p>I saw examples of using the react router in the client like:</p>

<pre><code>render((
&lt;Router&gt;
  &lt;Route path=""/"" component={App}&gt;
     &lt;Route path=""/user/:userId"" component={User}/&gt;
  &lt;/Route&gt;
&lt;/Router&gt;
), document.body)
</code></pre>

<p>But also like this in the server side:</p>

<pre><code>&lt;Route name=""root"" path=""/"" handler={require('./handlers/Root')}&gt;
</code></pre>

<p>And also using express routing:</p>

<pre><code>app.get('/', function home (req, res, next) {
  res.render('layout', {
    reactHtml: React.renderToString(&lt;App /&gt;)
  });
});

app.get('/user', function home (req, res, next) {
  res.render('layout', {
    reactHtml: React.renderToString(&lt;User /&gt;)
  });
});
</code></pre>

<p>Which one is the way to go? What are the differences?</p>
","826235","","","","","2015-11-05 03:23:28","Should I use express, client-side react router or server-side react router?","<node.js><express><reactjs><react-router><isomorphic-javascript>","2","1","2","",""
"50515650","1","50551438","","2018-05-24 18:10:04","","0","45","<p>This question is quite different as I searched a lot for similar but didnt find any I am creating a project of react server side rendering feature and using webpack to write the <code>es6</code> code and babel to compile the <code>jsx</code> . In my express route I want to convert the <code>App</code> component to string and then want to pass to the static html part . it is working fine when I am doing like this</p>

<pre><code>  var App = renderToString(&lt;h1&gt; Working Fine now &lt;/h1&gt;);
</code></pre>

<p>but now when I want the App component to be here its not working</p>

<pre><code>var App = renderToString(&lt;App /&gt;); // Not working
</code></pre>

<p>I am importing App component in express server like this</p>

<pre><code>    import React from ""react"";
    import ReactDOMServer , {renderToString} from ""react-dom/server"";
    import  App  from '../common/component/App.js';
</code></pre>

<p>My App.js</p>

<pre><code>import React from ""react""

 export default class App extends React.Component{
  render(){
    return (
      &lt;div&gt;
        &lt;h1&gt;From COmponent&lt;/h1&gt;

      &lt;/div&gt;
    )
  }
}
</code></pre>

<p>error</p>

<blockquote>
  <p>Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.</p>
</blockquote>

<p>I checked some issues in Github too but there they were recommending to move to react-0.14 as those issues were old but now I am using react 16</p>
","9339537","","","","","2018-05-27 10:59:19","Invariant Violation: Error while using React-Dom renderToString() in es6 importing","<reactjs><express><es6-modules><serverside-rendering><react-dom-server>","1","8","","",""
"50802697","1","","","2018-06-11 16:56:40","","0","10","<p>I am serverside rendering an app and the server code looks like this</p>

<pre><code>const markup = renderToString(
&lt;StaticRouter context={{a:1}} location={req.url}&gt;
&lt;App d='8' /&gt;
&lt;/StaticRouter&gt;
)
</code></pre>

<p>and in the App component I am printing out props </p>

<pre><code>class App extends Component {
constructor(props){
super(props);
console.log(this)
}
</code></pre>

<p>but the output does not have staticContext, it looks like this</p>

<pre><code>App {
props: { d: '8' },
context: undefined,
refs: {},
updater:
 { isMounted: [Function: isMounted],
 enqueueForceUpdate: [Function: enqueueForceUpdate],
 enqueueReplaceState: [Function: enqueueReplaceState],
 enqueueSetState: [Function: enqueueSetState] } }
</code></pre>

<p>I am using react 16.3 and react-router-dom 4.3.1, why am I not able to access the staticContext prop?</p>
","4470070","","","","","2018-06-11 16:56:40","Not able to see staticContext in props of react component during server side rendering","<reactjs><react-router><serverside-rendering>","0","0","","",""
"50650437","1","","","2018-06-01 20:13:15","","0","41","<p>I was researching how I could open up a popup dialog on a marker to always be within the view dialog and not render outside the screen.  I came across <a href=""https://github.com/erictheise/rrose"" rel=""nofollow noreferrer"">https://github.com/erictheise/rrose</a> and <a href=""https://github.com/yafred/leaflet-responsive-popup"" rel=""nofollow noreferrer"">https://github.com/yafred/leaflet-responsive-popup</a>.  </p>

<p>Ended up going with responsive popup, and using <a href=""https://medium.com/@nikjohn/creating-a-dynamic-jsx-marker-with-react-leaflet-f75fff2ddb9"" rel=""nofollow noreferrer"">https://medium.com/@nikjohn/creating-a-dynamic-jsx-marker-with-react-leaflet-f75fff2ddb9</a> to figure out how to generate jsx content within the popup.  However, I can't quite figure out how to bind this popup to the react-leaflet marker.</p>

<pre><code>let customPopup = new L.ResponsivePopup().setContent(ReactDOMServer.renderToString(&lt;div&gt;&lt;/div&gt;));

&lt;Marker position={position} icon={icon} key={`${headline.id}${key}`}&gt;
          &lt;Popup autoPan={false}&gt; //Existing way, how to use the custom popup?
            &lt;span&gt;
              My Content Here
            &lt;/span&gt;
          &lt;/Popup&gt;
&lt;/Marker&gt;
</code></pre>

<p>Any sort of guidance would be very helpful.</p>

<p>Thanks!</p>
","3923341","","","","","2018-06-01 20:13:15","Customized popup for react leaflet library","<reactjs><leaflet><react-leaflet>","0","0","","",""
"51011339","1","51011404","","2018-06-24 15:29:46","","0","24","<p>I can't figure out what exactly I'm doing wrong here. Only error I receive is ""The App component should render to a string using ReactDOMServer.renderToString.""  Being the last exercise in the section I'm sure I'm way over simplifying it. </p>

<p><a href=""https://learn.freecodecamp.org/front-end-libraries/react/render-react-on-the-server-with-rendertostring"" rel=""nofollow noreferrer"">Link to the exercise</a></p>

<pre><code>class App extends React.Component {
  constructor(props) {
   super(props);
  }
 render() {
 return &lt;div/&gt;
 }
};

// change code below this line
ReactDOMServer.renderToString(App);
</code></pre>
","9464796","","","","","2018-06-24 16:08:57","freecodecamp react renderToServer","<reactjs>","2","0","","",""
"51179229","1","","","2018-07-04 18:23:45","","0","30","<p>my objective is sever side rendering with data fetching.</p>

<p>i am trying to render my component on server, a component which fetches the data from another 3rd party API on <strong>componentDidMount</strong>, my component is rendering fine but when is pass the string returned from <strong>ReactDOM.renderToString</strong> to my <strong>.ejs</strong> file which is missing the data returned from 3rd party API </p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom/server';
import { flushChunkNames } from 'react-universal-component/server';
import flushChunks from 'webpack-flush-chunks';

import App from '../shared/App';
import HorizontalModule from '../shared/Horizontal-module';
export default ({ clientStats }) =&gt; async (req, res) =&gt; {
    const app = (
        &lt;App/&gt;
    );

    const appString = ReactDOM.renderToString(app);
    const chunkNames = flushChunkNames();
    const { js, styles, cssHash } = flushChunks(clientStats, { chunkNames });
    res.render('index', {
        appString,
        js,
        styles,
        cssHash
    });

    console.log(appString);
};
</code></pre>

<p>my  component is rendering fine, but when is see the view-source of a page component is empty.
<strong>appString</strong> is basically empty</p>

<p>currently my code for fetching data from API written in componentDidMount but i have tried componentWillMount as well.</p>

<p>this is where my component rendered <a href=""http://ec2-13-232-170-86.ap-south-1.compute.amazonaws.com:3000/"" rel=""nofollow noreferrer"">http://ec2-13-232-170-86.ap-south-1.compute.amazonaws.com:3000/</a></p>

<p>and this is my code base <a href=""https://github.com/sharmam1/testproj"" rel=""nofollow noreferrer"">https://github.com/sharmam1/testproj</a></p>
","5317182","","","","","2018-07-04 18:23:45","react server side rendering","<reactjs><reactive-programming><react-ssr>","0","0","","",""
"49748116","1","","","2018-04-10 07:46:27","","0","26","<p>i am using <code>react-router-dom</code> and express to do server side rendering. Thing is my static htmls are rendered fine, but not data. When i view source it only shows my static htmls. So thought on my <code>server.js</code> which using <code>StaticRouter</code> to serve Server Side Rendering, i have to fetch data and pass it to react app. And there i am stucked. I tried it's context(<code>&lt;StaticRouter context={fetched_response.data}</code>), also prop in <code>&lt;App data={fetched_response.data}/&gt;</code> but no luck. </p>

<p>Here is my <code>server.js</code></p>

<pre><code>const middleWare = async (req, res) =&gt; {
  let param = req.url.split('/')[2];
  let response = await get(`https://api.zoog.mn/v1/places/${param}`);
  const context = {};
  const filePath = path.resolve(__dirname, '..', 'build', 'index.html');
  await fs.readFile(filePath, 'utf8', (err, htmlData) =&gt; {
    if (err) {
      console.error('err', err);
      return res.status(404).end();
    }
    // render app
    const html = ReactDOMServer.renderToString(
      &lt;StaticRouter
        location={req.url}
        context={context}&gt;
        &lt;App data={'hello'} /&gt;
      &lt;/StaticRouter&gt;
    );
    // inject app
    return res.send(
      htmlData.replace(
        '&lt;div id=""root""&gt;&lt;/div&gt;',
        `&lt;div id='root'&gt;${html}&lt;/div&gt;`
      )
    );
  });
};
</code></pre>
","2629235","","","","","2018-04-10 07:46:27","How to pass data from server side rendering to react realm when using StaticRouter","<javascript><reactjs><react-router-v4><serverside-rendering>","0","0","","",""
"51165192","1","","","2018-07-04 03:01:47","","0","23","<p>When I ran the application without using the React-dom/server's renderToString(), the application ran with no problem. Then once I used renderToString() I got an invariant violation. I did some research, and I found that I should place &lt; StaticRouter > in the server and &lt; BrowserRouter > in the client. But I am still getting this error.</p>

<p><a href=""https://i.stack.imgur.com/BZsL0.png"" rel=""nofollow noreferrer"">enter image description here</a></p>

<p>File structure: /root server.js /api index.js /src index.js bookLibrary.json   /components app.js signIn.js DisplayBook.js</p>

<p>//server (file structure: stored in root folder)</p>

<pre><code>import config from './config';
import apiRouter from './api';
import sassMiddleware from 'node-sass-middleware';
import path from 'path';

import express from 'express';

const server = express();

server.use(sassMiddleware({
  src: path.join(__dirname, 'sass'),
  dest: path.join(__dirname, 'public')
}));

/* Use EJS to server render our javascript front end components*/

server.set('view engine', 'ejs');
import serverRender from './serverRender';

server.get('/', (req, res) =&gt; {
  serverRender()
  .then(content =&gt; {
    res.render('index', {
      content
  });

  })
  .catch(console.error);
});


server.use('/api', apiRouter);
server.use(express.static('public'));

server.get('/signin',function(req,res){
  res.json(""What the fuck my hommie"");
});

server.listen(config.port, config.host,() =&gt; {
  console.info('Express listening on port', config.port);
});
</code></pre>

<p>//App.js (file structure: in src folder, inside of root folder)</p>

<pre><code>import React, { Component } from 'react';
import {
  BrowserRouter as Router,
  Route,
  Switch
} from 'react-router-dom';
import axios from 'axios';
/* Pages */
import SignIn from './SignIn';
/* Components */
//import data from '../bookLibrary';
import HeaderNav from './HeaderNav';
import DisplayBook from './DisplayBook';
import FooterSection from './FooterSection';

class App extends Component {
  state= {
    books: this.props.initialBooks
  };
  componentDidMount(){
    axios.get('/api/books')
    .then(resp =&gt; {
      this.setState({
        books: resp.data.books
      });
    })
    .catch(console.err);

  }
  render() {
    return (
      &lt;Router&gt;
        &lt;div&gt;
          &lt;HeaderNav /&gt;
          &lt;Switch&gt;
            &lt;Route path=""/signin"" component={SignIn}/&gt;
            &lt;Route exact path=""/"" render={(props) =&gt;(
              /*The Main Part Of the Website should go inside of &lt;main&gt; 
                 &lt;/main&gt; */
              &lt;main&gt;
                &lt;div className=""container""&gt;
                  &lt;p&gt;Images should go here&lt;/p&gt;
                  &lt;p&gt;The List of Top 20 Books from BBN&lt;/p&gt;
                  {this.state.books.map(book =&gt;
                    &lt;DisplayBook key={book.id} {...book}/&gt;
                  )}
                &lt;/div&gt;
              &lt;/main&gt;
            )} /&gt;
          &lt;/Switch&gt;
          &lt;FooterSection /&gt;
        &lt;/div&gt;
      &lt;/Router&gt;
    );
  }
}
export default App;
</code></pre>

<p>//api used to render data from a .json file (for now. later, it will be used fetch data from the database)</p>

<pre><code>import express from 'express';
import data from '../src/bookLibrary';
import {MongoClient} from 'mongodb';
import assert from 'assert';
import config from '../config';

const router = express.Router();

router.get('/books', (req, res) =&gt; {
  res.send({books: data.books});
});

export default router;
</code></pre>

<p>//index.js ...browser or client (file structure: inside src folder)</p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import {BrowserRouter} from 'react-router-dom';
import App from './components/App';

ReactDOM.render((
  &lt;BrowserRouter&gt;
    &lt;App initialBooks={[]} className=""Website""/&gt;
  &lt;/BrowserRouter&gt;
), document.getElementById('root'));
</code></pre>

<p>//serverRender used to fetch data from the api (file structure stored in root folder)
    /fetch data from api</p>

<pre><code>import React from 'react';
import {renderToString} from 'react-dom/server';
import {StaticRouter} from 'react-router-dom';
import App from './src/components/App';
import config from './config';
import axios from 'axios';

const context ={};
const serverRender = () =&gt;
  axios.get(`${config.serverUrl}/api/books`)
    .then(resp =&gt; {
      return renderToString(
        &lt;StaticRouter location={req.url} context={context}&gt;
          &lt;App intialBooks = {resp.data.books}/&gt;
        &lt;/StaticRouter&gt;
      );
});

export default serverRender;
</code></pre>
","10029514","","10029514","","2018-07-08 16:29:01","2018-07-08 16:29:01","How do I fix an invariant violation when using react-dom-server with react-router-dom?","<reactjs><react-router><react-dom-server>","0","0","0","",""