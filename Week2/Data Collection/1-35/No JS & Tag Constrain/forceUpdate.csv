Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate
"35338961","1","35339301","","2016-02-11 12:08:09","","3","4060","<pre><code>    var ListItem = require('./listItem');

    var App = React.createClass({ 
    getInitialState : function(){
        return{
        items : []
    }
    },

    deleteElement: function(){
    },

    addElement : function(){
        this.state.items.push(&lt;ListItem /&gt;);
        this.forceUpdate();
    },

    render : function(){
        return (
            &lt;div&gt;
                &lt;ul&gt;{this.state.items.map(function(item,i){return (
                &lt;li&gt;
                    &lt;p onClick='this.deleteElement'&gt;(-)&lt;/p&gt;
                    {item}
                &lt;/li&gt;
            )})}&lt;/ul&gt;
            &lt;p onClick='this.addElement'&gt;(+)&lt;/p&gt;
            &lt;/div&gt;
        );
    }
    });
</code></pre>

<blockquote>
  <p>Currently I can add <code>li</code> elements to the array using <code>addElement function</code>.But can't figure out how to remove the particular <code>li</code> element from the <code>ul</code> list on clicking the <code>deleteElement function</code>.I tried using <code>splice()</code> but didn't work.I am new to reactjs.So don't know how to remove the li elements on click in the react way.</p>
</blockquote>
","","user3673959","","","","2016-02-11 12:32:12","How to remove the li element on click from the list in reactjs?","<reactjs>","3","0","2","",""
"50254909","1","","","2018-05-09 13:42:44","","0","56","<p>We are looking for other options, instead of using the <code>FlatList</code>of React native. Many have recommended using 
<a href=""https://github.com/bolan9999/react-native-largelist"" rel=""nofollow noreferrer"">https://github.com/bolan9999/react-native-largelist</a>.</p>

<p>However, when we tried to develop a POC for it, we found that when scrolling we often saw the white area (including on the whole screen) and after that it takes a few seconds for the records to be shown. Also, the initial display of the 15 records or those which are displayed after pulling for more, take around 1-2 seconds to be displayed. The time it takes is after the BE service call results have been received.</p>

<p>For example, after the pull to refresh results are received, the time is after the following function calls are made.</p>

<pre><code>this.forceUpdate();
this.largeList.reloadData();
</code></pre>

<p>We tried to change the values of the <code>safeMargin</code> and <code>dynamicMargin</code> to no avail. We tried to also bind all of the render functions first to the component and not have them in the render binding, like the examples. The line item component has return false for the <code>shouldComponentUpdate</code> function.</p>

<p>Has anyone else run into the same problem with this component and solved it?</p>
","9765081","","3464462","","2018-05-09 16:29:27","2018-05-09 16:29:27","White screen in react-native-large-list","<react-native><react-native-flatlist>","0","0","","",""
"35379082","1","36075563","","2016-02-13 11:05:40","","0","472","<p>I am run into this test problem, which i am not sure how to test component with <strong>settimeout</strong>. anyone have suggestion on how to test out the following component with <strong>settimeout</strong>? Many thanks</p>

<pre><code>import React, { PropTypes, Component } from 'react';
import styles from '../../../css/notification.css';

export default class Notification extends Component {
    static propTypes = {
        tagMetaUpdate: PropTypes.shape({
            submitUpdatedTagDataSuccessful: PropTypes.bool
        }),
        actions: PropTypes.shape({
            resetUpdatedTagDataSuccessfulFlag: PropTypes.func
        })
    };

    constructor(props) {
        super(props);
        this.state = {
            showMessage: true
        };
    }

    hideMessage(actions) {
        this.timer = setTimeout(() =&gt; {
            this.state.showMessage = false;
            actions.resetUpdatedTagDataSuccessfulFlag();
            this.forceUpdate();
        }, 3000);
    }

    render() {
        const { tagMetaUpdate, actions } = this.props;
        const output = (tagMetaUpdate.submitUpdatedTagDataSuccessful &amp;&amp; this.state.showMessage) ?
            &lt;div className={styles.notification}&gt;Tag meta data successfully edited.&lt;/div&gt; : null;

        if (this.props.tagMetaUpdate.submitUpdatedTagDataSuccessful) {
            this.hideMessage(actions); // HERE IS THE BIT BLOCKING ME
        }else {
            this.state.showMessage = true;
        }

        return &lt;div&gt;{output}&lt;/div&gt;;
    }
}
</code></pre>
","409275","","","","","2016-03-18 03:24:24","React how to test out react compoennt with setTimeout","<unit-testing><reactjs>","2","0","","",""
"34409794","1","34409825","","2015-12-22 06:33:51","","-2","134","<p>Please have a Look at this very simple example</p>

<pre><code>'use strict';
var React = require('react-native');
var {
    AppRegistry, Text, TextInput, View
} = React;
var bString = 'b init';
var Example = React.createClass({
    getInitialState: function() {
        return {
            aString: 'a init',
            cString: 'c init'
        };
    },
    changedString: function(aEvent) {
        bString = 'b changed';
        this.state.cString = 'c changed';
        this.setState((state) =&gt; {
            return {
                aString: 'a changed'
            };
        });
    },
    render: function() {
        return (
            &lt;View style={{flex: 1}}&gt;
                &lt;Text&gt;
                    {this.state.aString}{'\r\n'}{bString}{'\r\n'}{this.state.cString}
                &lt;/Text&gt;
                &lt;Text onPress={this.changedString}&gt;
                    Ppppppppppppppppppppp......press me
                &lt;/Text&gt;
            &lt;/View&gt;
        );
    },
});
AppRegistry.registerComponent('Project16N', () =&gt; Example);
</code></pre>

<p>I thought only <code>aString</code> on the mobile's screen while be changed when <code>changedString</code> is called. but when <code>changedString</code> is called, <code>aString</code>,<code>bString</code>,<code>CString</code> both changed. So why do we use <code>this.setState( balabala...)</code>?</p>

<p>why don't we just use <code>this.forceUpdate</code> instead? </p>

<p>Where is the difference between <code>setState</code> and <code>forceUpdate</code>?</p>
","5546527","","1327005","","2015-12-22 06:41:32","2015-12-22 06:50:21","Why does RN use setState when it functions just like forceUpdate","<react-native>","1","0","","",""
"51340674","1","51340755","","2018-07-14 15:07:49","","1","33","<p>I'm relatively new to React. I've used it for building a very simple app. I'm trying to add a small feature, but running into following error message. I don't quite understand the root cause yet.</p>

<p><code>
Can't call setState (or forceUpdate) on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.
</code></p>

<p>Here's what I'm trying to do. My app has a backend server that provides various APIs, which returns JSON. I'm using React as frontend/client that calls those APIs and renders them.</p>

<p>I have a Parent component named <code>MyReport</code> which uses <code>componentDidMount</code> to call an API to fetch some data. Then in the render method, I pass the data to  another component named <code>MyReportViewer</code>. This component has various other child components such as a Calendar that allows selecting date, a component that shows the data in a table format, a component that shows the same data as a chart.</p>

<p>Now I'm trying to add another child component called <code>MyReportSummary</code> that will be displayed alongside the other components rendered by <code>MyReportViewer</code>.</p>

<p><code>MyReportSummary</code> needs to call another API to fetch some data. This is what it looks like:</p>

<pre><code>import React, { Component } from 'react';

class MyReportSummary extends Component {

    constructor(props) {
        super(props);
        this.state = {
            projectInfo: null,
            isLoading: false,
            error: null
        };
    }

    componentDidMount() {
        this.setState({ isLoading: true });

        let projectInfoApi;

        projectInfoApi = '/api/projects/' + this.props.projectId;

        fetch(projectInfoApi)
            .then(response =&gt; {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Encountered problem fetching project info')
                }
            })
            .then(data =&gt; this.setState({
                projectInfo: data
            }))
            .catch(fetchError =&gt; this.setState({
                isLoading: false,
                error: fetchError
            }));
    }

    componentWillUnmount() {
        // this.setState({
        //     projectInfo: null
        // });
    }

    render() {
        const { isLoading, error } = this.state;

        if (error) {
            return &lt;p&gt;{error.message}&lt;/p&gt;
        }

        if (isLoading) {
            return &lt;p&gt;Loading...&lt;/p&gt;
        }

        return (
            &lt;div className=""myReportSummary""&gt;
                 Summary of Project name: {projectInfo.name}                    
                 Number of events: {this.props.data.length}
            &lt;/div&gt;
        );
  }
}

export default MyReportSummary;
</code></pre>

<p>I've read that I need to use <code>componentWillUnmount</code> to reset everything, but I'm not sure what exactly I need to reset here and why in this case I need to do it because I don't think I'm trying to change the component after it's been loaded or rendered already.</p>
","6450957","","","","","2018-07-16 10:05:22","Cannot fetch data from an API using componentDidMount: Can't call setState (or forceUpdate) on an unmounted component","<javascript><reactjs>","1","0","","",""
"35264643","1","35264828","","2016-02-08 07:49:00","","0","54","<p>I've frequently encountering dynamic components not being able to update each other directly. Multiple models that update each other's attributes but not their views.</p>

<pre><code>model2View.onClick=() {
  model1.change;
  model1View.forceUpdate();
}
</code></pre>

<p>i've often resorted to throwing in callback functions into the mix which is just a wrapper that updates the model and forceupdate the overhead view after change.</p>

<p>it gets worse when the model update is a modelside function that updates more than one model, in which case I've been using the nearest ancester view to perform the forceupdate.</p>

<pre><code>model2View.onClick=() {
   the following 3 could be wrapped in one method on model1
  model1.change;
  model2.change;
  model3.change;

  modelsWrapperView.forceUpdate();
}
</code></pre>

<p>After many force updates, I am just wondering if that's the way react was meant to be used or I'm missing something.</p>

<p>Here's an oversimplified example of the problem i'm trying to solve:</p>

<p><a href=""https://jsfiddle.net/x3azn/ann6qb30/1/"" rel=""nofollow"">https://jsfiddle.net/x3azn/ann6qb30/1/</a></p>
","2167582","","","","","2016-02-08 08:02:34","How to have different react components share and acknowledge each other's states?","<reactjs>","1","0","","",""
"48363742","1","","","2018-01-21 04:37:52","","0","95","<p>I have basic hello world react component rendering
inside my rails app.</p>

<p>I'm trying to make the component redraw, so that it picks up (via Ajax) some data changes that happened in the Postgres database.</p>

<p>From the chrome developer console, how can I get a ""reference""
to the react component, so that I can call the .forceUpdate() method of the component?</p>

<p>My code:</p>

<pre><code>// ideas from https://medium.com/@hpux/rails-5-1-loves-javascript-a1d84d5318b
// app/javascript/packs/hello_react.jsx 
import React from 'react'                                                                                    
import ReactDOM from 'react-dom'                                                                             
class Hello extends React.Component {
  // stuff ...
}

document.addEventListener(""DOMContentLoaded"", e =&gt; {                                                       
  ReactDOM.render(&lt;Hello name=""React"" /&gt;, document.getElementById('my-div'))                       
})
</code></pre>

<p>What I tried</p>

<p>changing </p>

<pre><code>ReactDOM.render(&lt;Hello name=""React"" /&gt;, document.getElementById('my-div'))      
</code></pre>

<p>to </p>

<pre><code>var foo = ReactDOM.render(&lt;Hello name=""React"" /&gt;, document.getElementById('my-div'))      
</code></pre>

<p>Then in the developer console, I did</p>

<pre><code>foo
</code></pre>

<p>I got</p>

<blockquote>
  <p>Uncaught ReferenceError: foo is not defined
      at :1:1 (anonymous) @ VM4867:1</p>
</blockquote>

<p>Update:</p>

<p>I tried this in the chrome dev console</p>

<pre><code>&gt; ReactDOM
</code></pre>

<p>I got</p>

<pre><code>VM4871:1 Uncaught ReferenceError: ReactDOM is not defined
    at &lt;anonymous&gt;:1:1
(anonymous) @ VM4871:1
</code></pre>

<p>Update: I found a hakish solution, hoping someone can offer better:</p>

<pre><code>constructor() { super(); if ( window ) { window.myThing = this; } }
</code></pre>
","3618156","","3618156","","2018-01-21 05:06:38","2018-01-21 05:52:53","Can I get a reference to jsx react component so I can I forceUpdate/rerender react component from the chrome developer console?","<ajax><reactjs><render><jsx>","2","0","","",""
"48890036","1","","","2018-02-20 16:37:54","","0","42","<p>I have a table in my jsx that renders a league table. I want to now show the ""form"" of each team. i.e. the last 5 games.</p>

<p>I have a method that works this out (called form)</p>

<pre><code> const LeagueTable = ({ teams, form }) =&gt; (
  &lt;table className=""leagueTable""&gt;
    &lt;thead&gt;
      &lt;tr className=""tableRow""&gt;
        &lt;th&gt;#&lt;/th&gt;
        &lt;th&gt;Name&lt;/th&gt;
        &lt;th&gt;P&lt;/th&gt;
        &lt;th&gt;W&lt;/th&gt;
        &lt;th&gt;D&lt;/th&gt;
        &lt;th&gt;L&lt;/th&gt;
        &lt;th&gt;F&lt;/th&gt;
        &lt;th&gt;A&lt;/th&gt;
        &lt;th&gt;GD&lt;/th&gt;
        &lt;th&gt;Pts&lt;/th&gt;
        &lt;th&gt;Form&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      {teams.sort((a, b) =&gt; (
          (b.points) - (a.points)
      )).map((team, index) =&gt; (
        &lt;tr key={index} className=""tableRow""&gt;
         &lt;td className=""stats""&gt;{index + 1}&lt;/td&gt;
         &lt;td className=""stats""&gt;{team.name}&lt;/td&gt;
         &lt;td className=""stats""&gt;{team.won + team.lost + team.drawn}&lt;/td&gt;
         &lt;td className=""stats""&gt;{team.won}&lt;/td&gt;
         &lt;td className=""stats""&gt;{team.drawn}&lt;/td&gt;
         &lt;td className=""stats""&gt;{team.lost}&lt;/td&gt;
         &lt;td className=""stats""&gt;{team.goalsScored}&lt;/td&gt;
         &lt;td className=""stats""&gt;{team.goalsAgainst}&lt;/td&gt;
         &lt;td className=""stats""&gt;{team.goalsScored - team.goalsAgainst}&lt;/td&gt;
         &lt;td className=""stats""&gt;{team.points}&lt;/td&gt;
         &lt;td className=""stats""&gt;{form(team)}&lt;/td&gt;
       &lt;/tr&gt;
     ))}
    &lt;/tbody&gt;
 &lt;/table&gt;
);
</code></pre>

<p>this is the method:</p>

<pre><code> form = (team) =&gt; {
    let lastFiveMatches;
    return team &amp;&amp; team.matches ?
      lastFiveMatches = Object.values(this.props.teams.find(t =&gt; t.name === team.name).matches).sort(this.compare).reverse().slice(0, 5).map((match) =&gt; {
        if(match.winner === team.name){
          return 'W ';
        }
        else if(match.winner !== team.name){
          return 'L ';
        }
        else {
          return 'D ';
        }
      })
    :
    '---'
  }
</code></pre>

<p>basically it all works but since adding this method to my table, it only updates my table on refresh rather than instantly (which is what it was doing before)</p>

<p>can anyone explain why it is doing this and how I can change it back?</p>

<p>when I get rid of <code>&lt;td className=""stats""&gt;{form(team)}&lt;/td&gt;</code> it instantly works again so I know this method call is the problem</p>

<p>I have tried adding <code>this.forceUpdate()</code> and <code>this.setState(this.state)</code> to force a re-render but it looks like this causes react to blow up and I get the <code>cannot update during an existing state transition</code> error. </p>
","8205526","","8205526","","2018-02-20 16:52:42","2018-02-20 20:38:24","How to get react to update when calling a method from JSX?","<javascript><reactjs><jsx>","1","7","","",""
"47039987","1","","","2017-10-31 16:17:25","","0","65","<p>I am trying to use the react-howler component installed from npm and i am getting this error when i try to use the component.</p>

<blockquote>
  <p>Expected a component class, got [object, Object].</p>
</blockquote>

<p>Everything builds , but when I run npm start and go over to the localhost, my other components don't load and this error shows up int eh console.</p>

<p>index.vr.js:</p>

<pre><code>import React, {Component} from 'react';
import qs from 'query-string';
import ReactHowler from 'react-howler';
import Canvas from './Components/Canvas';
import UI from './Components/UI';

import {
  AppRegistry,
  asset,
  Pano,
  Text,
  View,
  Mesh,
  Video,
  VideoPano,
  VideoControl,
  MediaPlayerState,
  StyleSheet,
  Easing ,
  Animated,
} from 'react-vr';


var styles = StyleSheet.create({
  container: 
  {
    transform: [{rotateX: -12},{translate: [-.3, 1, -2.8]}],
    height: .7, width: .7 ,
  }
});

/* index.vr.js */


export default class WelcomeToVR extends React.Component {
      constructor(props) {
    super(props);
    this.spinValue = new Animated.Value(0),
    this.state = {
      src: '009 Une dernière chose.mp4',
      playerState: new MediaPlayerState({ autoPlay: false, muted: false }),
      scenes: [{scene_image: '009 Une dernière chose.mp4', navigations: [{ rotateX: 0 , rotateY: 0, rotateZ: 0 }] }],
      current_scene:{},
      sound: 'sound.ogg'
    }


//transform: {[{rotateX: 0},translate: {[-.3, 1, -2.8]} ]} 
//transform: [{ rotateX: 30 , rotateY: 0, rotateZ: 0 }] }],
  }

//functions  


    componentWillMount(){
    this.setState({current_scene: this.state.scenes[0]})
  }

    onPanoInput(e){
    if (e.nativeEvent.inputEvent.eventType === 'keydown'){
      this.rotatePointer(e.nativeEvent.inputEvent)
    }
  }

    rotatePointer(nativeEvent){
      switch (nativeEvent.keyCode) {
          //arrow keys
        case 38:

                this.state.current_scene.navigations[0]['rotateX'] -= 1;


          console.log(this.state.current_scene.navigations[0]['rotateX']);
        break;
        case 39:



                this.state.current_scene.navigations[0]['rotateY'] += 1;

                  console.log(this.state.current_scene.navigations[0]['rotateY']);
        break;
        case 37:

            this.state.current_scene.navigations[0]['rotateY'] -= 1;

                  console.log(this.state.current_scene.navigations[0]['rotateY']);
        break;
        case 40:

                this.state.current_scene.navigations[0]['rotateX'] += 1;
                  console.log(this.state.current_scene.navigations[0]['rotateZ']);
        break;

          // wasd
        case 87:

                this.state.current_scene.navigations[0]['rotateX'] -= 1;


          console.log(this.state.current_scene.navigations[0]['rotateX']);
        break;
        case 68:

                this.state.current_scene.navigations[0]['rotateY'] += 1;

                  console.log(this.state.current_scene.navigations[0]['rotateY']);
        break;
        case 65:

                this.state.current_scene.navigations[0]['rotateY'] -= 1;

                  console.log(this.state.current_scene.navigations[0]['rotateY']);
        break;
        case 83:

                this.state.current_scene.navigations[0]['rotateX'] += 1;

                  console.log(this.state.current_scene.navigations[0]['rotateZ']);
        break;
        default:
        return;
      }
      this.forceUpdate();
  }

 lerp (start, end, amt){
  return (1-amt)*start+amt*end
}

  render() {

    return (

        &lt;View onInput={this.onPanoInput.bind(this)}&gt;
            &lt;VideoPano source={asset(this.state.current_scene['scene_image'])}
                playerState={this.state.playerState}  
                style=
                { 
                    {transform: [
                                {rotateX: this.state.current_scene.navigations[0]['rotateX']},
                                {rotateY: this.state.current_scene.navigations[0]['rotateY']},
                                {rotateZ: this.state.current_scene.navigations[0]['rotateZ']}
                    ]}
                }
            /&gt;
            &lt;ReactHowler
              src={this.state.sound}
              playing={true}
            /&gt;
            &lt;VideoControl 
                style={styles.container}
                playerState={this.state.playerState}
            /&gt;


        &lt;/View&gt;
    );
  }
};

AppRegistry.registerComponent('WelcomeToVR', () =&gt; WelcomeToVR);
</code></pre>

<p>Thanks any info or tips would be greatly appreciated, almost at the point of giving up on spatial audio for my react 360 player app.</p>
","6575837","","","","","2017-10-31 16:17:25","ReactVR using react-howler for spatial audio","<javascript><npm><webvr><react-vr>","0","1","","",""
"50132111","1","","","2018-05-02 10:12:27","","0","40","<p>I'm very new to react and I am required to convert latitude to longitude which the latitude and longitude get from firebase. So the problem is that I am able to console log the address. However, I am not being able to display</p>

<p>This is my construtor</p>

<pre><code>this.getAddressFromLatLong = this.getAddressFromLatLong.bind(this)
</code></pre>

<p>This is the function that I wrote for the converting</p>

<pre><code>getAddressFromLatLong(lat, long) 
{ Geocode.fromLatLng(lat, long).then( 
    response =&gt; { 
        const address = response.results[0].formatted_address; 
        console.log(address); 
        return address; 
    }, 
    error =&gt; { console.error(error); } 
)}
</code></pre>

<p>This is where I render the address</p>

<pre><code>return ( 
    &lt;tr key={atData.uid}&gt; 
        &lt;td&gt;{atData.uid}&lt;/td&gt; 
        &lt;td&gt;{atData.user}&lt;/td&gt; 
        &lt;td&gt;&lt;TimeStamp time={atData.dateTime} format='full' /&gt;&lt;/td&gt; 
        &lt;td&gt;{this.getAddressFromLatLong(atData.latitude, atData.longtitude)}&lt;/td&gt; 
    &lt;/tr&gt; 
)
</code></pre>

<p>Please advise >.&lt;</p>

<p>Edit:</p>

<p>I realised that the code I posted is not enough so here's more information about my problems and the end product that I wanted</p>

<p>So I have this page that displays all the address and users when a user select a lock from the dropdown list which get from the firebase</p>

<p>This is how I did my dropdown list</p>

<pre><code>componentWillMount() {
    const lockSelected = this.state.selectedLock
    console.log(lockSelected)
    // Calling the Lock List
    axios
        .get(process.env.REACT_APP_FIREBASE_DATABASE + '/' + doGetLocklist() + '.json?auth=' + process.env.REACT_APP_FIREBASE_DATABASE_SECRET)
        .then((response) =&gt; {
            // console.log(""=== componentDidMount: axios - Lock List ==="")
            this.setState({ locklistArray: response.data, loading: false })
        })
        .catch((err) =&gt; { })
}
renderDropdown() {
    return _.map(this.state.locklistArray, lockData =&gt; {
        return (
            &lt;option value={lockData.uid}&gt;{lockData.lockName}&lt;/option&gt;
        )
    })
}
</code></pre>

<p>This is how I render out the dropdown</p>

<pre><code>&lt;FormControl componentClass=""select"" placeholder=""select"" onChange={this.detectOnChangeEvent}&gt;
    &lt;option value=""""&gt;- Please Select a lock -&lt;/option&gt;
    {this.renderDropdown()}
&lt;/FormControl&gt;
</code></pre>

<p>After that, when the user selected a lock, it will run this detectOnChange func so that it will re-render the table with the lock data</p>

<pre><code>detectOnChangeEvent(event) {
    this.setState({
        selectedLock: event.target.value,
    })
    this.fetchSelectedATData(event.target.value)
    this.forceUpdateHandler()
}

forceUpdateHandler() {
    this.forceUpdate();
};

fetchSelectedATData(atlist) {
    var lockSelected = atlist
    axios
        .get(process.env.REACT_APP_FIREBASE_DATABASE + '/' + doGetAuditTrailList() + '/' + lockSelected + '.json?auth=' + process.env.REACT_APP_FIREBASE_DATABASE_SECRET)
        .then((response) =&gt; {
            // console.log(""=== componentDidMount: axios - User List ==="")
            console.log(response.data)
            this.setState({ atArray: response.data, loading: false })
        })
        .catch((err) =&gt; { })

    this.renderATlistArray()
}

renderATlistArray() {
    if (this.state.loading) {
        return (&lt;Loading /&gt;)
    } else {
        return _.map(this.state.atArray, atData =&gt; {
            return (
                &lt;tr key={atData.uid}&gt;
                    &lt;td&gt;{atData.uid}&lt;/td&gt;
                    &lt;td&gt;{atData.user}&lt;/td&gt;
                    &lt;td&gt;&lt;TimeStamp time={atData.dateTime} format='full' /&gt;&lt;/td&gt;
                    &lt;td&gt;{this.getAddressFromLatLong(atData.latitude, atData.longtitude)}&lt;/td&gt;
                &lt;/tr&gt;
            )
        })
    }
}
</code></pre>

<p>So now, everything is working fine. I do know that this is not the proper way of doing things also. Just that I can't display onto my table when I am able to console log and it get the correct address back.</p>

<p><a href=""https://i.stack.imgur.com/6nOxj.png"" rel=""nofollow noreferrer"">Here's a screenshot of the response</a></p>

<p>Hopefully, with all these added information, it will be better for you guys to understand the code!</p>
","9709278","","9709278","","2018-05-03 02:43:09","2018-05-03 02:43:09","Able to get the response but unable to display react","<reactjs><firebase>","1","2","","",""
"43556429","1","","","2017-04-22 07:17:11","","1","287","<p>I am making a login form using Meteor 1.4 and react 15. My aim is to redirect user after login. Currently when user is logged in, the page does not redirect. However, You can no longer access login or register pages when logged in which is expected. </p>

<pre><code>import React from 'react';
import { NavLink, Redirect } from 'react-router-dom';
import { Accounts } from 'meteor/accounts-base';
import { Meteor } from 'meteor/meteor';

export default class Header extends React.Component {
constructor(){
  super()
  this.forceUpdate = this.forceUpdate.bind(this)
}
onSubmit(e){
  e.preventDefault();
  let el = $(e.target);

  let email = el.find('#email').val();
  let password = el.find('#password').val();
  let confirmPassword = el.find('#confirmPassword').val();
  // Login user
  Meteor.loginWithPassword(email, password, function(err){
    if(err){
      alert(err.reason);
     }else {
      //if logged in
      alert('Successfully logged in');
      this.forceUpdate();
    }
   });
  }
render() {
//if user is logged in =&gt; this part works!
if(Meteor.user()){
 return &lt;Redirect to='/' /&gt;;
}else 
  return (
   &lt;LoginForm /&gt;
) 
}
 }
</code></pre>

<p>The login code works, the only issue is I want the component to rerender when form is submitted, i can only do that using forceUpdate which spits out this error:
The routing is in react router 4 and not meteor's Flow-router</p>

<pre><code>Exception in delivering result of invoking 'login': TypeError: this.forceUpdate is not a function
</code></pre>
","7015414","","","","","2017-04-24 16:05:57","How do I rerender a react component in Meteor?react component.forceUpdate error in Meteor","<javascript><reactjs><meteor><this><meteor-react>","2","5","1","",""
"51300499","1","","","2018-07-12 08:14:41","","0","20","<p>In my react app I have a conditionally imported component like this:</p>

<pre><code>componentDidMount() {
    if (this.props.client === 'abcdf') {
        import('../clients/abcdf/abcdfMenu').then(comp =&gt; {
            this.setState({ sideMenu: comp.default });
        });
    }
}
</code></pre>

<p>Under some circumstances the parent component may be unmounted before the import completes which triggers the warning: <code>Can't call setState (or forceUpdate) on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.</code></p>

<p>The only suggestions I have found are either don't use async in components or use a <code>isMounted</code> property in state (anti-pattern?) or cancel the promise with experimental code not suitable for production. </p>

<p>Do you have any suggestion specifically about dynamic imports? Any idea would be highly appreciated.</p>
","3549949","","","","","2018-07-12 08:14:41","Cancel component import in react componentWillUnmount","<reactjs>","0","2","","",""
"49649549","1","","","2018-04-04 11:14:11","","1","308","<p>In my react component I have two functions. handleChangeInput(e) is called on 'OnChange' of input field and checkFields() is called from handleChangeInput(e)</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>constructor(){
    super()
    this.state={
      email: '',
      password:'',
      validFields: false
    }
  }

handleChangeInput(e){
    const name = e.target.name;
    const value = e.target.value;
    this.setState({[name]: value},()=&gt;{
      this.checkFields();
    });
  }

  checkFields(){
    if (this.state.email.length&gt;0 &amp;&amp; this.state.password.length&gt;0 ) {
      this.setState({validFields: true});
    }else {
      this.setState({validFields: false});
    }
  }</code></pre>
</div>
</div>
</p>

<p>And in my index.test.js I have</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>describe('&lt;Login /&gt;', () =&gt; {
	
	describe('handleChangeInput', () =&gt; {

        const component = new Login()
        const wrapper = shallow(&lt;Login /&gt;);

        beforeEach(() =&gt; {
            component.setState = jest.fn()
        })

        test('calls setState validFields false when no email/password', () =&gt; {
            const state = { state : { email: '', password: ''} }
            const args = { target : { name: 'name', value: 'value' } }
            component.handleChangeInput.call(state, args)
            expect(component.setState.mock.calls.length).toBe(1)
            expect(wrapper.state().validFields).toEqual(false)
        })

        test('calls setState validFields true when email/password are ok', () =&gt; {
            const state = { state : { email: 'email', password: 'password' } }
            const args = { target : { name: 'name', value: 'value' } }
            component.handleChangeInput.call(state, args)
            expect(component.setState.mock.calls.length).toBe(1)
            expect(wrapper.state().validFields).toEqual(false)
        })
	})
});</code></pre>
</div>
</div>
</p>

<p>But my state is not being updated. As a result, 'validFields' is not set to true and my second test is failing. I tried wrapper.update() and wrapper.instance().forceUpdate() but still no success. Any help would be appreciated</p>
","7704420","","","","","2018-04-09 17:16:27","react state is not updating in jest","<javascript><reactjs><unit-testing><enzyme><jest>","2","0","","",""
"27407770","1","","","2014-12-10 17:59:12","","1","418","<p>I've been using Backbone to manage my models, and react to render views on model changes. </p>

<p>To do so I've used the accepted answer here: <a href=""https://stackoverflow.com/questions/20371566/handling-backbone-model-collection-changes-in-react-js"">handling backbone model/collection changes in react.js</a> wherein the provided mixin listens for updates on the model/collection and simply calls forceUpdate on the component. </p>

<p>This works great for the first root component where the mixin is used. However, for nested components inside which solely rely on the model attributes, those will never get updated since react loses old/new state as mentioned by Pete Hunt (core React developer) here: <a href=""https://groups.google.com/forum/#!msg/reactjs/lT2pOKXUHY8/_mahBiK2ZxMJ"" rel=""nofollow noreferrer"">https://groups.google.com/forum/#!msg/reactjs/lT2pOKXUHY8/_mahBiK2ZxMJ</a></p>

<p>I see two solutions to this:</p>

<ol>
<li>Use a json version of the model or collection after the root component for all following children components. (Pass along model={this.props.model.attributes} to the children)</li>
<li>use the mixin in for the children components as well via a global model/collection</li>
</ol>

<p>option 1 seems to limit backbone's power as now only attributes flow through the chain and other methods on the model are lost.
option 2 seems like an anti-pattern in general when the mixin was developed. Plus you need to keep track of the global and update the bindings for the children as well. </p>

<p>Am I missing something or is there a simpler solution to this problem?</p>
","674474","","-1","","2017-05-23 10:33:38","2014-12-10 17:59:12","Backbone model force update with nested react components","<javascript><backbone.js><reactjs>","0","4","","",""
"44082014","1","44082330","","2017-05-20 04:46:38","","1","3715","<p>I've always used react-redux <code>connect</code> to configure props but I need to use a react <code>Component</code> to use lifecycle methods. I'm noticing that my props that I'm grabbing from the store seem to be static and they do not update as the store updates.</p>

<p>Code:</p>

<pre class=""lang-js prettyprint-override""><code>class AlertModal extends Component {

  title
  isOpen
  message

  componentDidMount() {
    const { store } = this.context
    const state = store.getState()
    console.log('state', state)
    console.log('store', store)
    this.unsubscribe = store.subscribe(() =&gt; this.forceUpdate())
    this.title = state.get('alertModal').get('alertModalTitle')
    this.isOpen = state.get('alertModal').get('isAlertModalOpen')
    this.message = state.get('alertModal').get('alertModalMessage')
    this.forceUpdate()
  }

  componentWillUnmount() {
    this.unsubscribe()
  }

  updateAlertModalMessage(message) {
    this.context.store.dispatch(updateAlertModalMessage(message))
  }
  updateAlertModalTitle(title) {
    this.context.store.dispatch(updateAlertModalTitle(title))
  }

  updateAlertModalIsOpen(isOpen) {
    this.context.store.dispatch(updateAlertModalIsOpen(isOpen))
  }

  render() {

    console.log('AlertModal rendered')
    console.log('AlertModal open', this.isOpen) &lt;======= stays true when in store it is false

    return (
      &lt;View
</code></pre>

<p>How do I set up <code>title</code>, <code>isOpen</code>, and <code>message</code> so they reflect the store values at all times?</p>
","3935156","","2054072","","2017-05-20 16:12:47","2018-07-20 18:46:16","react props not updating with redux store","<reactjs><react-native><redux><react-redux>","3","3","","",""
"42689782","1","42692479","","2017-03-09 08:02:15","","2","1355","<p>I am very new to react and am trying to create a checkbox and also display the selected checkbox names list in a textbox. I am using selected[] to store the values for the selected box and checked[] to store whether that box is checked or not.If it is checked I update the value of selected accordingly. </p>

<p>The code as of now works fine but I want to avoid use of forceupdate() and use setState(). When I use I am unable to update the selected[] value using it. Can somebody tell me of how to update the particular array index value using setstate so thatit gets render itself and I do not have to use forceupdate() ?</p>

<p>thank you.</p>

<pre><code>var history = React.createClass({

getInitialState : function(){
    return {
        checked : [],
        selected: []
    };
},

componentWillMount : function(){

}, 

handleChangechk: function (e){

    const target = e.target;
    const value = target.type === 'checkbox' ? target.checked : target.value;
    const name = target.name;

    if(value===true)
    {
        this.state.checked[name]= true;
        this.state.selected[name] = name;
        this.forceUpdate();

    }
    else
    {
        this.state.checked[name]= false;
        this.state.selected[name] = '';
        this.forceUpdate();
    }
},

render : function() {

    var historyList = [];
    var selectedList = [];

    for (var i = 0; i &lt; 10; i++) {
        historyList.push(&lt;span  key={i}&gt;&lt;input type=""checkbox""  name = {i} checked={!!this.state.checked[i]} onChange ={(e)=&gt; this.handleChangechk(e)}/&gt;&lt;span &gt;&lt;/span&gt;&lt;label &gt;checkbox {i}&lt;/label&gt;&lt;/span&gt;);
        if(this.state.selected[i])
        {
            selectedList.push(this.state.selected[i]);
        }
    };


return(   /* display selected checkbox (selectedList ); */}});
</code></pre>
","7161356","","","","","2017-03-09 10:29:36","Update array index value in react","<javascript><reactjs>","3","0","1","",""
"42249991","1","","","2017-02-15 12:54:10","","1","508","<p>I face one problem that in React, after I use this.forceUpdate(), the component DOM do update, but the DOM(input) still hold the old value. Like in the pictures, at first I add four rows of input, and take a notice on the number on each num, then I delete the first row, the DOM should keep the last three rows(2,3,4), but the result is that the component keep the first three rows(1,2,3).</p>

<p>And I inspect the page, find the component do delete the first row(the row with number 1), but the DOM still display the first three rows, just like I delete the fourth row.</p>

<p>And one can tell me the reason? Thank you!</p>

<p><a href=""https://i.stack.imgur.com/QTqfb.png"" rel=""nofollow noreferrer"">Modal with four rows of input before delete</a>  </p>

<p><a href=""https://i.stack.imgur.com/qdmkG.png"" rel=""nofollow noreferrer"">Modal with three rows of input after delete</a></p>

<p><a href=""https://i.stack.imgur.com/bunqM.png"" rel=""nofollow noreferrer"">detail explain</a></p>

<pre><code>import React  from 'react'
import Button from 'react-bootstrap/lib/Button'
import Modal from 'react-bootstrap/lib/Modal'


export default class AddAccountModal extends React.Component{

  constructor(props) {
    super(props)
    this.state = {
      newAccount: [{source: '', url: '', name: ''}],
    }

    this.getState = this.getState.bind(this);
    this.addMoreAccount = this.addMoreAccount.bind(this);
    this.updateInputValue = this.updateInputValue.bind(this);
    this.deleteAccount = this.deleteAccount.bind(this);
  }


  getState(){
    return this.state
  }

  updateInputValue(event){
    this.state.newAccount[event.target.id][event.target.name] = event.target.value
  }

  deleteAccount(event){
    console.log(event.target.id)
    this.state.newAccount.splice(event.target.id,1)
    console.log(this.state.newAccount)
    this.forceUpdate()
  }

  addMoreAccount(){
    this.state.newAccount.push({source: '', url: '', name: ''})
    console.log(this.getState()['newAccount'])
    this.forceUpdate()
  }

  render(){
    return (
      &lt;Modal {...this.props}
             bsSize=""large""
             aria-labelledby=""contained-modal-title-lg""&gt;
        &lt;Modal.Header&gt;
          &lt;Modal.Title id=""contained-modal-title-lg""&gt;
            Add New Account
            &lt;Button className=""pull-right"" onClick={this.props.hideModal}&gt;X&lt;/Button&gt;
          &lt;/Modal.Title&gt;
        &lt;/Modal.Header&gt;
        &lt;Modal.Body&gt;
          &lt;div className=""row""&gt;
            &lt;table className=""table table-striped""&gt;
              &lt;thead&gt;&lt;th&gt;Account source&lt;/th&gt;&lt;th&gt;Account URL&lt;/th&gt;&lt;th&gt;Account name&lt;/th&gt;&lt;th&gt;Delete&lt;/th&gt;&lt;/thead&gt;
              &lt;tbody&gt;
                {
                  this.state.newAccount.map(
                    (account,index)=&gt;{return &lt;tr&gt;
                      {/*&lt;td&gt;&lt;input type=""text"" class=""form-control"" name='source' id={index} onChange={this.updateInputValue} defaultValue={account.source}/&gt;&lt;/td&gt;*/}
                      &lt;td&gt;&lt;input type=""text"" class=""form-control"" name='source' id={index} onChange={this.updateInputValue} ref={(input)=&gt;{account.source=input}}/&gt;&lt;/td&gt;
                      &lt;td&gt;&lt;input type=""text"" class=""form-control"" name='url' id={index} onChange={this.updateInputValue} defaultValue={account.url}/&gt;&lt;/td&gt;
                      &lt;td&gt;&lt;input type=""text"" class=""form-control"" name='name' id={index} onChange={this.updateInputValue} defaultValue={account.name}/&gt;&lt;/td&gt;
                      &lt;td&gt;&lt;i className=""fa fa-trash"" aria-hidden=""true"" id={index} onClick={this.deleteAccount}&gt;&lt;/i&gt;&lt;/td&gt;
                    &lt;/tr&gt;})
                }
                &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;button onClick={ this.addMoreAccount }&gt;+&lt;/button&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;
          &lt;/div&gt;
        &lt;/Modal.Body&gt;
        &lt;Modal.Footer&gt;
          &lt;Button onClick={this.props.hideModal}&gt;Close&lt;/Button&gt;
        &lt;/Modal.Footer&gt;
      &lt;/Modal&gt;
    );
  }

}
</code></pre>
","4591170","","4591170","","2017-02-16 04:41:17","2017-02-16 09:02:12","react input field for text, after rerender the component, the input still hold the old value","<reactjs><dom>","2","0","1","",""
"50017554","1","","","2018-04-25 08:33:30","","0","26","<p>First post and kind of a newbie in the javascript/react/django world.</p>

<p>I am making a form for a school-project and my intention is that the submit should add objects to multiple tables in my database. I am using django with react so the form is created in javascript and I am using fetch() to submit the data. The idea is that the first fetch creates a new object in one table that is later refered to in the second table using a foreign key. However when the fetch to the second table executes is says that the new primary key doesn't exist even though the first fetch has gone through. I guess that the ""instance"" needs to be updated somehow so that the second fetch knows that new foreign keys exist. I've played around with forceUpdate but that doesn't seem to do the job.</p>

<p>Here is my code for the handlesubmit():</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>handleSubmit = e =&gt; {
    e.preventDefault();

    var locationNames = [];
    var locationValues = [];
    for (var i = 0, l = e.target.location[0].options.length; i&lt; l; i++) {
          locationNames.push(e.target.location[0].options[i].attributes['name'].value);
        locationValues.push(e.target.location[0].options[i].attributes['value'].value);
    };

    if(!(locationNames.includes(this.state.location)) &amp;&amp; !(locationValues.includes(this.state.location.toString()))){
      console.log(""added new location"");
      name  = this.state.location;
      const lng = this.state.lng;
      const lat = this.state.lat;
      const location = { name, lng, lat };
      const conf1 = {
        method: ""post"",
        body: JSON.stringify(location),
        headers: new Headers({ ""Content-Type"": ""application/json"" })
      };
      fetch(""api/location/"", conf1).then(response =&gt; console.log(response));
      this.state.location = (locationValues.length + 1).toString();
    }
    else{
      for (var i = 0, l = locationNames.length; i&lt; l; i++) {
        if (locationNames[i] == this.state.location){
          this.state.location = locationValues[i];
          break;
        };
      };
    };

    // this.forceUpdate();

    const { title, location, lat, lng, text, rating, tags } = this.state;
    const author = document.getElementById('uid').innerHTML;
    const review = { author, title, location, lat, lng, text, rating, tags};

    console.log(review);
    const conf = {
      method: ""post"",
      body: JSON.stringify(review),
      headers: new Headers({ ""Content-Type"": ""application/json"" })
    };
    fetch(this.props.endpoint, conf).then(response =&gt; console.log(response));
  };</code></pre>
</div>
</div>
</p>

<p>Don't hesitate to ask for more code or specifics.</p>
","9696072","","","","","2018-04-25 08:33:30","How do I update my endpoint with new foreign keys in javascript/react?","<javascript><django><reactjs>","0","0","","",""
"49047429","1","","","2018-03-01 10:18:29","","0","19","<p>I import a component in a lower version of react project, that component import a higher version of react. In the bundle.js which compile by webpack I see two slice code about the setstate, one of it look do not invoke the callback of setstate.
The code is below:</p>

<pre><code>    ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? Object({""BROWSER"":true}).NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
  if (Object({""BROWSER"":true}).NODE_ENV !== 'production') {
    Object({""BROWSER"":true}).NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
  }
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};
</code></pre>

<p>The below code do not invoke the callback:</p>

<pre><code>    Component.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
 enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
</code></pre>
","6208989","","","","","2018-03-01 10:18:29","react: Does the react 0.14.8's setstate has a callback?","<reactjs>","0","0","","",""
"43070483","1","43071908","","2017-03-28 13:08:29","","0","501","<p>I tried to write a component that update timeline every few seconds, so I use a for loop like this and use <code>setTimeout</code> to make the interval more obvious:</p>

<pre><code>let tmp = this.state.colors;
// colors is an array
for(let i = 0 ; i &lt; 4; i++){
    if(tmp[i]==""blue""){
        tmp[i]=""green"";
        setTimeout(function () {
            console.log(tmp);
            this.mapped.setState({
                colors: tmp
            });
        }.bind({mapped:this}), 2000);
    }
}
</code></pre>

<p>But it seems that it can't re-render my component at once,I want my component update the timeline every two seconds, but it just re-render one time.</p>

<p>And I know that react process all the <code>setStates()</code> after the <code>eventHandler</code> has completed.I tried to use <code>forceUpdate</code> although I know it's not discouraged, but it doesn't work.</p>

<p>So what's the best way to re-render my component?</p>

<p>Any help would be great appreciated.</p>

<hr>

<p><strong>Update</strong></p>

<p>Thanks @andre-lee.</p>

<pre><code>    for (let i = 0; i &lt; 4; i++) {
        setTimeout(function () {
            tmp[i] = ""green"";
            this.setState({
                colors: tmp
            });
        }.bind(this), 2000 * (i + 1));
    }
</code></pre>

<p>The above code works.</p>
","6760995","","6760995","","2017-03-29 02:06:25","2017-03-29 02:06:25","How can I re-render react-component when I setState using setTimeout?","<javascript><reactjs>","1","2","0","",""
"51214269","1","","","2018-07-06 16:17:03","","0","19","<p>I am trying to view an InfoWindow everytime the maps is clicked, it will show an input field and a button to add the named location to list. For now, I am just trying to get the text out of the form, the problem that I am having is how to access the form when the button is clicked???!</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import ReactDOM from 'react-dom';
import PopUpForm from './PopUpForm';
import ReactDOMServer from 'react-dom/server'

class Map extends React.Component {
  
  state = {
      infowindow: new google.maps.InfoWindow({}),
  }

  componentDidUpdate(prevProps, prevState) {
    console.log('componentDidUpdate');
    if (prevProps.google !== this.props.google) {
      this.loadMap();
    }
  }

  componentDidMount() {
    console.log('componentDidMount');
    this.loadMap();
  }

  loadMap() {
    console.log('loadMap');
    if (this.props &amp;&amp; this.props.google) {
      // google is available
      const {google} = this.props;
      const maps = google.maps;

      const mapRef = this.refs.map;
      const node = ReactDOM.findDOMNode(mapRef);

      const {initialCenter, zoom} = this.props;
      const {lat, lng} = initialCenter;
      const center = new maps.LatLng(lat, lng);
      const mapConfig = Object.assign({}, {
        center,
        zoom
      })
      this.map = new maps.Map(node, mapConfig);

      // adding markers for corresponding saved places
      const pos = {lat: 59.329113196988345 , lng: 17.966015144369067};
      const marker = new google.maps.Marker({
        position: pos,
        map: this.map,
        title: 'first marker',
      });
      const infowindow = new google.maps.InfoWindow({
        content: `&lt;h3&gt;${marker.title}&lt;/h3&gt;`
      });
      marker.addListener('click', () =&gt; {
        infowindow.open(this.map, marker);
      });

      // pop up  infoWindoW on map
      this.map.addListener('click', (e) =&gt; {
        this.state.infowindow.close();
        const popUp = &lt;PopUpForm onSubmit={this.onSubmit}/&gt;;
        this.showPopupOnMap(e.latLng, popUp);
        google.maps.event.addListener(this.state.infowindow, 'domready', () =&gt; {
          // HOW TO ACCESS THE FORM HERE
        });
      })
      this.forceUpdate();
    }      
}

onSubmit = () =&gt; {
  e.preventDefault();
  window.alert('onSubmit form')
}

showPopupOnMap = (latLng, popUp) =&gt; {
  const contentString = ReactDOMServer.renderToString(popUp)

  const pos = { lat: latLng.lat(), lng: latLng.lng() };

  this.state.infowindow = new google.maps.InfoWindow({
    content: contentString,
    position: pos
  });
  this.state.infowindow.open(this.map)
}

renderChildren() {
  console.log('renderChildren');
  const {children} = this.props;
  if (!children) return;
  return React.Children.map(children, c =&gt; {
    return React.cloneElement(c, {
      map: this.map,
      google: this.props.google,
    });
  })
}

render() {
  console.log('render');
    const style = {
      width: '70vw',
      height: '70vh'
    }

    return (
      &lt;div  ref=""map"" style={style}&gt;
        loading map...
        {this.renderChildren()}
      &lt;/div&gt;
    )
  }
};

Map.defaultProps = {
  zoom: 11,
  initialCenter: {
    lat: 59.3293,
    lng: 18.0686
  }
}

export default Map;</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';

class PopUpForm extends React.Component {
    render() {
        return (
            &lt;div id='iwc' ref='iwc' &gt;
                &lt;b&gt;Add this location&lt;/b&gt;&lt;br /&gt;
                &lt;form ref='mapform' className='map-form' onSubmit={this.onSubmit}&gt;
                    &lt;input type='text' /&gt;
                    &lt;button id='btn'&gt;Add&lt;/button&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        );
    }
}

export default PopUpForm;</code></pre>
</div>
</div>
</p>

<p>inside of this.map.addListner(this.state.infoWindow, 'domready', someFunctionToBeCalled) I do not know how to acces the form in React, I searched about it all I could found is this:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>google.maps.event.addListener(info, 'domready', function() {
    document.id(""map-form"").addEvent(""submit"", function(e) {
        e.stop();
        console.log(""hi!"");
    });
});</code></pre>
</div>
</div>
</p>

<p>is this even possible? Am I missing something??</p>
","7463649","","","","","2018-07-07 07:48:19","How to access a form inside InfoWindow content in React using Google maps api and google-maps-react V2.0.2","<reactjs><google-maps><google-maps-api-3><infowindow><google-maps-react>","1","0","","",""
"42306712","1","42312627","","2017-02-17 20:21:41","","2","212","<p>I am coming from angular world. And I am still kinda new to react.</p>

<p>One question that I encountered is that:</p>

<p>In angular, we have <code>$watch</code> to watch one scope variables to change and update other variables. like watch B,C,D, and change of B,C,D will affect variable A</p>

<p>In react, I am trying to do the same thing. However, I am calling to <code>setState(B,callbackB)</code> to update A. A has a <code>setState</code> that has an impact in render</p>

<p>It seems like doing such works correctly for variable B. However, updating A will occur in next render cycle. And <code>this.forceUpdate()</code> doesn't seems work.</p>

<p>Is there anything that I am doing wrong?</p>

<p>Thanks</p>
","7582780","","3617120","","2017-02-17 21:26:51","2017-02-18 07:51:23","react one state variable depends on multiple other states variables","<angularjs><reactjs>","3","0","1","",""
"41202831","1","41203957","","2016-12-17 20:39:31","","0","55","<p>I was using an example from <a href=""http://andrewhfarmer.com/component-communication/#3-callback-functions"" rel=""nofollow noreferrer"">http://andrewhfarmer.com/component-communication/#3-callback-functions</a> to communicate from a child to a parent.</p>

<p>I'm attempting to create a star rating system with reactjs. It's not updating the state of the siblings when it re-renders.  I've attempted calling <code>this.forceUpdate()</code> and <code>this.render()</code> when <code>StarsContainer.onRate()</code> is called, alas this doesn't fix the problem either.</p>

<pre><code>Expected output:
StarContainer render: 5 &lt;-
RATING: 5
Star render: 0 : 5
Star render: 1 : 5
Star render: 2 : 5
Star render: 3 : 5
Star render: 4 : 5
Star render: 5 : 5
Star render: 6 : 5

Actual output:
StarContainer render: 5 &lt;-
RATING: 5
Star render: 0 : 1
Star render: 1 : 1
Star render: 2 : 1
Star render: 3 : 1
Star render: 4 : 1
Star render: 5 : 5
Star render: 6 : 1
</code></pre>

<p>The debug clearly shows that the parent <code>StarContainer</code> is re-rendering, and the state for that component has the rating of 5.  It also shows that the <code>Star</code> components are being re-rendered.  However the rating isn't being updated for the ""siblings"".</p>

<p>Did I find a bug, or is this expected behavior?</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=""UTF-8"" /&gt;
    &lt;title&gt;Hello World&lt;/title&gt;
    &lt;script src=""https://unpkg.com/react@latest/dist/react.js""&gt;&lt;/script&gt;
    &lt;script src=""https://unpkg.com/react-dom@latest/dist/react-dom.js""&gt;&lt;/script&gt;
    &lt;script src=""https://unpkg.com/babel-standalone@6.15.0/babel.min.js""&gt;&lt;/script&gt;
    &lt;style&gt;
        a.star:hover {
            cursor: pointer;
            color: red;
        }
        a.star {
            font-size: 2em;
        }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=""root""&gt;&lt;/div&gt;
    &lt;script type=""text/babel""&gt;

        class Star extends React.Component {
            constructor(props) {
                super(props);
                this.state = {
                    rating: props.rating,
                    value: props.value,
                    onValue: props.onValue,
                    offValue: props.offValue,
                    className: props.className,
                    onRate: props.onRate
                };
            }

            handleClick(e) {
                e.preventDefault();
                console.log('The link was clicked.');
                this.setState({rating: this.state.value});
                console.log(""this.state.value:"",this.state.value);
                this.props.onRate(this.state.value);
            }

            render() {
                var rating = this.state.rating;
                var value = this.state.value;
                console.log(""Star render:"", value, "":"",rating);

                if (rating &gt;= value) {
                    return(&lt;a className={this.state.className} onClick={(e) =&gt; this.handleClick(e)}&gt;{this.state.onValue}&lt;/a&gt;);
                } else {
                    return(&lt;a className={this.state.className} onClick={(e) =&gt; this.handleClick(e)}&gt;{this.state.offValue}&lt;/a&gt;);
                }
            }
        }

        Star.propTypes = {
          onRate: React.PropTypes.func,
        };

        class StarsContainer extends React.Component {
            constructor(props) {
                super(props);

                this.state = {
                    rating: props.rating,
                    className: props.className
                };
            }
            onRate(newRating) {
                console.log(""StarsContainer onRate:"", newRating);
                this.setState({rating: newRating});
                console.log(""New Rating:"", this.state.rating);
            }
            render() {
                console.log(""StarContainer render:"", this.state.rating, ""&lt;-"");
                const rating = this.state.rating;
                console.log(""RATING:"", rating);
                return(&lt;span&gt;
                    &lt;Star rating={rating} value=""0"" onValue=""0"" offValue="" "" className=""star"" onRate={this.onRate.bind(this)} /&gt;
                    &lt;Star rating={rating} value=""1"" onValue=""+"" offValue=""-"" className=""star"" onRate={this.onRate.bind(this)} /&gt;
                    &lt;Star rating={rating} value=""2"" onValue=""+"" offValue=""-"" className=""star"" onRate={this.onRate.bind(this)} /&gt;
                    &lt;Star rating={rating} value=""3"" onValue=""+"" offValue=""-"" className=""star"" onRate={this.onRate.bind(this)} /&gt;
                    &lt;Star rating={rating} value=""4"" onValue=""+"" offValue=""-"" className=""star"" onRate={this.onRate.bind(this)} /&gt;
                    &lt;Star rating={rating} value=""5"" onValue=""+"" offValue=""-"" className=""star"" onRate={this.onRate.bind(this)} /&gt;
                    &lt;Star rating={rating} value=""6"" onValue=""?"" offValue="""" className=""star"" onRate={this.onRate.bind(this)} /&gt;
                &lt;/span&gt;);
            }
        }

        StarsContainer.propTypes = {
          onRate: React.PropTypes.func,
        };

        ReactDOM.render(
          &lt;StarsContainer rating=""1"" onValue=""+"" offValue=""-"" className=""star"" /&gt;,
          document.getElementById('root')
        );

    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
","2444609","","","","","2016-12-17 23:14:42","reactjs update parent then update siblings","<reactjs>","1","2","","",""
"49087579","1","","","2018-03-03 18:19:24","","1","194","<p>If I have a react component, and I just set its class variables, ie</p>

<pre><code>class MyComponent extends React.Component {

    constructor(props) {
      super(props);
      this.numberElements = 20;
      this.color = 'red';
    }

    render() { 
       ...
    }
}
</code></pre>

<p>Can't I just call 'this.forceUpdate()' to issue a re-render (whenever I update my class variables) instead of maintaining a state and calling setState?. Or is it bad to do that, and if so, why?</p>
","257558","","257558","","2018-03-03 18:26:28","2018-03-03 19:12:40","Using forceUpdate instead of setState in React?","<javascript><reactjs>","1","2","","",""
"50334535","1","","","2018-05-14 15:58:09","","0","58","<p>I ran in to a problem the last few days that I just can't seem to crack.</p>

<p><strong>What I'm trying to do:</strong> We have a sidebar, from which you can select a ""<strong>Study</strong>"". This study determines what you see on the main content block, as each <strong>study</strong> has different data and users assosciated with it. In the main content block, I have <strong>forms</strong> set up, one for each user.</p>

<p><strong>The problem:</strong> On first page load, everything works fine. However, if you change the <strong>study</strong>, thus, rendering the page anew with componentWillReceiveProps, the new forms that are loaded are there, but with blank values (no initial values) and an <em>initialized</em> value of <code>false</code>. They're also not selectable in any way - the form itself is one selection dropdown and 3 checkboxes, and you can't select any of them.</p>

<p>Refreshing the page causes the forms to work again, even on the new study. </p>

<p><strong>What I've tried:</strong></p>

<ul>
<li>Manually initializing the forms with <code>this.props.dispatch(initialize(form_name))</code>. This causes the forms to be initialized with the correct values, but there's still no way to interact with them in any way.</li>
<li>Manually updatine (this.forceUpdate) on the parent's study prop change. This changed nothing</li>
<li>Setting <code>enableReinitialize</code> to <code>true</code></li>
<li>Providing a <code>key</code> to the parent page so it renders fresh every time (a hack I thought would work, but either I didn't do it right or it had no effect.)</li>
<li>Destroying the old forms when in the process of switching study props</li>
</ul>

<p>Here's the code of the Parent component and the Form component. This sidebar is in a seperate component, if you want to see that for some reason just ask. There's a lot going on in these files, mostly other extraneous UI stuff for the app, but I noted where the form is rendered in the parent with <code>//FORM IN QUESTION IS RENDERED HERE</code>.</p>

<p><strong>PARENT</strong></p>

<pre><code>import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import IconButton from 'material-ui/IconButton';
import Button from 'material-ui/Button';
import InviteUsersDialog from './InviteUsersDialog';
import SwipeableViews from 'react-swipeable-views';
import AppBar from 'material-ui/AppBar';
import Tabs, { Tab } from 'material-ui/Tabs';

import Avatar from 'material-ui/Avatar';
import tempAvatar from '../../Assets/temp-avatar.jpg';

import ExpansionPanel, {
  ExpansionPanelDetails,
  ExpansionPanelSummary,
} from 'material-ui/ExpansionPanel';

import Typography from 'material-ui/Typography';

import ExpandMoreIcon from 'material-ui-icons/ExpandMore';

import { withRouter } from 'react-router-dom';
import { withStyles } from 'material-ui/styles';
import { connect } from 'react-redux';

import { getUsersAction, getInvestigationPermissionsAction, resetUsersError, destroyFormsAction } from '../../actions/manage';

import { MenuItem } from 'material-ui/Menu';
import { Field, FieldArray, reduxForm, getFormValues, change, reset, destroy } from 'redux-form';

import {
  Checkbox,
  RadioGroup,
  Select,
  TextField,
  Switch,
} from 'redux-form-material-ui'

import PermissionsForm from './PermissionsForm';

import compose from 'recompose/compose';

class Manage extends Component {

    constructor(props) {
        super(props);
        if (this.props.investigation) {
            this.props.getUsersAction(this.props.investigation)
        }
    }

    state = {
        inviteOpen: false,
        expanded: null,
        value: 0
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.investigation !== nextProps.investigation) {
            this.props.getUsersAction(nextProps.investigation)

        }
    }

    handleInviteOpen = () =&gt; {
        this.setState({
            inviteOpen: true
        })
    }

    updateOnSave = () =&gt; {
        this.setState({
            expanded: null
        })
        this.props.getUsersAction(this.props.investigation).then(() =&gt; {
            this.props.getInvestigationPermissionsAction(this.props.investigation)
        })
    }

    closeOnCancel = () =&gt; {
        this.setState({
            expanded: null
        })
    }

    closeDialog = () =&gt; {
        this.setState({
            inviteOpen: false
        })
    }

    handleChange = (event, value) =&gt; {
        console.log(value)
        this.setState({ value });
    };

    handleChangeIndex = index =&gt; {
        this.setState({ value: index });
    };

    handleExpansionChange = panel =&gt; (event, expanded) =&gt; {
        this.setState({
          expanded: expanded ? panel : false,
        });
    }

    render() {
        const { expanded } = this.state;
        let inviteUsers = null;
        if (this.state.inviteOpen === true) {
            inviteUsers = (
                &lt;InviteUsersDialog open={this.state.inviteOpen} updateOnSave={this.updateOnSave} closeDialog={this.closeDialog}/&gt;
            )
        } else {
            inviteUsers = null;
        }

        if (this.props.usersError) {
            this.props.history.push('/dash')
            this.props.resetUsersError()
        }

        let usersList = null;
        if (this.props.users) {
            console.log(""USERS:"", this.props.users)
            usersList = (
                &lt;div className={this.props.classes.usersExpansions}&gt;
                    &lt;ExpansionPanel className={this.props.classes.expansionPanel} expanded={false}&gt;
                      &lt;ExpansionPanelSummary className={this.props.classes.expansionSummary} expandIcon={&lt;ExpandMoreIcon className={this.props.classes.headerExpandMore}/&gt;}&gt;
                        &lt;div className={this.props.classes.headerAvatarContainer}&gt;
                            &lt;div className={this.props.classes.userInfo}&gt;
                                &lt;Typography className={this.props.classes.headingName}&gt;Name&lt;/Typography&gt;
                                &lt;Typography className={this.props.classes.headingEmail}&gt;Email&lt;/Typography&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;Typography className={this.props.classes.headerStatus}&gt;Status&lt;/Typography&gt;
                        &lt;Typography className={this.props.classes.headerPermissions}&gt;Permissions&lt;/Typography&gt;
                      &lt;/ExpansionPanelSummary&gt;
                    &lt;/ExpansionPanel&gt;
                {this.props.users.currentUsers.map((user) =&gt;
                    &lt;ExpansionPanel className={this.props.classes.expansionPanel} expanded={expanded === user.email + '-' + this.props.investigation} onChange={this.handleExpansionChange(user.email + '-' + this.props.investigation)}&gt;
                      &lt;ExpansionPanelSummary className={this.props.classes.expansionSummary} expandIcon={&lt;ExpandMoreIcon /&gt;}&gt;
                        &lt;div className={this.props.classes.avatarContainer}&gt;
                            &lt;Avatar
                                alt={user.name}
                                src={user.avatarImg ? ""data:image/jpeg;base64,"" + user.avatarImg : tempAvatar}
                                className={this.props.classes.avatar}
                                style={{ borderRadius: 2.1 }}
                            /&gt;
                            &lt;div className={this.props.classes.userInfo}&gt;
                                &lt;Typography className={this.props.classes.headingName}&gt;{user.name}&lt;/Typography&gt;
                                &lt;Typography className={this.props.classes.headingEmail}&gt;{user.email}&lt;/Typography&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;Typography className={this.props.classes.status}&gt;{expanded === user.email + '-' + this.props.investigation ? '' : 'Activated'}&lt;/Typography&gt;
                        &lt;Typography className={this.props.classes.headingPermissions}&gt;{expanded === user.email + '-' + this.props.investigation ? '' : user.permissionsArr.join(', ')}&lt;/Typography&gt;
                      &lt;/ExpansionPanelSummary&gt;
                      &lt;ExpansionPanelDetails className={this.props.classes.detailsContainer}&gt;
                        //FORM IN QUESTION IS RENDERED HERE
                        &lt;PermissionsForm 
                         form={`PermissionsForm_${user.identifier + '-' + this.props.investigation}`} 
                         updateOnSave={this.updateOnSave} closeOnCancel={this.closeOnCancel} 
                         loggedInUser={user.email === localStorage.getItem('userEmail') ? true : false} 
                         formName={`PermissionsForm_${user.identifier + '-' + this.props.investigation}`} 
                         initialValues={{identifier: user.identifier, viewPermissions: user.permissions.viewEntries === true ? 'allEntries' : 'ownEntries', addEntriesPermissions: true, exportPermissions: user.permissions.export, manageInvestPermissions: user.permissions.manageInvest}}/&gt;
                      &lt;/ExpansionPanelDetails&gt;
                    &lt;/ExpansionPanel&gt;
                )}
                {this.props.users.pendingUsers.map((user) =&gt;
                    &lt;ExpansionPanel className={this.props.classes.expansionPanel} expanded={false} onChange={this.handleExpansionChange(user.email + '-' + this.props.investigation)}&gt;
                      &lt;ExpansionPanelSummary className={this.props.classes.expansionSummary} expandIcon={&lt;ExpandMoreIcon className={this.props.classes.headerExpandMore}/&gt;}&gt;
                        &lt;div className={this.props.classes.avatarContainer}&gt;
                            &lt;Avatar
                                alt={user.name}
                                src={tempAvatar}
                                className={this.props.classes.avatar}
                                style={{ borderRadius: 0 }}
                            /&gt;
                            &lt;div className={this.props.classes.userInfo}&gt;
                                &lt;Typography className={this.props.classes.headingEmail}&gt;{user.email}&lt;/Typography&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;Typography className={this.props.classes.status}&gt;Pending&lt;/Typography&gt;
                        &lt;Typography className={this.props.classes.headingPermissions}&gt;{user.permissionsArr.join(', ')}&lt;/Typography&gt;
                      &lt;/ExpansionPanelSummary&gt;
                    &lt;/ExpansionPanel&gt;
                )}
                &lt;/div&gt;
            )
        }
        return (
            &lt;div className={this.props.classes.container}&gt;
                &lt;div className={this.props.classes.pageHeaderContainer}&gt;
                    &lt;h2 className={this.props.classes.title}&gt;Manage users&lt;/h2&gt;
                    &lt;Button color=""primary"" raised className={this.props.classes.inviteButton} onClick={this.handleInviteOpen}&gt;Invite user&lt;/Button&gt;
                &lt;/div&gt;
                {inviteUsers}
                &lt;AppBar position=""static"" color=""default"" className={this.props.classes.tabsAppBar}&gt;
                  &lt;Tabs
                    value={this.state.value}
                    onChange={this.handleChange}
                    indicatorColor=""primary""
                    textColor=""primary""
                    fullWidth
                    className={this.props.classes.tabs}
                  &gt;
                    &lt;Tab label=""People"" /&gt;
                    &lt;Tab label=""Groups"" /&gt;
                  &lt;/Tabs&gt;
                &lt;/AppBar&gt;
                &lt;SwipeableViews
                  axis={'x'}
                  index={this.state.value}
                  onChangeIndex={this.handleChangeIndex}
                &gt;
                &lt;div className={this.props.classes.peopleContainer}&gt;
                    {usersList}
                &lt;/div&gt;
                &lt;div&gt;

                &lt;/div&gt;
                &lt;/SwipeableViews&gt;
            &lt;/div&gt;
        );
    }
}


const styles = {
};

function mapStateToProps(state, ownProps) {
  return { 
    investigation: state.manage.savedInvest,
    users: state.manage.authorizedUsers,
    usersError: state.manage.usersError
  };
}


export default compose(
  withRouter,
  connect(mapStateToProps, {getUsersAction, getInvestigationPermissionsAction, resetUsersError, destroyFormsAction}),
  withStyles(styles)
)(Manage);
</code></pre>

<p><strong>FORM</strong></p>

<pre><code>import React from 'react';
import Dialog, {
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
} from 'material-ui/Dialog';

import Button from 'material-ui/Button';
import Input, { InputLabel } from 'material-ui/Input';

import { withStyles } from 'material-ui/styles';

import List, { ListItem, ListItemIcon, ListItemText } from 'material-ui/List';

import Typography from 'material-ui/Typography';

import Divider from 'material-ui/Divider'

import SelectBase from 'material-ui/Select';
import { MenuItem } from 'material-ui/Menu';
import { Field, FieldArray, reduxForm, getFormValues, change, reset, initialize } from 'redux-form';
import { patchPermissionsAction } from '../../actions/manage';
import { resetFormsAction } from '../../actions/dashboard';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';

import Tooltip from 'material-ui/Tooltip';

import PropTypes from 'prop-types';

import compose from 'recompose/compose';

import {
  Checkbox,
  RadioGroup,
  Select,
  TextField,
  Switch,
} from 'redux-form-material-ui'

const required = value =&gt; (value == null ? 'Required' : undefined)

class PermissionsForm extends React.Component {
  constructor(props) {
    super(props);
  }

  static contextTypes = {
    form: PropTypes.string
  }
  submit = (values) =&gt; {
    this.props.patchPermissionsAction(values, this.props.investigation).then(() =&gt; {
      this.props.updateOnSave();
    })
  }

  handleCancel = () =&gt; {
    this.props.closeOnCancel();
    this.props.dispatch(reset(this.props.formName))
  }

  componentDidUpdate() {
    console.log(""!"")
    if(!this.props.initialized) {
      console.log(""!!"")
    }
  }

  componentWillUnmount() {

  }

  render() {
    const { handleSubmit, pristine, reset, submitting } = this.props

    let managePerm = null;
    if (this.props.loggedInUser) {
      managePerm = (
        &lt;Tooltip id=""tooltip-top-start"" title=""Coming soon"" placement=""top""&gt;
          &lt;Typography className={this.props.classes.status}&gt;Manage users&lt;/Typography&gt;
        &lt;/Tooltip&gt;
      )
    } else {
      managePerm = (&lt;Typography className={this.props.classes.status}&gt;Manage users&lt;/Typography&gt;)
    }

    return (
      &lt;div className={this.props.classes.permFormContainer}&gt;
        &lt;Divider /&gt;
        &lt;form onSubmit={ handleSubmit(this.submit) }&gt;
        &lt;div className={this.props.classes.innerFormContainer}&gt;
            &lt;div className={this.props.classes.groupsContainer}&gt;
            &lt;br/&gt;
            &lt;/div&gt;
            &lt;div className={this.props.classes.fieldContainer}&gt;
              &lt;Typography className={this.props.classes.status}&gt;View&lt;/Typography&gt;
              &lt;Field name=""viewPermissions"" component={Select}&gt;
                &lt;MenuItem value=""ownEntries""&gt;View own entries&lt;/MenuItem&gt;
                &lt;MenuItem value=""allEntries""&gt;View all entries&lt;/MenuItem&gt;
              &lt;/Field&gt;
            &lt;/div&gt;
            &lt;div className={this.props.classes.fieldContainer}&gt;
            &lt;Tooltip id=""tooltip-top-start"" title=""Coming soon"" placement=""top""&gt;
              &lt;Typography className={this.props.classes.status}&gt;Add entries&lt;/Typography&gt;
            &lt;/Tooltip&gt;
            &lt;Field
              name=""addEntriesPermissions""
              component={Checkbox}
              normalize={v =&gt; !!v}
              disabled={true}
            /&gt;
            &lt;/div&gt;
            &lt;div className={this.props.classes.fieldContainer}&gt; 
            &lt;Typography className={this.props.classes.status}&gt;Export data&lt;/Typography&gt;
            &lt;Field
              name=""exportPermissions""
              component={Checkbox}
              normalize={v =&gt; !!v}
            /&gt;
            &lt;/div&gt;
            &lt;div className={this.props.classes.fieldContainer}&gt;
            {managePerm}
            &lt;Field
              name=""manageInvestPermissions""
              component={Checkbox}
              normalize={v =&gt; !!v}
              disabled={this.props.loggedInUser === true ? true : false}
            /&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;Divider /&gt;
        &lt;div className={this.props.classes.actionButtons}&gt;

          &lt;Tooltip id=""tooltip-top-start"" title=""Coming soon"" placement=""top""&gt;
          &lt;Button color=""error"" className={this.props.classes.deleteButton}&gt;
            Delete account
          &lt;/Button&gt;
          &lt;/Tooltip&gt;
          &lt;div className={this.props.classes.saveAndCancelButtons}&gt;
            &lt;Button onClick={this.handleCancel} className={this.props.classes.cancelButton}&gt;
              Cancel
            &lt;/Button&gt;
            &lt;Button type=""submit"" disabled={submitting} color=""primary"" className={this.props.classes.saveButton}&gt;
              Save
            &lt;/Button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    );
  }
}

function mapStateToProps(state, ownProps) {
  return { 
    investigation: state.manage.savedInvest,
    investTitle: state.manage.savedInvestTitle
  };
}

const styles = theme =&gt; ({
});

const reduxFormmPermissions = reduxForm({
  enableReinitialize : true
})(PermissionsForm);

export default compose(
  withRouter,
  connect(mapStateToProps, {patchPermissionsAction}),
  withStyles(styles)
)(reduxFormmPermissions);
</code></pre>

<p>Thanks much for anybody who can help me get to the bottom of this. Real head-banger.</p>
","5335646","","5335646","","2018-05-14 16:03:30","2018-05-29 17:09:29","Redux form renders in unitialized state (and unable to be initialized) when reactively changing content on page","<reactjs><redux><redux-form>","1","6","","",""
"50376754","1","","","2018-05-16 17:23:22","","0","45","<p>I am building a VR tour based on React-360.  </p>

<p>When a button is clicked, I want the state of all components to be updated.  </p>

<p>How can I run this.forceUpdate(); globally on a button click?  </p>

<p>Here is my index.js file:  </p>

<pre><code>import React from 'react';

import {
  asset, 
  AppRegistry,
  Environment,
  StyleSheet,
  Text,
  View,
  Image, 
  NativeModules, 
  VrButton,
  staticResourceURL, 
} from 'react-360';


const defaultData = {
    page: 0
};

globalPage(defaultData.page)

function globalPage(page) {
    defaultData.page = page 
    return page;
}

function reloadContent(e){
    e.forceUpdate();
} 

class FloorSurface extends React.Component {
  handleChange(e) {
      globalPage(e)
      reloadContent(this)
  }

  render() {    

    const floorButtons = this.props.floorButtons[defaultData.page].buttons.map((floorButton) =&gt;
        &lt;View key={floorButton.key}&gt;
            &lt;VrButton onClick={this.handleChange.bind(this, floorButton.targetState)}&gt;
                &lt;Image source={{uri: 'static_assets/'+floorButton.buttonImageSrc+''}} style={{width: 256, height:256}} /&gt;
            &lt;/VrButton&gt;
        &lt;/View&gt;
    );

    return (
        &lt;View&gt;
            &lt;View style={styles.floorStyle}&gt;
                {floorButtons}
            &lt;/View&gt;
        &lt;/View&gt;
    ) ;
  }
};

class WallButtons extends React.Component {
  handleChange(e) {
      globalPage(e)
      reloadContent(this)
  }

  render() {

    const buttons = this.props.photos[defaultData.page].buttons.map((button) =&gt;
        &lt;View key={button.key}&gt;
            &lt;VrButton onClick={this.handleChange.bind(this, button.targetState)}&gt;
                &lt;Image source={{uri: 'static_assets/'+button.buttonImageSrc+''}} style={{width: 128, height:128}} /&gt;
            &lt;/VrButton&gt;
        &lt;/View&gt;
    );

    const current = this.props.photos[defaultData.page];
    Environment.setBackgroundImage(asset(current.bg), {format: '3DTB'});

    return (

        &lt;View&gt;
            &lt;View style={styles.panelStyle}&gt;
                {buttons}
            &lt;/View&gt;
        &lt;/View&gt;
    );
  }
};


const styles = StyleSheet.create({
    panelStyle: {
        width: 4680,
        height: 2048,
        //  backgroundColor: 'rgba(255, 25, 255, 0.6)',
        justifyContent: 'center',
        alignItems: 'center',
    },
    floorStyle: {
        position:""absolute"", 
        width: 4096,
        height: 4096,
        //backgroundColor: 'rgba(25, 255, 255, 0.75)',
        layoutOrigin: [0, 0], 
        top:0, 
        left:0
    }
});

AppRegistry.registerComponent('WallButtons', () =&gt; WallButtons);
AppRegistry.registerComponent('FloorSurface', () =&gt; FloorSurface);

export default WallButtons
</code></pre>

<p>Here is my client.js file:  </p>

<pre><code>import {ReactInstance, Surface} from 'react-360-web';


function init(bundle, parent, options = {}) {
  const r360 = new ReactInstance(bundle, parent, {
fullScreen: true,
...options,
  });

const FloorSurface = new Surface(4096, 4096, Surface.SurfaceShape.Flat);
FloorSurface.resize(4096, 4096);
FloorSurface.setAngle(0, -Math.PI / 2);

const s = r360.getDefaultSurface();
s.resize(4680, 2048);

  // put the buttons on the cylinder 
  r360.renderToSurface(
r360.createRoot('WallButtons', {
  photos: [
    {stateName: 0, 
     format: '3DTB', 
     buttons:   [{
            key: 0,
            imageSrc: 'state0.jpg',
            buttonImageSrc: 'state0button0.png',
            targetState: 1,
        },{
            key: 1,
            imageSrc: 'state1.jpg',
            buttonImageSrc: 'state0button1.png',
            targetState: 1,
        },
    },
    {stateName: 1, 
     format: '3DTB', 
     buttons:   [{
            key: 0,
            imageSrc: 'state1.jpg',
            buttonImageSrc: 'state1button0.png',
            targetState: 1,
        },{
            key: 1,
            imageSrc: 'state2.jpg',
            buttonImageSrc: 'state1button1.png',
            targetState: 0,
        }], 
    },
  ],
}),
r360.getDefaultSurface(),
  );


//put the buttons on the floor 
  r360.renderToSurface(
r360.createRoot('FloorSurface', {
  floorButtons: [
    {stateName: 0, 
     format: '3DTB', 
     buttons:   [{
            key: 0,
            buttonImageSrc: 'target.png',
            targetState: 1,
        },{
            key: 1,
            buttonImageSrc: 'target.png',
            targetState: 1,
        },{
            key: 2,
            buttonImageSrc: 'target.png',
            targetState: 0,
        },{
            key: 3,
            buttonImageSrc: 'target.png',
            targetState: 0,
        }], 
    },
    {stateName: 1, 
     format: '3DTB', 
     bg:'openRightOuterDoor.png', 
     buttons:   [{
            key: 0,
            buttonImageSrc: 'target.png',
            targetState: 0, 
        },{
            key: 1,
            buttonImageSrc: 'target.png',
            targetState: 1, 
        }], 
    },
  ],
}),
FloorSurface,
  );

}

window.React360 = {init};
</code></pre>

<p>If you put two  elements next to each other, they all render to the same default cylinder surface.  The ""floor buttons"" are on a flat surface, not the default cylinder, that is why they are separated into separate components.  </p>

<p>React-360 does support global variables, and does not currently support global states.  To synchronize the state between all components, I made a global variable ""defaultData.page"".  The global variable defines which state all components should be at the same time.  When a button is clicked, ""page"" gets passed into globalPage(), which returns updated variable between all components.  </p>

<p>The data correctly gets updated (you can verify this with a console.log), however, <em>the updates do not immediately render</em>.   </p>

<p>Using ""setTimeout(function() { reloadContent(this) }.bind(this), 100);"" in both FloorSurface and WallButtons works well.  Unfortunately the ""setBackgroundImage"" method has a transition and the screen flickers.  </p>

<p>• How can I remove the transition in setBackground Image?<br>
• How can I apply a global forceUpdate(); to render immediately updates to all React-360 components?  </p>
","4995675","","","","","2018-05-16 17:23:22","How to apply this.forceUpdate() to update all components with React-360?","<javascript><reactjs><rendering><react-vr>","0","0","1","",""
"49053136","1","49063157","","2018-03-01 15:31:45","","0","72","<p>I created the React application.</p>

<p>it <strong>index.js</strong> , it import data from result_data.json. </p>

<pre><code>import React from 'react';
import { render } from 'react-dom';
import anime from 'animejs';

import ReactApp from './App';
import Chart from './chart';
import obj from './result_data.json'

let getProperty = function (propertyName) {
    return obj[propertyName];
};

const data = obj;

const App = () =&gt; (
    &lt;ReactApp data={data} data2={obj} chart={(&lt;Chart/&gt;)}/&gt;
);

render(&lt;App /&gt;,document.getElementById('root'));    
</code></pre>

<p>it <strong>chart.js</strong> I connected this chart to my main project (App.js). 
but I can not get data from app.js for chart.js</p>

<pre><code>import { scaleOrdinal } from 'd3-scale';
import { arc, pie } from 'd3-shape';
import { shuffle } from 'd3-array';
import { easeExpOut } from 'd3-ease';
import sortBy from 'lodash/sortBy';
import Surface from 'docs/src/components/Surface';
import React, { PureComponent } from 'react';
import NodeGroup from 'react-move/NodeGroup';

const colors = scaleOrdinal()
  .range(['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c']);

const view = [1000, 550]; // [width, height]
const trbl = [10, 10, 10, 10]; // [top, right, bottom, left] margins

const dims = [ // Adjusted dimensions [width, height]
  view[0] - trbl[1] - trbl[3],
  view[1] - trbl[0] - trbl[2],
];

const mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];

const radius = (dims[1] / 2) * 0.70;

const pieLayout = pie()
  .value((d) =&gt; d.value)
  .sort(null);

const innerArcPath = arc()
  .innerRadius(radius * 0.4)
  .outerRadius(radius * 1.0);

const outerArcPath = arc()
  .innerRadius(radius * 1.2)
  .outerRadius(radius * 1.2);

function mid(d) {
  return Math.PI &gt; (d.startAngle + (d.endAngle - d.startAngle));
}

function getRandom(min, max) {
  return Math.floor(Math.random() * (max - (min + 1))) + min;
}

function getArcs() {
  const data = shuffle(mockData)
    .map(({ name }) =&gt; ({ name, value: getRandom(10, 100) }));

  return pieLayout(sortBy(data, (d) =&gt; d.name));
}

class Example extends PureComponent {
  state = {
    arcs: getArcs(),
  }

  update = (e) =&gt; {
    e.preventDefault();
    e.stopPropagation();

    this.setState(() =&gt; ({
      arcs: getArcs(),
    }));
  }

  render() {
    const { arcs } = this.state;

    return (
      &lt;div&gt;
        &lt;button onClick={this.update}&gt;
          Update
        &lt;/button&gt;
        &lt;Surface view={view} trbl={trbl}&gt;
          &lt;g transform={`translate(${dims[0] / 2}, ${dims[1] / 2})`}&gt;
            &lt;NodeGroup
              data={arcs}
              keyAccessor={(d) =&gt; d.data.name}

              start={({ startAngle }) =&gt; ({
                startAngle,
                endAngle: startAngle,
              })}

              enter={({ endAngle }) =&gt; ({
                endAngle: [endAngle],
                timing: { duration: 500, delay: 350, ease: easeExpOut },
              })}

              update={({ startAngle, endAngle }) =&gt; ({
                startAngle: [startAngle],
                endAngle: [endAngle],
                timing: { duration: 350, ease: easeExpOut },
              })}
            &gt;
              {(nodes) =&gt; {
                return (
                  &lt;g&gt;
                    {nodes.map(({ key, data, state }) =&gt; {
                      const p1 = outerArcPath.centroid(state);
                      const p2 = [
                        mid(state) ? p1[0] + (radius * 0.5) : p1[0] - (radius * 0.5),
                        p1[1],
                      ];
                      return (
                        &lt;g key={key}&gt;
                          &lt;path
                            d={innerArcPath(state)}
                            fill={colors(data.data.name)}
                            opacity={0.9}
                          /&gt;
                          &lt;text
                            dy=""4px""
                            fontSize=""12px""
                            transform={`translate(${p2.toString()})`}
                            textAnchor={mid(state) ? 'start' : 'end'}
                          &gt;{data.data.name}&lt;/text&gt;
                          &lt;polyline
                            fill=""none""
                            stroke=""rgba(127,127,127,0.5)""
                            points={`${innerArcPath.centroid(state)},${p1},${p2.toString()}`}
                          /&gt;
                        &lt;/g&gt;
                      );
                    })}
                  &lt;/g&gt;
                );
              }}
            &lt;/NodeGroup&gt;
          &lt;/g&gt;
        &lt;/Surface&gt;
      &lt;/div&gt;
    );
  }
}

export default Example;
</code></pre>

<p>Аnd it <strong>App.js</strong>. It my main project. It get data from index.js</p>

<pre><code>import React from 'react';
import {Group} from '@vx/group';
import {Tree} from '@vx/hierarchy';
import {LinearGradient} from '@vx/gradient';
import {hierarchy} from 'd3-hierarchy';
import {pointRadial} from 'd3-shape';
import NodeGroup from 'react-move/NodeGroup';
import Surface from './components/Surface';

const view = [1200, 750]; // [width, height]
const trbl = [10, 10, 30, 10]; // [top, right, bottom, left] margins

function findCollapsedParent(node) {
    if (!node.data.isExpanded) {
        return node;
    } else if (node.parent) {
        return findCollapsedParent(node.parent);
    } else {
        return null;
    }
}

function radialPoint(angle, radius) {
    const [x, y] = pointRadial(angle, radius);
    return {x, y};
}

export default class extends React.Component {

    render() {
        const {
            width = view[0],
            height = view[1] - 30,
            data,
            chart,
            margin = {
                top: 10,
                left: 10,
                right: 10,
                bottom: 30
            }
        } = this.props;

        const innerWidth = width - margin.left - margin.right;
        const innerHeight = height - margin.top - margin.bottom;

        let sizeWidth = 2 * Math.PI;
        let sizeHeight = Math.min(innerWidth, innerHeight) /2;
        let origin;

        origin = {
            x: innerWidth / 2,
            y: innerHeight / 2
        };

        if (width &lt; 10) return null;
        return (
            &lt;div&gt;                    

                &lt;div id={""chart""}&gt;
                    {this.getChart}
                &lt;/div&gt;

                &lt;Surface view={view} trbl={trbl}&gt;

                    &lt;LinearGradient id=""lg"" from=""#fd9b93"" to=""#fe6e9e""/&gt;
                    {/*&lt;rect width={width} height={height} rx={0} fill=""#232323""/&gt;*/}

                    &lt;Tree
                        top={margin.top}
                        left={margin.left}
                        root={hierarchy(data, d =&gt; (d.isExpanded ? d.children555 || d.children2 : null))}
                        size={[sizeWidth, sizeHeight]} 
                        separation={(a, b) =&gt; ((a.children === b.children) &amp;&amp; (a.parent === b.parent) ? 1 : 7) / a.depth }
                    &gt;

                        {({links, descendants}) =&gt; (
                            &lt;Group top={origin.y} left={origin.x}&gt;
                                &lt;NodeGroup
                                    data={links}
                                    keyAccessor={(d, i) =&gt;
                                        `${d.source.data}_${d.target.data.name}`}

                                    start={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            },
                                            target: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            }
                                        };
                                    }}

                                    enter={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            },

                                        };
                                    }}
                                    update={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            }
                                        };
                                    }}

                                    leave={({source, target}) =&gt; {
                                        const collapsedParent = findCollapsedParent(source);
                                        return {
                                            source: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            },
                                            target: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            }
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data, state}) =&gt; {
                                                return (
                                                    &lt;LinkRadialCurve
                                                        data={state}
                                                        stroke=""#2996D9""
                                                        strokeWidth=""1""
                                                        strokeDasharray=""4""
                                                        fill=""none""
                                                        key={key}
                                                    /&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;

                                &lt;NodeGroup
                                    data={descendants}
                                    keyAccessor={d =&gt; d.data.name}
                                    start={({parent}) =&gt; {
                                        const radialParent = radialPoint(parent ? parent.x : 0, parent ? parent.y : 0);
                                        return {
                                            x: radialParent.x,
                                            y: radialParent.y,
                                            opacity: 0
                                        };
                                    }}
                                    enter={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1],
                                            timing: {duration: 600, delay: 200}
                                        };
                                    }}
                                    update={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1]
                                        };
                                    }}
                                    leave={({parent}) =&gt; {
                                        const collapsedParent = findCollapsedParent(parent);
                                        const radialParent = radialPoint(collapsedParent.data.x0, collapsedParent.data.y0);
                                        return {
                                            x: [radialParent.x],
                                            y: [radialParent.y],
                                            opacity: [0]
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data: node, state}) =&gt; {
                                                const width = 50;
                                                const height = 30;
                                                const textLength = node.data.name;

                                                return (
                                                    &lt;Group
                                                        top={state.y}
                                                        left={state.x}
                                                        key={key}
                                                        opacity={state.opacity}
                                                    &gt;
                                                        {node.data.isExpanded &amp;&amp; node.depth !== 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={'28'}
                                                                fill={'transparent'}
                                                                stroke={'#2996D9'}
                                                                strokeWidth={2.5}
                                                                strokeOpacity={0.9}
                                                            /&gt;
                                                        )}

                                                        {node.depth === 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={(textLength &gt; 15) ? ('32') : ('39')}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT ****
                                                                x={-width / 2}
                                                                fill={'#2996D9'}
                                                                stroke='#03c0dc'
                                                                strokeDasharray={""3""}
                                                                strokeWidth={3}

                                                                onClick={() =&gt; {
                                                                    console.log('node.onClick', node);
                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;
                                                                    this.forceUpdate();
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {node.data.children2 &amp;&amp; (
                                                            &lt;circle
                                                                r={'22'}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT
                                                                x={-width / 2}  //--FOR RECT
                                                                fill={
                                                                    node.data.name === 'Skills' ? ('#DA244D') : node.data.name === 'Experience' ?
                                                                        ('#F3B63C') : node.data.name === 'Education' ? ('#64B86C') : ('#F3B63C')
                                                                }
                                                                strokeOpacity={!node.data.children2 ? 0.6 : 1}
                                                                rx={!node.data.children2 ? 10 : 0} //--FOR RECT
                                                                onClick={() =&gt; {

                                                                    if (node.data.name === 'Experience') {

                                                                        this.getChart = !chart;
                                                                    }

                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;

                                                                    this.forceUpdate();
                                                                    console.log(node);
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {!node.data.children2 &amp;&amp; !node.data.children555 &amp;&amp; (
                                                            &lt;a&gt;
                                                                &lt;rect
                                                                    height={height}
                                                                    width={width}
                                                                    y={-height / 2} //--FOR RECT
                                                                    x={-width / 2}  //--FOR RECT
                                                                    fill={node.data.children ? '#232323' : '#232323'}
                                                                    stroke={'#2996D9'}
                                                                    strokeWidth={2}
                                                                    strokeDasharray={!node.data.children555 ? '2,2' : '0'}
                                                                    // strokeOpacity={!node.data.children ? 0.6 : 1}
                                                                    rx={!node.data.children555 ? 8 : 0}

                                                                    onClick={() =&gt; {

                                                                        this.getChart = chart;
                                                                        this.forceUpdate();
                                                                        console.log(node);
                                                                        console.log(this.mockData);
                                                                    }}
                                                                    &gt;

                                                                &lt;/rect&gt;
                                                            &lt;/a&gt;
                                                        )}

                                                        &lt;title&gt; {node.data.name} &lt;/title&gt;

                                                        {node.data.isExpanded || !node.data.children2 || (
                                                            &lt;text
                                                                dy={
                                                                    (textLength.length &gt; 5) ? ('-5') : ('.33em')
                                                                }
                                                                x={
                                                                    (textLength.length &lt; 5) ? ('0') : (textLength.length &lt; 30) ? ('30') : ('-33')
                                                                }

                                                                fontSize={11}
                                                                fontFamily=""Arial""
                                                                textAnchor={(textLength.length &lt; 5) ? ('middle') : (textLength.length &lt; 30) ? ('start') : ('end')}
                                                                style={{pointerEvents: 'none'}}
                                                                fill={
                                                                    node.depth === 0 ? ('white') : node.children555 ? ('white') : ('white')
                                                                }
                                                            &gt;
                                                                &lt;tspan&gt; {node.data.name}&lt;/tspan&gt;
                                                            &lt;/text&gt;

                                                        )}

                                                    &lt;/Group&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;
                            &lt;/Group&gt;
                        )}
                    &lt;/Tree&gt;
                &lt;/Surface&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>In <strong>chart.js</strong> </p>

<pre><code>mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];
</code></pre>

<p>But I need to get data from <strong>App.js</strong></p>

<p>How to solve this problem?
Thanks.</p>
","9349014","","9349014","","2018-03-01 20:42:52","2018-03-02 05:08:43","Getting data from the react app.js into react chart.js","<javascript><reactjs><d3.js>","1","6","","",""
"50445036","1","50445122","","2018-05-21 08:46:08","","0","44","<p>I'm using React to build a web application that will display a different quote every time the user clicks a button. I've been hunting for a way to get my component <code>QuoteGenerator</code> to re-render/refresh on a button-click, and I've tried all the possibilities presented in <a href=""https://stackoverflow.com/questions/30626030/can-you-force-a-react-component-to-rerender-without-calling-setstate"">this article</a> with no success. </p>

<pre><code>class QuoteGenerator extends React.Component {
  constructor(props) {
        super(props);
        this.state = {num: Math.floor(Math.random() * quotes.length)};
    }

  render() {
    return(
      &lt;div class=""quoteBox""&gt;
        &lt;div class=""quote""&gt;
          ""{quotes[this.state.num][0]}""&lt;br/&gt;
        &lt;/div&gt;
        &lt;button class=""button btn"" onClick={this.forceUpdate}&gt;New Quote&lt;/button&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Even creating a separate function that runs <code>this.forceUpdate()</code> or <code>this.setState()</code> and calling that function with <code>onClick</code> hasn't worked; I think I must be implementing something wrong. Does anyone see where my error might be?</p>
","9509749","","","","","2018-05-21 09:39:37","Unable to re-render/refresh a component with setState or forceUpdate","<javascript><reactjs>","3","3","","",""
"49019431","1","49024245","","2018-02-27 23:08:33","","0","198","<p>In my react native app I save the user information securely on the key chain, so that after they have logged in once, I save the information and then the next time the user comes, the information is already there and so the user won't need to log in.</p>

<p>The issue is that I do the check in componentDidMount, and then if the user has never logged in before or logged out in their last visit I redirect them to the loginScreen like so:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>componentDidMount() {
    //Need to check if they've signed in before by checking the USER_INFO.
    SecureStore.getItemAsync(""USER_INFO"").then(response =&gt; {
        //Have they signed in before?
        if (response !== undefined) {
          //yes.
          //continue with app stuff.
        }
        else {
          //Not logged in before need to go to login.
          const resetAction = NavigationActions.reset({
            index: 0,
            actions: [
              NavigationActions.navigate({ routeName: 'Login', params: this.props.navigation.state.params }),
            ]
          });
          this.props.navigation.dispatch(resetAction);

        }
    });

}</code></pre>
</div>
</div>
</p>

<p>The problem is that I get a warning that 'Warning: Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op.'. Which makes sense because I am redirecting before the screen has rendered, but then the question is, where should I perform these checks?</p>

<p>Thanks</p>
","5278473","","","","","2018-02-28 07:37:55","Checking if user signed in before react native","<javascript><authentication><react-native>","2","0","","",""
"49023678","1","","","2018-02-28 07:00:19","","0","18","<p>I am not able to get the states background color of a square to update. I have read the react documentation and examples here: When to use React setState callback on trying to use a callback to get setstate() to update immediately, but my background color, or squaresColor[i] is still not updating.  For whatever reason, I am just using the same setState in a differnt method, handleClick, being called asynchronously and it is working fine. Why is the background color not updating in handleKeyPress? How would i use forceUpdate to achieve this? Do I need to be using Redux to solve this problem? 
Thank you in advance, Here is my code</p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';



/*stop clicking ability after clicking a problem (prevent default) and enable it when submit is done.*/

/*  let btnStyle = {
        backgroundColor: 'green'
    } */

/*we also changed onClick={() =&gt; props.onClick()} to just onClick={props.onClick},
 as passing the function down is enough for our example. Note that onClick={props.onClick()}
 would not work because it would call props.onClick immediately instead of passing it down.*/



class  Square extends React.Component
{
    render()
    {
        return (
                 &lt;button className=""square"" onClick = {this.props.onClick} style = {{backgroundColor: this.props.backgroundColor}}&gt;
                    {this.props.value}
                    {this.props.txt}
                &lt;/button&gt;
            );
    }

}

class Board extends React.Component
{
    constructor(props)
    {
    super(props);
    this.state =
    {
      squares: Array(25).fill(null),
      xIsNext: true,
      squaresColor: Array(25).fill('null'),
      num1: generateRandomNumber(),
      num2: generateRandomNumber(),
      ans:  function(a,b){return(a * b);},
      sqTxt: Array(25).fill(null),
      next: true
    };

    //this.handleKeyPress = this.handleKeyPress.bind(this);

  }

  handleClick(i)
  {
    const squares = this.state.squares.slice();           // makes a mutable copy of the array
    const squaresColor = this.state.squaresColor.slice(); // makes a mutable copy of the array
    const sqTxt = this.state.sqTxt.slice(); // makes a mutable copy of the array
    if (!(this.state.next) || squares[i])
    {
      return;
    }

    squaresColor[i] = 'blue';
    sqTxt[i] =  &lt;input onKeyPress = {(e,i) =&gt; this.handleKeyPress(e, i)} className = 'answer-input' type = 'text' name = 'answer' /&gt;;


    this.setState({
                    squares:      squares,
                    squaresColor: squaresColor,
                    sqTxt:        sqTxt,
                    next:         false
                  });

    console.log(this.state.squaresColor[i]);

    squares[i] = this.state.num1 + ' X ' + this.state.num2;

    return this.state.next;

  }


  /*When an event is invoked, it will be passed an event object as it's first argument. You can name evt whatever you like. Common names are e evt and event.*/
  handleKeyPress(e, i)
  {
      const userAnswer = parseInt(e.target.value, 10);
      const num1 = this.state.num1;
      const num2 = this.state.num2;
      const correctAnswer = num1 *  num2;
      const squaresColor = this.state.squaresColor.slice();           // makes a mutable copy of the array      

       if(e.key === 'Enter')
      { 
        squaresColor[i] = 'green';

          if(userAnswer === correctAnswer)
          {
              this.setState({
                                /* squaresColor: */ squaresColor,
                                next:         true,
                            }/* ,  function() 
                                {
                                    console.log(this.state.squaresColor);
                                    this.setState(squaresColor: squaresColor);
                                } */);

              //create new numbers for next problem
             this.setState({num1: generateRandomNumber(), num2: generateRandomNumber()});
          }

          else
          {
              console.log('incorrect');
          }  
      }
  }



  renderSquare(i)
  {
    return (
      &lt;Square
        value={this.state.squares[i]}
        onClick = {() =&gt; this.handleClick(i)}
        backgroundColor = {this.state.squaresColor[i]}
        txt = {this.state.sqTxt[i]}
      /&gt;
    );
  }

  render()
  { 
    return (
      &lt;div className = 'all-rows'&gt;
        &lt;div className=""board-row""&gt;
          {this.renderSquare(0)}
          {this.renderSquare(1)}
          {this.renderSquare(2)}
          {this.renderSquare(3)}
          {this.renderSquare(4)}
        &lt;/div&gt;
        &lt;div className=""board-row""&gt;
          {this.renderSquare(5)}
          {this.renderSquare(6)}
          {this.renderSquare(7)}
          {this.renderSquare(8)}
          {this.renderSquare(9)}
        &lt;/div&gt;
        &lt;div className=""board-row""&gt;
          {this.renderSquare(10)}
          {this.renderSquare(11)}
          {this.renderSquare(12)}
          {this.renderSquare(13)}
          {this.renderSquare(14)}
        &lt;/div&gt;
        &lt;div className=""board-row""&gt;
          {this.renderSquare(15)}
          {this.renderSquare(16)}
          {this.renderSquare(17)}
          {this.renderSquare(18)}
          {this.renderSquare(19)}
        &lt;/div&gt;
        &lt;div className=""board-row""&gt;
          {this.renderSquare(20)}
          {this.renderSquare(21)}
          {this.renderSquare(22)}
          {this.renderSquare(23)}
          {this.renderSquare(24)}
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}


class Game extends React.Component
{
  render() {
    return (
      &lt;div className=""game""&gt;
        &lt;div className=""gxame-board""&gt;
          &lt;Board /&gt;
        &lt;/div&gt;
        &lt;div className=""game-info""&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}


ReactDOM.render(
  &lt;Game /&gt;,
  document.getElementById('root')
);


function generateRandomNumber()
{
    return Math.floor(Math.random() * 10);
}
</code></pre>
","8286023","","","","","2018-02-28 07:00:19","reactjs- callback function wont update state background color on enter key being pressed","<reactjs><callback><setstate>","0","0","","",""
"37020887","1","","","2016-05-04 07:15:55","","0","929","<p>i'm using <a href=""https://github.com/JedWatson/react-select"" rel=""nofollow"">react-select</a> and trying to update the <strong>options</strong> array dynamically with <strong>onInputChange</strong> props via an ajax call, the problem here is text input got reseted everytime user press a key because of DOM update. My code is following</p>

<pre><code>render: function() {
    var valueField;
    if(this.props.editAble){

        valueField =  &lt;td className=""col-md-12""&gt;
                                        &lt;Select ref=""child"" options={options} onInputChange={this._getUsers}/&gt;
                                    &lt;/td&gt;;
    }
    else{
        valueField = &lt;td&gt;{this.props.value}&lt;/td&gt;;
    }

    return (
        &lt;tr&gt;
            &lt;td className=""info-key""&gt;{this.props.param}&lt;/td&gt;
            &lt;td className=""sep""&gt;:&lt;/td&gt;
            {valueField}
        &lt;/tr&gt;
    );
},
_getUsers: function(input){
    UserActions.search(input);
    var optionsDirty = UserStore.getUsers();
    options = [];
    //debugger;
    optionsDirty.map(function(option){
        options.push({value:option.id, label:option.firstName+' '+option.lastName});
    });
    this.forceUpdate();
}
</code></pre>

<p>what i try to get here is something like
<a href=""http://i.stack.imgur.com/meAdJ.png"" rel=""nofollow"">stackoverflow tags input</a> (similar but not exactly same)</p>
","6251026","","","","","2016-05-04 08:02:51","react-select using onInputChange with ajax call","<javascript><ajax><reactjs><react-select>","1","1","1","",""
"50312648","1","50312720","","2018-05-13 04:00:43","","0","28","<p>Assume all the various components have been defined.</p>

<p>In my react component, I want the button click to trigger the appending of a new <code>TextBox</code> component in my dynamically created <code>questions</code> component. When I tested the button click with <code>forceUpdate()</code>, a <code>TextBox</code> was successfully appended to <code>questions</code> but there was no apparent addition of a new <code>TextBox</code> element. I tested whether the component was actually re-rendering by using <code>&lt;h4&gt;Random number : {Math.random()}&lt;/h4&gt;</code> and it turns out the component was doing so, as the number changed every time I pressed the button.</p>

<p>Is something being done wrong?</p>

<pre><code>constructor (props) {
  super(props);
  this.questions = [];
  this.questions.push(&lt;TextBox key={this.questions.length}/&gt;);
  this.createTextBox = this.createTextBox.bind(this);
  this.loadTextBox = this.loadTextBox.bind(this);
}

createTextBox() {
  this.questions.push(&lt;TextBox key={this.questions.length}/&gt;);
  this.forceUpdate();
}

loadTextBox() {
  return (this.questions);
}

render() {
  return(
    &lt;div&gt;
      &lt;h4&gt;Random number : {Math.random()}&lt;/h4&gt;
      {this.loadTextBox()}
      &lt;ButtonToolbar className=""add-question""&gt;
        &lt;DropdownButton bsSize=""large"" title=""Add"" id=""dropdown-size-large"" dropup pullRight&gt;
          &lt;MenuItem eventKey=""1"" onClick={this.createTextBox}&gt;Text Box&lt;/MenuItem&gt;
        &lt;/DropdownButton&gt;
      &lt;/ButtonToolbar&gt;
    &lt;/div&gt;
  );
}
</code></pre>
","9782691","","","","","2018-05-13 04:18:37","this.forceUpdate() not re-rendering dynamically created components","<reactjs>","1","1","","",""
"50400736","1","","","2018-05-17 21:25:24","","0","91","<p>I am trying to use the barcode scanner from <code>react-native-camera</code>. First, off it scans a QR-code and extracts a String, after that it navigates to the next Screen with <code>react-navigation</code>. In the second screen, it makes an API-call. </p>

<p>Now if I go back to the scanner screen, de QR-code will be scanned immediately. That's where I run into an error and the scanner freezes. I usually get this error: </p>

<pre><code>Can't call setState (or forceUpdate) on an unmounted component
</code></pre>

<p>I think it's because my <code>componentWillUnmount</code> cleanup doesn't work properly or fast enough, but I already cancel the axios request. </p>

<pre><code>       requestCode = (code) =&gt; {
        if (cancel != undefined) {
          cancel();
        }
        axios.get(API_URI + code, {
          cancelToken: new CancelToken(function executor(c) {
            cancel = c;
          })
        }).then(response =&gt; {
          console.log(response)
          //checks if code was already called
          this.checkUsed(response.data)
        })
          .catch(error =&gt; {
            this.setState({ isValid: false })
          });
        }

    componentWillUnmount() {
        cancel();
      }
</code></pre>

<p>Maybe I could mount the camera-scanner a little bit later so it doesn't scan this fast or is it maybe even an error with React Navigation?</p>
","4869857","","","","","2018-05-17 21:25:24","react-native-camera barcode scanner freezes, because it scans too fast","<react-native><react-native-ios><react-native-camera><react-lifecycle>","0","0","","",""
"49049729","1","","","2018-03-01 12:27:27","","1","150","<p>Homepage.js</p>

<pre><code>import React, { Component } from 'react';
import { Route, Redirect, withRouter } from 'react-router-dom';

import $ from 'jquery';
import { css } from 'glamor';
import { ToastContainer } from 'react-toastify';
import toast from '../toast';
import { BarLoader } from 'react-spinners';

//  ----------------   Custom components
import Header from '../Header/Header';
import Footer from '../Footer/Footer';
import RelayAnimation from '../RelayAnimation/RelayAnimation';
import UserLoginForm from '../UserLoginForm/UserLoginForm';
import UserSignUpForm from '../UserSignUpForm/UserSignUpForm';
import PassResetReqForm from '../PassResetReqForm/PassResetReqForm';
import PassResetForm from '../PassResetForm/PassResetForm';

import './HomePage.css';

// ---------   Message for Network Error
const Msg = () =&gt; (
  &lt;div&gt;
    Error please, try again later &lt;br /&gt; or reload the Page.
  &lt;/div&gt;
);

class HomePage extends Component {

  constructor(props) {
    super(props);
    this.state = {
      loading: false
    };

    this.toggleLoader = this.toggleLoader.bind(this);
    this.notifySuccess = this.notifySuccess.bind(this);
    this.notifyError = this.notifyError.bind(this);
  }

  notifySuccess(msg) {
    toast.success(msg);
  }

  notifyError(msg) {
    toast.error(msg);
  }

  // ---------   Toast Notifications ---------------
  // notify = (status) =&gt; {
  //   // ---------   Server Issue Toaster
  //   if (status === 'Bad Gateway') {
  //     toast.error(&lt;Msg /&gt;, {
  //       className: {
  //         color: '#fff',
  //         minHeight: '60px',
  //         borderRadius: '8px',
  //         boxShadow: '2px 2px 20px 2px rgba(0,0,0,0.3)'
  //       }

  //     });
  //   }
  // }

  toggleLoader() {
    this.setState({
      loading: !this.state.loading
    });
  }

  isAuthenticated() {
    const token = localStorage.getItem('authToken');
    if (token) {
      return true;
    }
  }

  componentDidMount() {
    const currentLocationPath = this.props.location.pathname;
    const urlForEmailVerification =         currentLocationPath.includes('/api/v1/verifyEmailUser/');
if (urlForEmailVerification) {
  const { token } = this.props.match.params; // token value from url params passed by &lt;Route/&gt;

  if (token) {
    const url = `/api/v1/verifyEmailUser/${token}`;

    // api call to make the user's account verified in db based on token in url
    $.ajax({
      url: url,
      dataType: 'json',
      type: 'GET',
      success: function (res) {
        console.log(res);
        this.notifySuccess('emailVerified');
        this.props.history.push('/');
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(url, status, err.toString());
      }.bind(this)
    });
  }
 }
}

  render() {
const currentLocationPath = this.props.location.pathname;
const isAuthenticated = this.isAuthenticated();
const resetPasswordPathname = currentLocationPath.includes('/api/v1/resetPassword/');

if (!isAuthenticated) {
  return (
    &lt;div className=""App d-flex flex-column""&gt;
      {/* Navbar with brand logo and language change dropdown and signup/login button */}
      &lt; Header /&gt;

      {/* Main Section with RelayStream Animation graphic and forms */}
      &lt;div className=""container py-4 py-md-0 pt-lg-4 d-flex flex-grow"" &gt;
        &lt;div className={'LoginScreen d-flex align-items-center align-items-lg-start ' +
          ((currentLocationPath === '/login' ||
            currentLocationPath === '/signup' ||
            currentLocationPath === '/forgot-password' ||
            resetPasswordPathname) ? 'justify-content-around' : 'justify-content-center')}&gt;

          {/* RelayStream Animation graphic */}
          &lt;RelayAnimation /&gt;

          {/* forms to switch between based on path change by &lt;Router/&gt; */}
          &lt;Route path=""/login"" component={(props) =&gt; &lt;UserLoginForm {...props} notifySuccess={this.notifySuccess} notifyError={this.notifyError} toggleLoader={this.toggleLoader} /&gt;} /&gt;
          &lt;Route path=""/signup"" component={(props) =&gt; &lt;UserSignUpForm {...props} notifySuccess={this.notifySuccess} notifyError={this.notifyError} toggleLoader={this.toggleLoader} /&gt;} /&gt;
          &lt;Route path=""/forgot-password"" component={(props) =&gt; &lt;PassResetReqForm {...props} notifySuccess={this.notifySuccess} notifyError={this.notifyError} toggleLoader={this.toggleLoader} /&gt;} /&gt;
          &lt;Route path=""/api/v1/resetPassword/:token"" component={(props) =&gt; &lt;PassResetForm {...props} notifySuccess={this.notifySuccess} notifyError={this.notifyError} toggleLoader={this.toggleLoader} /&gt;} /&gt;

        &lt;/div&gt;
      &lt;/div &gt;

      {/* Footer with copyright message */}
      &lt;Footer /&gt;

      &lt;div className={this.state.loading ? 'loader flex-column' : 'd-none'}&gt;
        &lt;span className=""loader__title""&gt;Loading...&lt;/span&gt;
        &lt;BarLoader color={'#36D7B7'} loading={this.state.loading} /&gt;
      &lt;/div&gt;

      {/* React toastify for toast notification */}
      &lt;ToastContainer className={{ textAlign: 'center' }} progressClassName={css({ background: '#007aff' })} /&gt;
    &lt;/div &gt;
  );
} else {
  return &lt;Redirect to={'/dashboard'} /&gt;;
 }
}
}

export default withRouter(HomePage);
</code></pre>

<p>UserLoginForm.js</p>

<pre><code>import React, { Component } from 'react';
import { Link, Redirect } from 'react-router-dom';

import $ from 'jquery';
import { Animated } from 'react-animated-css';
import SocialButton from '../SocialButton/SocialButton';
//  ----------------   Form components
import Form from 'react-validation/build/form';
import Button from 'react-validation/build/button';

//  ----------------   Custom Form components &amp; validations
import { Email, Password, required, noSpace, minChar8, email } from '../formValidation';

import FontAwesomeIcon from '@fortawesome/react-fontawesome';
import facebook from '@fortawesome/fontawesome-free-brands/faFacebookF';
import google from '@fortawesome/fontawesome-free-brands/faGooglePlusG';
import './UserLoginForm.css';

class UserLoginForm extends Component {
  constructor(props) {
    super(props);
    this.state = {
      fireRedirect: false
    };

    this.handleInputChange = this.handleInputChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleSocialLogin = (user) =&gt; {
    const provider = user._provider;
    const name = user._profile.name;
    const email = user._profile.email;
    const profilePic = user._profile.profilePicURL;

    const token = user._token.accessToken;
    const data = { provider, name, email, profilePic, token };

    console.log(data);
    const url = '/api/v1/loginWithFacekbook'; // social login's api url

    // api call for social logins
    $.ajax({
      url: url,
      dataType: 'json',
      type: 'POST',
      data: data,
      success: function (res) {
        console.log('success response after api call ===&gt;&gt;', res);

        const generatingAuthToken = res.object.generatingAuthToken;
        const apikey = generatingAuthToken.apiKey;
        const authToken = generatingAuthToken.authToken;

        localStorage.setItem('apiKey', apikey);
        localStorage.setItem('authToken', authToken);

        // if social login was successful then redirect user to dashboard
        this.setState({ fireRedirect: true });
      }.bind(this),
      error: function (xhr, status, err) {
        console.log(status);
        // if there was network issue notify user to try again later or refresh page
        this.props.notifyError(err.toString());
        console.error(url, status, err.toString());
      }.bind(this)
    });

  }

  handleSocialLoginFailure = (err) =&gt; {
    console.error(err)
  }

  handleInputChange(event) {
    const target = event.target;
    const value = target.value;
    const name = target.name;

    // input field animation code - adds class to current focused input field's parent
    if (value) {
      target.parentElement.classList.add('input--filled');
    } else {
      target.parentElement.classList.remove('input--filled');
    }

    this.setState({
      [name]: value
    });
  }

  handleSubmit(event) {
    event.preventDefault();

    // show loading spinner
    this.props.toggleLoader();

    // get data from all field in form
    const data = this.form.getValues();

    const url = '/api/v1/loginUser'; // user login api url

    // api call to generate token and apikey and login user to dashboard
    $.ajax({
      url: url,
      dataType: 'json',
      type: 'POST',
      data: data,
      success: function (res) {
        console.log('success response after api call ===&gt;&gt;', res);

        const obj = res.object;
        const loginStatus = res.status;
        const msg = res.message;

        // check if authToken and apiKey was received
        if (obj) {
          // if data is found in database check if credentials provided were correct
          if (loginStatus) {
            JSON.stringify(obj);
            // save apiKey and token in loacalStorage
            for (let key in obj) {
              if (obj.hasOwnProperty(key)) {
                let val = obj[key];
                localStorage.setItem(key, val);
              }
            }

            // turn off loader spinner
            this.props.toggleLoader();

            this.setState({ fireRedirect: true });

            // if credentials were correct accept login then redirect user to dashboard
          } else { // if credentials were wrong 
            // turn off loader spinner
            // this.props.toggleLoader();
            // then notify about wrong credentials
            this.props.notifyError(msg);
          }
        } else { // if data was not found in database notify user to signup first
          this.props.notifyError(msg);
          // turn off loader spinner
          // this.props.toggleLoader();
        }
      }.bind(this),
      error: function (xhr, status, err) {
        console.log(status);
        // if there was network issue notify user to try again later or refresh page
        this.props.notify(err.toString());
        console.error(url, status, err.toString());
      }.bind(this)
    });
  }

  render() {
    const { fireRedirect } = this.state;

    return (
      &lt;Animated className=""form-animation"" animationIn=""fadeInRight"" animationOut=""fadeOutLeft"" isVisible={true}&gt;
        &lt;Form className=""userLoginForm"" ref={c =&gt; { this.form = c }} onSubmit={this.handleSubmit} noValidate&gt;
          &lt;h2 className=""formTitle text-center""&gt;LOG IN&lt;/h2&gt;

          &lt;Email
            required
            pattern=""[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,3}$""
            id=""email""
            name=""email""
            type=""email""
            className=""input__field input__field--madoka""
            onChange={this.handleInputChange}
            validations={[required, email]} /&gt;

          {/* must wrap Password Field Component with ""div.form-group"" */}
          &lt;div className=""form-group""&gt;
            &lt;Password
              required
              id=""password""
              name=""password""
              type=""password""
              minLength=""8""
              className=""input__field input__field--madoka""
              onChange={this.handleInputChange}
              validations={[noSpace, required, minChar8]} /&gt;

            {/* Optional Link Component below... 
          Note: If there is no requirement of Link or any Other Element just below &lt;Password/&gt; input field 
          in entire project then the wrapping ""div.form-group"" can also be put inside 
          Password Component's Template Located in formValidation.js file*/}
            &lt;Link to=""/forgot-password"" className=""float-right forgotPassword""&gt;
              &lt;small&gt;Forgot password ?&lt;/small&gt;
            &lt;/Link&gt;
          &lt;/div&gt;

          &lt;div className=""form-group submitGroup text-center""&gt;
            &lt;Button type=""submit"" className=""btn btn--submit btn-rounded btn-outline-primary mx-auto""&gt;LOG IN&lt;/Button&gt;
          &lt;/div&gt;

          {/* login buttons for facebook and google login */}
          &lt;div className=""socialLogin mx-auto""&gt;
            {/* &lt;a href=""#"" className=""socialBtn socialBtn--facebook rounded-circle""&gt;
              &lt;FontAwesomeIcon icon={facebook} /&gt;
            &lt;/a&gt; */}
            &lt;SocialButton
              className=""socialBtn socialBtn--facebook rounded-circle""
              provider='facebook' appId='873380466175223'
              onLoginSuccess={this.handleSocialLogin}
              onLoginFailure={this.handleSocialLoginFailure}
              redirect=""/dashboard""&gt;

              &lt;FontAwesomeIcon icon={facebook} /&gt;
            &lt;/SocialButton&gt;

            &lt;span className=""seperator"" /&gt;

            &lt;SocialButton
              className=""socialBtn socialBtn--googlePlus rounded-circle""
              provider=""google""
              appId=""843586925977-d7j31p5j0me5kqvcp29nr9s37reg5b5u.apps.googleusercontent.com""
              onLoginSuccess={this.handleSocialLogin}
              onLoginFailure={this.handleSocialLoginFailure}&gt;

              &lt;FontAwesomeIcon icon={google} /&gt;
            &lt;/SocialButton&gt;

            {/* &lt;a href=""#"" className=""socialBtn socialBtn--googlePlus rounded-circle""&gt;
              &lt;FontAwesomeIcon icon={google} /&gt;
            &lt;/a&gt; */}
          &lt;/div&gt;

          {/* code to redirect user to dashboard page after successful login */}
          {fireRedirect &amp;&amp; (&lt;Redirect to={'/dashboard'} /&gt;)}
        &lt;/Form&gt;
      &lt;/Animated&gt;
    );
  }
}

export default UserLoginForm;
</code></pre>

<p>UserSignUpForm.js</p>

<pre><code>import React, { Component } from 'react';
import { Redirect } from 'react-router-dom';
import $ from 'jquery';
import { Animated } from 'react-animated-css';

//  ----------------   Form components
import Form from 'react-validation/build/form';
import Button from 'react-validation/build/button';

//  ----------------   Custom Form components &amp; validations
import { UserName, Email, NewPassword, ConfirmPassword, noSpace, required, minChar8, email, confirmPassword } from '../formValidation';

import './UserSignUp.css';

class UserSignUpForm extends Component {
  constructor(props) {
    super(props);
    this.state = {
      userName: '',
      email: '',
      password: '',
      confirmPassword: '',
      fireRedirect: false
    };

    this.handleInputChange = this.handleInputChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleInputChange(event) {
    const target = event.target;
    const value = target.value;
    const name = target.name;

    // input field animation code - adds class to current focused input field's parent
    if (value) {
      target.parentElement.classList.add('input--filled');
    } else {
      target.parentElement.classList.remove('input--filled');
    }

    this.setState({
      [name]: value
    });
  }

  handleSubmit(event) {
    event.preventDefault();
    const data = this.form.getValues();

    console.log(data);
    // api call to sign up user
    $.ajax({
      url: '/api/v1/user',
      dataType: 'json',
      type: 'POST',
      data: data,
      success: function (res) {
        console.log('success response after api call ===&gt;&gt;', res);

        const signUpStatus = res.status;
        const msg = res.message;

        if (signUpStatus) {
          // if signup was successful notify user
          this.props.notifySuccess(msg);
          // redirect user to login form
          this.setState({ fireRedirect: true });
        } else {
          this.props.notifyError(msg); // notify user on signup fail
        }
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  }

  render() {
    const { fireRedirect } = this.state;

    return (
      &lt;Animated className=""form-animation"" animationIn=""fadeInRight"" animationOut=""fadeOutLeft"" isVisible={true}&gt;

        &lt;Form className=""userSignUpForm"" ref={c =&gt; { this.form = c }} onSubmit={this.handleSubmit}&gt;
          &lt;h2 className=""formTitle text-center""&gt;SIGN UP&lt;/h2&gt;

          &lt;UserName
            required
            id=""userName""
            name=""userName""
            ref={c =&gt; { this.UserName = c }}
            value={this.state.userName}
            type=""text""
            className=""input__field input__field--madoka""
            validations={[required]}
            onChange={this.handleInputChange} /&gt;

          &lt;Email
            required
            pattern=""[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,3}$""
            id=""email""
            name=""email""
            ref={c =&gt; { this.Email = c }}
            value={this.state.email}
            type=""email""
            className=""input__field input__field--madoka""
            validations={[required, email]}
            onChange={this.handleInputChange} /&gt;

          &lt;div className=""form-group""&gt;
            &lt;NewPassword
              required
              id=""password""
              name=""password""
              ref={c =&gt; { this.NewPassword = c }}
              value={this.state.password}
              type=""password""
              minLength=""8""
              className=""input__field input__field--madoka""
              onChange={this.handleInputChange}
              validations={[noSpace, required, minChar8]} /&gt;
          &lt;/div&gt;

          &lt;div className=""form-group""&gt;
            &lt;ConfirmPassword
              required
              id=""confirmPassword""
              name=""confirmPassword""
              ref={c =&gt; { this.ConfirmPassword = c }}
              value={this.state.confirmPassword}
              type=""password""
              minLength=""8""
              className=""input__field input__field--madoka""
              onChange={this.handleInputChange}
              validations={[noSpace, required, confirmPassword]} /&gt;
          &lt;/div&gt;

          &lt;div className=""form-group submitGroup text-center""&gt;
            &lt;Button type=""submit"" className=""btn btn--submit btn-rounded btn-outline-primary mx-auto""&gt;SIGN UP&lt;/Button&gt;
          &lt;/div&gt;
          {/* code to redirect user to dashboard page after successful login */}
          {fireRedirect &amp;&amp; (&lt;Redirect to={'/login'} /&gt;)}
        &lt;/Form&gt;
      &lt;/Animated&gt;
    );
  }
}

export default UserSignUpForm;
</code></pre>

<p>i am facing many issues. first i have a spinner in homepage.js which shows as overlay on whole page when this.state.loading = true, initially it is set to False in constructor.</p>

<p>Issues 1.) when we submit the login form (if signup was done already ) the loader shows for fraction of second on screen but "" this.setState({ fireRedirect: true }); "" this code is supposed to redirect user to dashboard which it does but gives error in console :</p>

<pre><code>index.js:2178 Warning: Cannot update during an existing state transition (such as within `render` or another component's constructor). Render methods should be a pure function of props and state; constructor side-effects are an anti-pattern, but can be moved to `componentWillMount`.

index.js:2178 Warning: Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op.

Please check the code for the UserLoginForm component.
</code></pre>

<p>Issue 2.) If i create a new user from UserSignUpForm which redirects us to UserLoginForm. now if i try to login i get only this error:</p>

<pre><code>index.js:2178 Warning: Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op.

Please check the code for the UserLoginForm component.
</code></pre>

<p>Issue 3.) If i remove or comment ""this.toggleLoader();"" from the ajax's success functions right before "" this.setState({ fireRedirect: true }); "" this line. then the loader shows on screen but doesn't go away even page doesn't redirect and console gives this error:</p>

<pre><code>index.js:2178 Warning: Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op.

Please check the code for the UserLoginForm component.
</code></pre>
","6885729","","","","","2018-03-01 12:27:27","Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component","<ajax><reactjs><spinner><setstate>","0","2","","",""
"35584814","1","35591297","","2016-02-23 17:57:48","","3","7358","<p>I have an issue with redux state being updated successfully, but react component not re-rendering, after some research I believe <code>[forceUpdate()][1]</code> can solve my issue, but I am unsure of correct way to implement it i.e. after redux state updates. I tried looking up examples on github, but had no luck.</p>
","911930","","","","","2016-11-04 13:34:20","call forceUpdate() on component when redux state updates","<javascript><reactjs><redux>","4","1","1","",""
"50196555","1","50197160","","2018-05-06 05:32:48","","0","54","<p>I want to change the dafault locale of this component to <code>fr</code>. Here is the component:</p>

<pre><code>import EventEmitter from 'events';
import pt from 'prop-types';
import React from 'react';
import moment from 'moment';

moment.locale(""fr"");

class Ticker extends EventEmitter {
  tick = () =&gt; this.emit('tick');

  constructor(interval) {
    super();
    this.setMaxListeners(0);
    this.once('newListener', () =&gt; setInterval(this.tick, interval));
  }
}

const ticker = new Ticker(30000); // 30 sec

export default class TimeDisplay extends React.Component {
  static propTypes = {
    timeStamp: pt.oneOfType([pt.number.isRequired, pt.string.isRequired]),
    className: pt.string,
    timeAgoInTitle: pt.bool,
  };

  refresh = () =&gt; this.forceUpdate();

  componentDidMount() {
    ticker.addListener('tick', this.refresh);
  }

  componentWillUnmount() {
    ticker.removeListener('tick', this.refresh);
  }

  render() {
    moment.locale(""fr"");
    const time = moment(this.props.timeStamp);
    const timeAgo = Math.abs(moment().diff(time)) &lt; 1000 ? 'maintenant' : time.fromNow();
    const timeISO = time.format();

    const title = this.props.timeAgoInTitle ? timeAgo : time.format('lll');
    const contents = this.props.children ? this.props.children : timeAgo;

    return (
      &lt;time className={this.props.className} dateTime={timeISO} title={title}&gt;{contents}&lt;/time&gt;
    );
  }
}
</code></pre>

<p>As you can see I've set <code>moment.locale(""fr"");</code> both after imports and at render but the moment strings are still shown in English. How can I fix it?</p>
","5774375","","631803","","2018-05-07 00:22:19","2018-05-07 00:22:19","Can not change default locale of moment.js in react component","<reactjs><momentjs>","1","0","","",""
"40143436","1","","","2016-10-20 00:05:52","","2","79","<p>My component needs to render some data that doesn't live within the component (not in its props or state), and when the component is mounted, it listens to changes in the data and calls <a href=""https://facebook.github.io/react/docs/component-api.html#forceupdate"" rel=""nofollow"">https://facebook.github.io/react/docs/component-api.html#forceupdate</a> </p>

<p>However, the docs suggest this might be bad for performance reasons. Is this because there is no batching in forceUpdate? Instead of calling forceUpdate would I be better calling setState() with the subset of state I need, to hook into reacts batching pipeline?</p>
","5901356","","","","","2016-10-20 00:05:52","Does reactjs batch calls to forceUpdate","<javascript><performance><reactjs>","0","0","","",""
"44239051","1","","","2017-05-29 09:29:38","","1","109","<p>I have a react component with three select tags. I want to check if the <code>onChange</code> methods are being called (which I do using <code>sinon.spy</code>). I want to try out all combinations of all values of the three select tags. The code is as shown: </p>

<pre><code>describe(""Testing Selects"", () =&gt; {
    let spy1 = sinon.spy(Filter.prototype, ""onSelect1Changed"");
    let spy2 = sinon.spy(Filter.prototype, ""onSelect2Changed"");
    let spy3 = sinon.spy(Filter.prototype, ""onSelect3Changed"");
    let wrapper = mount(&lt;Filter/&gt;);

    let values1 = wrapper.find(""#select1"").children().map(node =&gt; node.prop(""value""));
    let values2 = wrapper.find(""#select2"").children().map(node =&gt; node.prop(""value""));
    let values3 = wrapper.find(""#select3"").children().map(node =&gt; node.prop(""value""));

    it(""Testing different combinations of filters"", () =&gt; {
        for(let i=0; i&lt;values1.length; i++) {
            wrapper.update();
            wrapper.find(""#select1"").simulate(""change"", {target: {value: values1[i]}});
            expect(spySelect1Changed.called).toEqual(true);
            console.log(""Select 1"", values1[i]);
            for(let j=0; j&lt;values2.length; j++) {
                wrapper.find(""#select2"").simulate(""change"", {target: {value: values2[j]}});
                expect(spySelect2Changed.called).toEqual(true);
                console.log(""Select 2"", values2[j]);
                for(let k=0; k&lt;values3.length; k++) {
                    wrapper.find(""#select3"").simulate(""change"", {target: {value: values3[k]}});
                    expect(spySelect3Changed.called).toEqual(true);
                    console.log(""Select 3"", values3[k]);
                }
            }
        }
    });
});
</code></pre>

<p>It gives a warning saying, <code>Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().</code>. Following is the output:</p>

<pre><code>Select 1 -1
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 2 Last2Hours
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 3 Now
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 3 Now
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 2 Last2Hours
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 3 Now
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 3 Now
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 2 Last2Hours
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 3 Now
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 3 Now
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 2 Last2Hours
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 3 Now
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 3 Now
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 2 Last2Hours
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 3 Now
Warning: setState(...): You passed an undefined or null state object; instead, use forceUpdate().
Select 3 Now
</code></pre>

<p>As can be seen, the value of the select tags are not changing after the first time. How can we simlulate the <code>change</code> event multiple times?</p>
","4508208","","4508208","","2017-05-30 03:55:51","2017-05-30 03:55:51","Testing react components with enzyme - select tag not updating after first simulation of 'change' event","<reactjs><enzyme>","0","3","1","",""
"44128036","1","44129970","","2017-05-23 07:11:15","","1","33","<p>I was wondering how will I reload only the table, not the whole page on reacts. I've tried using <code>history.go(0);</code> however, it reloads the whole page please check how can I reload it, if I was going to use forceUpdate, based on research you should avoid using it. Im trying do an AJAX but i dont know what to put where to put it... it is way different than php..</p>

<p>my code for the onclick</p>

<pre><code> handleSubmit( name, address,department){

 const laman = {
      'Employee_Name': name,
      'Address': address,
      'Department': department
    }
    return fetch('http://localhost:5118/api/employeedetails/PostEmployeeDetail?', {
        method: 'POST',
        headers: {
        'Content-Type': 'application/json'
        },
        body: JSON.stringify(laman)
    })
    .then(function(response) {
      console.log(response)
      return response.json();
    })
    .then(function (result) {
      history.go(0);
    })
    .catch(function(error) {
      console.log(error);

    })
}
</code></pre>

<p>this is the code for the onclick button  plus the table itself</p>

<pre><code>render() {
     const isEnabled = this.canBeSubmitted();
    let {jsonReturnedValue} = this.state;
  return(
    &lt;div&gt;
        &lt;div className=""container""&gt;   
          &lt;h1&gt; Listof Employees &lt;/h1&gt;
            &lt;button className ='btn btn-warning right ' data-toggle=""modal"" data-target=""#AddEmployee""&gt; Add an Employee&lt;/button&gt;
             &lt;table className= ""table table-bordered"" id=""result""&gt; 
                &lt;tbody&gt;
                 &lt;tr&gt;
                      &lt;th&gt;ID&lt;/th&gt;
                      &lt;th&gt;Name&lt;/th&gt;
                      &lt;th&gt;Address&lt;/th&gt;
                      &lt;th&gt;Update&lt;/th&gt;
                      &lt;th&gt;Delete&lt;/th&gt;
                 &lt;/tr&gt;
                    {jsonReturnedValue.map((d,i) =&gt; this.renderItem(d,i))}
                &lt;/tbody&gt;
            &lt;/table&gt;
          &lt;/div&gt;

      {/*Updating*/}

    &lt;div className=""modal fade"" id=""UpdateEmployee"" role=""dialog""&gt;
           &lt;div className=""modal-dialog""&gt;
             &lt;div className=""modal-content""&gt;
                &lt;div className=""modal-header""&gt;
                   &lt;button type=""button"" className=""close"" data-dismiss=""modal""&gt;&amp;times;&lt;/button&gt;
                  &lt;h4 className=""modal-title""&gt;ADD  Employee&lt;/h4&gt;
            &lt;/div&gt;
&lt;form&gt;

        &lt;div className=""container""&gt;
          &lt;div className=""modal-body""&gt;
              &lt;table&gt; 
              &lt;tbody&gt;
              &lt;tr&gt;
              &lt;td&gt;Name&lt;/td&gt;
              &lt;td&gt;
              &lt;input type=""text""
                    ref=""Employee_Name""
                    onChange={(e) =&gt; this.handleChange(e, ""Employee_Name"")}
                    required
                    /&gt; 
              &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
              &lt;td&gt;Address&lt;/td&gt;
              &lt;td&gt;
               &lt;input type=""text""
                     ref=""Address""
                    onChange={(e) =&gt; this.handleChange(e, ""Address"")}
                    required
                     /&gt;
              &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
              &lt;td&gt;Department&lt;/td&gt;
              &lt;td&gt;
               &lt;input type=""text""

                      onChange={(e) =&gt; this.handleChange(e, ""Department"")}
                      required
              /&gt; 
              &lt;/td&gt;
              &lt;/tr&gt;
              &lt;/tbody&gt;
              &lt;/table&gt;

          &lt;/div&gt;
          &lt;/div&gt;
          &lt;div className=""modal-footer""&gt;
            &lt;input type=""button"" className=""btn btn-info""disabled={!isEnabled} 
                    onClick = { this.handleSubmit.bind(
                                this, this.state.Employee_Name,
                                this.state.Address,
                                this.state.Department)
                                 }
                               value ="" Add Employee""
                               data-dismiss=""modal""/&gt;
            &lt;button type=""button"" className=""btn btn-default"" data-dismiss=""modal"" &gt;Close&lt;/button&gt;
          &lt;/div&gt;

            &lt;/form&gt;
</code></pre>

<p>PS: IT IS ALSO IN THE SAME PAGE.. the reason i dont know how will I call it</p>
","8046497","","8046497","","2017-05-23 08:36:26","2017-05-23 09:15:33","How to reloads the table when clicked using AJAX in reactjs","<javascript><asp.net><api><reactjs><web>","1","5","","",""
"27927461","1","27927845","","2015-01-13 16:59:57","","1","2221","<p><strong>Edit:  another way to solve this would be:  is there a way to only filter inputs on native onchange (blur or enter key)</strong></p>

<p>I have an input with a minimum of 1 ( this minimum changes and is enforced by javascript ).</p>

<p>I can't use</p>

<p><code>&lt;input value={@state.myfield} onChange={@customOnChange} /&gt;</code></p>

<p>because, when they hit backspace, it defaults to one.</p>

<p>lets say the value is 9
user hits backspace so they can change it to 8
input now says 18</p>

<p>This is not intended behavior.</p>

<p>So, i'm using</p>

<p><code>&lt;input defaultValue={@state.myfield} onChange={@customOnChange} /&gt;</code></p>

<p>instead.  This enforced the correct values behind the scenes, but it never updates the dom with the corrected min/max.</p>

<p><strong>Can I manually trigger react to reset <code>defaultValue</code> and look them up again?</strong></p>

<p>I'd like to re-populate the input field when the user <code>blur</code>s or <code>e.keyCode==13</code>s</p>

<p>I could do it like this, but it seems super messy</p>

<pre><code>if @respondToNativeChange
  elProp = value: @state.myfield
else
  elProp = defaultValue: @state.myfield
&lt;input onChange={@customOnChange}
  onKeyDown={(e) =&gt; if e.keyCode is 13 then @respondToNativeChange = true; @forceUpdate()}
  onBlur={@respondToNativeChange=true;@forceUpdate()}
  {...elProp} /&gt;
</code></pre>

<p>I could also do it after the fact but also having to attach some data-attr prop</p>

<pre><code>componentDidMount: -&gt;

  $(@getDOMNode()).find('input').blur (e) =&gt; $(e.target).val @state[$(e.target).attr('data-attr')
</code></pre>

<p>but both seem too messy.</p>

<p>Is there a way to trigger react to re-populate the defaultValue into all inputs or specific ones?</p>
","516474","","","","","2015-01-13 17:20:48","react refresh defaultValue","<javascript><coffeescript><reactjs>","1","0","","",""
"45400597","1","","","2017-07-30 14:00:02","","1","349","<p>I'm building a simple front-end app using react-apollo with typescript. 
But when I'm sending my graphql request, despite a status 200 and my response sending me the data I want, apollo throw an error. Here is the stack:</p>

<pre><code>Error: Network error: Network request failed with status 0 - """"
at new ApolloError (C:\Users\Pierre\WebstormProjects\healthy\node_modules\apollo-client\errors\ApolloError.js:32)
at ObservableQuery.currentResult (C:\Users\Pierre\WebstormProjects\healthy\node_modules\apollo-client\core\ObservableQuery.js:76)
at GraphQL.dataForChild (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-apollo\react-apollo.browser.umd.js:491)
at GraphQL.render (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-apollo\react-apollo.browser.umd.js:534)
at C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactCompositeComponent.js:795
at measureLifeCyclePerf (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactCompositeComponent.js:75)
at ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactCompositeComponent.js:794)
at ReactCompositeComponentWrapper._renderValidatedComponent (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactCompositeComponent.js:821)
at ReactCompositeComponentWrapper._updateRenderedComponent (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactCompositeComponent.js:745)
at ReactCompositeComponentWrapper._performComponentUpdate (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactCompositeComponent.js:723)
at ReactCompositeComponentWrapper.updateComponent (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactCompositeComponent.js:644)
at ReactCompositeComponentWrapper.performUpdateIfNecessary (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactCompositeComponent.js:560)
at Object.performUpdateIfNecessary (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactReconciler.js:156)
at runBatchedUpdates (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactUpdates.js:150)
at ReactReconcileTransaction.perform (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\Transaction.js:143)
at ReactUpdatesFlushTransaction.perform (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\Transaction.js:143)
at ReactUpdatesFlushTransaction.perform (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactUpdates.js:89)
at Object.flushBatchedUpdates (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactUpdates.js:172)
at ReactDefaultBatchingStrategyTransaction.closeAll (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\Transaction.js:209)
at ReactDefaultBatchingStrategyTransaction.perform (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\Transaction.js:156)
at Object.batchedUpdates (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactDefaultBatchingStrategy.js:62)
at Object.enqueueUpdate (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactUpdates.js:200)
at enqueueUpdate (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactUpdateQueue.js:24)
at Object.enqueueForceUpdate (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-dom\lib\ReactUpdateQueue.js:156)
at GraphQL.ReactComponent.forceUpdate (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react\lib\ReactBaseClasses.js:85)
at GraphQL.forceRenderChildren (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-apollo\react-apollo.browser.umd.js:463)
at next (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-apollo\react-apollo.browser.umd.js:438)
at Object.handleError [as error] (C:\Users\Pierre\WebstormProjects\healthy\node_modules\react-apollo\react-apollo.browser.umd.js:442)
at C:\Users\Pierre\WebstormProjects\healthy\node_modules\apollo-client\core\ObservableQuery.js:300
at Array.forEach (&lt;anonymous&gt;)
at Object.error (C:\Users\Pierre\WebstormProjects\healthy\node_modules\apollo-client\core\ObservableQuery.js:298)
at C:\Users\Pierre\WebstormProjects\healthy\node_modules\apollo-client\core\QueryManager.js:288
at C:\Users\Pierre\WebstormProjects\healthy\node_modules\apollo-client\core\QueryManager.js:726
at Array.forEach (&lt;anonymous&gt;)
at C:\Users\Pierre\WebstormProjects\healthy\node_modules\apollo-client\core\QueryManager.js:723
at Array.forEach (&lt;anonymous&gt;)
at QueryManager.broadcastQueries (C:\Users\Pierre\WebstormProjects\healthy\node_modules\apollo-client\core\QueryManager.js:720)
at C:\Users\Pierre\WebstormProjects\healthy\node_modules\apollo-client\core\QueryManager.js:66
at dispatch (C:\Users\Pierre\WebstormProjects\healthy\node_modules\redux\es\createStore.js:173)
at C:\Users\Pierre\WebstormProjects\healthy\node_modules\apollo-client\ApolloClient.js:187
at Object.dispatch (C:\Users\Pierre\WebstormProjects\healthy\node_modules\apollo-client\store.js:18)
at C:\Users\Pierre\WebstormProjects\healthy\node_modules\apollo-client\core\QueryManager.js:239
</code></pre>

<p>Here is the configuration of my Apollo clients:</p>

<pre><code>    const networkInterface = createNetworkInterface({
    uri: 'http://localhost:8080/graphql',
    opts: {
        mode: 'no-cors'
    }
});


    const client = new ApolloClient({
        networkInterface,
        connectToDevTools: true
    });
</code></pre>

<p>And there is the answer from the server:</p>

<pre><code>{
    ""data"": {
        ""foods"": [
            {
                ""__typename"": ""Food"",
                ""category"": ""vegetables"",
                ""image"": null,
                ""name"": ""carrot"",
                ""season"": [
                    ""march""
                ]
            }
        ]
    }
}
</code></pre>
","5149241","","441757","","2017-08-14 14:52:13","2017-08-14 14:52:13","Apollo-react: Network request failed with status 0","<cors><cross-domain><graphql><react-apollo>","0","1","0","",""
"44911746","1","","","2017-07-04 17:51:18","","0","309","<p>I am trying to write a test code for the following Reactjs component.This is my first unit test in ReactJs and I found some difficulty to how to write it properly, especially for the functions in the following page.</p>

<p>I used <strong><a href=""https://github.com/react-boilerplate/react-boilerplate"" rel=""nofollow noreferrer"">react boilerplate</a></strong> to code the whole project.</p>

<p><strong>component: index.js</strong></p>

<pre><code>    /**
 *
 * ContactUs
 *
 */

import React from 'react'
import SimpleReactValidator from 'simple-react-validator'

import Box from 'grommet/components/Box'
import Form from 'grommet/components/Form'
import FormFields from 'grommet/components/FormFields'
import TextInput from 'grommet/components/TextInput'
import Button from 'grommet/components/Button'
import Heading from 'grommet/components/Heading'

import {injectIntl, FormattedMessage} from 'react-intl'
import messages from './messages'

import MetaTag from '../../components/MetaTag'

class ContactUs extends React.Component {
    constructor(props) {
        super(props)

        this.validator = new SimpleReactValidator()
        this.handleUserInput = this.handleUserInput.bind(this)
        this.submit = this.submit.bind(this)

        this.state = {
            name: '',
            email: '',
            body: '',
        }
    }

    submit(e) {
        e.preventDefault()
        if (this.validator.allValid()) {
            const body = 'Name: ' + this.state.name + '\nEmail: ' + this.state.email + '\n\n' + this.state.body
            document.location.href = 'mailto:sample@samplemail.com?subject=' + this.state.name + '- feedback&amp;body=' + body
        } else {
            this.validator.showMessages()
            this.forceUpdate()
        }
    }

    handleUserInput(e) {
        const name = e.target.name
        const value = e.target.value
        this.setState({
            [name]: value,
        })
    }

    metaData() {
        const {formatMessage} = this.props.intl

        const meta = {
            title: formatMessage(messages.metaTitle),
            desc: formatMessage(messages.metaDescription),
        }
        return (&lt;MetaTag meta={meta}/&gt;)
    }

    render() {
        const {formatMessage} = this.props.intl
        const styles = require('./ContactUs.scss')

        return (
            &lt;Box className={styles.contact_us}&gt;
                {this.metaData()}
                &lt;Heading tag=""h2"" strong className={styles.title}&gt;
                    &lt;FormattedMessage {...messages.title} /&gt;
                &lt;/Heading&gt;
                &lt;hr /&gt;
                &lt;Box&gt;&lt;FormattedMessage {...messages.desc} /&gt;&lt;/Box&gt;
                &lt;Form onSubmit={this.submit}&gt;
                    &lt;FormFields&gt;
                        &lt;TextInput
                            name=""name""
                            placeHolder={formatMessage(messages.name)}
                            onDOMChange={this.handleUserInput}
                        /&gt;
                        &lt;Box tag=""span"" className={styles.error}&gt;
                            {this.validator.message('name', this.state.name, 'required')}
                        &lt;/Box&gt;
                        &lt;TextInput
                            name=""email""
                            placeHolder={formatMessage(messages.email)}
                            onDOMChange={this.handleUserInput}
                        /&gt;
                        &lt;Box tag=""span"" className={styles.error}&gt;
                            {this.validator.message('email', this.state.email, 'required|email')}
                        &lt;/Box&gt;
                        &lt;textarea name=""body"" className={styles.textarea} onDOMChange={this.handleUserInput}/&gt;
                        &lt;Button type=""submit"" primary plain onClick={this.submit} className={styles.post}&gt;
                            &lt;FormattedMessage {...messages.button} /&gt;
                        &lt;/Button&gt;
                    &lt;/FormFields&gt;
                &lt;/Form&gt;
            &lt;/Box&gt;
        )
    }
}

ContactUs.contextTypes = {
    intl: React.PropTypes.object.isRequired,
}

export default injectIntl(ContactUs)
</code></pre>

<p><strong>Component test files: index.test.js</strong>
It is a default page derived from the framework itself. </p>

<pre><code>    import React from 'react'
import {mount, render, shallow} from 'enzyme'
import {expect} from 'chai'

import {shallowWithIntl} from '../../../../internals/testing/intl.js'

import ContactUs from '../index.js'

const wrapper = shallow(&lt;ContactUs /&gt;);

describe('ContactUs', () =&gt; {

    it(""should send mail mailto:test@gmail.com?subject=name of sender-feedback&amp;body=mesagebody when name,email and body available"", () =&gt; {
      const renderedComponent = shallowWithIntl(&lt;ContactUs /&gt;);
      const name = 'testname';
      const body = 'testbody';
      const email = 'speakerswire.dev@gmail.com';

      const loc = 'mailto:speakerswire.dev@gmail.com?subject=' + name + '- feedback&amp;body=' + body

      const realBody = 'Name: ' + name + '\nEmail: ' + email + '\n\n' + body
      document.location.href = 'mailto:speakerswire.dev@gmail.com?subject=' + name + '- feedback&amp;body=' + realBody

      const expected = 'mailto:speakerswire.dev@gmail.com?subject=testname-feedback&amp;body=testbody'
      const actual = renderedComponent.instance().loc;

      expect(actual).be(expected);
    })

})
</code></pre>

<p>Please, somebody help me.</p>
","7184879","","7184879","","2017-07-05 14:07:49","2017-07-05 14:07:49","How to write a test code for the reactjs component?","<unit-testing><reactjs><enzyme><jest><react-boilerplate>","0","3","","",""
"44873975","1","","","2017-07-02 18:32:15","","0","119","<p>I have a step workflow. First you select a task, then, you select a snapshot, ...</p>

<pre><code>class RestorePage extends Component {
    componentDidMount() {
        const { system_id: systemId } = this.props.params;
        const { setStep, fetchSystem } = this.props;
        const { query } = this.props.location;

        if (!query.zfbrowser_restore) {
            fetchSystem(systemId);
            setStep(STEPS.SELECT_TASK);
        } else {
            setStep(STEPS.RESTORE_FORM);
        }
    }

    render() {
        const { step, isLoadingSystem } = this.props;

        return (
            &lt;div&gt;
                &lt;h1 className=""__page-title"" data-ztest=""restore_title""&gt;Restore&lt;/h1&gt;
                {(() =&gt; {
                    if (isLoadingSystem) {
                        return (&lt;Spinner&gt;Loading System...&lt;/Spinner&gt;);
                    }

                    switch (step) {
                        case STEPS.SELECT_TASK:
                            return &lt;Tasks /&gt;;
                        case STEPS.SELECT_SNAPSHOT:
                            return &lt;Snapshots /&gt;;
                        case STEPS.FILE_BROWSER:
                            return &lt;FileBrowser /&gt;;
                        case STEPS.RESTORE_FORM:
                            return &lt;Form /&gt;;
                        default:
                            return (&lt;div&gt;Invalid Step&lt;/div&gt;);
                    }
                })()}
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>I'm storing the application state step in redux's store (and then, localStorage). I'm having issues with navigating away and coming back. It goes to the old step. A stale value. I've thought about moving the step state into this.step, but that'd require a forceUpdate. I've also though about storing it in react-router as part of the URL. I'm not sure if that'd be a good idea though because I'd have to have url changes. Each step requires the previous step for it's data, so if I change the url and go back to it, I'll have to fetch everything over again.</p>

<p>Is there any way to set the initial step? I've tried doing it in componentWillUpdate, but it still renders the old step prior to getting the update.</p>

<p>Thanks!</p>
","6823303","","","","","2017-07-03 15:52:01","react redux step workflows","<reactjs><redux><react-router><react-redux>","1","0","","",""
"28280779","1","28281261","","2015-02-02 15:12:17","","1","1859","<p>Take the very simple react.js app <a href=""http://jsbin.com/juficu/1/edit?html,js,output"" rel=""nofollow"">I created here</a></p>

<pre><code>  &lt;main&gt;&lt;/main&gt;
  &lt;section&gt;
    &lt;input value=""abc"" /&gt;
  &lt;/section&gt;
</code></pre>

<p>..</p>

<pre><code>data = note: """"
setNote = -&gt; data.note = $('input').val()

display = React.createFactory React.createClass render: -&gt;
  React.DOM.div null, ""The note is:"", @props.note

setNote()
rootComponent = React.render display(data), document.querySelector('main')

$('input').on 'keyup', -&gt; 
  setNote()
  rootComponent.forceUpdate()
</code></pre>

<p>by my understanding <a href=""http://facebook.github.io/react/docs/component-api.html"" rel=""nofollow"">of the documentation</a> when I keyup on the input it should set <code>data.note</code> (which I've verified that it does) and since <code>display</code>'s <code>render</code> method uses the <code>note</code> property, calling <code>rootComponent.forceUpdate</code> should force display to re-render and mirror the text in the input.</p>

<p>However it still only shows the original value of <code>data.note</code>. Am I misunderstanding the documentation?</p>

<p>Note that I'm aware that typically this is the sort of thing that you might use flux or reflux on, and while I appreciate any links to good tutorials on these, this is for a one-off and I'm trying to stick close to the metal here.</p>
","5056","","155299","","2015-02-02 18:16:29","2015-02-02 18:16:29","Does forceUpdate not work like I think it does?","<javascript><reactjs>","1","0","0","",""
"37190119","1","37190967","","2016-05-12 14:35:52","","1","355","<p>I am just curious if this is an ok use of forceUpdate or if there is a better way to achieve this since <a href=""https://facebook.github.io/react/docs/component-api.html#forceupdate"" rel=""nofollow"">forceUpdate</a> is discouraged.  I have a component that renders a name property and needs it to be editable so users can rename the feature, however the name property is stored outside of Flux or React because it is part of the Esri JavaScript API graphics layers.  For example, I have a feature in my graphics layer whose JSON looks like this:</p>

<pre><code>feature = {
  attributes: {
    Name: 'Custom Drawn Feature',
    __source: 'draw_toolbar'
  },
  geometry: {...},
  ...
}
</code></pre>

<p>Currently I have a component whose render function returns something like this:</p>

<pre><code>&lt;div className='custom-feature__header'&gt;
  &lt;input className='custom-feature__input' type='text' value={feature.attributes.Name} onChange={this.editName} /&gt;
  &lt;div className='custom-feature__delete pointer' onClick={this.deleteFeature}&gt;{text[language].DELETE}&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>And an editName function that updates the name like so:</p>

<pre><code>editName = ({target}) =&gt; {
  const {feature} = this.props;
  feature.attributes.Name = target.value;
  this.forceUpdate();
};
</code></pre>

<p>I don't want to set the name to state as that feels a bit like an anti-pattern to take props and set it to state, plus now I don't have a single source of truth since the name exists in a component (which is used in multiple places in the UI) and in the feature attributes in the graphics layer.</p>

<p>I also tried setting <code>defaultValue</code> instead of <code>value</code> and then not calling forceUpdate which worked really well, except that other places in the UI using this component did not reflect the change until they were remounted. Which I suspect happens because the props object did not change, its the same feature with an updated property.</p>

<p>Immutable would be nice but the data model is not controlled by me, it is provided by the Esri JavaScript API and I don't want to store duplicate data.</p>

<p>So back to the original question, is this one of those cases that is acceptable to use <code>forceUpdate</code> or would it be better to store a <code>key</code> value (maybe like Math.random()) in state that I change every time the name is edited, or is their another better way?</p>

<p>EDIT:
Just to clarify, the feature is stored in an Esri Graphic's Layer. These components are just rendering the state of the map and the only way to update the name of a graphic is by changing it's attributes directly, via <code>feature.attributes.Name = 'New Name'</code>.  This needs to be done so other Esri API methods and widgets can display/use it properly, like popup windows and search widgets.</p>
","2634496","","2634496","","2016-05-12 15:50:55","2016-05-12 16:44:18","Is there a better way than using forceUpdate for this","<reactjs>","1","0","1","",""
"44125123","1","","","2017-05-23 03:06:55","","0","276","<p>I was wondering how will I reload only the table, not the whole page on reacts. I've tried using <code>history.go(0);</code> however, it reloads the whole page please check how can I reload it, if I was going to use forceUpdate, based on research you should avoid using it. Im trying do an AJAX but i dont know what to put where to put it... it is way different than php..</p>

<p>my code for the onclick</p>

<pre><code> handleSubmit( name, address,department){

 const laman = {
      'Employee_Name': name,
      'Address': address,
      'Department': department
    }
    return fetch('http://localhost:5118/api/employeedetails/PostEmployeeDetail?', {
        method: 'POST',
        headers: {
        'Content-Type': 'application/json'
        },
        body: JSON.stringify(laman)
    })
    .then(function(response) {
      console.log(response)
      return response.json();
    })
    .then(function (result) {
      history.go(0);
    })
    .catch(function(error) {
      console.log(error);

    })
}
</code></pre>

<p>this is the code for the onclick button  plus the table itself</p>

<pre><code>render() {
     const isEnabled = this.canBeSubmitted();
    let {jsonReturnedValue} = this.state;
  return(
    &lt;div&gt;
        &lt;div className=""container""&gt;   
          &lt;h1&gt; Listof Employees &lt;/h1&gt;
            &lt;button className ='btn btn-warning right ' data-toggle=""modal"" data-target=""#AddEmployee""&gt; Add an Employee&lt;/button&gt;
             &lt;table className= ""table table-bordered"" id=""result""&gt; 
                &lt;tbody&gt;
                 &lt;tr&gt;
                      &lt;th&gt;ID&lt;/th&gt;
                      &lt;th&gt;Name&lt;/th&gt;
                      &lt;th&gt;Address&lt;/th&gt;
                      &lt;th&gt;Update&lt;/th&gt;
                      &lt;th&gt;Delete&lt;/th&gt;
                 &lt;/tr&gt;
                    {jsonReturnedValue.map((d,i) =&gt; this.renderItem(d,i))}
                &lt;/tbody&gt;
            &lt;/table&gt;
          &lt;/div&gt;

      {/*Updating*/}

    &lt;div className=""modal fade"" id=""UpdateEmployee"" role=""dialog""&gt;
           &lt;div className=""modal-dialog""&gt;
             &lt;div className=""modal-content""&gt;
                &lt;div className=""modal-header""&gt;
                   &lt;button type=""button"" className=""close"" data-dismiss=""modal""&gt;&amp;times;&lt;/button&gt;
                  &lt;h4 className=""modal-title""&gt;ADD  Employee&lt;/h4&gt;
            &lt;/div&gt;
&lt;form&gt;

        &lt;div className=""container""&gt;
          &lt;div className=""modal-body""&gt;
              &lt;table&gt; 
              &lt;tbody&gt;
              &lt;tr&gt;
              &lt;td&gt;Name&lt;/td&gt;
              &lt;td&gt;
              &lt;input type=""text""
                    ref=""Employee_Name""
                    onChange={(e) =&gt; this.handleChange(e, ""Employee_Name"")}
                    required
                    /&gt; 
              &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
              &lt;td&gt;Address&lt;/td&gt;
              &lt;td&gt;
               &lt;input type=""text""
                     ref=""Address""
                    onChange={(e) =&gt; this.handleChange(e, ""Address"")}
                    required
                     /&gt;
              &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
              &lt;td&gt;Department&lt;/td&gt;
              &lt;td&gt;
               &lt;input type=""text""

                      onChange={(e) =&gt; this.handleChange(e, ""Department"")}
                      required
              /&gt; 
              &lt;/td&gt;
              &lt;/tr&gt;
              &lt;/tbody&gt;
              &lt;/table&gt;

          &lt;/div&gt;
          &lt;/div&gt;
          &lt;div className=""modal-footer""&gt;
            &lt;input type=""button"" className=""btn btn-info""disabled={!isEnabled} 
                    onClick = { this.handleSubmit.bind(
                                this, this.state.Employee_Name,
                                this.state.Address,
                                this.state.Department)
                                 }
                               value ="" Add Employee""
                               data-dismiss=""modal""/&gt;
            &lt;button type=""button"" className=""btn btn-default"" data-dismiss=""modal"" &gt;Close&lt;/button&gt;
          &lt;/div&gt;

            &lt;/form&gt;
</code></pre>

<p>PS: IT IS ALSO IN THE SAME PAGE.. the reason i dont know how will I call it</p>
","8046497","","8046497","","2017-05-23 07:30:14","2017-05-23 07:36:47","How to reloads the table when clicked reactjs","<javascript><asp.net><api><reactjs><web>","1","2","","",""
"44130656","1","44130744","","2017-05-23 09:17:40","","0","27","<p>I was wondering how will I reload only the table, not the whole page on reacts. I've tried using history.go(0); however, it reloads the whole page please check how can I reload it, if I was going to use forceUpdate, based on research you should avoid using it. Im trying do an AJAX but i dont know what to put where to put it... it is way different than php..</p>

<p>my code for the onclick</p>

<pre><code>handleUpdate(id, name, address,department){ 

const data = {
  'Employee_ID': id,
  'Employee_Name': name,
  'Address': address,
  'Department': department
}
return fetch('http://localhost:5118/api/employeedetails/PutEmployeeDetail/'+id, {
    method: 'POST',
    headers: {
    'Content-Type': 'application/json'
    },
  body: JSON.stringify(data)
 })
.then(function(response) {
  console.log(response)
  return response.json();
})
.then((result)=&gt; {
  var jsonReturnedValue = [...this.state.jsonReturnedValue]; 

  jsonReturnedValue[data].Department = department,
  jsonReturnedValue[data].Employee_name = name,
  jsonReturnedValue[data].Address = address
  this.setState({jsonReturnedValue})
})
.catch(function(error) {
  console.log(error);

})
</code></pre>

<p>}</p>

<p>code for the render and the table</p>

<pre><code>render() {
     const isEnabled = this.canBeSubmitted();
    let {jsonReturnedValue} = this.state;
  return(
    &lt;div&gt;
        &lt;div className=""container""&gt;   
          &lt;h1&gt; Listof Employees &lt;/h1&gt;
            &lt;button className ='btn btn-warning right ' data-toggle=""modal"" data-target=""#AddEmployee""&gt; Add an Employee&lt;/button&gt;
             &lt;table className= ""table table-bordered"" id=""result""&gt; 
                &lt;tbody&gt;
                 &lt;tr&gt;
                      &lt;th&gt;ID&lt;/th&gt;
                      &lt;th&gt;Name&lt;/th&gt;
                      &lt;th&gt;Address&lt;/th&gt;
                      &lt;th&gt;Update&lt;/th&gt;
                      &lt;th&gt;Delete&lt;/th&gt;
                 &lt;/tr&gt;
                    {jsonReturnedValue.map((d,i) =&gt; this.renderItem(d,i))}
                &lt;/tbody&gt;

            &lt;/table&gt;
          &lt;/div&gt;

      {/*Updating*/}

    &lt;div className=""modal fade"" id=""UpdateEmployee"" role=""dialog""&gt;
           &lt;div className=""modal-dialog""&gt;
             &lt;div className=""modal-content""&gt;
                &lt;div className=""modal-header""&gt;
                   &lt;button type=""button"" className=""close"" data-dismiss=""modal""&gt;&amp;times;&lt;/button&gt;
                  &lt;h4 className=""modal-title""&gt;Update Employee&lt;/h4&gt;
            &lt;/div&gt;
            &lt;form &gt; 
              &lt;div className=""container""&gt; 
              &lt;div className=""modal-body""&gt; 
              &lt;table&gt; 
              &lt;tbody&gt; 
              &lt;tr&gt; 
              &lt;td&gt;Name&lt;/td&gt; 
              &lt;td&gt; 
              &lt;input  type=""text"" 
                      name=""Employee_Name""
                      value={this.state.Employee_Name} 
                      required
                      onChange={(e) =&gt; this.handleChange(e, ""Employee_Name"")}/&gt; 
              &lt;/td&gt; 
              &lt;/tr&gt; 
              &lt;tr&gt; 
              &lt;td&gt;Address&lt;/td&gt; 
              &lt;td&gt; 
              &lt;input  type=""text"" 
                      name=""Address"" 
                      value={this.state.Address} 
                      required
                      onChange={(e) =&gt; this.handleChange(e, ""Address"")}/&gt; 
              &lt;/td&gt; 
              &lt;/tr&gt; 
              &lt;tr&gt; 
              &lt;td&gt;Department&lt;/td&gt; 
              &lt;td&gt; 
              &lt;input  type=""text"" 
                      name='Department' 
                      value={this.state.Department} 
                      required
                      onChange={(e) =&gt; this.handleChange(e, ""Department"")}/&gt; 

              &lt;/td&gt; 
              &lt;/tr&gt; 
              &lt;/tbody&gt; 
              &lt;/table&gt; 
              &lt;/div&gt; 
              &lt;/div&gt; 
              &lt;div className=""modal-footer""&gt; 
              &lt;input type=""button"" className=""btn btn-info""   disabled={!isEnabled}  onClick = { this.handleUpdate.bind(this,  this.state.Employee_ID , this.state.Employee_Name ,this.state.Address ,this.state.Department)} value ="" Update Employee"" data-dismiss=""modal""/&gt; 
              &lt;button type=""button"" className=""btn btn-default"" data-dismiss=""modal""&gt;Close&lt;/button&gt; 
              &lt;/div&gt; 
              &lt;/form&gt;
            &lt;/div&gt;
          &lt;/div&gt;
    &lt;/div&gt;
</code></pre>
","8046497","","","","","2017-05-23 09:21:44","How to reloads the table when clicked using AJAX in reactjs Put Method","<javascript><asp.net><api><reactjs><web>","1","1","","2017-08-22 05:12:33",""
"45289607","1","","","2017-07-24 20:36:02","","1","48","<p>I'm learning Meteor and I'm using it with react, I'm trying to do a strawpoll application but I have an issue when I want to render a strawpoll</p>

<p>Here is my component for my StrawpollVote view : </p>

<pre><code>export default class StrawpollVote extends React.Component{
  constructor(props) {
    super(props);
    Tracker.autorun(() =&gt; {
      this.strawpoll = Strawpolls.findOne({ ""_id"": this.props.match.params.id });
      this.render();
    });
  }

  render(){
    if (this.strawpoll) {
      console.log('strawpoll');
      return (
        &lt;p&gt;Strawpoll : {this.strawpoll.title}&lt;/p&gt;
      );
    } else {
      return (
        &lt;p&gt;Strawpoll not found&lt;/p&gt;
      );
    }
  }
}
</code></pre>

<p>I receive the id with the route, I find the strawpoll associate and then I re-run the render function, all of this are in <code>Tracker.autorun</code> to listen on change, but when I load the page it displays the view where <code>Strawpoll not found</code> while in my console I can see the <code>strawpoll</code> from the render function</p>

<p>It only works when I use <code>this.forceUpdate()</code> on the autorun function but this cause a warning, why the render doesn't update the view ? Did I missed something ?</p>
","8102149","","8102149","","2017-07-24 20:53:43","2017-07-25 04:39:00","Update rendering with meteor and react","<javascript><reactjs><meteor>","1","1","","",""
"36311406","1","","","2016-03-30 14:10:49","","0","3406","<p>My node.js server sends with socket.io new data each 10s. In my web application I update this.state each time that my server sends data and force to update with forceUpdate()</p>

<p>However, my react component doesn't refresh, I don't know why. I followed the doc but I missed something...</p>

<p><strong>Parent :</strong></p>

<pre><code>class DataAnalytics extends React.Component {
  constructor(props) {
    super(props);
    socket = this.props.socket;
    this.state = {data: []};

    socket.on('dataCharts', (res) =&gt; {
      console.log(""new data charts : ""+res);
      var data = JSON.parse(res);   
      this.setState({data: data});
      this.forceUpdate();
    });
  }

  componentWillUnmount() {
    socket.off('dataCharts');
  }

  render() {
    return (
    &lt;div id=""dataAnalytics""&gt;
      &lt;Stats data={this.state.data}&gt;&lt;/Stats&gt;
    &lt;/div&gt;
    );
  }
}

export default DataAnalytics;
</code></pre>

<p><strong>Child :</strong></p>

<pre><code>class Stats extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      &lt;div className=""stats"" style={{textAlign:'center'}}&gt;
        &lt;h4&gt;Number: &lt;/h4&gt;
      &lt;/div&gt;
    );
  }

  componentDidUpdate() {
    var data = this.props.data;

    if(!jQuery.isEmptyObject(data)) {
      $( "".stats"" ).html(""&lt;h4&gt;Number : data['nb']['counterIn']&lt;/h4&gt;"");
    }
  }
}

export default Stats;
</code></pre>

<p>Anyone know how to refresh automatically my React component.</p>
","5279661","","","","","2016-03-30 14:20:56","Refresh react component","<javascript><reactjs>","1","3","1","",""
"45710457","1","","","2017-08-16 09:56:27","","1","1472","<p>I have a component and in that component there's a <code>onClick</code> method defined. On that method,i'm calling for back end and getting some response. values taken from the back end call is set only after i refresh my browser. Is there a way to re render my component with refreshing the browser?</p>

<p>I used <code>this.forceUpdate()</code> which is in the react documentation but could not achieve what i needed. How can i re render only my component without browser refreshing?</p>

<p><strong>My code.</strong></p>

<pre><code>handleClick(id) {

    this.setState({

        vote_status: !this.state.vote_status,

    })

    let vote_object = {
        voting_object: id,
        post_id: this.props.postId
    }
    this.props.submitvote(vote_object)

    //this.forceUpdate()
}

render() {

    console.log(""getVoteStatus"", this.props.getVoteStatus)

    let {contents, submitvote, postId, voted_id} = this.props

    return (

        &lt;div className=""txt_vote_bar_div"" style={{
            color: voted_id === contents.post_poll_content_id ? 'white' : '#9da0a4',
            backgroundColor: this.state.vote_status ? '#0b97c4' : '#FFFFFF'
        }} id={contents.post_poll_content_id}&gt;
            &lt;p className=""txt_vote_choice""
               style={{color: this.state.vote_status || voted_id === contents.post_poll_content_id ? '#FFFFFF' : '#6a6a6a'}}
               id={""id"" + contents.post_poll_content_id}
               onClick={() =&gt; {
                   this.handleClick(contents.post_poll_content_id);

               }}&gt; {contents.content} &lt;/p&gt;
            &lt;p className=""txt_tot_votes""
               style={{color: this.state.vote_status || voted_id === contents.post_poll_content_id ? '#FFFFFF' : '#6a6a6a'}}&gt; {contents.votes}%
                (Votes:)&lt;/p&gt;
        &lt;/div&gt;
    );
};
</code></pre>
","3899126","","","","","2017-08-16 10:29:53","Re-render component onClick in reactjs","<javascript><reactjs>","2","1","1","",""
"44981006","1","","","2017-07-07 23:31:43","","1","94","<p>I am using <a href=""https://github.com/christianalfoni/formsy-react"" rel=""nofollow noreferrer"">formsy-react</a> to handle validation of my input fields. Problem is that I can't update states. I followed example on formsy github page and validation is working but problem is that states are incorrect. They are always one step (or few) behind and I am not sure why...</p>

<p>I used callback on <code>setState</code> function to implement some custom logic on validation and that part doesn't work properly.</p>

<p>I have a situation where user enters email. After user enters email I check if email is already registrated. If user is already in system, I create new input component (password type) and if not I create new ""input type email"" component.</p>

<p>Since all forms elements are required I added one more validation check that checks if new password or email component is added and if there is any data.</p>

<p>To update states I used Forms form API call <a href=""https://github.com/christianalfoni/formsy-react/blob/master/API.md#onchange"" rel=""nofollow noreferrer"">onChange()</a> and this part is not working for unknown reason.</p>

<p>Does someone knows where is the problem?</p>

<p>This is code I am using:</p>

<p>Component Input (shorted version)</p>

<pre><code>changeValue(event) {

    this.setValue(event.currentTarget.value);

},
render() {

    // Set a specific className based on the validation
    // state of this component. showRequired() is true
    // when the value is empty and the required prop is
    // passed to the input. showError() is true when the
    // value typed is invalid
    const className = (this.props.className || ""col-md-4"" );
    const classValidationName =this.isValid() ? 'valid' : this.showError() ? ' invalid' : null;

    // An error message is returned ONLY if the component is invalid
    // or the server has returned an error message
    const errorMessage = this.getErrorMessage();

    return (
        &lt;div className= {className}&gt;
            &lt;div className=""md-form""&gt;
                &lt;span className=""prefix""&gt;&lt;i className={this.props.icon}&gt;&lt;/i&gt;&lt;/span&gt;
                &lt;input
                    className={classValidationName}
                    name={this.props.name}
                    id={this.props.id}
                    type={this.props.inputType}
                    value={this.getValue() || """"}
                    onChange={this.changeValue}
                    onBlur={this.props.controlFuncOnBlur}
                    placeholder={this.props.placeholder}
                    required={this.props.required}
                    pattern={this.props.pattern}
                /&gt;
                &lt;label id={this.props.name + 'Label'} htmlFor={this.props.name} data-error={errorMessage}
                       data-success={this.props.successMessage}&gt;{this.props.title}
                &lt;/label&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    );
}
</code></pre>

<p>Container (shorted version)</p>

<pre><code>handleEmailBlur(event) {
    const self = this;

    if (this.refs.email.isValid) {
        axios.get('/api/checkIsUserRegistrated', {
            params: {
                email: this.state.email
            }
        })
            .then(function (response) {
                if (self.state.userExist !== response.data[0].userExist) {
                    self.setState({
                        userExist: response.data[0].userExist,
                        confirmEmail: """",
                        password: """"

                    });
                    self.forceUpdate();
                }

            })
            .catch(function (error) {
                console.log(error);
            });
    }
}

enableButton = () =&gt; {

    this.setState({
        formValid: true
    });
}

disableButton = () =&gt; {
    this.setState({
        formValid: false
    });
}
saveCurrentValuesToStates = (getCurrentValues, isChanged) =&gt; {
    console.log(this);
    this.setState(getCurrentValues, ()=&gt; {
        if (this.state.formValid &amp;&amp; (this.state.password || this.state.confirmEmail)){
            this.setState({
                canSubmitForm: true
            });
        }
        else{
            this.setState({
                canSubmitForm: false
            });
        }
    });
}

 &lt;Formsy.Form className=""booker-form"" ref=""form""
   onChange={this.saveCurrentValuesToStates} onValid={this.enableButton} onInvalid={this.disableButton}&gt;

                            &lt;SingleInput
                            inputType={'email'}
                            icon={'icon-Email'}
                            id={'email'}
                            name={'email'}
                            title={'E-mail'}
                            ref=""email""
                            controlFuncOnBlur={this.handleEmailBlur}
                            content={this.state.email}
                            errorMessage={'Incorect E-Mail address'}
                            required
                            validations=""isEmail""
                            validationError=""This is not a valid email""
                        /&gt;
                        {(this.state.userExist === '0') ?
                            &lt;SingleInput
                                inputType={'email'}
                                icon={'icon-Email'}
                                id={'confirmEmail'}
                                name={'confirmEmail'}
                                title={'Confirm your E-mail'}
                                content={this.state.confirmEmail}
                                required
                                validations=""equalsField:email""
                                validationError=""Emails don't match""

                            /&gt;
                            : null}
                        {(this.state.userExist === '1') ?
                            &lt;SingleInput
                                inputType={'password'}
                                icon={'icon-Padlock'}
                                id={'password'}
                                name={'password'}
                                title={'Enter your password'}
                                content={this.state.password}
                                required

                            /&gt;
                            : null}
</code></pre>
","4326065","","","","","2017-07-07 23:31:43","React doesn't update states when using formsy-react","<javascript><validation><reactjs><formsy-react>","0","0","","",""
"45711927","1","45724044","","2017-08-16 11:08:50","","0","430","<p>I used the form component in react-bootstrap-validation, and here are many input, checkbox and a submit button in the form.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;Form className=""detail-model__form"" onValidSubmit={this.handleValidSubmit}&gt;
  &lt;button type=""button"" className=""btn btn-danger"" onClick={this.deleteSomeValue}&gt;delete&lt;/button&gt;
  &lt;button className=""btn btn-primary""&gt;submit&lt;/button&gt;
  &lt;Table className=""detail-model__form__table""&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th style={{width:120}}&gt;Key&lt;/th&gt;
        &lt;th&gt;Value&lt;/th&gt;
        &lt;th style={{width:160}}&gt;opperate&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      {this.state.list.map( (item, i) =&gt;
        &lt;tr key={i}&gt;
          &lt;td&gt;
            &lt;Checkbox checked={item.checked} onChange={() = &gt;{item.checked=!item.checked;this.forceUpdate();}}/&gt;
          &lt;/td&gt;
          &lt;td&gt;
            &lt;ValidatedInput
                type=""text""
                name={'hash_key_' + i}
                value={item.field}
                validate={(val) =&gt; {
                  if(val.length)
                    return true;
                  return ""need Key"";
                }}
            /&gt;
          &lt;/td&gt;
          &lt;td&gt;
            &lt;span
              className=""table-btn""
              onClick={() =&gt; {
                this.state.actions.push({
                  ""action"": ""hdel"",
                  ""field"": item.field
                });
                this.state.list.splice(i, 1);
                this.state.length--;
                this.forceUpdate();
              }}
            &gt;delete&lt;/span&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      )}
    &lt;/tbody&gt;
  &lt;/Table&gt;
&lt;/Form&gt;</code></pre>
</div>
</div>
</p>

<p>Now I want prevent the submit event when the input or checkbox on focus and the enter key is pressed. </p>

<p>I have seen here are some solutions that can set the type of button to button instead of submit, but I need to use the onValidSubmit property to validate the data format.</p>

<p>I try to use the onKeyUp to log the enter key is pressed, but not effective</p>
","6017254","","","","","2017-08-17 11:12:33","How to avoid submitting in the form of react-bootstrap-validation when press the enter key","<reactjs><submit><bootstrapvalidator>","1","1","","",""
"29046873","1","","","2015-03-14 08:13:14","","1","4321","<p>I have a series of React components loading data from HTTP service in <code>componentDidMount</code> as explained here <a href=""http://facebook.github.io/react/tips/initial-ajax.html"" rel=""nofollow"">http://facebook.github.io/react/tips/initial-ajax.html</a></p>

<pre><code>&lt;html&gt;
&lt;body&gt;
  &lt;script src=""http://fb.me/react-0.13.0.min.js""&gt;&lt;/script&gt;
  &lt;script src=""http://fb.me/JSXTransformer-0.13.0.js""&gt;&lt;/script&gt;
  &lt;script src=""http://code.jquery.com/jquery-1.11.2.min.js""&gt;&lt;/script&gt;

  &lt;script type=""text/jsx""&gt;
    var RandomGist = React.createClass({
      getInitialState: function() {
        return {
          id: '',
          url: ''
        };
      },

      componentDidMount: function() {
        $.get(this.props.source, function(result) {
          var gist = result[Math.round(Math.random() * result.length)];
          this.setState({
            id: gist.id,
            url: gist.html_url
          });
        }.bind(this));
      },

      render: function() {
        return (
          &lt;div&gt;
            &lt;a href={this.state.url}&gt;{this.state.id}&lt;/a&gt;
          &lt;/div&gt;
        );
      }
    });

    var GistList = React.createClass({
      render: function() {
        return (&lt;div&gt;{[1,2,3].map(function() {
          return &lt;RandomGist source=""https://api.github.com/users/octocat/gists"" /&gt;;
        })}&lt;/div&gt;);
      }
    });

    var RefreshableGistList = React.createClass({
      handleClick: function() {
        console.log(""Click!"");
      },

      render: function() {
        return (
          &lt;div&gt;
            &lt;button onClick={this.handleClick}&gt;Refresh&lt;/button&gt;
            &lt;GistList /&gt;
          &lt;/div&gt;
        );
      }
    });

    React.render(
      &lt;RefreshableGistList /&gt;,
      document.body
    );
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>After click on Refresh button I would like to refresh gist from HTTP service. Problem is that <code>setState</code> and <code>forceUpdate</code> will not lead to that because getting data from HTTP service is done in <code>componentDidMount</code> as was explained in original react example.</p>
","366634","","366634","","2015-03-14 11:46:41","2015-03-14 15:27:24","react reload data with AJAX","<reactjs>","1","2","","",""
"46443488","1","","","2017-09-27 08:53:12","","0","71","<p>I have a component i want to show on login:</p>

<pre><code>import * as React from 'react';
import * as Localization from '../Modules/Localization';
import ILanguageChangedObservor from '../Interfaces/ILanguageChangedObservor';

class Login extends React.Component {

  private observor : ILanguageChangedObservor;

  constructor(languageObservor : ILanguageChangedObservor) {
    super();
    this.observor = languageObservor;
  }

  public currentLanguage : Localization.Localization.LocalizedStrings = new Localization.Localization.LocalizedStrings(navigator.language.split('-')[0].toString());

  public changeBrowserLanguage(event: React.FormEvent&lt;HTMLSelectElement&gt;) {
    this.currentLanguage = new Localization.Localization.LocalizedStrings(event.currentTarget.value);
    this.forceUpdate();
  }

  render() {

    var englishStrings = new Localization.Localization.LocalizedStrings(""en"");
    var germanStrings = new Localization.Localization.LocalizedStrings(""de"");
    var frenchStrings = new Localization.Localization.LocalizedStrings(""de"");
    var spanishStrings = new Localization.Localization.LocalizedStrings(""es"");

    return (
        &lt;div&gt;
                &lt;p&gt;
                &lt;select onChange={ e =&gt; this.changeBrowserLanguage(e) }&gt;
                  &lt;option value=""en""&gt;{englishStrings.languageInNative}&lt;/option&gt;
                  &lt;option value=""de""&gt;{germanStrings.languageInNative}&lt;/option&gt;
                  &lt;option value=""fr""&gt;{frenchStrings.languageInNative}&lt;/option&gt;
                  &lt;option value=""es""&gt;{spanishStrings.languageInNative}&lt;/option&gt;
                &lt;/select&gt;
                &lt;/p&gt;
                {this.currentLanguage.welcome}&lt;br /&gt;
        &lt;/div&gt;
    );

  }
}

export default Login;
</code></pre>

<p>What i want to do is when the language is set on login, tell the observor which will be the parent page:</p>

<p>Parent screen:</p>

<pre><code>import * as React from 'react';
import './App.css';
import Login from './Screens/Login';
import * as Localization from './Modules/Localization';
import ILanguageChangedObservor from './Interfaces/ILanguageChangedObservor';

const logo = require('./logo.svg');

class App extends React.Component implements ILanguageChangedObservor {

  public update(toLanguage : Localization.Localization.LocalizedStrings) {

  }

  render() {
    return (
      &lt;div className=""App""&gt;
        &lt;div className=""App-header""&gt;
          &lt;img src={logo} className=""App-logo"" alt=""logo"" /&gt;
          &lt;h2&gt;Welcome to React&lt;/h2&gt;
        &lt;/div&gt;
        &lt;Login /&gt;
      &lt;/div&gt;
    );
  }
}

export default App;
</code></pre>

<p>I was expecting that i could pass the instance of the parent into the login component, something like this:</p>

<pre><code>&lt;Login languageObservor=this /&gt;
</code></pre>

<p>But it appears this is not an available option. Is it possible to atleast pass a callback function into a component? Im new to react so still trying to work out limitations. Thanks for your help in advance.</p>
","869305","","","","","2017-09-27 16:31:43","TypeScript: Is it possible to pass an instance of an interface into a react component?","<reactjs><typescript><react-native>","1","0","","",""
"45877108","1","45877212","","2017-08-25 08:14:58","","2","1111","<p>I am trying to force a child component to re-render. I have tried <code>this.forceUpdate();</code>, but it does not work. I put console.log statements in my <code>&lt;PostList /&gt;</code> component, and none of them are ever called--not componentDidMount, nor componentWillMount, componentWillReceiveProps, none of them. It's as if the <code>&lt;PostList /&gt;</code> component is never initialized. I am sure it is though, because I know for a fact items.count retrieves my items. Here is my render method:</p>

<pre><code> render() {
        const items = this.state.posts;
        const postList = items.count &gt; 0 ? (&lt;PostList comingFromSearch={true} xyz={items} /&gt;) : (&lt;div&gt;&lt;/div&gt;)
        const navBar = &lt;NavigationBar /&gt;
        return (
                &lt;div&gt;&lt;br/&gt;{navBar}
                   &lt;div className=""container""&gt;
                     &lt;h3&gt;Search Results for {this.state.searchTerm}&lt;/h3&gt;
                        &lt;div className=""row""&gt;
                            &lt;div className=""col-x-12""&gt;{postList}&lt;/div&gt;
                        &lt;/div&gt;
                   &lt;/div&gt;
                &lt;/div&gt;
            )
     }
</code></pre>

<p>And here is my api call:</p>

<pre><code>    retrieveSearch(term) {
        Helpers.searchWithTerm(term).then((terms) =&gt; {
                const postsWithTermsInTitle = terms.titleResults
                this.setState({posts: postsWithTermsInTitle})
                this.forceUpdate();
        }).catch((error) =&gt; {   
                console.log(""error searching: "" + error);
        })
   }
</code></pre>

<p>I should note, on my previous page, i had another ` component, and maybe react is using that one instead of this one? I want to force it to use this instance.</p>

<p>If <code>this.forceUpdate();</code> does not make the whole DOM re-render, how can I do that?</p>

<p>thanks</p>
","5136425","","","","","2017-09-12 12:42:31","How to force dom re render in react","<reactjs>","2","2","1","",""
"44320777","1","44325666","","2017-06-02 04:25:47","","0","925","<p>My markers won't render on the map. I initially had a stateless functional component but changed to a class to use <code>this.forceUpdate()</code> and it still didn't work. What am I doing wrong? I have tested on both Android and iOS real devices. The map is showing but not the markers. Could it be that the map is appearing on top of the markers, like a <code>zIndex</code> issue? I hardcoded a <code>marker</code> there to be sure the problem isn't with my <code>props.markers</code></p>

<pre><code>import { StyleSheet } from 'react-native'
import React, { Component } from 'react'
import MapView from 'react-native-maps'
import { connect } from 'react-redux'
import {
  Button,
  Container
} from 'native-base'

import selectMarkers from './markers.selector'

import { updateRegion } from './map.action'
import Icon from 'react-native-vector-icons/FontAwesome'
import { toggleMenu } from '../search-page/searchPage.action'
import mapStyle from './style'

const mapStateToProps = (state) =&gt; ({
  region: state.get('map').get('region'),
  markers: selectMarkers(state)
})

const mapDispatchToProps = (dispatch) =&gt; ({
  onRegionChange: (region) =&gt; {
    dispatch(updateRegion(region))
  },
  onToggleMenuClick: () =&gt; {
    dispatch(toggleMenu())
  }
})

class Map extends Component {

  componentDidMount() {
    const { store } = this.context
    this.unsubscribe = store.subscribe(() =&gt; { })
    this.forceUpdate()
  }

  componentWillUnmount() {
    this.unsubscribe()
  }

  render() {
  console.log('map')
  console.log('markers', this.props.markers)
    return (
      &lt;Container&gt;
        &lt;MapView
          style={styles.map}
          region={{
            latitude: this.props.region.latitude,
            longitude: this.props.region.longitude,
            latitudeDelta: this.props.region.latitudeDelta,
            longitudeDelta: this.props.region.longitudeDelta,
          }}
        &gt;
          {
            this.props.markers.map(marker =&gt; {
              return (
                &lt;MapView.Marker
                  onLoad={() =&gt; this.forceUpdate()}
                  coordinate={{ latitude: marker.latitude, longitude: marker.longitude }}
                  title={marker.name}
                /&gt;
              )
            })}

          &lt;MapView.Marker
            coordinate={{ latitude: 174.7666099, longitude: -36.8457991 }}
            title={""title""}
            description={""description""}
            onLoad={() =&gt; this.forceUpdate()}
            key={1}
          /&gt;
        &lt;/MapView&gt;
        &lt;Button
          small
          icon
          style={mapStyle.toggleMenuButton}
          onPress={() =&gt; this.props.onToggleMenuClick()}&gt;
          &lt;Icon name=""sliders"" size={20} color=""#FFFFFF"" /&gt;
        &lt;/Button&gt;
      &lt;/Container&gt;
    )
  }
}

Map.contextTypes = {
  store: React.PropTypes.object
}

Map.propTypes = {
  region: React.PropTypes.shape({
    latitude: React.PropTypes.number,
    longitude: React.PropTypes.number,
    latitudeDelta: React.PropTypes.number,
    longitudeDelta: React.PropTypes.number
  }).isRequired,
  onRegionChange: React.PropTypes.func.isRequired,
  onToggleMenuClick: React.PropTypes.func.isRequired,
  markers: React.PropTypes.array
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(Map)

const styles = StyleSheet.create({
  map: {
    ...StyleSheet.absoluteFillObject,
    zIndex: -1
  }
})
</code></pre>
","3935156","","3935156","","2017-06-02 05:03:42","2017-06-02 09:39:40","react-native-maps markers not displayed on map","<javascript><react-native><redux><react-native-ios><react-native-maps>","1","0","","",""
"46802671","1","46802702","","2017-10-18 04:10:11","","1","180","<p>I am trying to call the following function from react with ipc.renderer</p>

<pre><code>componentDidMount() {
    ipcRenderer.on('log-out', function () {
       localStorage.setItem('user', 'null');
       this.forceUpdate();
    });
}
</code></pre>

<p>but every Time i call it I get the following error</p>

<pre><code>Uncaught TypeError: this.forceUpdate is not a function
    at EventEmitter.&lt;anonymous&gt; (App.js:30)
    at emitOne (events.js:96)
    at EventEmitter.emit (events.js:191)
</code></pre>

<p>What am I doing wrong or how it suppose to be done ?</p>

<p>Thank you. </p>
","873153","","2349407","","2017-10-18 04:49:00","2017-10-22 03:57:00","Calling react function in electron ipcRender","<javascript><reactjs><electron>","2","0","","",""
"35790130","1","","","2016-03-04 07:14:02","","3","1650","<p>I'm beginner in react and redux, I have action which posts JSON on API and then receives list, this action called from button click, this all process works good but after populating data ui is not updating  </p>

<p>Action:</p>

<pre><code>import * as types from './actionTypes'
import { postMessage } from '../api/messaging'

function postToAPI(msg, dispatch) {
  dispatch({ type: types.MESSAGE_POSTING });

  postMessage(msg, (messages) =&gt; {
    dispatch({
      type: types.MESSAGE_POST_DONE,
      messages: messages
    });
  });
}

export function postMessageAction(msg) {
  return (dispatch) =&gt; {
    postToAPI(msg, dispatch);
  }
}
</code></pre>

<p>Reducer:</p>

<pre><code>import * as types from '../actions/actionTypes'

const initialState = {
  messages: []
}

export default function messages(state = initialState, action) {
  switch(action.type) {
    case types.MESSAGE_POST_DONE:
      return {
        ...state,
        messages: action.messages
      }
      this.forceUpdate();
    default:
      return state;
  }
}
</code></pre>

<p>Main container:</p>

<pre><code>export default class App extends Component {
  render() {
    return (
      &lt;Provider store={store}&gt;
        &lt;CounterApp /&gt;
      &lt;/Provider&gt;
    );
  }
}
</code></pre>

<p>CounterApp:</p>

<pre><code>class CounterApp extends Component {
  constructor(props) {
    super(props);
  }

  render() {
    const { state, actions } = this.props;
    return (
      &lt;Messaging /&gt;
    );
  }
}

export default connect(state =&gt; ({
  messages: state.default.messages.messages
}))(CounterApp);
</code></pre>

<p>Messaging:</p>

<pre><code>class Messaging extends Component {
  render() {
    return (
      &lt;View&gt;
        &lt;MessageList messages={this.props.messages} /&gt;
        &lt;Message /&gt;
      &lt;/View&gt;
    )
  }
}
export default connect(state =&gt; ({
  messages: state.default.messages.messages
}))(Messaging);
</code></pre>

<p>Message list:</p>

<pre><code>export default class MessageList extends Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      &lt;ScrollView&gt;
        {
          this.props.messages.map((item, index) =&gt; {
            return (
              &lt;Text&gt;
                { item.body }
              &lt;/Text&gt;
              )
          })
        }
      &lt;/ScrollView&gt;
    )
  }
}
</code></pre>

<p><a href=""https://i.stack.imgur.com/veEOy.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/veEOy.png"" alt=""enter image description here""></a></p>

<p>My MessageList component does not updates when messages changed. I read difference between props and state but i dont know how to pass data to state.</p>

<h2>Update:</h2>

<p>My state in messaging connect looks like this why i used default</p>

<p><a href=""https://i.stack.imgur.com/y7hy0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/y7hy0.png"" alt=""enter image description here""></a></p>

<p>Any ideas?</p>
","525717","","525717","","2016-03-04 11:38:49","2016-03-04 11:38:49","UI is not updating react & redux","<javascript><reactjs><react-native><redux>","3","3","","",""
"21709905","1","21710111","","2014-02-11 18:19:08","","39","16243","<p><a href=""http://facebook.github.io/react/"">Facebook React</a> <a href=""http://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#what-components-should-have-state"">encourages</a> you to separate mutable (<code>state</code>) and immutable (<code>props</code>) state:</p>

<blockquote>
  <p>Try to keep as many of your components as possible stateless. By doing this you'll isolate the state to its most logical place and minimize redundancy, making it easier to reason about your application.</p>
</blockquote>

<p>When the state changes, you are supposed to call <a href=""http://facebook.github.io/react/docs/component-api.html#setprops""><code>setState</code></a> to trigger virtual DOM diff, which will cause a real DOM update only when this is needed.</p>

<p>There <em>is</em> a way to trigger DOM update manually by calling <a href=""http://facebook.github.io/react/docs/component-api.html#forceupdate""><code>forceUpdate</code></a> but it is <a href=""http://facebook.github.io/react/docs/component-api.html#forceupdate"">discouraged</a>:</p>

<blockquote>
  <p>Normally <strong>you should try to avoid all uses of <code>forceUpdate()</code></strong> and only read from <code>this.props</code> and <code>this.state</code> in <code>render()</code>. This makes your application much simpler and more efficient.</p>
</blockquote>

<p>However, all React+Backbone examples I have seen <strong>ignore this advice</strong> and store models and collections in <code>props</code> and call <code>forceUpdate</code>:</p>

<ul>
<li><a href=""http://www.thomasboyt.com/2013/12/17/using-reactjs-as-a-backbone-view.html"">http://www.thomasboyt.com/2013/12/17/using-reactjs-as-a-backbone-view.html</a></li>
<li><a href=""https://github.com/usepropeller/react.backbone/blob/master/react.backbone.js"">https://github.com/usepropeller/react.backbone/blob/master/react.backbone.js</a></li>
<li><a href=""https://gist.github.com/ssorallen/7883081"">https://gist.github.com/ssorallen/7883081</a></li>
<li><a href=""http://eldar.djafarov.com/2013/11/reactjs-mixing-with-backbone/"">http://eldar.djafarov.com/2013/11/reactjs-mixing-with-backbone/</a></li>
</ul>

<p>Even React's own example uses <code>forceUpdate</code>:</p>

<ul>
<li><a href=""https://github.com/facebook/react/blob/master/examples/todomvc-backbone/js/app.js#L148"">https://github.com/facebook/react/blob/master/examples/todomvc-backbone/js/app.js#L148</a></li>
</ul>

<p>Is there a better way, though, and what benefits would it give?</p>
","458193","","","","","2014-02-21 15:22:30","Can I avoid forceUpdate() when using React with Backbone?","<javascript><backbone.js><reactjs>","3","0","32","",""
"47187721","1","","","2017-11-08 19:07:28","","0","783","<p>I am trying to display a react-table with server side pagination and it's working fine. Issue is that the react-table loads data from server during the page load itself but I am trying to load the data in react-table only when user clicks a link on the page.</p>

<p>Below is the code for react-table :</p>

<pre><code>import React, { Component } from 'react';
import { connect } from 'react-redux';
import ReactTable from 'react-table';
import 'react-table/react-table.css';
import { Loader, Message } from 'semantic-ui-react';
import { getColumnHeaders } from '../components/search-result-headers/columnHelper';
import axios from 'axios';

const requestData = (pageSize, page, sorted, filtered,ROOT_URL) =&gt; {
   return new Promise((resolve, reject) =&gt; {
      // You can retrieve your data however you want, in this case, we will just use some local data.
       // construct the url and make a request to the search api
      const url = ROOT_URL + '?pageSize=' + pageSize+""&amp;pageNo=""+(page+1);
      axios.get(url).then(response =&gt; { 
         if(response.status === 200){
             // You must return an object containing the rows of the current page, and optionally the total pages number.
            const res = {
               rows: response.data.resultData.searchResults,
               pages: Math.ceil(response.data.resultData.totalAvailable / pageSize)
            };
            resolve(res);
         }else{
            console.log(`Error :${response.status}`);
         }
      }) 
    });
 }


class ResultsContainer extends Component {

   constructor() {
      super();
      this.state = {
        data: [],
        pages: null,
        loading: false
      };
      this.fetchData = this.fetchData.bind(this);
      this.forceUpdate();
    }

    fetchData(state, instance) {
      //set the loading message on table
      this.setState({ loading: true });
      let url = `/api/sample`;

      // Request the data from API
      requestData(
        state.pageSize,
        state.page,
        state.sorted,
        state.filtered,
        url
      ).then(res =&gt; {
        // Now just get the rows of data to your React Table (and update anything else like total pages or loading)
        this.setState({
          data: res.rows,
          pages: res.pages,
          loading: false
        });
      });
    }

   render() {
      // get the search results column header as per the search type
      let columns = getColumnHeaders(this.props.searchType);
      const { data, pages, loading } = this.state;

      return (
        &lt;div&gt;
          &lt;ReactTable
            manual
            pages={pages}
            loading={loading}
            onFetchData={this.fetchData}
            defaultPageSize={10}
            filterable={true}
            data={data}
            columns={columns}
          /&gt;
        &lt;/div&gt;        
      );
   }
}

export default ResultsContainer;
</code></pre>

<p>In this case when browser loads the page it makes call to api and loads the data into react-table. How can we block the react-table from loading data during page load, instead the data should get loaded when user clicks a link on the page.</p>

<p>Implementation for getColumnHeaders :</p>

<pre><code>export function getColumnHeaders(searchType) {
   let columns = [];

if (searchType === 'RETURN_SEARCH') {

  columns =  [
      {
         Header: ""Case"",

         accessor: ""caseId""
      },
      {
         Header: ""Ticket"",

         accessor: ""ticketNo""
      },
      {
         Header: ""Reason"",

         accessor: ""reason""
      }
      {
         Header: ""Seller Name"",

         accessor: ""UserName""
      }
 ]

} else {
      //implement this feature later
    }

   return columns;
}
</code></pre>

<p>Thanks in advance for any help, suggestions.</p>
","4735133","","4735133","","2017-11-09 18:13:31","2017-11-09 18:13:31","Load server data of react-table on button click","<reactjs><react-server>","0","3","","",""
"38934776","1","39105650","","2016-08-13 16:33:02","","11","726","<p><a href=""https://github.com/sbaar/ResizableLLRN"" rel=""noreferrer"">Full code here</a></p>

<p><a href=""https://drive.google.com/file/d/0Bxl2pkHHa3caUFUteHNmSUFlRnM/view"" rel=""noreferrer"">Video of correct behavior in java and incorrect in react native here</a></p>

<p>I have modified a linear layout to respond to touch by resizing the left child while the right child takes up the rest of the space, simulating a horizontal scroll that can be 'opened' or 'closed' using the following code</p>

<pre><code>    LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) leftView.getLayoutParams();
    //Log.d(""ll"",""width "" + newWidth);
    lp.width=newWidth;
    leftView.setLayoutParams(lp);
</code></pre>

<p>In react native, touch is still calling this method and logging the expected values, but the size of the children is not updated. The only time it updates is when I switch the visibility to gone then visible again. Calling invalidate/requestLayout on the view from java or forceUpdate from js does not have any effect.</p>

<p>Is there some other code I need to call to invalidate and redraw the view? Is there a hint I need to give to react that this component scrolls or responds to touch?</p>
","1767887","","","","","2016-10-03 19:55:41","Cannot resize linear layout children in android react native module","<android><android-layout><scroll><react-native><android-layoutparams>","4","0","3","",""
"44981797","1","","","2017-07-08 02:00:32","","0","180","<p>I read its bad practice to use forceUpdate, however the data that i am pushing gets stored in a separate array js folder. I have read about passing a function to the child screen and before you do a goBack ( I am using React Navigation ) call that function. </p>

<p>I am still new to React, so what little explainations about the two I could not understand. I have also provided a sample of the json data array that is storing all of the stuff.</p>

<p>So what I am trying to do is 
<br /> Screen1 -> Screen2(form)data pushed to none state array -> Rerender Screen1</p>

<p>Update:
I have just thought about passing userData: userDate into the parent state, however I am unsure how to push the new form data into the array and also update the state if so</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>export var userData= [
  {
    'title': 'First Program',
    'description': 'This is the description for the first program',
    'workoutName':[
      {
        'workoutTitle': 'First Workout',
        'workoutDescription': 'This is empty',
        'exerciseList': []
      },
    ]
  }
 ] </code></pre>
</div>
</div>
</p>

<p>.</p>

<p>This is the first screen------------------</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import styles from '../../styling/style.js';
import { Text, View, Image, TouchableHighlight, ScrollView } from 'react-native';
import { List, ListItem } from 'react-native-elements';
// -------------------------------------------------
import { userData } from '../../config/data';
import Forms from '../FormPage';


export default class ProgramLists extends React.Component {
constructor(props) {
  super(props);
    this.state = {
      // These inputs will be used to link to program/workout/exercise titles and descriptions
      userData: userData
  };
}    
render() {
  // this.props.navigation.navigate is shorthanded into this below.
  // Be aware there are multiple NavigationActions that use this.props.navigation, so my not be used in all cases.
  const { navigate } = this.props.navigation;
  return (    
    &lt;Image style={styles.workoutContainer, { flex: 1}} source={require(""../../images/HomepageBackground.jpg"")}&gt;
    &lt;View style={styles.workoutScrollView}&gt;  
     &lt;ScrollView&gt;
        &lt;List style={styles.listBody}&gt;
          {this.state.userData.map((data, i) =&gt; (
            &lt;ListItem titleStyle={{color: 'white'}} subtitleStyle={{color: 'black', fontSize: 12}} 
              key={i}
              title={`${data.title.toUpperCase()}`}
              subtitle={data.description}
              onPress={() =&gt; navigate('WorkoutList', {...data})}
            /&gt;
          ))}
        &lt;/List&gt;
      &lt;/ScrollView&gt;
      &lt;/View&gt;
        &lt;View style={styles.createButton}&gt;
        &lt;TouchableHighlight onPress={() =&gt; navigate('Form', {titlePassed: 'program'})} style={styles.addButtonTouch}&gt;
        	&lt;Text style={styles.addButtonText}&gt;+&lt;/Text&gt;
        &lt;/TouchableHighlight&gt;
        &lt;/View&gt;
    &lt;/Image&gt;    
    );
  }

// End of the render
}</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import styles from '../styling/style.js';
import { Text, View, Image, TouchableHighlight, TextInput } from 'react-native';
import { NavigationActions } from 'react-navigation'
// -------------------------------------------------
import { userData, specificExercises } from '../config/data';


export default class Forms extends React.Component {
constructor(props) {
  super(props);
    this.state = {
      // These inputs will be used to link to program/workout/exercise titles and descriptions
      InputTitle: '',
      InputDescription: '',
  };
}    
render() {
  return (    
    &lt;Image style={styles.workoutContainer, { flex: 1}} source={require(""../images/HomepageBackground.jpg"")}&gt;
      &lt;View style={styles.workoutBody}&gt;
        &lt;Text style={styles.formHeader}&gt;&lt;Text style={{fontWeight: 'bold'}}&gt;Add a new &lt;/Text&gt;{this.Textone()} &lt;/Text&gt;
          &lt;TextInput
            ref=""input1""
            autoCorrect={false} 
            style={styles.formBody}
            onChangeText={(InputTitle) =&gt; this.setState({InputTitle})}
            placeholder='Title'
            value={this.state.InputTitle} /&gt;
        &lt;Text style={styles.formHeader}&gt;&lt;Text style={{fontWeight: 'bold'}}&gt;Description&lt;/Text&gt; {this.Texttwo()}&lt;/Text&gt;
          &lt;TextInput
            ref=""input2""
            autoCorrect={false} 
            style={styles.formBody}
            placeholder='Description'
            onChangeText={(InputDescription) =&gt; this.setState({InputDescription})}
            value={this.state.InputDescription} /&gt;
        &lt;TouchableHighlight onPress={() =&gt; this.Addprogram(this.state.InputTitle, this.state.InputDescription)} style={styles.buttonBody} title=""Add Program"" &gt;
          &lt;Text&gt;Add Program&lt;/Text&gt;
        &lt;/TouchableHighlight&gt;  
      &lt;/View&gt;
      &lt;View&gt;
      &lt;/View&gt;
    &lt;/Image&gt;    
    );
  }

Addprogram = (title, description) =&gt; {
  switch (this.props.navigation.state.params.titlePassed) {
    case 'program':
      userData.push({ 'title': title,
                      'description': description,
                      'workoutName':[]
                    });
      break;
    case 'workout': 
      alert(title);
      break;
    case 'exercise': 
      alert(title);
      break;
  }
  let backAction = NavigationActions.back()
  this.props.navigation.dispatch(backAction)
  return;
} 
}</code></pre>
</div>
</div>
</p>
","7955453","","","","","2017-07-08 02:00:32","unsure how to forceupdate() react native for rerendering","<javascript><reactjs><react-native><react-navigation>","0","2","","",""
"46788269","1","","","2017-10-17 10:45:35","","3","113","<p>I'm working on sample react-native app. in that i have used the <code>&lt;NavigationExperimental.Navigator&gt;</code> initially in App.js file and installed the react-native-deprecated-custom-components for navigation but i'm getting the error <a href=""https://i.stack.imgur.com/jpIJO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jpIJO.png"" alt=""Navigation Error""></a></p>

<p>Can anyone please suggest me, how to solve this issue.</p>

<blockquote>
  <p>package.json</p>
</blockquote>

<pre><code>{
    ""name"": ""sampleApp"",
    ""version"": ""0.0.1"",
    ""private"": true,
    ""scripts"": {
        ""start"": ""node node_modules/react-native/local-cli/cli.js start"",
        ""test"": ""jest""
    },
    ""dependencies"": {
        ""react"": ""16.0.0-beta.5"",
        ""react-native"": ""0.49.3"",
        ""fiber-react-native-elevated-view"": ""^0.2.2"",
        ""moment"": ""^2.19.1"",
        ""react-native-communications"": ""^2.2.1"",
        ""react-native-datepicker-dialog"": ""0.0.6"",
        ""react-native-deprecated-custom-components"": ""^0.1.1"",
        ""react-native-easy-grid-view"": ""^0.1.1"",
        ""react-native-elevated-view"": ""0.0.4"",
        ""react-native-linear-gradient"": ""^2.3.0"",
        ""react-native-maps"": ""^0.16.4"",
        ""react-native-modal-picker"": ""0.0.16"",
        ""react-native-modal-selector"": ""0.0.20"",
        ""react-navigation"": ""^1.0.0-beta.13""
    },
    ""devDependencies"": {
        ""babel-jest"": ""21.2.0"",
        ""babel-preset-react-native"": ""4.0.0"",
        ""jest"": ""21.2.1"",
        ""react-test-renderer"": ""16.0.0-beta.5""
    },
    ""jest"": {
        ""preset"": ""react-native""
    }
}
</code></pre>

<blockquote>
  <p>Hi @Stan Sarr i got error in ./node_modules/react-native-deprecated-custom-components/NavigatorBreadcrumbNavigationBar.js file 
   component</p>
</blockquote>

<pre><code>'use strict';

import {
  Platform,
  StyleSheet,
  View,
  ViewPropTypes,
} from 'react-native';
import React from 'react';
</code></pre>

<p>import PropTypes from 'prop-types';</p>

<pre><code>const NavigatorBreadcrumbNavigationBarStyles = require('./NavigatorBreadcrumbNavigationBarStyles');
const NavigatorNavigationBarStylesAndroid = require('./NavigatorNavigationBarStylesAndroid');
const NavigatorNavigationBarStylesIOS = require('./NavigatorNavigationBarStylesIOS');

const guid = require('./guid');
const invariant = require('fbjs/lib/invariant');

const { Map } = require('immutable');

const Interpolators = NavigatorBreadcrumbNavigationBarStyles.Interpolators;
const NavigatorNavigationBarStyles = Platform.OS === 'android' ?
  NavigatorNavigationBarStylesAndroid : NavigatorNavigationBarStylesIOS;


/**
 * Reusable props objects.
 */
const CRUMB_PROPS = Interpolators.map(() =&gt; ({style: {}}));
const ICON_PROPS = Interpolators.map(() =&gt; ({style: {}}));
const SEPARATOR_PROPS = Interpolators.map(() =&gt; ({style: {}}));
const TITLE_PROPS = Interpolators.map(() =&gt; ({style: {}}));
const RIGHT_BUTTON_PROPS = Interpolators.map(() =&gt; ({style: {}}));


function navStatePresentedIndex(navState) {
  if (navState.presentedIndex !== undefined) {
    return navState.presentedIndex;
  }
  // TODO: rename `observedTopOfStack` to `presentedIndex` in `NavigatorIOS`
  return navState.observedTopOfStack;
}


/**
 * The first route is initially rendered using a different style than all
 * future routes.
 *
 * @param {number} index Index of breadcrumb.
 * @return {object} Style config for initial rendering of index.
 */
function initStyle(index, presentedIndex) {
  return index === presentedIndex ? NavigatorBreadcrumbNavigationBarStyles.Center[index] :
    index &lt; presentedIndex ? NavigatorBreadcrumbNavigationBarStyles.Left[index] :
    NavigatorBreadcrumbNavigationBarStyles.Right[index];
}

class NavigatorBreadcrumbNavigationBar extends React.Component {
  static propTypes = {
    navigator: PropTypes.shape({
      push: PropTypes.func,
      pop: PropTypes.func,
      replace: PropTypes.func,
      popToRoute: PropTypes.func,
      popToTop: PropTypes.func,
    }),
    routeMapper: PropTypes.shape({
      rightContentForRoute: PropTypes.func,
      titleContentForRoute: PropTypes.func,
      iconForRoute: PropTypes.func,
    }),
    navState: React.PropTypes.shape({
      routeStack: React.PropTypes.arrayOf(React.PropTypes.object),
      presentedIndex: React.PropTypes.number,
    }),
    style: ViewPropTypes.style,
  };

  static Styles = NavigatorBreadcrumbNavigationBarStyles;

  _updateIndexProgress(progress, index, fromIndex, toIndex) {
    var amount = toIndex &gt; fromIndex ? progress : (1 - progress);
    var oldDistToCenter = index - fromIndex;
    var newDistToCenter = index - toIndex;
    var interpolate;
    invariant(
      Interpolators[index],
      'Cannot find breadcrumb interpolators for ' + index
    );
    if (oldDistToCenter &gt; 0 &amp;&amp; newDistToCenter === 0 ||
        newDistToCenter &gt; 0 &amp;&amp; oldDistToCenter === 0) {
      interpolate = Interpolators[index].RightToCenter;
    } else if (oldDistToCenter &lt; 0 &amp;&amp; newDistToCenter === 0 ||
               newDistToCenter &lt; 0 &amp;&amp; oldDistToCenter === 0) {
      interpolate = Interpolators[index].CenterToLeft;
    } else if (oldDistToCenter === newDistToCenter) {
      interpolate = Interpolators[index].RightToCenter;
    } else {
      interpolate = Interpolators[index].RightToLeft;
    }

    if (interpolate.Crumb(CRUMB_PROPS[index].style, amount)) {
      this._setPropsIfExists('crumb_' + index, CRUMB_PROPS[index]);
    }
    if (interpolate.Icon(ICON_PROPS[index].style, amount)) {
      this._setPropsIfExists('icon_' + index, ICON_PROPS[index]);
    }
    if (interpolate.Separator(SEPARATOR_PROPS[index].style, amount)) {
      this._setPropsIfExists('separator_' + index, SEPARATOR_PROPS[index]);
    }
    if (interpolate.Title(TITLE_PROPS[index].style, amount)) {
      this._setPropsIfExists('title_' + index, TITLE_PROPS[index]);
    }
    var right = this.refs['right_' + index];

    const rightButtonStyle = RIGHT_BUTTON_PROPS[index].style;
    if (right &amp;&amp; interpolate.RightItem(rightButtonStyle, amount)) {
      right.setNativeProps({
        style: rightButtonStyle,
        pointerEvents: rightButtonStyle.opacity === 0 ? 'none' : 'auto',
      });
    }
  }

  updateProgress(progress, fromIndex, toIndex) {
    var max = Math.max(fromIndex, toIndex);
    var min = Math.min(fromIndex, toIndex);
    for (var index = min; index &lt;= max; index++) {
      this._updateIndexProgress(progress, index, fromIndex, toIndex);
    }
  }

  onAnimationStart(fromIndex, toIndex) {
    var max = Math.max(fromIndex, toIndex);
    var min = Math.min(fromIndex, toIndex);
    for (var index = min; index &lt;= max; index++) {
      this._setRenderViewsToHardwareTextureAndroid(index, true);
    }
  }

  onAnimationEnd() {
    var max = this.props.navState.routeStack.length - 1;
    for (var index = 0; index &lt;= max; index++) {
      this._setRenderViewsToHardwareTextureAndroid(index, false);
    }
  }

  _setRenderViewsToHardwareTextureAndroid(index, renderToHardwareTexture) {
    var props = {
      renderToHardwareTextureAndroid: renderToHardwareTexture,
    };

    this._setPropsIfExists('icon_' + index, props);
    this._setPropsIfExists('separator_' + index, props);
    this._setPropsIfExists('title_' + index, props);
    this._setPropsIfExists('right_' + index, props);
  }

  componentWillMount() {
    this._reset();
  }

  render() {
    var navState = this.props.navState;
    var icons = navState &amp;&amp; navState.routeStack.map(this._getBreadcrumb);
    var titles = navState.routeStack.map(this._getTitle);
    var buttons = navState.routeStack.map(this._getRightButton);

    return (
      &lt;View
        key={this._key}
        style={[styles.breadCrumbContainer, this.props.style]}&gt;
        {titles}
        {icons}
        {buttons}
      &lt;/View&gt;
    );
  }

  immediatelyRefresh() {
    this._reset();
    this.forceUpdate();
  }

  _reset() {
    this._key = guid();
    this._descriptors = {
      title: new Map(),
      right: new Map(),
    };
  }

  _getBreadcrumb = (route, index) =&gt; {
    /**
     * To prevent the case where titles on an empty navigation stack covers the first icon and
     * becomes partially unpressable, we set the first breadcrumb to be unpressable by default, and
     * make it pressable when there are multiple items in the stack.
     */
    const pointerEvents = (
      (this.props.navState.routeStack.length &lt;= 1 &amp;&amp; index === 0) ?
      'none' :
      'auto'
    );
    const navBarRouteMapper = this.props.routeMapper;
    const firstStyles = initStyle(index, navStatePresentedIndex(this.props.navState));

    var breadcrumbDescriptor = (
      &lt;View
        key={'crumb_' + index}
        pointerEvents={pointerEvents}
        ref={'crumb_' + index}
        style={firstStyles.Crumb}&gt;
        &lt;View ref={'icon_' + index} style={firstStyles.Icon}&gt;
          {navBarRouteMapper.iconForRoute(route, this.props.navigator)}
        &lt;/View&gt;
        &lt;View ref={'separator_' + index} style={firstStyles.Separator}&gt;
          {navBarRouteMapper.separatorForRoute(route, this.props.navigator)}
        &lt;/View&gt;
      &lt;/View&gt;
    );

    return breadcrumbDescriptor;
  };

  _getTitle = (route, index) =&gt; {
    if (this._descriptors.title.has(route)) {
      return this._descriptors.title.get(route);
    }

    var titleContent = this.props.routeMapper.titleContentForRoute(
      this.props.navState.routeStack[index],
      this.props.navigator
    );
    var firstStyles = initStyle(index, navStatePresentedIndex(this.props.navState));

    var titleDescriptor = (
      &lt;View
        key={'title_' + index}
        ref={'title_' + index}
        style={firstStyles.Title}&gt;
        {titleContent}
      &lt;/View&gt;
    );
    this._descriptors.title = this._descriptors.title.set(route, titleDescriptor);
    return titleDescriptor;
  };

  _getRightButton = (route, index) =&gt; {
    if (this._descriptors.right.has(route)) {
      return this._descriptors.right.get(route);
    }
    var rightContent = this.props.routeMapper.rightContentForRoute(
      this.props.navState.routeStack[index],
      this.props.navigator
    );
    if (!rightContent) {
      this._descriptors.right = this._descriptors.right.set(route, null);
      return null;
    }
    var firstStyles = initStyle(index, navStatePresentedIndex(this.props.navState));
    var rightButtonDescriptor = (
      &lt;View
        key={'right_' + index}
        ref={'right_' + index}
        style={firstStyles.RightItem}&gt;
        {rightContent}
      &lt;/View&gt;
    );
    this._descriptors.right = this._descriptors.right.set(route, rightButtonDescriptor);
    return rightButtonDescriptor;
  };

  _setPropsIfExists(ref, props) {
    var ref = this.refs[ref];
    ref &amp;&amp; ref.setNativeProps(props);
  }
}

const styles = StyleSheet.create({
  breadCrumbContainer: {
    overflow: 'hidden',
    position: 'absolute',
    height: NavigatorNavigationBarStyles.General.TotalNavHeight,
    top: 0,
    left: 0,
    right: 0,
  },
});

module.exports = NavigatorBreadcrumbNavigationBar;
</code></pre>
","7017261","","7017261","","2017-10-18 04:54:30","2017-10-18 04:54:30","Getting Navigation Error for created app in react-native","<react-native><react-native-navigation>","1","3","","",""
"29314796","1","","","2015-03-28 07:32:42","","1","280","<p>React.Component def : 
<a href=""https://facebook.github.io/react/docs/top-level-api.html#react.component"" rel=""nofollow"">https://facebook.github.io/react/docs/top-level-api.html#react.component</a></p>

<p>ReactComponent api : <a href=""https://facebook.github.io/react/docs/component-api.html"" rel=""nofollow"">https://facebook.github.io/react/docs/component-api.html</a></p>

<p>Examples :  <a href=""https://facebook.github.io/react/docs/reusable-components.html#es6-classes"" rel=""nofollow"">https://facebook.github.io/react/docs/reusable-components.html#es6-classes</a></p>

<p>What i tried so far ..</p>

<pre><code>object React  extends js.Object{

  type Component[P,S] = ReactComponent[P,S]

}

class ReactComponent[P,S] extends js.Object {

  def this(props : P) = this()

  def setState(newState : S) : Unit = js.native

  def forceUpdate() : Unit = js.native

}
</code></pre>

<p>when i am trying this </p>

<pre><code> class Hello extends React.Component {

  }
</code></pre>

<p>i am getting undefined is not a function .  I am doing something terribly wrong! because i can't figure out right way...</p>
","986387","","","","","2015-03-28 18:22:46","how to write facade for reactjs 0.13 React.Component scalajs","<scala.js>","1","0","","",""
"47236096","1","","","2017-11-11 08:53:02","","0","34","<p>I am creating a interview form using reactjs and firebase.
In which i have a form and when a submit the data of user it print in table. and data are fetch from the firebase.
when i filter those data by date and round selection tha data are showing repeated data in table.
so i just want to know what i am doing wrong that data are fetch but multiple times in table.
Here is my Code:</p>

<pre><code>filterByInterviewer() {
  if (this.state.iround == '') {
    alert(""Please choose Round"");
    return false;
  }
  self.state.printdate = [];
  self.state.printabledata = [];
  self.state.round = [];
  self.state.both = [];
  var arr_email = [];
  self.state.records.forEach(function (val) {
    if (val.Round == self.state.iround &amp;&amp; self.state.date == '') {
      var arrayvar = self.state.round;
      arrayvar = self.viewall(arrayvar, val);
      self.setState({
        printtabledata: ''
      });
      self.setState({
        round: arrayvar
      });
      self.setState({
        printdate: ''
      });
      self.setState({
        both: ''
      });
    }
    else if (val.Round == self.state.iround &amp;&amp; self.state.date == val.Date) {
      var arrayvar = self.state.both;
      arrayvar = self.viewall(arrayvar, val);
      self.setState({
        printtabledata: ''
      });
      self.setState({
        both: arrayvar
      });
      self.setState({
        printdate: ''
      });
      self.setState({
        round: ''
      });
    }
  });
  this.forceUpdate();
}
</code></pre>

<hr>

<pre><code>viewall(arrayvar, val) {
  var arr_email = [];
  if (arr_email.indexOf(val.Email) == -1) {
    arrayvar.push(
      &lt;tr&gt;
        &lt;td&gt;{val.Name}&lt;/td&gt;
        &lt;td&gt;{val.Round}&lt;/td&gt;
        &lt;td&gt;{val.Email}&lt;/td&gt;
        &lt;td&gt;{val.Date}&lt;/td&gt;
        &lt;td&gt;{val.Phone}&lt;/td&gt;
        &lt;td&gt;{val.Address}&lt;/td&gt;
        &lt;td&gt;{val.Gender}&lt;/td&gt;
        &lt;td&gt;{val.Fresh}&lt;/td&gt;
        &lt;td&gt;{val.time}&lt;/td&gt;
      &lt;/tr&gt;
    );
    arr_email.push(val.Email);
  }
  return arrayvar;
}                   
</code></pre>

<p>Here is all record show:</p>

<pre><code>allRecordShow() {
  self.state.printabledata = [];
  self.state.printdate = [];
  self.state.round = [];
  self.state.both = [];
  var arr_email = [];
  self.state.records.forEach(function (val) {
    var arrayvar = self.state.printabledata;
    self.setState({
      printabledata: self.viewall(arrayvar, val)
    });
    self.setState({
      printdate: ''
    });
  });
  self.forceUpdate();
}
</code></pre>
","8923442","","2315280","","2017-11-11 09:00:44","2017-11-11 09:00:44","How to remove repeated data fetch in table using reactjs and firebase?","<javascript><reactjs><react-native><foreach>","0","0","","",""
"46518155","1","","","2017-10-02 00:27:14","","1","454","<p>I am trying to push elements to an array of objects in the component state (in react.js), i am calling the method Array.concat wich returns a new array. </p>

<pre><code>pushDeck(id, name) {
  var newDeck = [{
    id: id,
    name: name
  }];
  console.log(""new path should be: "", this.state.path.concat(newDeck));
  this.setState({
    path: this.state.path.concat(newDeck)
  }, () =&gt; {
    console.log(""setstate callback: "", this.state.path);
  });
}
</code></pre>

<p>the first console.log prints the correct value for the path array, but after the callback for setstate is called, the second console.log prints an empty array. It's like this.setState were doing nothing</p>

<p>For more details:
I call pushDeck from a grandChild component, i give the function pushDeck as a prop to the component DeckGallery and this one gives the function to one of its children. here is the entire main component:</p>

<pre><code>import React, {Component} from ""react"";
import Page from ""../components/page.jsx"";
import Radium from ""radium"";
import {connect} from ""react-redux"";
import {getUserInfo} from ""../actions/user"";
import {successAlert} from ""../actions/alerts"";
import {fetchUserDecks, deleteUserDeck} from ""../actions/deck.js"";
import RaisedButton from 'material-ui/RaisedButton';
import CreateUserDeckContainer from ""../containers/createUserDeckContainer.jsx"";
import DeckGallery from ""../components/deckGallery.jsx"";
import _ from ""lodash"";

const style = {
    row1:{
        margin: ""5px""
    },
    path:{
        color: ""blue"",
        cursor: ""pointer""
    }
}


class Home extends Component{

    constructor(props){
        console.log(""home constructor"");
        super(props);
        this.state = {parentId:null, path:[]};
        this.fetchDecks = this.fetchDecks.bind(this);
        this.renderPath = this.renderPath.bind(this);
        this.goToIndex = this.goToIndex.bind(this);
        this.onDelete = this.onDelete.bind(this);
        this.pushDeck = this.pushDeck.bind(this);
    }

    componentWillMount(){
        console.log(""will mount"");
        this.props.getUserInfo();
    }

    fetchDecks(skip){
        console.log(""fetch decks"");
        this.props.fetchUserDecks(this.state.parentId, skip, this.state.path);
    }

    goToIndex(pathLastIndex){
        console.log(""goto index"", this.state.path);
        var limitToDrop = this.state.path.length - pathLastIndex;
        var newPath = _.dropRight(this.state.path, limitToDrop);
        this.setState({path: newPath});
    }

    pushDeck(id, name){
        var newDeck = [{id: id, name: name}];
        console.log(""new path should be: "", Array.from(new Set(this.state.path.concat(newDeck))));
        this.setState({path: Array.from(new Set(this.state.path.concat(newDeck)))},
            ()=&gt;{
            console.log(""setstate callback: "", this.state.path);
        });
    }

    componentWillUpdate(nextProps, nextState){
        console.log(""nextstate: "",  nextState);
    }

    renderPath(){
        return (
            &lt;div&gt;
                &lt;span onClick={()=&gt;this.goToIndex(0)} style={style.path}&gt;Root&lt;/span&gt;
                {this.state.path.map((p, i)=&gt;{
                    &lt;span key={(i+1)} onClick={()=&gt;this.goToIndex(i+1)} style={style.path}&gt;{p.name}&lt;/span&gt;
                    })
                }
            &lt;/div&gt;
        );
    }

    onDelete(deckId){
        console.log(""on delete"");
        this.props.deleteUserDeck(deckId, this.state.path, ()=&gt;{
            this.props.successAlert(""Deck deleted succesfully !"");
            this.forceUpdate();
        });
    }

    render(){
        console.log(""path at render: "", this.state.path);
        return (
            &lt;Page name=""my collection""&gt;
                &lt;div className=""container""&gt;
                    &lt;div style={style.row1} className=""row""&gt;
                        &lt;div className=""col-lg-9  col-sm-6""&gt;
                            &lt;h2&gt;Your decks&lt;/h2&gt;
                             Path: {this.renderPath()}
                        &lt;/div&gt;
                        &lt;div className=""col-lg-3 col-sm-6""&gt;
                            &lt;CreateUserDeckContainer path={this.state.path}/&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div className=""row""&gt;
                        &lt;div className=""col""&gt;
                            &lt;DeckGallery pushDeck={this.pushDeck} onDelete={this.onDelete} path={this.state.path} fetch={this.fetchDecks} decks={this.props.decks}/&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/Page&gt;
        );
    }
}

function mapStateToProps(state){
    return {decks: state.userDecks};
}

export default connect(mapStateToProps, {getUserInfo, fetchUserDecks, deleteUserDeck, successAlert})(Radium(Home));
</code></pre>

<p><strong>Update:</strong> I isolated the error to just this:</p>

<pre><code>goToIndex(that){
        console.log(""path at gotoindex: ""+ JSON.stringify(that.state.path));
    }

    renderPath(){
        var that = this;
        console.log(""path at renderpath: ""+ JSON.stringify(that.state.path));   
        setTimeout(()=&gt;{
            that.goToIndex(that);
        }, 0);
        that.goToIndex(that);
    }
</code></pre>

<p>When i call render this is what gets printed in the console:</p>

<pre><code>path at renderpath: [{""id"":""59cec39e3724bc137d935ed5"",""name"":""math""}]
path at gotoindex: [{""id"":""59cec39e3724bc137d935ed5"",""name"":""math""}]
path at gotoindex: []
</code></pre>

<p>the last line is printed when goToIndex is called from inside setTimeout, it should print the same thing than when called outside setTimeout.
also, i putted a console.log in componentWillUpdate to see if the state was changing in the middle of both calls but is doesn't happen.</p>
","5332229","","5332229","","2017-10-03 01:38:12","2018-05-12 08:01:30","react setstate not working when pushing elements to array","<reactjs>","3","9","2","",""
"38941360","1","","","2016-08-14 10:33:51","","0","1518","<p>I am trying to build a web app where I am trying to call a function on button click. I am using react-engine as templating engine using JSX pages. Below is my layout.jsx page</p>

<pre><code>import React from 'react';
import Success from ""./components/success.jsx""; 
import ReactDOM from 'react-dom'; 

class Layout extends React.Component {
    constructor(props) {
        super(props);
        this.displayName = 'Layout';
        this.state = {data:[]};
        //this.arrayHandler = this.arrayHandler.bind(this);
        this.forceUpdateHandler = this.forceUpdateHandler.bind(this);
        this.printHandler = this.printHandler.bind(this);

    }

    /*function submitter(){
        //console.log(""in submitter function"", user.value);
    },*/
    /*arrayHandler(){
        var item = ""first item"";
        var myArray = this.state.data;
        myArray.push(item);
        this.setState({data:myArray})
    }*/

    forceUpdateHandler(){
        return this.forceUpdate();
    }

    printHandler(){
        return this.displayName = ""Sourav"";
    }

    render() {
        return (
            &lt;html&gt;
                &lt;head&gt;
                    &lt;title&gt;JSX&lt;/title&gt;
                &lt;/head&gt;

                &lt;body&gt;
                    &lt;h1&gt;Welcome to React JSX Page&lt;/h1&gt;
                    &lt;div id = ""maincontent""&gt;

                        &lt;Message msg = ""Displaying message""/&gt; 
                        &lt;p id = ""para""&gt;&lt;/p&gt; 
                        &lt;Success successMsg = ""Transaction successful""/&gt;
                        &lt;h2&gt;Arrays: {this.props.propArray}&lt;/h2&gt;
                        &lt;h2&gt;Objects: {this.props.propObject.objectName1}&lt;/h2&gt;

                        &lt;input type = ""button"" onClick = {this.props.propHandler} value = ""Add items""/&gt;
                        &lt;h3&gt;State Arrays: {this.state.data}&lt;/h3&gt;

                        &lt;button onClick = {this.forceUpdateHandler}&gt;FORCE UPDATE&lt;/button&gt;
                        &lt;h4&gt;Random number: {Math.random()}&lt;/h4&gt;

                        &lt;button onClick = {this.printHandler}&gt;Show name&lt;/button&gt;
                        &lt;p&gt;{this.displayName}&lt;/p&gt;

                    &lt;/div&gt;
                &lt;/body&gt;

            &lt;/html&gt;
            );
    }
}

Layout.propTypes = {
    propArray: React.PropTypes.array.isRequired,
    propObject: React.PropTypes.object,
    propHandler: React.PropTypes.func
}

Layout.defaultProps = {
    propArray: [1,2,3,4,5],
    propHandler: function arrayHandler(){
                    var item = ""first item"";
                    var myArray = this.state.data;
                    myArray.push(item);
                    this.setState({data:myArray})
                },
    propObject: {
      objectName1:""objectValue1"",
      objectName2: ""objectValue2"",
      objectName3: ""objectValue3""
   }
}

class Message extends React.Component{
    render(){
        return(
            &lt;div&gt;
                &lt;h2&gt;{this.props.msg}&lt;/h2&gt;
            &lt;/div&gt;
            )
    }
}



//ReactDOM.render(&lt;Layout/&gt;, );


export default Layout;
</code></pre>

<p>i have tried calling the function using both this.props as well as calling directly after binding this to it. However, both the approaches did not work.</p>

<p>Could you please help me with this. I am totally stuck here.</p>
","5568862","","","","","2016-08-14 13:06:57","onClick button event handler not working when using react.js JSX pages","<javascript><node.js><reactjs><react-jsx><react-engine>","1","3","1","",""
"30883435","1","31460257","","2015-06-17 06:06:16","","0","170","<p>I react-native's SegmentedControlIOS component for choosing between three values which works fine so far. However, when my application is loading data I want to ensure that the user can not change the value associated with that control as this would cause concurrency issues and interrupts the update.</p>

<p>Thus I decided that the method for handling the control's value change only calls the callback supplied via a property if the loading process is currently not active. Otherwise, I call <code>this.forceUpdate()</code> in order to rerender the host component which includes setting the <code>selectedIndex</code> property of the segmented control. However, when <code>this.forceUpdate</code> is invoked the selected index does not change. Therefore, I decided to print the value <code>selectedIndex</code>is set to which always displays the initial (wished) index.</p>

<p>Below you can see the code of my <code>rendering</code> method for displaying the segmented control:</p>

<pre><code>render: function()
{
    ...
    var indexBluetoothAutostart = 0;
    switch (this.props.data.BluetoothAutostartState)
    {
        case BluetoothAutostartState.OFF:
            indexBluetoothAutostart = 1;
            break;
        case BluetoothAutostartState.ON:
            indexBluetoothAutostart = 2;
            break;
        case BluetoothAutostartState.AUTO:
            indexBluetoothAutostart = 0;
            break;
    }
    console.log(""index: "" + indexBluetoothAutostart);
    ...
    return (
        ...
        &lt;SegmentedControlIOS selectedIndex={indexBluetoothAutostart}
            momentary={false}
            onValueChange={(newValue) =&gt; this.changeBluetoothAutostartState(newValue)}
            values={[Localization.HomeFragment.BluetoothAutostartState.btnAuto, Localization.HomeFragment.BluetoothAutostartState.btnOff, Localization.HomeFragment.BluetoothAutostartState.btnOn]}/&gt;
    );
}
</code></pre>

<p>Finally, the following snippet shows the <code>onValueChange</code> handler:</p>

<pre><code>changeBluetoothAutostartState: function(newValue)
{
    if (newValue === Localization.HomeFragment.BluetoothAutostartState.btnAuto)
    {
        if (this.props.bluetoothConnectionBusy === true)
        {
            Toast.display(Localization.BluetoothOperationInProgress.msgWaitForUploadToFinishToast);
            this.forceUpdate();
        }
        else
        {
            this.props.onBluetoothAutostartStateChange(BluetoothAutostartState.AUTO);
        }
    }
    // process the other two options
    ...
}
</code></pre>

<p>I appreciate any help. Thanks in advance.</p>
","4408431","","4408431","","2015-06-18 10:06:19","2015-07-16 16:57:24","SegmentedControlIOS forceUpdate","<javascript><reactjs><react-native>","1","0","","",""
"38490303","1","38494287","","2016-07-20 20:30:39","","1","730","<p>im tryin to integrate Jquery custom scrollbar plugin <a href=""http://manos.malihu.gr/jquery-custom-content-scroller/"" rel=""nofollow"">here</a> in react. here is my code </p>

<pre><code>import $ from ""jquery"";
import mCustomScrollbar from 'malihu-custom-scrollbar-plugin';
.....
 componentDidMount: function() {
     // fixed sidebar
        var self = this;
        mCustomScrollbar($);
        $(ReactDom.findDOMNode(this.refs.menu_fixed)).mCustomScrollbar({
            autoHideScrollbar: true,
            theme: 'minimal',
            mouseWheel:{ preventDefault: true }
        });
        self.forceUpdate();
  },
</code></pre>

<p>i get this error <em>index.jsx:51 Uncaught TypeError: (0 , _malihuCustomScrollbarPlugin2.default) is not a function</em> </p>

<p>did somebody can help to make it work thanks</p>
","3846352","","","","","2016-10-08 23:29:21","Reactjs: jQuery custom content scroller with reactjs","<javascript><jquery><reactjs>","2","2","","",""
"39739883","1","40254666","","2016-09-28 06:45:00","","2","561","<blockquote>
  <p>In react-native, I want to disable drawer on <code>Login</code> and enable drawer
  on <code>Dashboard</code> Screen. I have implemented <code>'react-native-drawer'</code> with
  <code>Navigator</code> to navigate between routes.</p>
</blockquote>

<p><strong>render method as follows:</strong></p>

<pre><code>render() {
      &lt;Drawer
                ref={(ref) =&gt; this._drawer = ref}
                disabled={!this.state.drawerEnabled}
                type=""overlay""
                content={&lt;Menu navigate={(route) =&gt; {
                    this._navigator.push(navigationHelper(route));
                    this._drawer.close()
                }}/&gt;}
                tapToClose={true}
                openDrawerOffset={0.2}
                panCloseMask={0.2}
                closedDrawerOffset={-3}
                styles={{
                    drawer: {shadowColor: '#000000', shadowOpacity: 0.8, shadowRadius: 3},
                    main: {paddingLeft: 3}
                }}
                tweenHandler={(ratio) =&gt; ({
                    main: { opacity:(2-ratio)/2 }
                })}&gt;
                &lt;Navigator
                    ref={(ref) =&gt; this._navigator = ref}
                    configureScene={(route) =&gt; Navigator.SceneConfigs.FloatFromLeft}
                    initialRoute={{
                        id: 'Login',
                        title: 'Login',
                        index: 0
                    }}
                    renderScene={(route, navigator) =&gt; this._renderScene(route, navigator)}
                    navigationBar={
                        &lt;Navigator.NavigationBar
                            style={styles.navBar}
                            routeMapper={NavigationBarRouteMapper} /&gt;
                    }
                /&gt;
            &lt;/Drawer&gt;
      );
  }
</code></pre>

<p><strong>renderScene as follows to navigate the routes:</strong></p>

<pre><code>_renderScene(route, navigator) {
    navigator.navigate = self.navigate;
        switch (route.id) {
            case 'Login':
                return ( &lt;Login navigator={navigator}/&gt; );

            case 'Dashboard':
                    return ( &lt;Dashboard navigator={navigator}/&gt; );
        }
    }
</code></pre>

<p><strong>I have written one method to enable and disable drawer in react-native:</strong></p>

<pre><code>navigate(route, method){
        if(route)
        switch (route.id) {
            case 'Login':
            this.state = {drawerEnabled: false, navigationBarEnabled: false};
            break;

            case 'Dashboard':
            this.state = {drawerEnabled: true, navigationBarEnabled: true};
            break;
        }

          this.forceUpdate();
          this.refs.navigator[method](route);
      }
}
</code></pre>

<p><strong>Initially I have set property in class and in constructor, navigate method was called.</strong> </p>

<pre><code>state = {drawerEnabled:true, navigationBarEnabled: true};

  constructor(){
    super();
    this.navigate = this.navigate.bind(this);
  }
</code></pre>

<p>Then which would be possible way to disable drawer on <code>Login</code> menu and enable it on <code>Dashboard</code> Screen.</p>
","3686398","","","","","2016-10-26 05:52:20","How to set 'react-native-drawer' visible only to Dashboard after login in react-native","<ios><react-native><drawer><navigator>","2","0","1","",""
"47608834","1","47655445","","2017-12-02 14:20:27","","0","79","<p>I am using react-native-sortable-listview in react-native for sorting same places.</p>

<pre><code> constructor() {
   this.state = {
     makers: [
       { kolkata: 'Hawrah Birdge' },
      { Delhi: 'Lal Kila' },
      { Agra: 'Taj Mahal' },
      { Mumbai: 'India Gate' },
     ],
     allObj: {},
     order: []
   };
 }
 componentDidMount() {
   const newAllObj = this.getAllObjFromMaker(this.state.makers);
   const newOrder = this.getOrderFromMaker(newAllObj);
   this.setState({ allObj: newAllObj, order: newOrder });
 }
 getAllObjFromMaker(makers) {
    const allObj = makers.reduce((result, d) =&gt; {
    result[`${d.coordinate.latitude}_${d.coordinate.longitude}`] = d;
    return result;
   }, {});
  return allObj;
 }
getOrderFromMaker(allObj) {
  const order = Object.keys(allObj);
  return order;
}
 renderOneDraggableMilestone(milestone) {
  const i = this.state.makers.indexOf(milestone);
  return (
     &lt;TouchableOpacity {...this.props.sortHandlers}&gt;
        &lt;Text&gt;{i + 1}&lt;/Text&gt;        
        &lt;Text&gt;{milestone.address}&lt;/Text&gt;
     &lt;/TouchableOpacity&gt;
    );
  }
  arrangedMilestoneList(e) {
    const arr = this.state.makers;
    arr.splice(e.to, 0, arr.splice(e.from, 1)[0]);
    const newAllObj = this.getAllObjFromMaker(arr);
    const newOrder = this.getOrderFromMaker(newAllObj);
    this.setState({ makers: arr, allObj: newAllObj, order: newOrder 
     });
   }
 render() {
   return (
     &lt;SortableListView
      data={this.state.allObj}
      order={this.state.order}
      activeOpacity={0.5}
      onRowMoved={e =&gt; {
        this.arrangedMilestoneList(e);
        this.forceUpdate();
      }}
      renderRow={(row) =&gt; this.renderOneDraggableMilestone(row)}
    /&gt;
   );    
 }
</code></pre>

<p>I want to arrange places and also their position in this.state.makers as I am doing using i in renderOneDraggableMilestone. On renderRow only draggable place are render so only their position is updated. And renderRow is last to excute so forceUpdate is also not working.</p>

<p>How to rerender after executing renderRow. So all position could be updated.</p>
","6350756","","","","","2017-12-05 14:00:54","Update position of All places in react-native-sortable-listview","<react-native>","1","0","","",""
"39902980","1","39916281","","2016-10-06 18:14:55","","0","93","<p>I am using <a href=""https://facebook.github.io/react-native/docs/direct-manipulation.html"" rel=""nofollow"">direct manipulation</a> to change the color of a view, every time a specific event occurs.</p>

<p>My render function:</p>

<pre><code>  render() {
    return (
      &lt;View&gt;
        &lt;View
          ref={component =&gt; this._view = component}
          style={{width: 50, height: 50}} /&gt;
      &lt;/View&gt; 
    );
</code></pre>

<p>My update function that is called every time a specific event occurs:</p>

<pre><code>  onSlideChangeHandle(index) {
    this._view.backgroundColor = 'red'
    this._view.forceUpdate()
  }
</code></pre>

<p>Do I need to do something more to force the component to change the color? The method is called, and the property is updated. Unfortunately, the UI is not updated calling the force update. Do I miss something? I know I should use the state to update the components, but for this specific case I really need direct manipulation.</p>
","3482000","","3482000","","2016-10-06 23:05:13","2016-10-07 11:36:09","Component does not get updated after calling `this.forceUpdate();`","<react-native>","1","1","","",""
"47921783","1","","","2017-12-21 09:25:59","","1","533","<p>I am new to React, so this is probably just a beginner's mistake.</p>

<p>In summary, it's throwing the error/warning mentioned and it is running fetch twice. It ends up with the correct final result though. </p>

<p>The set up is a page to show basic user profile information, with functionality to change profile to be added later.</p>

<p>Details:</p>

<ul>
<li><p>componentDidMount seems to be called once, as per the console.log output below</p></li>
<li><p>fetch is called twice, for whatever reason. Both times it gets the correct info from remote</p></li>
<li><p>this.setState({account.data.data[0]}) fails the first time around and throws the error. This is particularly strange as <strong>it suggests the component is not mounted while it is called within componentDidMount</strong>.
The second time fetch and setState run it updates state correctly.</p></li>
</ul>

<p>The exact error message:</p>

<blockquote>
  <p>Warning: Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op.</p>
</blockquote>

<p>This is the main component:</p>

<pre><code>class AccountTable extends React.Component{

constructor(props){
    super(props)
    this.state={
        account:{},
    }
}

componentDidMount(){
    console.log('componentDidMount');//outputs once
    fetch('/mon-compte-api', {
        method: 'get',
        credentials: 'same-origin'
    })
    .then((response) =&gt; {
        console.log('fetch'); // outputs twice 
        response.json().then((data) =&gt; {
            console.log('data', data);// correct output both times
            this.setState({account: data.data[0]}) // this throws the error
            console.log('state_account', this.state.account); 
// no output for this.state.account first time around. Correct output 2nd time 
        })       
    })
    .catch((err) =&gt; {
        console.log(err)
    });      
}

render(){
    return (
        &lt;table&gt;
                &lt;TableRow 
                   account={this.state.account} /&gt;
        &lt;/table&gt;
    );      
}
}

ReactDOM.render(&lt;AccountTable /&gt;,document.querySelector(""#react_account""));
</code></pre>

<p>This is the child component:</p>

<pre><code>const TableRow = (props) =&gt; {
if(Object.keys(props.account).length === 0){ //show something while awaiting fetch
    return (
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;Loading.....&lt;/td&gt;&lt;/tr&gt; // shows momentarily
        &lt;/tbody&gt;
        );
}else{
        return ( // outputs correct info eventually
            &lt;tbody&gt;
                &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;td&gt;{props.account.name}&lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;th&gt;Email&lt;/th&gt;&lt;td&gt;{props.account.email}&lt;/td&gt;&lt;/tr&gt;
            &lt;/tbody&gt;
        );  
}   
}
</code></pre>

<p>response info requested:</p>

<pre><code>Status code: 200 OK
Date: Thu, 21 Dec 2017 11:53:50 GMT
Server: Apache/2.2.32 (Unix) mod_wsgi/3.5 Python/2.7.13 PHP/7.1.8     mod_ssl/2.2.32 OpenSSL/1.0.2j DAV/2 mod_fastcgi/2.4.6 mod_perl/2.0.9  Perl/v5.24.0
X-Powered-By: PHP/7.1.8
Cache-Control: no-cache, private
Content-Length: 600
Keep-Alive: timeout=5, max=99
Connection: Keep-Alive
Content-Type: application/json
</code></pre>
","2127381","","2127381","","2017-12-21 11:58:09","2017-12-21 11:58:09","react error on componentDidMount -> Can only update a mounted or mounting component?","<reactjs><fetch>","0","4","","",""
"45972030","1","","","2017-08-31 01:47:28","","1","220","<p>Here is example very similar to the one documented in <a href=""https://facebook.github.io/react/docs/rendering-elements.html#updating-the-rendered-element"" rel=""nofollow noreferrer"">official docs</a>. Let's say we have a Clock component, which is presented as function (not class):</p>

<pre><code>//Clock.jsx
function Clock(props) {

  setInterval(()=&gt;{
     // ??? how to trigger forceUpdate/render here???
  }, 1000);


  return (
    &lt;div&gt;
      &lt;h2&gt;It is {new Date().toLocaleTimeString()}.&lt;/h2&gt;
    &lt;/div&gt;
  );
}
export default Clock;
</code></pre>

<p>And then let's say some parent component that import this file:</p>

<pre><code>//index.jsx
import Clock from 'Clock'

..
render(){ return (
  &lt;div&gt;
     &lt;Clock /&gt;
  &lt;/div&gt;);
}
..
</code></pre>

<p>Is there any way to do it without making Clock a class?</p>
","508797","","","","","2017-08-31 01:54:31","React: How to trigger forceUpdate/render of component as function (not class)?","<reactjs><asynchronous>","1","1","1","",""
"38034256","1","","","2016-06-26 00:45:30","","0","1446","<p>I'm using the react, redux react-router stack for my webapp. In the top level component's(the component that renders on the root path) <code>componentDidMount</code> I'm subscribing to the store as shown below</p>

<pre><code>import NotificationsList from './components/notifier';
import React from 'react';

let Spinner = ({
    isVisible,
    showSpinner,
    solidBackdrop
}) =&gt; (
    &lt;div style={{opacity: solidBackdrop ? 1 : 0.5}} className={""spinner "" + (isVisible ? '' : 'hide')}&gt;&lt;/div&gt;
);

export default class AppPage extends React.Component {
    static contextTypes = {
        store: React.PropTypes.object,
        router: React.PropTypes.object
    };

    handleDismissNotification(notification) {
        this.context.store.dispatch({
            type: 'REMOVE_NOTIFICATION',
            data: notification
        });
    }

    componentDidMount() {
        this.context.store.subscribe(() =&gt; this.forceUpdate());
    }

    render() {
        let state = this.context.store.getState();
        let props = {
            notifications: state.notifications,
            handleDismiss: this.handleDismissNotification.bind(this)
        };
        return (
            &lt;div className=""'apppage-container""&gt;
                {this.props.children}
                &lt;NotificationsList {...props} /&gt;
                &lt;Spinner isVisible={state.initialFetchInProgress || state.requestInProgress}
                         showSpinner={!state.initialFetchInProgress} solidBackdrop={state.initialFetchInProgress}/&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p><code>this.props.children</code> here renders the component shown below</p>

<pre><code>import Header from './components/header';
import React from 'react';

class ContentPage extends React.Component {
    static contextTypes = {
        store: React.PropTypes.object
    };

    render() {
        let user = this.context.store.getState().user;
        return &lt;div className=""content-container""&gt;
            &lt;Header user/&gt;
        &lt;/div&gt;
    }
}

export default ContentPage;
</code></pre>

<p>The problem is that when the first time a render happens, everything goes fine. Then when the render happens through <code>forceUpdate</code>, the child component is not getting re-rendered. </p>
","843241","","","","","2017-02-18 01:09:58","forceUpdate is not re-rendering children","<reactjs><redux><react-router>","2","1","1","",""
"48093185","1","48194941","","2018-01-04 10:22:32","","7","416","<p>I am using semantic-ui react to render a table of data. My requirement is that when the page is on mobile view, I hide certain columns. I tried using <code>className=""mobile hidden""</code> on the <code>Table.Cell</code> element but this doesn't seem to work at all. </p>

<p>Then I tried using the <code>Responsive</code> component like below but I am getting an error. Am I missing something here? Unable to find anyone else having this issue ...</p>

<pre><code>  &lt;Responsive as={Table.Cell} minWidth={Responsive.onlyMobile.minWidth}&gt;
     {record.datapoint}
  &lt;/Responsive&gt;
</code></pre>

<p>I get this error in the console when resizing the window...</p>

<pre><code>index.js:2177 Warning: Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op.

Please check the code for the Responsive component.
</code></pre>
","2700593","","2700593","","2018-01-05 13:09:31","2018-01-10 19:43:37","semantic-ui-react <Responsive> not working for <Table.Cell>","<javascript><reactjs><responsive><semantic-ui><semantic-ui-react>","1","0","1","",""
"29309243","1","","","2015-03-27 20:00:13","","0","238","<p>i am struggling for 2 days on this, i am trying to call imagesLoaded function (which is imported properly in the scripts area), but when calling it from inside a component prop, i get an error that it is indefined.</p>

<p>my code:</p>

<pre><code>    var MasonryContainer = React.createClass({

    imagesLoadedFunc: function() { //omitting the imageloaded call here fix everything
                  this.imagesloaded();
                  this.refs[reference].getDOMNode().imagesLoaded(function() {
                   this.masonry.layout()
                     });

    },
    componentDidMount: function() {
                if (!isBrowser) return;
                this.initializeMasonry();
                this.performLayout();
                this.imagesLoadedFunc();
            },

    componentDidUpdate: function() {
                if (!isBrowser) return;

                this.performLayout();
                this.imagesLoadedFunc(this);
            },

            domChildren: [],

    initializeMasonry: function(force) {
        if (!this.masonry || force) {
            this.masonry = new Masonry(this.refs[reference].getDOMNode(), options);
            this.domChildren = this.getNewDomChildren();
        }
    },

    getNewDomChildren: function () {
        var node = this.refs[reference].getDOMNode();
        var children = options.itemSelector ? node.querySelectorAll(options.itemSelector) : node.children;

        return Array.prototype.slice.call(children);
    },

    diffDomChildren: function() {
        var oldChildren = this.domChildren;
        var newChildren = this.getNewDomChildren();
        var removed = oldChildren.filter(function(oldChild) {
            return !~newChildren.indexOf(oldChild);
        });

        var added = newChildren.filter(function(newChild) {
            return !~oldChildren.indexOf(newChild);
        });

        var moved = [];

        if (removed.length === 0) {
            moved = oldChildren.filter(function(child, index) {
                return index !== newChildren.indexOf(child);
            });
        }
        this.domChildren = newChildren;
        return {
            old: oldChildren,
            'new': newChildren, // fix for ie8
            removed: removed,
            added: added,
            moved: moved
        };
    },

    performLayout: function() {
        var diff = this.diffDomChildren();

        if (diff.removed.length &gt; 0) {
            this.masonry.remove(diff.removed);
            this.masonry.reloadItems();
        }

        if (diff.added.length &gt; 0) {
            this.masonry.appended(diff.added);
        }

        if (diff.moved.length &gt; 0) {
            this.masonry.reloadItems();
        }

        this.masonry.layout();
    },


    componentWillReceiveProps: function() {
        setTimeout(function() {
            this.masonry.reloadItems();
            this.forceUpdate();
        }.bind(this), 0);
    },

    render: function () {
        return (
            &lt;div className=""content"" ref=""masonryContainer""&gt;
                &lt;div className='Item'&gt;
                    &lt;img src=""/img/gallery/3.jpg""&gt;&lt;/img&gt;
                &lt;/div&gt;
                &lt;div className='Item'&gt;
                    &lt;img src=""/img/gallery/11.jpg""&gt;&lt;/img&gt;
                &lt;/div&gt;
                &lt;div className='Item'&gt;
                    &lt;img src=""/img/gallery/12.jpg""&gt;&lt;/img&gt;
                &lt;/div&gt;
                &lt;div className='Item'&gt;
                    &lt;img src=""/img/gallery/12.jpg""&gt;&lt;/img&gt;
                &lt;/div&gt;
                &lt;img src=""/img/gallery/4.jpg""&gt;&lt;/img&gt;
                &lt;img src=""/img/gallery/5.jpg""&gt;&lt;/img&gt;
                &lt;img src=""/img/gallery/6.jpg""&gt;&lt;/img&gt;
                &lt;img src=""/img/gallery/7.jpg""&gt;&lt;/img&gt;
                &lt;img src=""/img/gallery/8.jpg""&gt;&lt;/img&gt;
                &lt;img src=""/img/gallery/9.jpg""&gt;&lt;/img&gt;
            &lt;/div&gt;
        );
    }
});
    React.render(
    &lt;MasonryContainer/&gt;, document.getElementById('reactbody')
    )
&lt;/script&gt;
</code></pre>

<p>if i call the imageloaded constructor outside of the react component, it is working.
any idea what i am missing?</p>

<p>thanks!</p>
","1472580","","","","","2015-03-28 09:57:10","functions are undefind inside react object","<reactjs><imagesloaded>","1","0","","",""
"47802105","1","47802337","","2017-12-13 21:06:21","","1","46","<p>In below code for react I am trying to change button colours by updating a dictionary. Unfortunately it is not working unless I force the rerender.</p>

<pre class=""lang-js prettyprint-override""><code>const jsonFromDatabase = [{ ""id"": 1, ""name"": ""Ka"" },
{ ""id"": 2, ""name"": ""Erd"" }];

const json = [{ ""id"": 2, ""name"": ""Ka"" },
{ ""id"": 3, ""name"": ""Erd"" }];
class ControllableButton extends React.Component {
  constructor() {
    super();
    this.state = {
      color_black: true,
      datasetForDisplay: json,
      datasetForStorage: jsonFromDatabase
    }
  }

  onClickGroupToUpdate = (cell, row, rowIndex) =&gt; {
    let toAdd = { ""id"": row.id, ""name"": row.name }
    this.setState((prevState, props) =&gt; {
      datasetForStorage: prevState.datasetForStorage.push(toAdd)
    })
    console.log(""updated the database"")
    console.log(this.state.datasetForStorage)
    // this.forceUpdate()
  }

  onClickGroupSelected = (cell, row, rowIndex) =&gt; {
  }

  // cellButton should be modified each time of click
  cellButton = (cell, row, enumObject, rowIndex) =&gt; {
    let theButton
    let inDB = false
    console.log(row)
    for (var group in this.state.datasetForStorage) {
      if (this.state.datasetForStorage[group].id == row.id) {
        inDB = true
      }
    }
    if (inDB) {
      theButton = &lt;button style={{ backgroundColor: ""blue"" }}
        type=""button""
        onClick={() =&gt; this.onClickGroupSelected(cell, row, rowIndex)}&gt;
        In database
               &lt;/button&gt;
      console.log('already in database' + row.id)
    } else {
      theButton = &lt;button style={{ backgroundColor: ""red"" }}
        type=""button""
        onClick={() =&gt; this.onClickGroupToUpdate(cell, row, rowIndex)}&gt;
        Update database
               &lt;/button&gt;
      console.log('not in  database' + row.id)
    }
    return theButton
  }

  render() {
    return (
      &lt;BootstrapTable data={this.state.datasetForDisplay} &gt;
        &lt;TableHeaderColumn isKey dataField='id' width='100'&gt;ID&lt;/TableHeaderColumn&gt;
        &lt;TableHeaderColumn dataField='name' width='300'&gt;Group Name&lt;/TableHeaderColumn&gt;
        &lt;TableHeaderColumn dataField='button' width='100' dataFormat={this.cellButton}&gt;Generate Group Page&lt;/TableHeaderColumn&gt;
      &lt;/BootstrapTable&gt;
    );
  }
}

ReactDOM.render(&lt;ControllableButton /&gt;, document.getElementById('app'));
</code></pre>

<p>Above code is not re-rendering after each click on updating the group, unless I forceUpdate. Can you help me to figure out what am I doing wrong here?</p>
","528894","","528894","","2017-12-13 21:46:32","2017-12-13 21:46:32","Why is react is not rerendering after setstate","<reactjs><setstate>","2","0","","",""
"32277383","1","","","2015-08-28 18:15:03","","0","865","<p>I'm just getting started with react testing, trying to use shallow rendering.</p>

<p>I can't figure what's going on here - I believe my code follows all instructions I've seen with examples (e.g. <a href=""http://racingtadpole.com/blog/test-react-with-jest/"" rel=""nofollow"">http://racingtadpole.com/blog/test-react-with-jest/</a>)</p>

<p>but I'm getting null with <code>shallowRenderer.getRenderOutput();</code></p>

<p>Additionally I'm confused as when I log out shallowRenderer, I don't see any getRenderOutput method??</p>

<pre class=""lang-jsx prettyprint-override""><code>import React from 'react/addons';
import Icon from '../../components/shared/Icon.jsx';

const TestUtils = React.addons.TestUtils;

function getRenderOutput(elt) {
  console.log('elt: ', elt);
  const shallowRenderer = TestUtils.createRenderer();
  shallowRenderer.render(elt);
  console.log('shallowRenderer: ', shallowRenderer);
  const output = shallowRenderer.getRenderOutput();
  console.log('output: ', output);
  return output;
}


describe('&lt;Icon /&gt;', () =&gt; {

  it('should pass props through', () =&gt; {
    const result = getRenderOutput(&lt;Icon type='octicon' name='file-directory' classNames=""icon-roomy icon-muted"" /&gt;);
    console.log('result: ', result);
  });

});
</code></pre>

<p>And the resulting output:</p>

<pre><code>elt:  

{ type:
   { [Function: Icon]
     _isMockFunction: true,
     mock: { calls: [], instances: [] },
     mockClear: [Function],
     mockReturnValueOnce: [Function],
     mockReturnValue: [Function],
     mockImpl: [Function],
     mockImplementation: [Function],
     mockReturnThis: [Function],
     _getMockImplementation: [Function],
     defaultProps: { type: 'fa', classNames: '' },
     propTypes:
      { type: [Object],
        name: [Object],
        prefix: [Object],
        classNames: [Object],
        title: [Object] } },
  key: null,
  ref: null,
  _owner: null,
  _context: {},
  _store:
   { props:
      { type: 'octicon',
        name: 'file-directory',
        classNames: 'icon-roomy icon-muted' },
     originalProps:
      { type: 'octicon',
        name: 'file-directory',
        classNames: 'icon-roomy icon-muted' } } }
shallowRenderer:  { _instance:
   { _currentElement:
      { type: [Object],
        key: null,
        ref: null,
        _owner: null,
        _context: {},
        _store: [Object] },
     _rootNodeID: '.0',
     _instance:
      { getClassNames: [Object],
        render: [Object],
        setState: [Object],
        forceUpdate: [Object],
        props: [Object],
        context: {},
        refs: {},
        _reactInternalInstance: [Circular],
        state: null },
     _pendingElement: null,
     _pendingStateQueue: null,
     _pendingReplaceState: false,
     _pendingForceUpdate: false,
     _renderedComponent: { _renderedOutput: null, _currentElement: [Object] },
     _context: {},
     _mountOrder: 1,
     _isTopLevel: false,
     _pendingCallbacks: null } }
output:  null
result:  null
</code></pre>
","2232367","","1957849","","2015-08-29 12:04:22","2015-08-29 12:04:22","react testing: shallow rendering - getRenderOutput returning null","<reactjs><reactjs-testutils>","1","0","","",""
"47166748","1","","","2017-11-07 20:21:02","","0","92","<p>After re-render custom button doesn't work in react-native-maps.</p>

<pre><code> componentWillReceiveProps(nextProps) {
        const newData = nextProps.location.data.length;
        if (newData &gt;= 6) {
            const data = nextProps.location.data;
             const region = {
               longitude: data[0].longitude,
               latitude: data[0].latitude,
                longitudeDelta: LONGITUDE_DELTA,
               latitudeDelta: LATITUDE_DELTA,
             }
             this.setState({
                polylines: [{
                   coordinates: data
                 }],
                region: region,
                lastLat: region.latitude,
                 lastLong: region.longitude,
                isSave: true,
                 isCross: true,
             });
    //        this.forceUpdate();
         }
     }
</code></pre>

<p>Data(coordinates) load on map every time. also show polyline but when click on button, buttons doesn't work.</p>

<p>in normal way, when first time render, buttons and map both works fine.</p>

<pre><code>async componentDidMount() {

        navigator.geolocation.getCurrentPosition((position) =&gt; {
            this.setState({
                region: {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude,
                    latitudeDelta: 0.0922,
                    longitudeDelta: 0.0421,
                }
            });
        },
            (error) =&gt; console.log(error.message),
            { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 });

        this.watchID = navigator.geolocation.watchPosition((position) =&gt; {
            let region = {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude,
                latitudeDelta: 0.0922,
                longitudeDelta: 0.0421,
            };
            this.onRegionChange(region, region.latitude, region.longitude);
            (error) =&gt; { console.log(new Date(), error) },
                { timeout: 10000, maximumAge: 3000 }
        });
    }

    onRegionChange(region, lastLat, lastLong) {
        this.setState({
            region: region,
            lastLat: lastLat || this.state.lastLat,
            lastLong: lastLong || this.state.lastLong
        });
    }
</code></pre>

<p><strong>Please help, how to props set in state for re-render.</strong></p>
","8895007","","","","","2017-11-07 20:21:02","componentWillReceiveProps re-render issue with react-native-maps custom button","<react-native><redux><redux-thunk><react-native-maps>","0","1","","",""
"46975333","1","46975402","","2017-10-27 12:42:40","","0","193","<p>The documents have the following to say about forceUpdate:</p>

<blockquote>
  <p>Calling forceUpdate() will cause render() to be called on the
  component, skipping shouldComponentUpdate(). This will trigger the
  normal lifecycle methods for child components, including the
  shouldComponentUpdate() method of each child. React will still only
  update the DOM if the markup changes.</p>
</blockquote>

<p><a href=""https://reactjs.org/docs/react-component.html#forceupdate"" rel=""nofollow noreferrer"">https://reactjs.org/docs/react-component.html#forceupdate</a></p>

<p>Does this mean that children of the component also have their render function called?</p>
","3612829","","","","","2017-10-27 13:12:37","Does this.forceUpdate rerender all children?","<javascript><reactjs><react-native>","1","1","2","",""
"49376045","1","49377123","","2018-03-20 03:48:24","","0","69","<p>I have two connected components, they both need the same parent so that they can talk to each other. However I would like to be able to render them anywhere, 100% separate. I have a <a href=""https://jsfiddle.net/69z2wepo/142067/"" rel=""nofollow noreferrer"">jsfiddle</a> example to show the idea, it is a terrible solution to my problem since I'm creating a new Img component whenever I need to change the props passed in. But it shows the idea. I feel like I'm probably going about this wrong but maybe there is a way to pass props to the Img without just making a new instance. Having a non React class be the parent is not ideal for sure.</p>

<p>Fiddle explanation: 
make an Img component that takes in a prop telling it if it should render or not
make a Switch component that will change the prop passed into Img component when clicked</p>

<p>They can be rendered anywhere separately and are controlled by a parent class.
The forceUpdate is just to make the example work, I know that is not a good use of it.</p>

<p>The code:</p>

<pre><code>const Img = (props) =&gt; {

  return (
    &lt;div&gt;&lt;img style={{ display: props.isShowing ? 'inline' : 'none', width: '100px' }} src=""http://blog.nationalgeographic.org/wp-content/uploads/2010/04/Greatest-Nature-Photographs-of-All-Time-3.jpg"" /&gt;&lt;/div&gt;
  );
};

const Switch = (props) =&gt; {

  return (
    &lt;div style={{ width: '50px', height: '50px', background: 'black', color: 'white'}} onClick={() =&gt; props.toggleImg()}&gt;
    click me
    &lt;/div&gt;
  );
};

class MasterComponent {
  constructor(outerThis) {
    this.outerThis = outerThis;
    this.toggleState = true;
    this.img = &lt;Img isShowing={ true } /&gt;;
    this.switch = &lt;Switch toggleImg={ () =&gt; this.toggleImg() } /&gt;;
  }

  toggleImg() {
    this.toggleState = !this.toggleState;
    this.img = &lt;Img isShowing={ this.toggleState } /&gt;;
    this.outerThis.forceUpdate();
  }

}


class Example extends React.Component {
    constructor(props) {
        super(props);
    this.masterComponent = new MasterComponent(this);
  }

  render() {
    return &lt;div&gt;
    {this.masterComponent.img}
    {this.masterComponent.switch}
    &lt;/div&gt;;
  }
}
</code></pre>

<p>edit: 
So the question is basically this. I want the 'MasterComponent' to be some sort of parent that gives you two children that interact with each other in the realm of state/props but are rendered separately like in the Example's render. So imagine importing MasterComponent and then using it like I did in the Example component without knowing what is going on behind the scenes. That is the design pattern I hoped for, but it doesn't seem achievable with React alone maybe.</p>

<p>My version of the MasterComponent is bad because I'm replacing the Img component with a new instance of Img with different props when I really just want to update the props it had. Using forceUpdate over setState is bad too but I'm less concerned about that.</p>

<p>I think since MasterComponent isn't a react component with state that can cause a rerender and Img and Switch aren't inside a render function where they can organically receive that state, maybe my idea doesn't work.</p>
","5626885","","5626885","","2018-03-20 05:31:16","2018-03-20 05:51:09","Trying to create a special design pattern in react, unsure how to achieve it","<javascript><reactjs><design-patterns><components>","2","5","","",""
"47374957","1","47375099","","2017-11-19 08:25:08","","1","45","<p>in a react UI I have a table component. You can edit one row of the table by clicking a edit button or you can add a new record by clicking a ""new-record-button"".  When clicking the edit button an redux-action is triggered which takes the row and sets a visible property of a modal dialog. When the ""new-record-button"" is clicked an action is triggered which creates a new empty data item and the same modal dialog is triggered.
In the modal dialog I have several text components with onChange method.
in this onChange-method the data-item is written.
When to user clicks a save-button the edited dataItem is saved to the database.</p>

<p>So my code looks like:</p>

<pre><code>const mapStateToProps = (state) =&gt; ({
 dataItem: state.datItemToEdit || {}, 
...
});

...

handleTextChange(event) {
  const {
    dataItem 
  } = this.props;

  const id = event.target.id;
  const text = event.target.value;

  switch (id) {
    case 'carId': {
      dataItem.carId = text;
      break;
    }
    ...
  }
  this.forceUpdate();
}
...
&lt;TextField 
  ...
  onChange={event =&gt; this.handleTextChange(event)}
/&gt;
</code></pre>

<p>I have several question regarding this approach. First I do not understand why in handleTextChange we can write to dataItem. It does work apparently.
dataItem.carId is set in the example code but I thought </p>

<pre><code>const {dataItem} = this.props;
</code></pre>

<p>gives us a local read-only variable dataItem just to read from the props...</p>

<p>Next thing I think is a poor design. After reading in a book about react I think we should not write to props but only set a state.
In my example I get the the dataItem from the redux-state. The <code>mapStateToProps</code> maps it to the (read-only) props of the component, right?!. But I want to EDIT it. So I would have to copy it to the state of my component?
But where to do it? 
Once in the state of my component I could simply call this.setState for the various text-fields and the component would render and I could abstain from <code>forceUpdate()</code>, right?!</p>

<p>Can someone explain how the redux status plays together with the component status and props for this example?</p>
","5878784","","","","","2017-11-19 18:18:31","react-redux together with components status","<react-redux>","2","0","","",""
"48062682","1","48510063","","2018-01-02 14:24:34","","5","533","<p>I'm trying to query the server to get list of nav items so I can build my menu on init. I've so far managed to create a static page with 3 contents on the home page, which includes header, sidebar and content. The sidebar is the menu which is different for different type of users so I need to retrieve the menu items on load. </p>

<p>Error I receive is </p>

<blockquote>
  <p>Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op</p>
</blockquote>

<p><strong>Update 4</strong></p>

<p>so i moved my api requests to <code>index.js</code> file and tried to add the condition as mentioned in the <a href=""https://react-cn.github.io/react/tips/if-else-in-JSX.html"" rel=""nofollow noreferrer"">comment</a>. Now it just renders <code>Loading...</code> with the same error</p>

<pre><code>    import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import 'core-js/fn/promise';

import SideBar from './components/sidebar';
import Header from './components/header';
import HomeContent from './components/home';


function getJSON(url) {
  return get(url).then(JSON.parse);
}

function get(url) {
  // Return a new promise.
  return new Promise(function(resolve, reject) {
    // Do the usual XHR stuff
    var req = new XMLHttpRequest();
    req.open('GET', url);

    req.onload = function() {
      // This is called even on 404 etc
      // so check the status
      if (req.status == 200) {
        // Resolve the promise with the response text
        resolve(req.response);
      }
      else {
        // Otherwise reject with the status text
        // which will hopefully be a meaningful error
        reject(Error(req.statusText));
      }
    };

    // Handle network errors
    req.onerror = function() {
      reject(Error(""Network Error""));
    };

    // Make the request
    req.send();
  });
}

class App extends Component {
    constructor(props){
        super(props);
        this.state = {
                        username: '',
                        user,
                        loading1: true ,
                        menuList : [],
                        loading2: true
        };
    }

    componentDidMount() {
        let currentComponent = this;

        getJSON('/api/user/get/user/method/user/format/json?quiet=1').then((response) =&gt; {
            //console.log(JSON.stringify(response));
            //currentComponent.state.username = response.body.recordset.record[0].name;
            //currentComponent.state.user = response.body.recordset.record[0];
            currentComponent.setState({
                username: response.body.recordset.record[0].name,
                loading1: false
            });
        }).catch(error =&gt; {
            console.log('Error', error);
        });

        getJSON('/api/user/get/user/method/menu/format/json?quiet=1').then((response) =&gt; {
            console.log(JSON.stringify(response));
            let menuData = response.body.recordset.record;
            let menuList = [];
            var i = 0;
            menuData.container.forEach(menus =&gt; {
                menus.sub_modules.forEach(submenu =&gt; {
                    menuList.push(&lt;li className=""menu"" key={i}&gt;{ submenu.title }&lt;/li&gt;);
                    i++
                    if (submenu.menuitem.length) {
                        submenu.menuitem.forEach(menuitem =&gt; {
                            menuList.push(&lt;li key={i}&gt;&lt;a href={menuitem.link}&gt;{ menuitem.title }&lt;/a&gt;&lt;/li&gt;);
                            i++;
                        })
                    }
                })
            });
            currentComponent.setState({
                menuList: menuList,
                loading2: false
            });
        }).catch(error =&gt; {
            console.log(""Failed!"", error);
            $('#myModalError .modal-body').html(error);
            $('#myModalError').modal('show');
        });
    }

    componentWillUnmount() {}

    render() {
        let content = '';
        console.log(this.state);
        if(this.state.loading1 || this.state.loading2) {
            content = &lt;div&gt;Loading...&lt;/div&gt;
        }else{
            content =
                &lt;div id=""wrapper"" className=""toggled""&gt;
                    &lt;Header username={this.state.username}/&gt;
                    &lt;SideBar menuList={this.state.menuList}/&gt;
                    &lt;HomeContent /&gt;
                &lt;/div&gt;

        }
        return &lt;div&gt;
                   {content}
               &lt;/div&gt;
    }
};

ReactDOM.render(&lt;App/&gt;,  document.getElementById(""app""));
</code></pre>

<p><a href=""https://i.stack.imgur.com/5Yn9E.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5Yn9E.png"" alt=""enter image description here""></a></p>

<p><strong>here is IE error</strong></p>

<p><a href=""https://i.stack.imgur.com/qMVri.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qMVri.png"" alt=""IE console error""></a></p>

<p><a href=""https://i.stack.imgur.com/B67Uc.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/B67Uc.png"" alt=""detailed ie error""></a></p>

<p><strong>sidebar.js</strong></p>

<pre><code>import React, { Component } from 'react';

let menuList = [];
class SideBar extends Component {
    constructor(props){
        super(props);
    }

    render () {
        return (
            &lt;div id=""sidebar-wrapper"" className=""hidden-print""&gt;
                &lt;ul className=""sidebar-nav""&gt;
                {this.props.menuList}
                &lt;/ul&gt;
            &lt;/div&gt;
        );
    }
}

export default SideBar;
</code></pre>

<p>I have created a <a href=""https://jsfiddle.net/shorif2000/gabgc28e/"" rel=""nofollow noreferrer"">jsfiddle</a></p>

<p>webpack</p>

<pre><code>var HTMLWebpackPlugin = require('html-webpack-plugin');
var HTMLWebpackPluginConfig = new HTMLWebpackPlugin({
    template: __dirname + '/app/index.html',
    filename: 'index.html',
    inject: 'body'
});

const ExtractTextPlugin = require(""extract-text-webpack-plugin"");

const extractSass = new ExtractTextPlugin({
    filename: ""[name].[contenthash].css"",
    disable: process.env.NODE_ENV === ""development""
});

module.exports = {
    entry : [__dirname + '/app/index.js'],
    module: {
         rules: [
            {
                test: /\.js$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader'
                }
            } ,
            {
                test: /\.scss$/,
                use: [{
                    loader: ""style-loader""
                }, {
                    loader: ""css-loader""
                }, {
                    loader: ""sass-loader"",
                }]
            }
        ],
    },
    output: {
        filename: 'transformed.js',
        path: __dirname + '/docs'
    },
    plugins: [
        HTMLWebpackPluginConfig
    ]
}


{
  ""name"": ""ccp-react"",
  ""version"": ""1.0.0"",
  ""license"": ""MIT"",
  ""scripts"": {
    ""start"": ""webpack-dev-server"",
    ""build"": ""webpack""
  },
  ""private"": true,
  ""dependencies"": {
    ""babel-helper-bindify-decorators"": ""^6.24.1"",
    ""babel-plugin-lodash"": ""^3.3.2"",
    ""babel-plugin-syntax-dynamic-import"": ""^6.18.0"",
    ""babel-plugin-syntax-flow"": ""^6.18.0"",
    ""babel-plugin-transform-class-properties"": ""^6.24.1"",
    ""babel-plugin-transform-decorators"": ""^6.24.1"",
    ""babel-plugin-transform-react-display-name"": ""^6.25.0"",
    ""babel-plugin-transform-react-jsx"": ""^6.24.1"",
    ""babel-polyfill"": ""^6.26.0"",
    ""babel-preset-env"": ""^1.6.1"",
    ""babel-preset-es2015"": ""^6.24.1"",
    ""babel-preset-es2016"": ""^6.24.1"",
    ""babel-preset-es2017"": ""^6.24.1"",
    ""babel-preset-flow"": ""^6.23.0"",
    ""babel-preset-react-optimize"": ""^1.0.1"",
    ""babel-preset-stage-1"": ""^6.24.1"",
    ""babel-preset-stage-3"": ""^6.24.1"",
    ""bootstrap"": ""^3.3.7"",
    ""classnames"": ""^2.2.5"",
    ""commander"": ""^2.12.2"",
    ""create-react-class"": ""^15.6.2"",
    ""cross-env"": ""^5.1.3"",
    ""gulp"": ""^3.9.1"",
    ""hammerjs"": ""^2.0.8"",
    ""lodash"": ""^4.17.4"",
    ""ng"": ""0.0.0-rc6"",
    ""ng-cli"": ""^0.7.0"",
    ""react"": ""^16.2.0"",
    ""react-dom"": ""^16.2.0"",
    ""react-icons-kit"": ""^1.0.7"",
    ""react-redux"": ""^5.0.6"",
    ""react-router"": ""^4.2.0"",
    ""react-router-dom"": ""^4.2.2"",
    ""react-side-bar"": ""^0.3.5"",
    ""react-sidenav"": ""^2.1.2"",
    ""redux"": ""^3.7.2"",
    ""rxjs"": ""^5.5.6"",
    ""systemjs"": ""^0.20.19"",
    ""web-animations-js"": ""^2.3.1"",
    ""zone.js"": ""^0.8.19""
  },
  ""devDependencies"": {
    ""@types/jasmine"": ""~2.5.53"",
    ""@types/jasminewd2"": ""~2.0.2"",
    ""@types/node"": ""^6.0.95"",
    ""babel-core"": ""^6.26.0"",
    ""babel-loader"": ""^7.1.2"",
    ""babel-preset-react"": ""^6.24.1"",
    ""core-js"": ""^2.5.3"",
    ""css-loader"": ""^0.28.8"",
    ""extract-text-webpack-plugin"": ""^3.0.2"",
    ""html-webpack-plugin"": ""^2.30.1"",
    ""jasmine-core"": ""~2.6.2"",
    ""jasmine-spec-reporter"": ""~4.1.0"",
    ""karma"": ""~1.7.0"",
    ""karma-chrome-launcher"": ""~2.1.1"",
    ""karma-cli"": ""~1.0.1"",
    ""karma-coverage-istanbul-reporter"": ""^1.3.3"",
    ""karma-jasmine"": ""^1.1.1"",
    ""karma-jasmine-html-reporter"": ""^0.2.2"",
    ""node-sass"": ""^4.7.2"",
    ""protractor"": ""~5.1.2"",
    ""sass-loader"": ""^6.0.6"",
    ""style-loader"": ""^0.19.1"",
    ""ts-node"": ""~3.2.0"",
    ""tslint"": ""~5.7.0"",
    ""typescript"": ""~2.4.2"",
    ""webpack"": ""^3.10.0"",
    ""webpack-bundle-analyzer"": ""^2.8.2"",
    ""webpack-dev-server"": ""^2.9.7""
  }
}
</code></pre>

<p>setstate issue still exists even with same code as the one in the fiddle. the fiddle works</p>

<p><a href=""https://i.stack.imgur.com/dWsXf.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dWsXf.png"" alt=""setstate""></a></p>
","1164789","","1164789","","2018-01-10 10:54:38","2018-01-29 21:13:06","react warning cannot set state when using promises","<javascript><reactjs><webpack><promise><babel-polyfill>","7","9","1","",""
"48864630","1","","","2018-02-19 10:57:49","","0","232","<p>I want to use <code>this.forceUpdate()</code> in one of the handler named 'update' in withHandlers of my compose. I am using recompose to achieve the same. Find sample code below:</p>

<pre><code>const abc = compose(
    withHandlers(
      update: () =&gt; () =&gt; this.forceUpdate()
    )
)
</code></pre>

<p>But it is not working. Does anyone know how to use <code>forceUpdate()</code> method of react in <strong>withHandlers</strong> of <strong>recompose</strong> library?</p>

<p>Is there any alternative to achieve same result as <code>forceUpdate()</code>?</p>
","5912837","","5912837","","2018-02-19 11:27:44","2018-02-19 11:27:44","this.forceUpdate() in recompose withHandler","<reactjs><recompose>","1","0","","",""
"41747466","1","41859278","","2017-01-19 16:56:33","","1","365","<p>I've managed to render a <code>react-virtulized List</code> to which i passed an array of <code>react-bootstrap Panels</code>. I've measured each of my rows, and via children callback, each time one of the child panels are clicked, an attribute in the parent state is updated. Said attribute is used inside the <code>react-virtualized List</code> <code>rowHeight()</code> function top check whether that panel is currently expanded. Then, using a <code>ref</code> to my <code>List</code>, i call the <code>recomputeRowHeights(index)</code> and <code>forceUpdateGrid()</code> methods on said<code>ref</code>.</p>

<p>Thing is, while the List component correctly updates both the height and position of my rows, the animation isn't smooth. I mean, the bootstrap expand animation works fine, but the change in height of the expanded row happens instantly after the click event, and then the animation starts, feeling somewhat chopy.</p>

<p>I was wondering if there is any workaround for this, or if this is an upcoming/planned/in the works feature for <code>react-virtualized</code>.</p>

<p>Thanks in advanced!!</p>
","7442031","","","","","2017-01-25 18:46:24","Using collapsible panels within react-virtualized List","<reactjs><react-bootstrap><react-virtualized>","1","5","","",""
"47930031","1","","","2017-12-21 17:33:52","","1","93","<p>Noob question. I have a <code>WizardForm</code> that has two submit buttons. It submits data on the third step and then uploads a photo in the fourth step. How do I re render the entire form after photo uploading succeeds? I'm trying to go back to a clean state of the form so that user can proceed with entering data again, like any normal data entry form.</p>

<p>here's my code: </p>

<pre><code>import React from 'react';
import {Field, reduxForm} from 'redux-form';
import validate from '../middleware/validate';
import { post } from 'axios';
import {BASE_URL} from '../middleware/api';
import {connect} from ""react-redux"";
import WizardForm from './WizardForm';

let WizardFormPhoto = (props) =&gt; {
const {handleSubmit, pristine, previousPage, submitting} = props;
const onFormSubmit = (data) =&gt; {
    const {reset} = this.props;
    let humanID = localStorage.getItem('humanID');
    let token =localStorage.getItem('idToken');
    const AuthStr = 'Bearer '.concat(token);
    let formData = new FormData();
    formData.append('humanId', humanID);
    formData.append('photo', data.profile_pic[0]);

    const config = {
        headers: {'content-type': 'multipart/form-data', 'Authorization' : AuthStr}
    };
    const url = BASE_URL + 'human/upload';

    post(url, formData, config)
        .then(function (response) {
            alert(response.data.message);
            reset();
            WizardForm.forceUpdate();
        }).catch(function (error) {
            console.log(error);
        });
};
return (
    &lt;form onSubmit={handleSubmit(onFormSubmit)} className=""form-horizontal""&gt;
        &lt;div className=""step-3""&gt;
            &lt;div className=""form-group""&gt;
                &lt;label className=""col-sm-2 control-label""&gt;Add Photo&lt;/label&gt;
                &lt;div className=""col-sm-10""&gt;
                    &lt;Field name=""profile_pic"" component=""input"" type=""file""/&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div className=""clearfix""&gt;
                &lt;button type=""submit"" className=""next pull-right btn btn-primary""&gt;Submit&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/form&gt;
);
};


export default reduxForm({
form: 'wizard', //                 &lt;------ same form name
forceUnregisterOnUnmount: true, // &lt;------ unregister fields on unmount
validate,
})(WizardFormPhoto);
</code></pre>

<p>calling <code>foreceUpdate()</code> gives me the following error <code>WizardForm__.a.forceUpdate is not a function</code> . how do I get it to work?</p>

<p>P.S: <code>WizardForm</code> is the parent component, if that matters.</p>

<p>Adding <code>WizardForm</code></p>

<pre><code> import React, {Component} from 'react';
 import PropTypes from 'prop-types';
 import {connect} from ""react-redux"";
 import {reduxForm} from 'redux-form';
 import WizardFormFirstPage from './WizardFormFirstPage';
 import WizardFormSecondPage from './WizardFormSecondPage';
 import WizardFormPreview from './WizardFormPreview';
 import WizardFormPhoto from './WizardFormThirdPage'
 import {
isSubmitting,
hasSubmitSucceeded,
hasSubmitFailed
} from 'redux-form'

class WizardForm extends Component {
constructor(props) {
    super(props);
    this.nextPage = this.nextPage.bind(this);
    this.previousPage = this.previousPage.bind(this);
    this.backToOne = this.backToOne.bind(this);
    this.state = {
        page: 1,
    };
}

nextPage() {
    this.setState({page: this.state.page + 1});
}

previousPage() {
    this.setState({page: this.state.page - 1});
}

backToOne() {
    this.setState({page: 1,})
}

render() {
    const {onSubmit} = this.props;
    const {page, submitSucceeded} = this.state;
    return (
        &lt;div&gt;
            {page === 1 &amp;&amp; &lt;WizardFormFirstPage onSubmit={this.nextPage}/&gt;}
            {page === 2 &amp;&amp;
            &lt;WizardFormSecondPage
                previousPage={this.previousPage}
                onSubmit={this.nextPage}
            /&gt;}
            {page === 3 &amp;&amp;
            &lt;WizardFormPreview
                previousPage={this.previousPage}
                onSubmit={values =&gt; {
                    onSubmit(values, () =&gt; {
                        this.setState({
                            submitSucceeded: true
                        });
                        this.nextPage()
                    });
                }}
            /&gt;}
            {submitSucceeded &amp;&amp; page === 4 &amp;&amp;
            &lt;WizardFormPhoto onSubmit={onSubmit}/&gt;
            }
        &lt;/div&gt;
    );
}
}

WizardForm.propTypes = {
onSubmit: PropTypes.func.isRequired,
};

WizardForm = reduxForm({
form: 'wizard',
initialValues: {
    location: {
        latitude: ""0.0"",
        longitude: ""0.0""
    }
    }
})(WizardForm)

WizardForm = connect(
state =&gt; ({
    submitting: isSubmitting('wizard')(state),
    submitSucceeded: hasSubmitSucceeded('wizard')(state),
    submitFailed: hasSubmitFailed('wizard')(state)
})
)(WizardForm)

export default WizardForm;
</code></pre>
","2276736","","2276736","","2017-12-21 21:15:11","2017-12-22 14:03:55","How do I make forceUpdate() work to re render my WIzard form?","<javascript><reactjs><redux><axios><redux-form>","1","7","","",""
"30715220","1","","","2015-06-08 17:11:47","","9","11309","<p>I would be getting dynamic html content from my template rendering which was rendered by other react components. How would I convert this html string to React component so that I can use the component in my render function. Note that I want to preserve react specific attributes used for diffing.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>React.createClass( {
  var self = this;

  componentWillMountDown : function() {
    //htmlString is essentially huge dynamic one in my actual case
    var htmlString = ""&lt;div class='classDiv' react-id=""0.1""&gt;&lt;input type='text'/&gt;&lt;/div&gt;"";
    self.setState({responseString : htmlString});
    self.forceUpdate();
  },
    
  render: function() {
    var Response = this.state.responseString;
    //how would I return the react component as response?
    return (&lt;Response/&gt;); //does not work. err is it shd be valid react component
   }
});</code></pre>
</div>
</div>
</p>

<p>I've tried converting htmlString to HTMLDocument object and recursively creating React.createElement in willmount callback and setting react component. however, the error is type toUpperCase is not defined.</p>
","2872888","","2872888","","2015-06-08 18:10:19","2017-08-15 11:43:35","dynamic HTML String to react component","<javascript><reactjs>","2","0","1","",""
"41074525","1","41077716","","2016-12-10 10:33:05","","0","642","<p>I'm experimenting with building a ReactJS app that doesn't use ReactJS components state or props for display data. Instead I use props for passing models to the component so that it will bind <code>self</code> to it, and get re-rendered on model data change.</p>

<p>I would like to keep the component state ’clean’ in such way that the component's state would only contain data about user experience related stuff. If you are familiar with Firebase, the apps works very much like when building a react app using Firebase, but it should be more declarative.</p>

<p>Because I do not use <code>component.setState({...})</code> I would like to use <code>component.forceUpdate</code>. I have read many times that you shouldn't use this method because it skips the lifecycle methods, but this is an experiment.</p>

<p>What I'm mostly interested in right now is whether it is slower than <code>setState</code> and does ReactJS do the same smart DOM diffing when an update is forced?</p>
","4804346","","1078886","","2016-12-10 19:17:40","2016-12-10 19:17:40","Is using forceUpdate slower than setState() in ReactJS?","<reactjs>","1","0","1","",""
"40001591","1","40002065","","2016-10-12 14:44:01","","2","149","<p>I'm using React and <a href=""https://github.github.io/fetch/"" rel=""nofollow noreferrer"">fetch()</a> to develop an UI and I ended up doing this:</p>

<pre><code>getOperatorsList: function ( obj ) {
    fetch( 'http://x.x.x.x/operators.list',
        {
            method: 'GET',
            credentials: 'include'
        }
    ).then( function ( response ) {
            return response.json()
        } ).then( function ( json ) {
        if ( json.statusCode === 3 ) {
            cookieService.unsetCookie( 'sessId' );
        }
        obj.setState( { data: json }, () =&gt; obj.forceUpdate() );
    } ).catch( function ( ex ) {
        console.log( 'parsing failed', ex );
    } )

}
</code></pre>

<p>This is called in my component Operators that looks like this</p>

<pre><code>var Operators = React.createClass( {

    getInitialState: function () {
        return {
            data: [{ ""data"": ""Loading"" }]
        }
    },

    componentDidMount: function () {
        operatorsService.getOperatorsList( this );
    },

    render: function () {
        return (
            &lt;div&gt;
                &lt;Row &gt;
                    &lt;Col&gt;
                        &lt;DataTablesCustom data={this.state.data} /&gt;
                    &lt;/Col&gt;
                &lt;/Row&gt;
            &lt;/div&gt;
         );
     }
});
</code></pre>

<p>I already had a look at <a href=""https://stackoverflow.com/questions/38755092/reactjs-componentdidmount-and-fetch-api"">this question</a>, and the code doesn't work for me.</p>

<p>This works fine but do I really need to use <code>forceUpdate()</code> or do I have a way to make the code ""cleaner"" ?</p>

<p>EDIT: there was a <code>setState</code> that looked like this <code>this.setState({stuff: stuff}, this.function()});</code> in a child component. I was able to remove <code>forceUpdate()</code> after changing the <code>setState</code> to <code>this.setState({stuff: stuff}, () =&gt; this.function()});</code>.</p>
","6464058","","-1","","2017-05-23 10:32:29","2016-10-17 13:48:30","Do i really need to use forceUpdate with fetch API and ReactJS","<javascript><reactjs><fetch-api>","1","7","1","",""
"47489018","1","47519678","","2017-11-25 18:01:36","","0","207","<p>I'm developing a data grid component based on react-virtualized. It's supposed to have a fixed header with resizable columns. I want the header to change its height according to the header cells content. I'm using <a href=""https://github.com/bvaughn/react-virtualized/blob/master/docs/CellMeasurer.md"" rel=""nofollow noreferrer"">CellMeasurer</a> to calculate cells height and update height of the header.</p>

<p>The problem is that cell sizes are calculated after the cells are rendered (afaik), so I have to call <code>forceUpdate</code> inside of the header's <code>render</code> if height has been changed.</p>

<p>here is how <code>render</code> looks like (complete example is <a href=""https://codesandbox.io/s/88j0vo10k2"" rel=""nofollow noreferrer"">here</a>):</p>

<pre><code>render() {
    const height = this._cache.rowHeight({ index: 0 });
    console.log('render', height, this.props.sizes);
    setTimeout(() =&gt; {
      if (height !== this._cache.rowHeight({ index: 0 })) {
        console.log('forceUpdate', this._cache.rowHeight({ index: 0 }))
        this.forceUpdate()
      }
    }, 0)

    return (
      &lt;Grid 
        ref={ref =&gt; this._grid = ref}
        deferredMeasurementCache={this._cache}
        width={1500}
        height={height}
        columnCount={5}
        columnWidth={this.columnWidth}
        rowCount={1}
        rowHeight={this._cache.rowHeight}
        cellRenderer={this.renderCell}
      /&gt;
    );
  }
</code></pre>

<p>so the question is how do I avoid <code>forceUpdate</code>? Is there a cleaner way to implement grid header with dynamic height using react-virtualized?</p>
","1017722","","","","","2017-11-27 20:57:34","Is there a way to implement grid header with dynamic height using react-virtualized?","<reactjs><react-virtualized>","2","0","","",""
"48291943","1","48292391","","2018-01-17 00:30:34","","0","127","<p>I'm new to react-native and I'm trying to build an application connected to a ruby on rails backend.</p>

<p>I have an index view in which I retrieve a list of lunches, I would like that when I click on one of them, I go to that presentation. so I created a specific view in which I redo an api call to retrieve the lunch data and then I display this one. 
The problem is that it tries to read the data first and then it makes the api call after that while the method is in a <code>componentWillMount()</code> and the api call is done after that because I see it in the logs.</p>

<p>INDEX.js</p>

<pre><code>import React from 'react';
import { View, Text, Image, StyleSheet, ScrollView, TouchableHighlight } from 'react-native'
import { Card, ListItem, Button } from 'react-native-elements'
import { Actions } from 'react-native-router-flux';

export default class IndexLunches extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      lunches: []
    };
    this.show = this.show.bind(this)
  }
  fetchLunches() {
    fetch('http://192.168.1.24:3000/api/v1/lunches', {
      method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        }
    })
    .then((response) =&gt; {
      if (response.ok) {
        console.log('RESPONSE OK : GET LUNCHES')
        var lunches = JSON.parse(response._bodyText);
        var headers = response.headers
        console.log(lunches)
        console.log(headers)
        this.setState({lunches: lunches})

      } else {
        alert(""Erreur pendant la réceptions des lunchs voir les logs"")
        console.log(response)
      }

    })
    .catch(function(error) {
      console.log('There has been a problem with your fetch operation: ' + error.message);
      // ADD THIS THROW error
        throw error;
      })
    .done();

  }

  show(id) {
    Actions.show_lunch({lunch_id: id})
  }

  lunchCard() {
    lunches = this.state.lunches
    return lunches.map((lunch, i) =&gt; {
      return(
        &lt;TouchableHighlight key={i} onPress={() =&gt; this.show(lunch.id)}&gt;
          &lt;View 
            // key={i}
            // Error here because react auto execute onPress on load
            &gt;
            &lt;Image
              style={{flex: 1, height: 150}}
              source={{ uri: lunch.photos[0].url }}
            /&gt;
            &lt;Text&gt;Titre du lunch : {lunch.title}&lt;/Text&gt;
            &lt;View&gt;
              &lt;Text&gt;id : {lunch.id}&lt;/Text&gt;
            &lt;/View&gt;
        &lt;/View&gt;
        &lt;/TouchableHighlight&gt;
      );
    });
  }
  // Its called before render component
  componentWillMount() {
    this.fetchLunches();
  }
  render () {
    return (
      &lt;ScrollView&gt;
        &lt;Text style={styles.title} &gt; Liste des lunchs &lt;/Text&gt;
        &lt;View&gt;
          { this.lunchCard() }
        &lt;/View&gt;
      &lt;/ScrollView&gt;
    )
  }
}

const styles = StyleSheet.create({
  title: {
    color: ""#0000FF"",
    fontSize: 16,
    marginBottom: 20,
  },
  text: {

  }
})
</code></pre>

<p>Show.js</p>

<pre><code>import React from 'react';
import { View, Text, Image, StyleSheet, ScrollView } from 'react-native'
import { Card, ListItem, Button } from 'react-native-elements'

export default class ShowLunch extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      lunch: {},
      lunch_id: this.props.navigation.state.params.lunch_id
    };
  }
  fetchLunch() {
    let id = this.state.lunch_id
    fetch(`http://192.168.1.24:3000/api/v1/lunches/${id}`, {
      method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        }
    })
    .then((response) =&gt; {
      if (response.ok) {
        console.log(`RESPONSE OK : GET LUNCH, ID: ${id}` )
        var lunch = JSON.parse(response._bodyText);
        var headers = response.headers
        console.log(lunch.lunch)
        console.log(headers)
        this.setState({lunch: lunch.lunch})

      } else {
        alert(""Erreur pendant la réceptions du lunch voir les logs"")
        console.log(response)
      }

    })
    .catch(function(error) {
      console.log('There has been a problem with your fetch operation: ' + error.message);
      // ADD THIS THROW error
        throw error;
      })
    .done();

  }

  lunchView() {
    lunch = this.state.lunch
    console.log(""ENTER IN LUNCH VIEW"")
    console.log(lunch)
    return(
        &lt;View key=""lunch""&gt;
          &lt;Image
            style={{flex: 1, height: 150}}
            source={{ uri: lunch.photos[0].url }}
          /&gt;
          &lt;Text&gt;Titre du lunch : {lunch.title}&lt;/Text&gt;
          &lt;View&gt;
            &lt;Text&gt;id : {lunch.id}&lt;/Text&gt;
          &lt;/View&gt;
      &lt;/View&gt;
    );
  }
  // Called before render component
  componentWillMount() {
    this.fetchLunch();
  }
  render () {
    return (
      &lt;ScrollView&gt;
        &lt;Text style={styles.title} &gt;Lunch : &lt;/Text&gt;
        &lt;View&gt;
          { this.lunchView() }
        &lt;/View&gt;
      &lt;/ScrollView&gt;
    )
  }
}

const styles = StyleSheet.create({
  title: {
    color: ""#0000FF"",
    fontSize: 16,
    marginBottom: 20,
  },
  text: {

  }
})
</code></pre>

<p>Console.log</p>

<pre><code>LOGIN SUCCESSFULL
Login.js:62 VALIDATE TOKEN SUCCESSFULL
Login.js:63 Response {type: ""default"", status: 200, ok: true, statusText: undefined, headers: Headers, …}
Login.js:65 {…}
IndexLunches.js:24 RESPONSE OK : GET LUNCHES
IndexLunches.js:27 (6) [{…}, {…}, {…}, {…}, {…}, {…}]
IndexLunches.js:28 Headers {map: {…}}
ShowLunch.js:48 ENTER IN LUNCH VIEW
ShowLunch.js:49 {}
ExceptionsManager.js:65 TypeError: Cannot read property '0' of undefined

This error is located at:
    in ShowLunch (at navigationStore.js:319)
    in Wrapped (at SceneView.js:31)
    in SceneView (at CardStack.js:412)
    in RCTView (at View.js:113)
    in View (at CardStack.js:411)
    in RCTView (at View.js:113)
    in View (at CardStack.js:410)
    in RCTView (at View.js:113)
    in View (at createAnimatedComponent.js:134)
    in AnimatedComponent (at Card.js:26)
    in Card (at PointerEventsContainer.js:55)
    in Container (at CardStack.js:454)
    in RCTView (at View.js:113)
    in View (at CardStack.js:383)
    in RCTView (at View.js:113)
    in View (at CardStack.js:382)
    in CardStack (at CardStackTransitioner.js:97)
    in RCTView (at View.js:113)
    in View (at Transitioner.js:192)
    in Transitioner (at CardStackTransitioner.js:49)
    in CardStackTransitioner (at StackNavigator.js:60)
    in Unknown (at createNavigator.js:52)
    in Navigator (at createNavigationContainer.js:210)
    in NavigationContainer (at Router.js:70)
    in App (at Router.js:91)
    in Router (at LunchRouter.js:31)
    in LunchRouter (at App.js:16)
    in RCTView (at View.js:113)
    in View (at App.js:14)
    in App (created by AwakeInDevApp)
    in RCTView (at View.js:113)
    in View (created by AwakeInDevApp)
    in AwakeInDevApp (at registerRootComponent.js:34)
    in RootErrorBoundary (at registerRootComponent.js:33)
    in ExpoRootComponent (at renderApplication.js:35)
    in RCTView (at View.js:113)
    in View (at AppContainer.js:102)
    in RCTView (at View.js:113)
    in View (at AppContainer.js:122)
    in AppContainer (at renderApplication.js:34)
handleException @ ExceptionsManager.js:65
ReactNativeFiberErrorDialog @ ReactNativeFiber-dev.js:231
logCapturedError @ ReactNativeFiber-dev.js:19
captureError @ ReactNativeFiber-dev.js:2649
performWork @ ReactNativeFiber-dev.js:2601
batchedUpdates @ ReactNativeFiber-dev.js:2756
batchedUpdates @ ReactNativeFiber-dev.js:202
batchedUpdatesWithControlledComponents @ ReactNativeFiber-dev.js:209
_receiveRootNodeIDEvent @ ReactNativeFiber-dev.js:3559
receiveTouches @ ReactNativeFiber-dev.js:3572
__callFunction @ MessageQueue.js:302
(anonymous) @ MessageQueue.js:116
__guard @ MessageQueue.js:265
callFunctionReturnFlushedQueue @ MessageQueue.js:115
(anonymous) @ debuggerWorker.js:72
ExceptionsManager.js:73 TypeError: TypeError: Cannot read property '0' of undefined

This error is located at:
    in ShowLunch (at navigationStore.js:319)
    in Wrapped (at SceneView.js:31)
    in SceneView (at CardStack.js:412)
    in RCTView (at View.js:113)
    in View (at CardStack.js:411)
    in RCTView (at View.js:113)
    in View (at CardStack.js:410)
    in RCTView (at View.js:113)
    in View (at createAnimatedComponent.js:134)
    in AnimatedComponent (at Card.js:26)
    in Card (at PointerEventsContainer.js:55)
    in Container (at CardStack.js:454)
    in RCTView (at View.js:113)
    in View (at CardStack.js:383)
    in RCTView (at View.js:113)
    in View (at CardStack.js:382)
    in CardStack (at CardStackTransitioner.js:97)
    in RCTView (at View.js:113)
    in View (at Transitioner.js:192)
    in Transitioner (at CardStackTransitioner.js:49)
    in CardStackTransitioner (at StackNavigator.js:60)
    in Unknown (at createNavigator.js:52)
    in Navigator (at createNavigationContainer.js:210)
    in NavigationContainer (at Router.js:70)
    in App (at Router.js:91)
    in Router (at LunchRouter.js:31)
    in LunchRouter (at App.js:16)
    in RCTView (at View.js:113)
    in View (at App.js:14)
    in App (created by AwakeInDevApp)
    in RCTView (at View.js:113)
    in View (created by AwakeInDevApp)
    in AwakeInDevApp (at registerRootComponent.js:34)
    in RootErrorBoundary (at registerRootComponent.js:33)
    in ExpoRootComponent (at renderApplication.js:35)
    in RCTView (at View.js:113)
    in View (at AppContainer.js:102)
    in RCTView (at View.js:113)
    in View (at AppContainer.js:122)
    in AppContainer (at renderApplication.js:34)
    at ShowLunch.lunchView (ShowLunch.js:54)
    at ShowLunch.proxiedMethod (createPrototypeProxy.js:44)
    at ShowLunch.render (ShowLunch.js:72)
    at ShowLunch.proxiedMethod (createPrototypeProxy.js:44)
    at finishClassComponent (ReactNativeFiber-dev.js:1667)
    at updateClassComponent (ReactNativeFiber-dev.js:1659)
    at beginWork (ReactNativeFiber-dev.js:1786)
    at performUnitOfWork (ReactNativeFiber-dev.js:2528)
    at workLoop (ReactNativeFiber-dev.js:2554)
    at Object._invokeGuardedCallback (ReactNativeFiber-dev.js:73)
reactConsoleErrorHandler @ ExceptionsManager.js:73
console.error @ YellowBox.js:71
componentDidCatch @ RootErrorBoundary.js:71
proxiedMethod @ createPrototypeProxy.js:44
commitErrorHandling @ ReactNativeFiber-dev.js:2675
commitAllLifeCycles @ ReactNativeFiber-dev.js:2462
_invokeGuardedCallback @ ReactNativeFiber-dev.js:73
invokeGuardedCallback @ ReactNativeFiber-dev.js:47
commitAllWork @ ReactNativeFiber-dev.js:2485
workLoop @ ReactNativeFiber-dev.js:2555
performWorkCatchBlock @ ReactNativeFiber-dev.js:2587
_invokeGuardedCallback @ ReactNativeFiber-dev.js:73
invokeGuardedCallback @ ReactNativeFiber-dev.js:47
performWork @ ReactNativeFiber-dev.js:2604
batchedUpdates @ ReactNativeFiber-dev.js:2756
batchedUpdates @ ReactNativeFiber-dev.js:202
batchedUpdatesWithControlledComponents @ ReactNativeFiber-dev.js:209
_receiveRootNodeIDEvent @ ReactNativeFiber-dev.js:3559
receiveTouches @ ReactNativeFiber-dev.js:3572
__callFunction @ MessageQueue.js:302
(anonymous) @ MessageQueue.js:116
__guard @ MessageQueue.js:265
callFunctionReturnFlushedQueue @ MessageQueue.js:115
(anonymous) @ debuggerWorker.js:72
ShowLunch.js:24 RESPONSE OK : GET LUNCH, ID: 5
ShowLunch.js:27 {id: 5, title: ""Coconut, Beef and Winter melon "", description: ""[""Propre subline nom origines sans vers."", ""Italiq…rent mille qui."", ""Pour nostalgique fin chemin.""]"", portion: 4, supply: ""Aucun"", …}
ShowLunch.js:28 Headers {map: {…}}
ExceptionsManager.js:73 Warning: Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op.

Please check the code for the ShowLunch component.
</code></pre>

<p>I tried several things with the bind (this) or the arrows functions but I don't understand.</p>
","8213274","","","","","2018-01-17 01:30:33","react-native function in map","<reactjs><react-native><jsx>","1","0","","",""
"40094481","1","","","2016-10-17 19:47:58","","2","452","<p>I am trying to implement a game in react where I have the board as an two dimensional array in the initial state of the parent class. Tiles are rendered by iterating through that array. I pass those children a function as a prop so that they can change that state array.</p>

<p>Now, when I use that function to change the array, the HTML does not update. The array gets updated when I call setState but it never rerenders. I tried this.forceUpdate() but still no luck. What I then did was to pass a function from that child to the parent through the function to update that child's state and this works, but I need the function from the parent to call itself recursively to update the board. I feel like I might have hit an anti-pattern. How could I change my code in order for the DOM to update, please?</p>

<p>There is parts missing but those are all the components involved. statusBoard is the internal version of the board featuring the solution. I hope this is clear.</p>
","5140675","","3885376","","2017-12-11 21:50:23","2017-12-11 21:50:23","react.js does not update DOM after having changed state array","<javascript><arrays><reactjs>","1","0","","",""
"42167937","1","","","2017-02-10 20:14:40","","0","214","<blockquote>
  <p>I have a form which shows data based on a date range. On first time load, > it shows data for last 1 hour. I am using react date > > > > picker to render start and end times. When user changes start and end > > > dates, below function is called. In this function, I am trying to set > > > state with user-selected start and end dates, but state always holds > > > previous start and end date value </p>
</blockquote>

<pre><code>  refreshTableOnDateChange(startDateSelected,endDateSelected) {
            this.setState({startDate: null, endDate: null});
             console.log(""inside refreshTableOnDateChange this.state.startDate is"", startDateSelected);
             console.log(""inside refreshTableOnDateChange this.state.endDate is"", endDateSelected);
             let startDateFormatted = startDateSelected.format('YYYY-MM-DD HH:mm');
             let endDateFormatted = endDateSelected.format('YYYY-MM-DD HH:mm');
              this.setState({startDate: startDateFormatted, endDate: endDateFormatted});
              this.forceUpdate();
              console.log(""start date is"", this.state.startDate);
             console.log(""end date is"", this.state.endDate);
             this.load(this.state.orderType);
           }
</code></pre>
","7531683","","","","","2017-02-10 20:22:14","React - this.setState and this.forceUpdate doesn't update state to hold latest values","<reactjs>","1","0","","",""
"50618571","1","50618970","","2018-05-31 07:06:42","","0","67","<p>I need to re-render child component when parent state is changed</p>

<p>In parent Component in setting up the language
Once language changes child also to be update with the selected languaue</p>

<p>Parent.js</p>

<pre><code>import React, { Component } from ""react"";
import Child from ""./Child.js"";

class Parent extends Component {
  constructor(props) {
    super(props);    
    this.state ={
        lblName: ""Name"",
        lblGender: ""Gender"",
        lblDOB: ""Date Of Birth"",
        lblNatio: ""Nationality"",
      };
  }
    ChangeLanguage(lang, e){
      if(lang === ""en""){
           this.setState(
           {
              lblName: ""Name"",
              lblGender: ""Gender"",
              lblDOB: ""Date Of Birth"",
              lblNatio: ""Nationality"",
           });
      }
      else if(lang === ""sp""){
           this.setState(
           {
              lblName: ""Nombre"",
              lblGender: ""Género"",
              lblDOB: ""Fecha de nacimiento"",
              lblNatio: ""Nacionalidad"",
           });
      }

    }
    render() {    
    return (
        &lt;Child ChildData={this.state}&gt;
        &lt;button onClick = {this.ChangeLanguage.bind(this, en)}&gt;English&lt;/button&gt;
        &lt;button onClick = {this.ChangeLanguage.bind(this, sp)}&gt;Spanish&lt;/button&gt;
    )}
}
</code></pre>

<p>Parent state passing to child and making as child component</p>

<p>Child.js</p>

<pre><code>import React, { Component } from ""react"";


class Parent extends Component {
  constructor(props) {
    super(props);    
    this.state = this.props.ChildData;
  }
    componentWillReceiveProps(nextProps){
        this.forceUpdate();
        this.setState(nextProps.ChildData);
    }

    render() {    
    return (
        &lt;div&gt;
             &lt;div&gt;
                  &lt;label&gt;lblName&lt;/label&gt;
                  &lt;input type=""Text""&gt;&lt;/input&gt;
             &lt;/div&gt;
             &lt;div&gt;
                  &lt;label&gt;lblGender&lt;/label&gt;
                  &lt;input type=""Text""&gt;&lt;/input&gt;
             &lt;/div&gt;
             &lt;div&gt;
                  &lt;label&gt;lblDOB&lt;/label&gt;
                  &lt;input type=""Date""&gt;&lt;/input&gt;
             &lt;/div&gt;
             &lt;div&gt;
                  &lt;label&gt;lblNatio&lt;/label&gt;
                  &lt;input type=""Text""&gt;&lt;/input&gt;
             &lt;/div&gt;
        &lt;/div&gt;
    )}
}
</code></pre>

<p>Tried with these 2 solutions forceUpdate and set the state ... i failed 
I want to update the labels from the parent when ever the language c</p>
","9786905","","9786905","","2018-05-31 07:30:20","2018-05-31 07:39:54","How to force update child component from parent component in reactjs","<javascript><reactjs>","3","1","","",""
"50727041","1","50735857","","2018-06-06 18:16:51","","0","94","<p>I've been trying to implement the react-image-gallery v0.8.7 (0.8.8 has a <a href=""https://github.com/xiaolin/react-image-gallery/issues/288"" rel=""nofollow noreferrer"">bug</a>) from this npm package: <a href=""http://I&#39;ve%20been%20trying%20to%20implement%20the%20react-image-gallery%20from%20this%20npm%20package:%20https://github.com/xiaolin/react-image-gallery"" rel=""nofollow noreferrer"">https://github.com/xiaolin/react-image-gallery</a> and integrated following the <a href=""https://github.com/xiaolin/react-image-gallery#example"" rel=""nofollow noreferrer"">example</a> as follows (I am developing a Meteor web app):</p>

<pre><code>class MyGallery extends Component {
    constructor(props) {
    super(props);
    this.state = {
      mediaSrc: [],
      isFullScreen: false
    };
  }

  componentWillMount() {
    const mediaSrc = this.props.myObject.pictures.map((picture) =&gt; {
      return { original: picture, thumbnail: picture };
    });
    this.setState({ mediaSrc });
  }

  _onImageClick(event) {
    if (this.state.isFullScreen) {
      this._imageGallery.exitFullScreen();
      this.setState({ isFullScreen: false });
    } else {
      this._imageGallery.fullScreen();
      this.setState({ isFullScreen: true });
    }
  }

  render() {
    return (
      &lt;div className=""dish row""&gt;
        &lt;figure className=""center col-12"" &gt;
          &lt;div className=""dish__preview_container""&gt;
            &lt;ImageGallery
              ref={i =&gt; this._imageGallery = i}
              items={this.state.mediaSrc}
              onClick={this._onImageClick.bind(this)}
              showFullscreenButton={false}
              showIndex
              showPlayButton={false}
              showThumbnails={false}
            /&gt;
         &lt;/div&gt;
      );
  }
}

MyGallery.propTypes = {
  myObject: PropTypes.object.isRequired,
}

}
</code></pre>

<p>The object <code>myObject</code> contains the following value in the pictures array:</p>

<pre><code>[ 'https://media-cdn.tripadvisor.com/media/photo-s/05/6c/2b/9b/america-s-taco-shop.jpg',
  'https://www.cocinavital.mx/wp-content/uploads/2017/09/tostadas-de-tinga-de-pechuga-de-pollo-con-chipotle-video.jpg'
]
</code></pre>

<p>When rendering the ImageGallery is shown as expected, however when clicking on either the button aria-label=""Previous Slide"" or aria-label=""Next Slide"", doesn't show the respective image and throws the following exception on the developer tools console:</p>

<pre><code>Warning: Can't call setState (or forceUpdate) on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.
    in ImageGallery (created by MyGallery)
    in div (created by MyGallery)
</code></pre>

<p>Any suggestions for a solution, please?</p>

<p>Update: Had a reset of component state variables on the componenteWillUmnount method. Removed it, also tried with <a href=""https://atmospherejs.com/meteor/reactive-dict"" rel=""nofollow noreferrer"">Meteor Reactive Dic</a>t instead of component state variables. The exception remains, though.</p>
","1084126","","1084126","","2018-06-07 20:16:09","2018-06-07 20:16:09","Can't call setState (or forceUpdate) on an unmounted component. Memory leak on react-image-gallery","<javascript><reactjs><ecmascript-6>","1","1","","",""
"41439578","1","41439984","","2017-01-03 08:47:38","","1","107","<p>I have a react project with several react-classes and components. In most of these a window resize event and the new window dimension is needed. I don't want a window-event-listner in each component. How can I write a util-class that provides the dimension and is accesible from all other components?</p>

<pre><code>updateDimension: function() {
    const height= window.innerHeight;

    this.setState({
        height: height,
    });
    this.forceUpdate();
},
</code></pre>
","2204835","","","","","2017-01-03 09:12:49","How to provide window dimension in each react-class","<reactjs>","2","0","","",""
"41580557","1","41581536","","2017-01-10 23:56:46","","2","1337","<p>I'm trying to periodically reload an iframe but i'm using React so i can't manipulate the DOM directly. It seems like my best option is to use forceUpdate() because the url isn't changing so i can't use a state change to update it (See previous post here <a href=""https://stackoverflow.com/questions/41576794/whats-the-best-way-to-periodically-reload-an-iframe-with-react"">What&#39;s the best way to periodically reload an iframe with React?</a>). 
However when i try doing a forceUpdate() it doesn't re-render my component. Any ideas as to why?</p>

<pre><code>var Graph = React.createClass({
componentDidMount: function() {
    setInterval(function(){
        this.forceUpdate();
    }.bind(this), 5000);
},
render() {
    return (
        &lt;iframe src=""http://play.grafana.org/dashboard/db/elasticsearch-metrics"" width=""1900px"" height=""700px""/&gt;
    )
}
</code></pre>

<p>});</p>

<p>See the codepen here: <a href=""http://codepen.io/anon/pen/ggPGPQ"" rel=""nofollow noreferrer"">http://codepen.io/anon/pen/ggPGPQ</a></p>

<p>**I know grafana can be set to auto update, i'm just using this as an example iframe.   </p>
","7401148","","","","","2017-11-04 06:20:29","How to use forceUpdate() correctly?","<javascript><reactjs><iframe>","2","1","2","",""
"51015101","1","","","2018-06-25 00:53:11","","3","55","<p>I am using localStorage as a data source in a Vue js project. I can read and write but cannot find a way to use it reactively. I need to refresh to see any changes I've made. </p>

<p>I'm using the data as props for multiple components, and when I write to <code>localStorage</code> from the components I trigger a <code>forceUpdate</code> on the main App.vue file using the <code>updateDate</code> method.</p>

<p>Force update is not working here. Any ideas to accomplish this without a page refresh?</p>

<pre><code>...............
data: function () {
        return {
            dataHasLoaded: false,
            myData: '',
        }
    },
mounted() {
        const localData = JSON.parse(localStorage.getItem('myData'));
        const dataLength = Object.keys(localData).length &gt; 0;
        this.dataHasLoaded =  dataLength;
        this.myData = localData;
    },
methods: {
    updateData(checkData) {
        this.$forceUpdate();
        console.log('forceUpdate on App.vue')
    },
},
...............
</code></pre>
","9357618","","9357618","","2018-06-25 01:01:50","2018-06-26 03:23:45","How to make data from localStorage reactive in Vue js","<javascript><vuejs2><local-storage>","1","8","","",""
"50563434","1","","","2018-05-28 09:44:28","","2","57","<p>As far as i know these are the scenarios when react calls the <code>render()</code> method provided <code>shouldcomponentUpdate()</code> is not implemented.</p>

<ol>
<li>when your component get mounted initially</li>
<li>when state got changed using <code>this.setState()</code></li>
<li>when your component receives new <code>props</code></li>
<li>when <code>this.forceUpdate()</code> get called.</li>
</ol>

<p>Is there any other scenarios that i am missing?</p>
","2936159","","","","","2018-06-03 21:47:20","when does the `render()` method in react get called","<reactjs>","1","4","","",""
"50703141","1","","","2018-06-05 14:56:33","","1","46","<p>I'm using expandable panels (Material-UI) in rows with a react virtualized list and have been having issues with the heights auto-adjusting. I've read several SO posts and some issues on dynamic row heights on the react-virtualized site, but I have a specific problem where it seems like there's an 'off by one' issue with when the row height is adjusted after panel is expanded/collapsed.</p>

<p>Here's the expected behavior:</p>

<ol>
<li>Row panel expanded by default.</li>
<li>User clicks expandable panel row.</li>
<li>Row panel collapses.</li>
<li>Row height adjusts to panel collapse.</li>
</ol>

<p>Here's the actual behavior <em>FOR THE FIRST CLICK</em>:</p>

<ol>
<li>Row panel expanded by default.</li>
<li>User clicks expandable panel row.</li>
<li>Row panel collapses.</li>
<li>Row height does NOT adjust to panel collapse.</li>
<li>HOWEVER, on subsequent clicks the row height DOES adjust, but to the 'opposite' state, which leads to an inconsistency - i.e when the the row panel is clicked to expand again, the row height is adjusted to the row height as if it were collapsed, and vice versa. So when the panel is collapsed there's a bunch of white space after it, and when it's technically expanded the row height is too small to see the content.</li>
</ol>

<p>I'm not sure what other info to include besides posting code and noting that the onRowClick() IS firing when the panels are collapsed/expanded.</p>

<p>Here's the parent component:</p>

<pre><code>import React, { Component } from 'react';
import AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer';
import List from 'react-virtualized/dist/commonjs/List';
import { CellMeasurer, CellMeasurerCache } from 'react-virtualized/dist/commonjs/CellMeasurer';
import EquipSummaryRow from './EquipSummaryRow';
import './EquipSummary.css';

class EquipSummary extends Component {
  constructor(props) {
    super(props);

    this.cache = new CellMeasurerCache({
      fixedWidth: true,
    });

    this.rowRenderer = this.rowRenderer.bind(this);
    this.getDatum = this.getDatum.bind(this);
    this.onRowClick = this.onRowClick.bind(this);
  }

  getDatum(index) {
    const list = this.props.equipData;

    return list[index];
  }

  saveRef = (ref) =&gt; this.containerNode = ref;

  saveListRef = (ref) =&gt; {
    this.list = ref;
  }

  componentDidUpdate() {
    console.log('component updated');
    this.cache.clearAll();
    this.list.recomputeRowHeights();
  }

  onRowClick(e, index) {
    e.preventDefault();
    this.cache.clear(index);
    this.list.recomputeRowHeights();
    this.list.forceUpdateGrid();
  }

  rowRenderer({ index, key, parent, style }) {
    const datum = this.getDatum(index);
    return (
      &lt;div key={key} style={style}&gt;
        &lt;CellMeasurer
          cache={this.cache}
          columnIndex={0}
          key={key}
          rowIndex={index}
          parent={parent}
        &gt;
          {({ measure }) =&gt; (
            &lt;EquipSummaryRow
              onClick={(e, idx) =&gt; this.onRowClick(e, idx)}
              measure={measure}
              datum={datum}
              index={index}
            /&gt;
          )}
        &lt;/CellMeasurer&gt;
      &lt;/div&gt;
    );
  }

  render() {
    console.log('rendering..');
    return (
      &lt;div className=""EquipSummary-AutoSizer"" ref={this.saveRef}&gt;
        &lt;AutoSizer&gt;
          {({ width, height }) =&gt; (
            &lt;List
              ref={this.saveListRef}
              width={width}
              height={height}
              rowHeight={this.cache.rowHeight}
              rowCount={this.props.equipData.length}
              rowRenderer={this.rowRenderer}
              deferredMeasurementCache={this.cache}
              equipData={this.props.equipData}
            /&gt;
          )}
        &lt;/AutoSizer&gt;
      &lt;/div&gt;
    );
  }
}

export default EquipSummary;
</code></pre>

<p>And here's the component that represents a row:</p>

<pre><code>import React, { Component } from 'react';
import {
  Table,
  TableBody,
  TableHeader,
  TableHeaderColumn,
  TableRow,
  TableRowColumn,
} from 'material-ui/Table';
import { MuiThemeProvider } from 'material-ui/styles';
import ExpansionPanel from '@material-ui/core/ExpansionPanel';
import ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';
import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';
import Typography from '@material-ui/core/Typography';


class EquipSummaryRow extends Component {
  render() {
    const { datum } = this.props;

    return (
      &lt;div&gt;
        &lt;ExpansionPanel
          defaultExpanded
          onChange={e =&gt; this.props.onClick(e, this.props.index)}
        &gt;
          &lt;ExpansionPanelSummary expandIcon={&lt;div&gt;|&lt;/div&gt;}&gt;
            &lt;Typography&gt;{`${datum.type}      (id: ${datum.instance}, points: ${datum.points.length})`}&lt;/Typography&gt;
          &lt;/ExpansionPanelSummary&gt;
          &lt;ExpansionPanelDetails&gt;
            &lt;Table&gt;
              &lt;TableHeader
                displaySelectAll={false}
                adjustForCheckbox={false}
              &gt;
                &lt;TableRow&gt;
                  &lt;TableHeaderColumn&gt;Device&lt;/TableHeaderColumn&gt;
                  &lt;TableHeaderColumn&gt;Object ID&lt;/TableHeaderColumn&gt;
                  &lt;TableHeaderColumn&gt;Type&lt;/TableHeaderColumn&gt;
                  &lt;TableHeaderColumn&gt;Name&lt;/TableHeaderColumn&gt;
                  &lt;TableHeaderColumn&gt;Description&lt;/TableHeaderColumn&gt;
                  &lt;TableHeaderColumn&gt;Units&lt;/TableHeaderColumn&gt;
                  &lt;TableHeaderColumn&gt;Value&lt;/TableHeaderColumn&gt;
                &lt;/TableRow&gt;
              &lt;/TableHeader&gt;
              &lt;TableBody
                displayRowCheckbox={false}
              &gt;
                {datum.points.map((row, index) =&gt; (
                  &lt;TableRow key={row.id}&gt;
                    &lt;TableRowColumn&gt;{row.device}&lt;/TableRowColumn&gt;
                    &lt;TableRowColumn&gt;{row.objectID}&lt;/TableRowColumn&gt;
                    &lt;TableRowColumn&gt;{row.type}&lt;/TableRowColumn&gt;
                    &lt;TableRowColumn&gt;{row.name}&lt;/TableRowColumn&gt;
                    &lt;TableRowColumn&gt;{row.description}&lt;/TableRowColumn&gt;
                    &lt;TableRowColumn&gt;{row.units}&lt;/TableRowColumn&gt;
                    &lt;TableRowColumn&gt;{row.value}&lt;/TableRowColumn&gt;
                  &lt;/TableRow&gt;
                  ))}
              &lt;/TableBody&gt;
            &lt;/Table&gt;
          &lt;/ExpansionPanelDetails&gt;
        &lt;/ExpansionPanel&gt;
      &lt;/div&gt;
    );
  }
}

export default EquipSummaryRow;
</code></pre>

<p>Could this be an issue with how I'm using the cache? I've been beating my head with this so any suggestions appreciated!</p>
","5724381","","","","","2018-06-06 03:43:53","How to troubleshoot row height adjustment with expandable rows with react virtualized list?","<reactjs><material-ui><react-virtualized>","1","1","","",""
"51163468","1","","","2018-07-03 22:18:59","","1","29","<p>I am using Socket.io Callbacks with react. However, sometimes I get this warning</p>

<blockquote>
  <p>Warning: Can't call setState (or forceUpdate) on an unmounted
  component. This is a no-op, but it indicates a memory leak in your
  application. To fix, cancel all subscriptions and asynchronous tasks
  in the componentWillUnmount method.</p>
</blockquote>

<p>Fundamentally, I understand that the callback can be holding references to local data and preventing that data from being cleared until the callback is cleared.</p>

<p>Unfortunately Socket.io does not work with promises but with direct callbacks. What this means is that I may get a callback AFTER the component has unmounted since these callbacks cannot be ""cancelled""</p>

<p>I make sure that the server responds to all callbacks to make sure they get satisfied and therefore do not leak memory</p>

<p>I attempted to ""silence"" this warning by calling <code>this.setState({mounted:true});</code> in <code>componentDidMount</code> and    <code>this.setState({mounted:false});</code> in <code>componentWillUnmount</code></p>

<p>And then within my update simply checking <code>if(this.state.mounted)</code> before calling <code>this.setState()</code> within the socket.io callback.</p>

<p>This works for most cases. However it seems that in this case. The parent component causes this component </p>

<ul>
<li>componentDidMount

<ul>
<li>update state to mounted:true</li>
<li>send request to socket.io
-componentWillUnmount</li>
<li>update state to mounted:false</li>
</ul></li>
<li>componentDidMount

<ul>
<li>update state to mounted:true</li>
<li>send additional request to socket.io</li>
</ul></li>
<li>Callback response from socket.io

<ul>
<li>warning printed</li>
</ul></li>
</ul>

<p>How do I prevent this? Is there a better design pattern for sock.io</p>
","1481240","","1481240","","2018-07-04 11:31:59","2018-07-04 11:31:59","Socket.io Callbacks with react","<reactjs><socket.io>","2","2","","",""
"50677826","1","50678120","","2018-06-04 09:52:24","","0","51","<p>I put $testCounter in a plugin to make it global :</p>

<pre><code>Vue.use({
  install(Vue) {
    Vue.prototype.$testCounter = 0;
    Vue.prototype.$incrementCounter = () =&gt; {
      Vue.prototype.$testCounter++;
    };
});
</code></pre>

<p>I want to output it in some component. I also need its value to be updated globally, and reactively :</p>

<pre><code>&lt;template&gt;
  &lt;p&gt;{{ $testCounter }}&lt;/p&gt;
&lt;/template&gt;

&lt;script&gt;
  mounted() {
    let comp = this;
    comp.watcherId = setInterval(() =&gt; {
      comp.$incrementCounter();

      // I want to remove this line and still be reactive :
      comp.$forceUpdate();

    }, 1000);
  }
&lt;/script&gt;
</code></pre>

<p>I need the property to be reactive, I tried a multiple solution as watchers, computed props, vm.$set(...), but I can't find the right way to do this.</p>
","1786554","","4125923","","2018-06-04 10:50:35","2018-06-04 10:50:35","How do I make reactive global property in vuejs plugin?","<vuejs2><vue-component><vue-reactivity>","1","2","","",""
"49763456","1","","","2018-04-10 21:58:38","","0","11","<p>I am using react router v4 and I am passing props to the components in the <code>Route</code>. Problem I ham having is when triggerring api call withing the Route compoment which has another component.</p>

<p>Route -> renders componnet -> renders multiple components -> each of these call and api with setstate -> re renders component which Route is assigned to with empty state variables.</p>

<p><strong>app.js containing Switch</strong></p>

<pre><code>render() {
        const Main = () =&gt; (
            &lt;main&gt;
                &lt;Switch&gt;
                    &lt;Route exact path=""/"" component={()=&gt;&lt;Regulator web3={this.state.web3} accounts={this.state.accounts} passDataBack={this.passDataBack} /&gt;} /&gt;
                    &lt;Route exact path=""/tollboothoperator"" component={()=&gt;&lt;TollboothOperator web3={this.state.web3} accounts={this.state.accounts} passDataBack={this.passDataBack} /&gt;} /&gt;
                &lt;/Switch&gt;
            &lt;/main&gt;
        )
        return (
            &lt;div&gt;
                &lt;Menu /&gt;
                &lt;div className=""container-fluid""&gt;
                    &lt;header className=""text-center""&gt;
                        &lt;h1 className=""""&gt;B9Lab Final Exam&lt;/h1&gt;
                    &lt;/header&gt;
                    &lt;Main/&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }
</code></pre>

<p><strong>Route component (Regulator)</strong></p>

<pre><code>render() {
        const { formRErrors } = this.state;
        const { regulator, owner } = this.state;
        const isEnabled = owner.length &gt; 0;
        console.log(""regulator render"")
        console.log(this);
        let vehicle = '';
        let operator = '';
        if(isEnabled){
            vehicle = &lt;Vehicle regulator={regulator} owner={owner} web3={this.props.web3} accounts={this.props.accounts} passDataBack={this.props.passDataBack} /&gt;;
            operator = &lt;CreateTollboothOperator regulator={regulator} owner={owner} web3={this.props.web3} accounts={this.props.accounts} passDataBack={this.props.passDataBack} /&gt;;
        }
        return (
            &lt;div className=""container-fluid""&gt;
                &lt;div className=""row-fluid""&gt;
                &lt;form className=""form-inline"" onSubmit={this.handleSubmit}&gt;
                {formRErrors.map(error =&gt; (
                    &lt;p key={error}&gt;Error: {error}&lt;/p&gt;
                ))}
                &lt;div className=""form-group""&gt;
                    &lt;label htmlFor=""regulator_address"" className=""control-label""&gt;Regulator Address&lt;/label&gt;
                    &lt;input type=""text"" readOnly={isEnabled} className=""form-control"" id=""regulator_address"" placeholder=""Regulator Address"" value={this.state.regulator_address} onChange={this.handleChange}/&gt;
                &lt;/div&gt;
                &lt;button type=""submit"" disabled={isEnabled} className=""btn btn-primary""&gt;Confirm&lt;/button&gt;
                &lt;/form&gt;
                &lt;/div&gt;
                {vehicle}
                {operator}
            &lt;/div&gt;
        );
    }
</code></pre>

<p><strong>vehicle</strong></p>

<pre><code>render(){
        let options = this.accounts.map((option, index) =&gt; (
            &lt;option key={option} value={option}&gt;
                {option}
            &lt;/option&gt;
        ));
        let vehicleOptions = this.state.vehicleTypes.map((option, index) =&gt; (
            &lt;option key={option.id} value={option.id}&gt;
                {option.type}
            &lt;/option&gt;
        ));

        console.log(this);
        return(
            &lt;div className=""row top-buffer""&gt;
                &lt;h2&gt;Vehicle List&lt;/h2&gt;
                &lt;div className=""col-xs-10 col-sm-3 col-md-4""&gt;
                &lt;div className=""row-fluid""&gt;
                    &lt;form onSubmit={this.handleSubmit} className=""form-horizontal""&gt;
                        &lt;div className=""form-group""&gt;
                            &lt;label className=""control-label col-sm-2""&gt;Available Addresses:&lt;/label&gt;
                            &lt;div className=""col-sm-10""&gt;
                            &lt;select value={this.state.valueAddress} onChange={this.handleChangeAddress} name=""available_addresses"" className=""form-control form-control-inline""&gt;
                            {options}
                            &lt;/select&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div className=""form-group""&gt;
                            &lt;label className=""control-label col-sm-2""&gt;Set as vehicle:&lt;/label&gt;
                            &lt;div className=""col-sm-10""&gt;
                            &lt;select value={this.state.valueVehicle} onChange={this.handleChangeVehicle} name=""vehicles"" className=""form-control form-control-inline""&gt;
                            {vehicleOptions}
                            &lt;/select&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div className=""col-sm-offset-2 col-sm-10 ""&gt;
                            &lt;button type=""submit"" className=""btn btn-isuccess""&gt;Add&lt;/button&gt;
                        &lt;/div&gt;
                    &lt;/form&gt;
                &lt;/div&gt;
                &lt;/div&gt;
                &lt;div className=""col-xs-2 col-sm-6 col-md-8""&gt;
                    &lt;h3&gt;Assigned&lt;/h3&gt;
                    &lt;div&gt;{this.displayAssigned()}&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }
</code></pre>

<p>It is failing in the vehicle <code>handleSubmit</code> which is calling api, before it resolved it renders Regulator with empty state variables so i get following error. i use state variables to show hide components. vehicle is sub-component  of regulator, so when regulator gets hidden vehicle component throws below error has there is nothing on the page.</p>

<pre><code>Warning: Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op.

    Please check the code for the e component.
</code></pre>
","1164789","","1164789","","2018-04-11 10:52:24","2018-04-11 10:52:24","react router v4 reseting state on render from api calls","<reactjs><react-router-v4>","0","0","","",""