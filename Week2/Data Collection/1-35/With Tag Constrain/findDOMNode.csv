Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate
"42452402","1","","","2017-02-25 05:40:40","","0","1399","<p><a href=""https://i.stack.imgur.com/YTMJj.png"" rel=""nofollow noreferrer"">output look like this</a> when i click change text button it should replace the text (TodoApplication) with that value if it is empty value(should replace empty heading) the value was not changing in this code! can anyone edit the code to get a solution!</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var TodoApp = React.createClass({
  getInitialState: function() {
return {items: []};
  },
  updateItems: function(newItem) {
var allItems = this.state.items.concat([newItem]);
this.setState({items: allItems});
  },
  render: function() {
return (
  &lt;div&gt;
    &lt;TodoBanner/&gt;
    &lt;TodoList items={this.state.items}/&gt;

    &lt;TodoForm onFormSubmit={this.updateItems}/&gt;
  &lt;/div&gt;
);
  }
});

var TodoBanner = React.createClass({
  render: function() {
return (
  &lt;div className=""container""&gt;
    &lt;h3&gt;TODO Application&lt;/h3&gt;
  &lt;/div&gt;
);
  }
});

var TodoList = React.createClass({
  render: function() {
var createItem = function(itemText) {
  return (
    &lt;TodoListItem&gt;{itemText}
    &lt;/TodoListItem&gt;
  );
};
return &lt;ul&gt;{this.props.items.map(createItem)}&lt;/ul&gt;;
  }
});

var TodoListItem = React.createClass({
  render: function() {
return (
  &lt;li&gt;{this.props.children}&lt;/li&gt;
);
  }
});

var TodoForm = React.createClass({
  getInitialState: function() {
return {item: ''};
  },
  handleSubmit: function(e) {
e.preventDefault();
this.props.onFormSubmit(this.state.item);
this.setState({item: ''});
React.findDOMNode(this.refs.item).focus();
return;
  },
  onChange: function(e) {
this.setState({item: e.target.value});
  },
  render: function() {
return (
  &lt;div className=""container""&gt;
    &lt;form onSubmit={this.handleSubmit}&gt;
      &lt;input type='text' ref='item' onChange={this.onChange} value={this.state.item}/&gt;
      &amp;nbsp;
      &lt;input type='submit' value='Add' className=""btn btn-success""/&gt;&lt;br/&gt;
      &lt;input type='text' ref='item' onChange={this.onChange} value={this.state.item}/&gt;
      &amp;nbsp;
      &lt;input type='submit' value='Change Text' className=""btn btn-success""/&gt;
    &lt;/form&gt;
  &lt;/div&gt;
);
  }
});

ReactDOM.render(
  &lt;TodoApp/&gt;, document.getElementById('todo'));       </code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.js""&gt;&lt;/script&gt;

&lt;div id=""todo"" /&gt;</code></pre>
</div>
</div>
</p>
","7620369","","747579","","2017-02-25 07:23:05","2017-02-25 07:23:05","changing the value onclick in react-js","<reactjs><react-native><react-jsx>","1","3","1","",""
"36573175","1","38190987","","2016-04-12 12:23:30","","1","457","<p>I want to test login component in react using mocha</p>

<pre><code>const loginView = require('./index');
const React = require('react');
const ReactDOM = require('react-dom');
const ReactTestUtils = require('react-addons-test-utils');
const chai = require('chai');
const jsdom = require('mocha-jsdom');
const injectTapEventPlugin = require('react-tap-event-plugin');
const nock = require('nock');
const api = require('../../configuration').api;

injectTapEventPlugin();
chai.should();

describe('login', () =&gt; {

  beforeEach(() =&gt; {
    jsdom();
  });

  it('show error dialog when username or password is invalid', (done) =&gt; {
    const login = ReactTestUtils.renderIntoDocument(React.createElement(loginView));

    nock(api).post('user/access-token').reply(200);

    login.setState({
      email: 'test@email.tld',
      password: 'wrong-password'
    });

    ReactTestUtils.Simulate.touchTap(ReactDOM.findDOMNode(login.refs.signin).firstChild);

    setTimeout(() =&gt; {
      login.state.showErrorDialog.should.equal(true);
      login.setState({
        showErrorDialog: false
      });
      done();
    }, 1500);
  });
});
</code></pre>

<p>When sign in button is click, the ajax request check username and password (using superagent).</p>

<p>The problem is I don't want to use <strong>setTimeout</strong> function, I like to use a callback or promise when ajax request is complete. Is it possible ?</p>
","847841","","","","","2016-08-26 13:00:10","What is the best way for testing asynchronous react component","<testing><reactjs><mocha><webpack>","1","0","2","",""
"33990402","1","","","2015-11-30 01:56:10","","0","600","<p>I want to get Google Maps to show up in browser at full screen using reactjs.</p>

<p>My CSS:</p>

<pre><code>html, body, #map_canvas { height: 100%; margin: 0; padding: 0; width:100%; height:100%;}
</code></pre>

<p>My component is defined as follows:</p>

<pre><code>class GMap extends React.Component {
    render() {      
        return (&lt;div className=""GMap""&gt;
          &lt;div ref=""map_canvas"" id=""map_canvas""&gt;
          &lt;/div&gt;
        &lt;/div&gt;)
    }
    componentDidMount() {
        var mapOptions = {
          center: { lat: -34.397, lng: 150.644},
          zoom: 8
        };
        var map_canvas = ReactDOM.findDOMNode(this.refs.map_canvas);
        this.map = new google.maps.Map(map_canvas,
            mapOptions);
    }
}
</code></pre>

<p>My problem is that nothing shows up. If I specify in the CSS a <code>width:500px</code> and <code>height:500px</code> or some arbitrary value, I can see it, but if I don't, I don't see anything. I want to replicate this in React:</p>

<pre class=""lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;style type=""text/css""&gt;
      html, body, #map_canvas { height: 100%; margin: 0; padding: 0;}
    &lt;/style&gt;
    &lt;script type=""text/javascript""
      src=""https://maps.googleapis.com/maps/api/js?key=API_KEY""&gt;
    &lt;/script&gt;
    &lt;script type=""text/javascript""&gt;
      function initialize() {
        var mapOptions = {
          center: { lat: -34.397, lng: 150.644},
          zoom: 8
        };
        var map = new google.maps.Map(document.getElementById('map_canvas'),
            mapOptions);
      }
      google.maps.event.addDomListener(window, 'load', initialize);
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=""map_canvas""&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Also, on this line: <code>&lt;div ref=""map_canvas"" id=""map_canvas""&gt;</code> Am I being redundant with ref and id?</p>

<p>I am using ES6, but am open to JSX solutions. I do not want to use any existing ""react-google-map-library"" for reasons that I want to simply use the existing library.</p>
","971888","","1434116","","2016-01-31 03:23:06","2016-01-31 03:23:06","How to get Google Maps to show up at 100% in browser with reactjs?","<google-maps-api-3><reactjs><ecmascript-6><react-jsx>","1","0","","",""
"35318096","1","35318387","","2016-02-10 14:37:42","","-1","73","<p>In my react application I wrote this following code (filename SearchBox.jsx) :</p>

<pre><code>import React from 'react'
import ReactDOM from 'react-dom'
import $ from 'jquery'

export default class SearchBox extends React.Component {
    createAjax() {
        let query = ReactDOM.findDOMNode(this.refs.query).value
        let category = ReactDOM.findDOMNode(this.refs.category).value
        let URL = `https://another.url.com/search?term=${query}&amp;country=us&amp;entity=${category}`
        this.props.search(URL)
        console.log(URL)
    }

    render() {
        return (
            &lt;div className=""app__wrapper""&gt;
                &lt;section className=""map-container""&gt;
                    &lt;iframe src=""https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d89077.13001931181!2d4.835120949999999!3d45.7579555!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sfr!2sfr!4v1455092172025"" width=""100%"" height=""100%"" frameBorder=""0"" style={{border:0}} allowFullScreen&gt;
                    &lt;/iframe&gt;
                &lt;/section&gt;
                &lt;section className=""header""&gt;
                    &lt;div className=""header__logo""&gt;
                        &lt;i className=""fa fa-shopping-basket""&gt;&lt;/i&gt;
                        &lt;h1&gt;&lt;b&gt;my&lt;/b&gt;Market&lt;/h1&gt;
                    &lt;/div&gt;
                &lt;/section&gt;
                &lt;section className=""search""&gt;
                    &lt;div className=""search__wrapper""&gt;
                        &lt;div className=""search__bar""&gt;
                            &lt;input type=""text"" className=""search__input"" placeholder=""Recherche à proximité de ...""&gt;&lt;/input&gt;
                            &lt;button className=""search__button search__button--close""&gt;&lt;i className=""fa fa-times""&gt;&lt;/i&gt;
                            &lt;/button&gt;
                        &lt;/div&gt;
                        &lt;ul className=""search__list""&gt;
                            &lt;li className=""search__item search__item--prox""&gt;&lt;i className=""fa fa-dot-circle-o""&gt;&lt;/i&gt;
                                Ma position actuelle
                            &lt;/li&gt;
                            &lt;li className=""search__item""&gt;Lyon&lt;/li&gt;
                            &lt;li className=""search__item""&gt;Chassieu&lt;/li&gt;
                            &lt;li className=""search__item""&gt;Villeurbanne&lt;/li&gt;
                            &lt;li className=""search__item""&gt;Mâcon&lt;/li&gt;
                            &lt;li className=""search__item""&gt;vaux-en-velin&lt;/li&gt;
                        &lt;/ul&gt;
                    &lt;/div&gt;
                &lt;/section&gt;
                &lt;script type=""text/javascript""&gt;
                    console.log(""blabla"")
                &lt;/script&gt;
            &lt;/div&gt;
        )
    }
}
</code></pre>

<p>I am new to react.js, and I am not sure what happened. 
No errors occured in my browser console.</p>

<p>But if I would like to add some jQuery script Ilike this in the script tag:</p>

<pre><code>&lt;script type=""text/javascript""&gt;
    $(document).ready(function(){
        $('.search__input').on(""focusin"", function(){
            $('.search__button--close').fadeIn();
            $('.search__list').css('display', 'block');
        });
        $('.search__input').on(""focusout"", function(){
            $('.search__button--close').fadeOut();
            $('.search__list').css('display', 'none');
        });
        $('.days__item').on('click', function(){
            if($(this).attr('data-checked') == 'true'){
                $(this).attr('data-checked', 'false');
            } else {
                $(this).attr('data-checked', 'true');
            }
        })
    });
&lt;/script&gt;
</code></pre>

<p>I have this following error in my browser console:</p>

<pre><code>Module build failed: SyntaxError: /my/path/to/SearchBox.jsx: Unexpected token (62:26)
  60 |                             $('.search__button--close').fadeIn();
  61 |                             $('.search__list').css('display', 'block');
&gt; 62 |                         });
     |                           ^
  63 |                         $('.search__input').on(""focusout"", function(){
  64 |                             $('.search__button--close').fadeOut();
  65 |                             $('.search__list').css('display', 'none');
</code></pre>
","3632340","","3632340","","2016-02-11 08:14:59","2016-02-11 08:14:59","write and display correctly and in best practice javascript code in react","<javascript><jquery><html><reactjs><syntax-error>","2","0","","",""
"34141207","1","34159803","","2015-12-07 19:04:48","","2","1667","<p>I still search for a tutorial which explains how to build a structure for the following scenario</p>

<ul>
<li>on app boot <code>/</code> I have all listed items</li>
<li>click on specific item redirects to a new route /itemid and shows item details</li>
</ul>

<p>till now my structure</p>

<pre><code>app
-- dist
-- src
--- components
---- Layout.js
---- Items.js
---- Item.js
--- actions
--- stores
--- dispatchers
--- services
-- styles
Root.js
App.js
index.js
webpack.config.js
package.json
</code></pre>

<p>index.js</p>

<pre><code>import React from 'react';
import { createHistory, createHashHistory } from 'history';
import Root from './Root';

const rootEl = document.getElementById('workshop-booker');
// Use hash location for Workshop Pages
// but switch to HTML5 history locally.
const history = process.env.NODE_ENV === 'production' ?
    createHashHistory() :
    createHistory();

React.render(&lt;Root history={history} /&gt;, rootEl);
</code></pre>

<p>Root.js</p>

<pre><code>import React, { PropTypes, Component } from 'react';
import { Router, Route } from 'react-router';

import App from './App';
import Workshops from './components/Workshops';
import Workshop from './components/Workshop';

export default class Root extends Component {
    static propTypes = {
        history: PropTypes.object.isRequired
    }

    render() {
        const { history } = this.props;
        return (
            &lt;Router history={history}&gt;
                &lt;Route name='workshops' path='/' component={App}&gt;
                    &lt;Route name='workshop' path='/:slug' component={Workshop} /&gt;
                &lt;/Route&gt;
            &lt;/Router&gt;
        );
    }
}
</code></pre>

<p>App.js</p>

<pre><code>import React, { PropTypes } from 'react';
import Layout from './components/Layout';
import DocumentTitle from 'react-document-title';

export default class App {
    static propTypes = {
        children: PropTypes.object
    };

    render() {
        return (
            &lt;DocumentTitle title='Workshop Booker'&gt;
                &lt;div className='App'&gt;
                    &lt;Layout {...this.props} /&gt;
                    &lt;hr /&gt;
                    {this.props.children}
                &lt;/div&gt;
            &lt;/DocumentTitle&gt;
        );
    }
}
</code></pre>

<p>Layout component</p>

<pre><code>import React, { Component, PropTypes, findDOMNode } from 'react';
import shouldPureComponentUpdate from 'react-pure-render/function';
import Workshops from './Workshops';

export default class Layout extends Component {
    static propTypes = {
        params: PropTypes.shape({
            login: PropTypes.string,
            name: PropTypes.string
        })
    };

    static contextTypes = {
        history: PropTypes.object.isRequired
    };

    shouldComponentUpdate = shouldPureComponentUpdate;

    constructor(props) {
        super(props);
    }

    componentWillReceiveProps(nextProps) {
        this.setState({
            loginOrRepo: parseFullName(nextProps.params)
        });
    }

    render() {
        return (
            &lt;div className='Explore'&gt;
                    &lt;Workshops /&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>I have been following this e<a href=""http://gaearon.github.io/flux-react-router-example"" rel=""nofollow"">xample</a> and mainly my structure follows the idea behind but the thing is that all inherited components are warpped as child. How do I generate the structure to open a new view?</p>

<p>but</p>
","1831740","","1831740","","2015-12-08 15:23:09","2015-12-08 15:31:58","react-router how to build app structure?","<reactjs><react-router>","1","4","","",""
"42462338","1","42463798","","2017-02-25 22:28:26","","2","3425","<p>I'm trying to incorporate <a href=""http://jvectormap.com/tutorials/getting-started/"" rel=""nofollow noreferrer"">this map</a>  into an existing grails/react project.</p>

<p>Updated code:</p>

<p>index.js</p>

<pre><code>ReactDOM.render((

    &lt;Router history = {browserHistory}&gt;
        &lt;Route path=""/"" component={CreateAccount}/&gt;
        &lt;Route path=""/menu"" component={Menus}/&gt;
        &lt;Route path=""/discover"" component={DiscoverApp}/&gt;

        &lt;Route path=""/NorthAmerica"" component={northAmerica}/&gt;
        &lt;Route path=""/SouthAmerica"" component={southAmerica}/&gt;
        &lt;Route path=""/Europe"" component={europe}/&gt;
        &lt;Route path=""/Asia"" component={asia}/&gt;
        &lt;Route path=""/Africa"" component={africa}/&gt;
        &lt;Route path=""/Australia"" component={australia}/&gt;
    &lt;/Router&gt;

), document.getElementById('root'));
</code></pre>

<p>index.gsp</p>

<pre><code>&lt;head&gt;
        &lt;title&gt;Food App&lt;/title&gt;
    &lt;link rel=""stylesheet"" href=""${resource(dir: 'css', file: 'text.css')}"" type = ""text/css""&gt;
    &lt;link rel=""stylesheet"" href=""${resource(dir: 'css', file: 'jquery-jvectormap-2.0.3.css')}"" type = ""text/css"" media=""screen""&gt;
&lt;javascript src=""/js/jquery-3.1.1.js"" /&gt;
&lt;javascript src=""jquery-jvectormap-2.0.3.min.js"" /&gt;
&lt;javascript src=""jquery-jvectormap-world-mill-en.mins.js"" /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id=""root"" align=""left""&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;asset:javascript src=""bundle.js""/&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>and</p>

<pre><code>import React, { Component } from 'react';
import {Link} from 'react-router';
import $ from 'jquery';
import ReactDOM from 'react-dom';

class NorthAmerica extends Component {

    componentDidMount() {
        const el = ReactDOM.findDOMNode(this.display);
        $(el).vectorMap({map: 'world_mill_en'});
    }

    render(){
        return(
            &lt;div&gt;
                &lt;h1&gt;NORTH AMERICA MAP PLACE-HOLDER&lt;/h1&gt;
                &lt;li&gt;&lt;Link to=""/discover""&gt;DISCOVER&lt;/Link&gt;&lt;/li&gt;
                &lt;div
                    ref={display =&gt; this.display = display}
                /&gt;
            &lt;/div&gt;
        )
    }
}

export class northAmerica extends React.Component{
    render(){
        return(&lt;NorthAmerica/&gt;);
    }
}
</code></pre>

<p>Any suggestions? Thanks!</p>

<p>Updated:</p>

<p>Page loads now... but where the map should be is just a blank div. I get this error in the console:</p>

<pre><code>Uncaught TypeError: (0 , _jquery2.default)(...).vectorMap is not a function
    at NorthAmerica.componentDidMount (bundle.js?compile=false:12781)
    at bundle.js?compile=false:26803
    at measureLifeCyclePerf (bundle.js?compile=false:26613)
    at bundle.js?compile=false:26802
    at CallbackQueue.notifyAll (bundle.js?compile=false:9088)
    at ReactReconcileTransaction.close (bundle.js?compile=false:31708)
    at ReactReconcileTransaction.closeAll (bundle.js?compile=false:5241)
    at ReactReconcileTransaction.perform (bundle.js?compile=false:5188)
    at ReactUpdatesFlushTransaction.perform (bundle.js?compile=false:5175)
    at ReactUpdatesFlushTransaction.perform (bundle.js?compile=false:1438)
</code></pre>
","7622546","","7622546","","2017-02-28 04:10:05","2017-02-28 04:10:05","How do you embed and call an external javascript function in a react component?","<javascript><reactjs><grails>","3","0","2","",""
"50110766","1","","","2018-05-01 02:46:50","","0","49","<p>I am trying to give the users the ability to move panes around the ui by dragging a tab within the pane to another pane and dropping it there. I am creating a mock in story book right now for R&amp;D purposes so my example will not connect to a store but pass to the app level and adjust the state to trigger the change down the pipe.</p>

<p>The packages in question are:</p>

<pre><code>""react-dnd"": ""2.5.4"",
""react-dnd-multi-backend"": ""3.1.2"",
</code></pre>

<p>I am using React 16.2 with ES6 rules</p>

<p>Here is the offending code as follows:</p>

<p>Story Demo/App Level:</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import uuidv4 from 'uuid/v4';
import HTML5Backend from 'react-dnd-html5-backend';
import TouchBackend from 'react-dnd-touch-backend';
import MultiBackend, { TouchTransition } from 'react-dnd-multi-backend';
import { DragDropContext } from 'react-dnd';

// Components
import Ne8DropTargetPane from './Ne8DropTargetPane';

// Styles
import './Ne8PortablePanes.demo.less';

const HTML5toTouch = {
    backends: [
        {
            backend: HTML5Backend,
        },
        {
            backend: TouchBackend({ enableMouseEvents: true }),
            preview: true,
            transition: TouchTransition,
        },
    ],
};

function collect(connect, monitor) {
    return {
        highlighted: monitor.canDrop(),
        hovered: monitor.isOver(),
        connectDropTarget: connect.dropTarget(),
    };
}

class Ne8PortablePanes extends Component {
    static defaultProps = {
        panes: [ {
            paneId: 'left',
            tabs: [
                {
                    id: 'entities',
                    dragType: 'supplemental',
                    name: 'Entities',
                },
                {
                    id: 'systems',
                    dragType: 'supplemental',
                    name: 'Systems',
                },
            ],
        }, {
            paneId: 'center',
            tabs: [
                {
                    id: 'networkDiagram',
                    dragType: 'diagram',
                    name: 'Network Diagram',
                },
                {
                    id: 'deploymentDiagram',
                    dragType: 'diagram',
                    name: 'Deployment Diagram',
                },
            ],
        }, {
            paneId: 'right',
            tabs: [
                {
                    id: 'properties',
                    dragType: 'supplemental',
                    name: 'Properties',
                },
            ],
        }, {
            paneId: 'bottom',
            tabs: [
                {
                    id: 'options',
                    dragType: 'supplemental',
                    name: 'Options',
                },
            ],
        } ],
    }

    static propTypes = {
        panes: PropTypes.array,
    }

    state = {
        // panes: this.props.panes,
    }

    render() {
        // const { panes } = this.state;

        return (
            &lt;div className=""container"" &gt;
                &lt;div className=""header"" &gt;
                    &lt;h1&gt;Header&lt;/h1&gt;
                &lt;/div&gt;
                &lt;div className=""workspace"" &gt;
                    &lt;div className=""stage""&gt;
                        &lt;div className=""left-pane""&gt;
                            { this.renderPane('left') }
                        &lt;/div&gt;
                        &lt;div className=""center-pane""&gt;
                            { this.renderPane('center') }
                        &lt;/div&gt;
                        &lt;div className=""right-pane""&gt;
                            { this.renderPane('right') }
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div className=""bottom-pane""&gt;
                        { this.renderPane('bottom') }
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div className=""footer"" &gt;
                    &lt;h1&gt;Footer&lt;/h1&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

    renderPane(paneId) {
        const { panes } = this.props;

        const tabs = panes.reduce((result, pane) =&gt; {
            if (pane.paneId === paneId) {
                if (pane.tabs) {
                    pane.tabs.forEach(tab =&gt; {
                        result.push(tab);
                    });
                }
            }

            return result;
        }, []);

        return (
            &lt;Ne8DropTargetPane
                key={ uuidv4() }
                paneId={ paneId }
                tabs={ tabs } /&gt;
        );
    }
    /*
    handleTabRef = (el) =&gt; {
        if (!this.tabRefs) {
            this.tabRefs = [];
        }

        if (el) {
            this.tabRefs.push(el);
        }
    }
    */
}

export default DragDropContext(MultiBackend(HTML5toTouch))(Ne8PortablePanes);
</code></pre>

<p>The Pane Level:</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
// import { findDOMNode } from 'react-dom';
import uuidv4 from 'uuid/v4';
import { DropTarget } from 'react-dnd';

// Components
import Ne8DraggableTab from './Ne8DraggableTab';

const Types = {
    PANE: 'pane',
};

const targetPaneAcquired = {
    canDrop(props, monitor) {
        // const item = monitor.getItem();
        // console.log('dropped item', item);

        return true; // return bool if Types match or not
    },
    hover(props, monitor) {
        // console.log('monitor', monitor);
        // const clientOffset = monitor.getClientOffset();
        // const componentRect = findDOMNode(component).getBoundingClientRect(); // Get Pane by REF instead of findDOMNode
        // const isJustOverThisOne = monitor.isOver({ shallow: true });
        // const canDrop = monitor.canDrop();
        // console.log('clientOffset', clientOffset);
        // console.log('componentRect', componentRect); // Get Pane by REF instead of findDOMNode
        // console.log('isJustOverThisOne', isJustOverThisOne);
        // console.log('canDrop', canDrop);
    },
    drop(props, monitor) {
        return monitor.getItem();

        if (monitor.didDrop()) {
            // If you want, you can check whether some nested
            // target already handled drop
            return;
        }
        // Obtain the dragged item
        // const item = monitor.getItem();
        // console.log('drop function', item);
        // Call the updatePanes handler
    },
};

function collect(connect, monitor) {
    return {
        connectDropTarget: connect.dropTarget(),
        isOver: monitor.isOver(),
        isOverCurrent: monitor.isOver({ shallow: true }),
        canDrop: monitor.canDrop(),
    };
}

class Ne8DropTargetPane extends Component {
    componentWillReceiveProps(nextProps) {
        console.log('componentWillReceiveProps');
        const { isOver } = this.props;

        if (!isOver &amp;&amp; nextProps.isOver) {
            console.log('You can use this as enter handler');
        }

        if (isOver &amp;&amp; !nextProps.isOver) {
            console.log('You can use this as leave handler');
        }
    }

    render() {
        // const { paneId, tabs, isOver, canDrop, connectDropTarget } = this.props;
        const { paneId, tabs, isOver, canDrop, connectDropTarget } = this.props;

        if (isOver &amp;&amp; !canDrop) { // TRUE, FALSE
            console.log('TRUE, FALSE', paneId);

            return connectDropTarget(
                &lt;div className={ `pane undroppable ${paneId}` } &gt;
                    &lt;div className=""tabs""&gt;
                        { tabs.map((tab) =&gt; this.renderTab(tab)) }
                    &lt;/div&gt;
                    &lt;div className=""content""&gt;
                        &lt;h2&gt;{ paneId } content...&lt;/h2&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            );
        } else if (!isOver &amp;&amp; canDrop) { // FALSE, TRUE
            console.log('FALSE, TRUE', paneId, tabs);

            return connectDropTarget(
                &lt;div className={ `pane available ${paneId}` } &gt;
                    &lt;div className=""tabs""&gt;
                        { tabs.map((tab) =&gt; this.renderTab(tab)) }
                    &lt;/div&gt;
                    &lt;div className=""content""&gt;
                        &lt;h2&gt;{ paneId } content...&lt;/h2&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            );
        } else if (isOver &amp;&amp; canDrop) {
            console.log('TRUE, TRUE', paneId);

            return connectDropTarget(
                &lt;div className={ `pane targetReady ${paneId}` } &gt;
                    &lt;div className=""tabs""&gt;
                        { tabs.map((tab) =&gt; this.renderTab(tab)) }
                    &lt;/div&gt;
                    &lt;div className=""content""&gt;
                        &lt;h2&gt;{ paneId } content...&lt;/h2&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            );
        }
        console.log('FALSE, FALSE', paneId);

        return connectDropTarget(
            &lt;div className={ `pane unavailable ${paneId}` } &gt;
                &lt;div className=""tabs""&gt;
                    { tabs.map((tab) =&gt; this.renderTab(tab)) }
                &lt;/div&gt;
                &lt;div className=""content""&gt;
                    &lt;h2&gt;{ paneId } content...&lt;/h2&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

    renderTab = (tab) =&gt; {
        return (
            &lt;Ne8DraggableTab
                key={ uuidv4() }
                tab={ tab } /&gt;
        );
    }

    handleDrop = (e) =&gt; {
        console.log('handleDrop', e);
    }
}

const propTypes = {
    paneId: PropTypes.string.isRequired,
    tabs: PropTypes.array.isRequired,
    connectDropTarget: PropTypes.func.isRequired,
    isOver: PropTypes.bool.isRequired,
    canDrop: PropTypes.bool.isRequired,
    isOverCurrent: PropTypes.bool.isRequired,
};

Ne8DropTargetPane.propTypes = propTypes;

export default DropTarget(Types.PANE, targetPaneAcquired, collect)(Ne8DropTargetPane);
</code></pre>

<p>The Tab/Content Level:</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { DragSource } from 'react-dnd';

const Types = {
    TAB: 'pane',
};

const cardSource = {
    beginDrag(props) {
        const { tab } = props;
        const item = { id: tab.id };

        return item;
    },
    endDrag(props, monitor) {

        if (!monitor.didDrop()) {
            return;
        }

        // When dropped on a compatible target, do something
        const item = monitor.getItem();
        const dropResult = monitor.getDropResult();
    },
};

function collect(connect, monitor) {
    return {
        connectDragSource: connect.dragSource(),
        isDragging: monitor.isDragging(),
    };
}

class Ne8DraggableTab extends Component {
    render() {
        const { isDragging, connectDragSource, tab } = this.props;
        const { tabId, name } = tab;

        return connectDragSource(
            &lt;div
                className=""tab""
                id={ tabId }
                style={ { opacity: isDragging ? 0.5 : 1 } }
                ref={ this.handleTabRef }&gt;
                { name }
            &lt;/div&gt;
        );
    }
}

const propTypes = {
    tab: PropTypes.object.isRequired,
    isDragging: PropTypes.bool.isRequired,
    connectDragSource: PropTypes.func.isRequired,
};

Ne8DraggableTab.propTypes = propTypes;

export default DragSource(Types.TAB, cardSource, collect)(Ne8DraggableTab);
</code></pre>

<p>CSS/LESS:</p>

<pre><code>@import '~styles/globals/mixins.less';

.container {
    .flex-column;
    width: 600px;
    height: 400px;
    border: 1px solid #000;
    margin: 0 auto;

    h1, h2 {
        font-size: 1.4rem;
        line-height: 1.4;
        padding: 5px 10px;
    }

    h2 {
        font-size: 0.9rem;
        line-height: 0.9;
    }

    .header, .workspace, .footer {
        flex: 0 0 auto;
        border: 1px solid #000;
    }

    .header h1, .footer h1 {
        padding: 3px 15px;
    }

    .workspace {
        .flex-column;
        flex: 1 1 auto;

        .stage, .bottom-pane {
            .flex-row;
            flex: 0 0 auto;
            border: 1px solid #000;
        }

        .stage {
            height: 100%;
            flex: 1 1 auto;

            .left-pane, .center-pane, .right-pane {
                .flex-column;
                flex: 0 0 auto;
                border: 1px solid #000;
            }

            .center-pane {
                flex: 1 1 auto;
            }
        }

        .pane {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;

            .tabs {
                display: flex;
                flex: 0 0 auto;
                border-bottom: 1px solid #000;

                .tab {
                    border: 1px solid #000;
                    padding: 3px 6px;
                    font-size: 0.75rem;
                    line-height: 0.75;
                }
            }

            .content {
                flex: 1 1 auto;
            }
        }

        .targetReady {
            background: green;
        }

        .undroppable {
            background: red;
        }

        .available {
            background: lightblue;
        }

        .unavailable {
            background: none;
        }
    }
}
</code></pre>

<p>The error:</p>

<p>OffsetUtils.js:45 Uncaught TypeError: Cannot read property 'nodeName' of undefined
    at isImageNode (OffsetUtils.js:45)
    at getDragPreviewOffset (OffsetUtils.js:63)
    at HTML5Backend.handleTopDragStart (HTML5Backend.js:420)</p>

<p>Here is the offending Function in OffsetUtils.js:</p>

<pre><code>function isImageNode(node) {
// Here nodeName doesn't exist
    return node.nodeName === 'IMG' &amp;&amp; ((0, _BrowserDetector.isFirefox)() || !document.documentElement.contains(node));
}
</code></pre>
","2140496","","2140496","","2018-05-01 02:56:21","2018-05-01 02:56:21","react-dnd, react-dnd-multi-backend, monitor.getItem() causes Uncaught TypeError: Cannot read property 'nodeName' of undefined","<reactjs><drag-and-drop><monitor><react-dnd><storybook>","0","0","","",""
"42629448","1","42631921","","2017-03-06 15:28:53","","0","142","<p>It's a pain to work with react.js when it comes to form. I was from angular, because of 2 ways binding things are great, it's fast to integrate stuff. But when in react I admit I'm lost.</p>

<p>Says it's a user profile, I got this data from API</p>

<pre><code>var profile = {
    name:""Gaila"",
    age:22,
    skills: [{id:1,name:""react""},{id:1,name:""angular""}],
    club: [{id:1,name:""dancing""},{id:1,name:""hiking""}],
    description: ""some long string""
};
</code></pre>

<p>on the UI I have <code>text input</code>, <code>textarea</code>, <code>checkbox</code> and <code>select</code>.</p>

<p>How would I handle it when user clicked to save? Do I have to bind every single input elements with onChange? like handleNameChange, handleAgeChange, handleSkillsChange.. omg it's ridiculous.</p>

<p>So ref came into my mind, easy, just do <code>ref=""name""</code> and I can get it by <code>ReactDOM.findDOMNode(this.refs.name).value</code>, but wait, it doesn't work on <code>&lt;select&gt;</code>, it's bad sometime I use ref, sometime I go with handle function.</p>

<p>Guys, I seriously, really need help!</p>
","7667281","","5606916","","2017-03-06 16:25:18","2017-03-07 09:07:28","Submitting big forms with react.js","<javascript><forms><reactjs><form-submit>","2","5","","",""
"41274827","1","41274979","","2016-12-22 02:13:19","","0","718","<p>I'm trying to study on how to use typescript and react js. I follow this <a href=""https://www.typescriptlang.org/docs/handbook/react-&amp;-webpack.html"" rel=""nofollow noreferrer"">link</a> and I successfully install the files. here's the package.json </p>

<pre><code>{
  ""name"": ""proj"",
  ""version"": ""1.0.0"",
  ""description"": ""hello world"",
  ""main"": ""index.js"",
  ""scripts"": {
    ""test"": ""sample""
  },
  ""author"": """",
  ""license"": ""ISC"",
  ""dependencies"": {
    ""@types/react"": ""^0.14.55"",
    ""@types/react-dom"": ""^0.14.19"",
    ""react"": ""^15.4.1"",
    ""react-dom"": ""^15.4.1""
  },
  ""devDependencies"": {
    ""awesome-typescript-loader"": ""^3.0.0-beta.17"",
    ""source-map-loader"": ""^0.1.5"",
    ""typescript"": ""^2.1.4"",
    ""webpack"": ""^1.14.0"",
     ""todomvc-app-css"": ""^2.0.0"",
    ""todomvc-common"": ""^1.0.0""
  }
}
</code></pre>

<p>and here is the code of my tsx. </p>

<pre><code>import * as React from ""react"";
import * as ReactDOM from ""react-dom"";

export interface ItemProps { todoItem:string; getIndex:number; onDelete:any; onEdit:any; onChange:number}
interface ItemState {clickEdit:string;text:string}


export class TodoItem extends React.Component&lt;ItemProps, ItemState&gt; {

    public state:ItemState;


    constructor(props:ItemProps){
        super(props);
        this.handleChange = this.handleChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
        this.state = {clickEdit:"""",text:this.props.todoItem};
    }
    public handleChange(e) {
        this.setState({text: e.target.value});
    }
    public handleSubmit(e){

        this.setState({clickEdit:""""});
    }
    public delete(){
        this.props.onDelete(this.props.getIndex);
    }
    public edit(){

        var node = React.findDOMNode&lt;HTMLInputElement&gt;(this.refs[""editField""]);
        node.focus();
        this.setState({clickEdit:""editing""});
        this.props.onEdit(this.props.getIndex);
    }
    public render() {

       return (    
                &lt;li className={this.state.clickEdit}&gt;
                    &lt;div className=""view""&gt;                          
                        &lt;label onDoubleClick={e =&gt; this.edit()}&gt;{this.props.todoItem}&lt;/label&gt;
                        &lt;button className=""destroy"" onClick={e =&gt; this.delete()}&gt;&lt;/button&gt;
                    &lt;/div&gt;
                     &lt;input ref=""editField"" className=""edit"" onBlur={e =&gt; this.handleSubmit(e)} value={this.state.text} onChange={e =&gt; this.handleChange(e)} autoFocus={true} /&gt;
                &lt;/li&gt;
               );  
    }
}
</code></pre>

<p>I don't know why I cannot use <strong>findDOMNode</strong>. I already import the REACT. Do I miss something in my files or there is something that I need to install</p>
","3818576","","","","","2016-12-22 02:34:36","Property 'findDOMNode' does not exist on type 'typeof React'","<javascript><reactjs><typescript>","1","0","1","",""
"36672338","1","","","2016-04-17 03:25:05","","1","181","<p>So I'm very new to reactjs and using chart-js-rails gem and react-rails gem in a Rails 4 application.  In componentDidMount method I want to essentially create a bar chart.  The data is getting fetched correctly as I can see it in the React chrome dev tools.  </p>

<p>The issue is that I get error <em>chart_container.self-40c721a….js?body=1:17 Uncaught TypeError: barNode.getContext is not a function</em>.  This means somehow the ReactDOM.findDOMNode() is not returning an element that I can perform getContext(""2d"") on.  </p>

<p>1 - Is it possible to use jQuery/Javascript and mix it with React this way to create a Chart.js bar chart in the CView component which will then be rendered in the Container component class?
2 - If no to #1, then what should I do to create a chart?</p>

<pre><code>@Container = React.createClass

  # set initial state before mounting component
  getInitialState: -&gt;
    # set to true once data has been fetched
    getData: false
    # The data JSON array used to display the data in the view
    someData: []

  #some other code here...

  componentDidUpdate: -&gt;
    barNode = ReactDOM.findDOMNode(@refs.barChart)
    barChart = new Chart(barNode.getContext(""2d"")).Bar(@state.someData)

  render: -&gt;
    &lt;div&gt;
      &lt;CView ref=""barChart"" data={@state.someData} /&gt;
    &lt;/div&gt;

@CView = React.createClass
  render: -&gt;
    &lt;p data={@props.data}&gt;&lt;/p&gt;
</code></pre>
","3681199","","","","","2016-04-17 03:25:05","How to use reactjs with chart-js-rails in a Rails 4 application?","<javascript><jquery><ruby-on-rails><reactjs>","0","0","","",""
"33211581","1","33226048","","2015-10-19 09:59:20","","1","485","<p>I am struggling currenlty with iScroll in combination with reactJS.<br>
This code samples are written in typescript.</p>

<p>I created a wrapper class for iScroll:  </p>

<pre><code>import * as React from 'react';
import * as ReactDOM from 'react-dom';

var iScroll = require('iscroll');        
...

    componentDidMount() {
            this._initializeIScrollInstance();
            console.log(this);
        }

    _initializeIScrollInstance() {
            setTimeout(() =&gt; {
                let element = ReactDOM.findDOMNode(this);
                const iScrollInstance = new iScroll(element, this.props.options);
                this._iScrollInstance = iScrollInstance;
            }, 100);
        }

    render() {
                return (
                    &lt;div style={ this.props.style } &gt;
                        { this.props.children }
                    &lt;/div&gt;
                )
            }
        }
</code></pre>

<p>Then I use it like this in my sidebar class for instance.  </p>

<pre><code>&lt;ScrollWrapper&gt;
 &lt;SidebarMenu toggle={ this.toggle.bind(this) } /&gt;
&lt;/ScrollWrapper&gt;
</code></pre>

<p>The problem I am facing is when I toggle a menu inside my sidebar. This means the height changes so I need to call the refresh methode for iScroll.<br>
But how can I achieve this?<br>
Can I get the _iScrollInstance in my parent component?</p>

<p>Its possible to keep a state inside my sidebar and pass it down to the ScrollWrapper as a property and watch for it in componentReceiveProps. 
But this sounds like a cheap solution to me.<br>
Anyone maybe have a better solution for that kind of problem?  </p>
","5000491","","99256","","2015-10-19 13:54:54","2015-10-20 00:21:53","How do I call the iScroll refresh methode in a parent react component?","<reactjs><typescript><iscroll>","1","0","","",""
"41877974","1","","","2017-01-26 16:14:47","","1","453","<p>Jest (technically, Jest snapshot testing with ReactTestRenderer) <a href=""https://github.com/facebook/react/issues/7371"" rel=""nofollow noreferrer"">does not work with ReactDOM.findDOMNode</a>.</p>

<p>I've seen where I can work around this using Jest mocks. For example, if my <code>ChannelScanner</code> component uses my <code>RadioButtonSet</code> component, which wraps <a href=""https://jquense.github.io/react-widgets/docs/#/selectlist"" rel=""nofollow noreferrer"">react-widgets' SelectList</a>, then putting the following code in <code>ChannelScanner.test.js</code> allows snapshot testing to work:</p>

<pre><code>jest.mock('../../src/components/forms/RadioButtonSet', () =&gt; 'RadioButtonSet');
</code></pre>

<p><strong>However</strong>, this seems to break encapsulation: RadioButtonSet's tests have to set up mocks based on the components it uses, and the transitive components that <em>they</em> use, and this work has to be repeated for every component.</p>

<p>What's the best way to handle this? Short of enabling <a href=""https://facebook.github.io/jest/docs/configuration.html#automock-boolean"" rel=""nofollow noreferrer"">automock</a>, is there a good way to say, ""This module knows that it needs to mock itself whenever it appears?""</p>
","25507","","153101","","2017-12-11 18:34:34","2017-12-11 18:34:34","Using Jest with ReactDOM.findDOMNode","<javascript><unit-testing><reactjs><mocking><jestjs>","0","0","","",""
"41899449","1","","","2017-01-27 17:12:55","","0","179","<p>I have been assigned to fix some failing Jest tests. Here's one example:</p>

<p>This is checkboxGroup.spec.js:</p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-addons-test-utils';
import CheckboxGroup from '../components/core/CheckboxGroup';
import Checkbox from '../components/core/Checkbox';

describe('CheckboxGroup', () =&gt; {
it('should exist', () =&gt; {
    expect(CheckboxGroup).toBeDefined();
});

it('should add checkboxes as children', () =&gt; {
    class CheckboxGroupSample extends React.Component {
        selected = [];
        render() {
            return (
                &lt;div&gt;
                    &lt;CheckboxGroup selected={ this.selected }&gt;
                        &lt;Checkbox value={ 1 }&gt;&lt;/Checkbox&gt;
                        &lt;Checkbox value={ 2 }&gt;&lt;/Checkbox&gt;
                        &lt;Checkbox value={ 3 }&gt;&lt;/Checkbox&gt;
                    &lt;/CheckboxGroup&gt;
                    Selected: { this.selected.toString() }
                &lt;/div&gt;
            );
        }
    }

    const checkboxGroup = TestUtils.renderIntoDocument(&lt;CheckboxGroupSample /&gt;);

    const checkboxGroupNode = ReactDOM.findDOMNode(checkboxGroup);

    // Verify the correct number of children are created
    expect(checkboxGroupNode.children.length).toEqual(3);
});
</code></pre>

<p>and this is my CheckboxGroup.jsx:</p>

<pre><code>import React, { PropTypes } from 'react';
import valueCompare from './internal/valueCompare';
import Checkbox from './Checkbox';

export default class CheckboxGroup extends React.Component {
    static propTypes = {
        defaultSelected: PropTypes.any,
        selected: PropTypes.any,
        children: PropTypes.node,
        onSelect: PropTypes.func,
        onChange: PropTypes.func,
        name: PropTypes.string
    }

    handleSelect(event, value) {
        if (this.props.onSelect) {
            this.props.onSelect(event, value);
        }
    }

    render() {
        const {
            selected,
            name,
            onChange
        } = this.props;

        return (
            &lt;div&gt;
                { React.Children.map(this.props.children, child =&gt;
                    React.cloneElement(child, {
                        onChange: this.handleSelect,
                        checked: valueCompare(selected, child.props.value),
                        name: name
                    })
                ) }
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>The 2nd test is failing: the expected value is 3, but the return value is 1. When I use console.log(checkboxGroupNode), it looks like it's starting at the  element.  If I could get to <code>_renderedChildren</code> of the ReactDomComponent, I would have my 3 children.</p>

<pre><code>HTMLDivElement {
      '__reactInternalInstance$2oq0ezu6d76f7k2ux2n0e2vs4i':
       ReactDOMComponent {
         _currentElement:
          { '$$typeof': Symbol(react.element),
            type: 'div',
            key: null,
            ref: null,
            props: [Object],
            _owner: [Object],
            _store: {} },
         _tag: 'div',
         _namespaceURI: 'http://www.w3.org/1999/xhtml',
         _renderedChildren: { '.0': [Object], '.1': [Object], '.2': [Object] },
         _previousStyle: null,
         _previousStyleCopy: null,
         _hostNode: [Circular],
         _hostParent: null,
         _rootNodeID: 1,
         _domID: 1,
         _hostContainerInfo:
          { _topLevelWrapper: [Object],
            _idCounter: 17,
            _ownerDocument: [Object],
            _node: HTMLDivElement {},
            _tag: 'div',
            _namespaceURI: 'http://www.w3.org/1999/xhtml',
            _ancestorInfo: [Object] },
         _wrapperState: null,
         _topLevelWrapper: null,
         _flags: 1,
         _ancestorInfo:
          { current: [Object],
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null },
         _contentDebugID: null,
         _mountIndex: 0,
         _mountImage: null,
         _debugID: 2 } }  
</code></pre>

<p>The code was written almost a year ago - the failure could be because of updates to React and/or Jest, or some other reason.  I have been assured that the test passed at one point in time.</p>
","345035","","","","","2017-01-27 17:14:18","ReactDOM.findDOMNode not working as expected","<javascript><reactjs><jest>","1","0","1","",""
"45273358","1","45274006","","2017-07-24 05:43:37","","4","881","<p>this is my webpack.conf.js</p>

<pre><code>var path = require('path');
var config = {
  devServer: {
      contentBase: ""./public"",
      hot: true,
  },
  entry: path.resolve(__dirname, 'src') + '/index.js',
  output:{
    path: path.resolve(__dirname, 'public'),
    filename:'driven.js'
  },
  module:{
    loaders: [
      {
     test: /\.jsx?$/,
     loader: 'babel-loader',
     exclude: /node_modules/,
     query: {
       presets: ['react', 'es2015', 'stage-1']
     }
   },
   {
     test: /\.css$/,
     loaders: ['style', 'css']
   },
   {
     test: /\.png$/,
     loader: ""url-loader?limit=100000""
   },
   {
     test: /\.jpg$/,
     loader: ""file-loader""
   },
   {
     test: /\.(woff|woff2)(\?.*$|$)/,
     loader: 'url?limit=10000&amp;mimetype=application/font-woff'
   },
   {
     test: /\.ttf(\?.*$|$)/,
     loader: 'url?limit=10000&amp;mimetype=application/octet-stream'
   },
   {
     test: /\.eot(\?.*$|$)/,
     loader: 'file'
   },
   {
     test: /\.otf(\?.*$|$)/,
     loader: 'file'
   },
   {
     test: /\.svg(\?.*$|$)/,
     loader: 'url?limit=10000&amp;mimetype=image/svg+xml'
   },
   {
     test: /\.gif$/i,
     loaders: [
       'file?hash=sha512&amp;digest=hex&amp;name=[hash].[ext]',
       'image-webpack?bypassOnDebug&amp;optimizationLevel=7&amp;interlaced=false'
     ]
   },
   {
     test: /\.json?$/,
     loader: 'json'
   }
    ]

    }
  }

module.exports = config;
</code></pre>

<p>And this is my package.json</p>

<pre><code>{
  ""name"": ""react"",
  ""version"": ""1.0.0"",
  ""description"": ""Sample react application"",
  ""main"": ""./src/index.js"",
  ""dependencies"": {
    ""babel-core"": ""^6.17.0"",
    ""babel-loader"": ""^6.4.1"",
    ""babel-plugin-add-module-exports"": ""^0.1.2"",
    ""babel-plugin-react-html-attrs"": ""^2.0.0"",
    ""babel-plugin-transform-class-properties"": ""^6.3.13"",
    ""babel-plugin-transform-decorators-legacy"": ""^1.3.4"",
    ""babel-preset-es2015"": ""^6.3.13"",
    ""babel-preset-react"": ""^6.3.13"",
    ""babel-preset-stage-0"": ""^6.3.13"",
    ""react"": ""^15.6.1"",
    ""react-dom"": ""^15.6.1"",
    ""webpack"": ""^1.12.9"",
    ""webpack-dev-server"": ""^1.14.1"",
    ""history"": ""^4.6.3"",
    ""jquery"": ""^3.2.1"",
    ""react-bootstrap"": ""^0.31.0"",
    ""react-fb-like"": ""^0.4.5"",
    ""react-router"": ""^3.0.5"",
    ""react-toasts"": ""^1.0.6"",
    ""react-scripts"": ""1.0.10"",
    ""redux"": ""^3.7.2"",
    ""file-loader"": ""^0.11.2"",
    ""image-webpack-loader"": ""^3.3.1"",
    ""css-loader"": ""^0.26.1"",
    ""html-webpack-plugin"": ""^2.28.0"",
    ""json-loader"": ""^0.5.4"",
    ""style-loader"": ""^0.13.1"",
    ""url-loader"": ""^0.5.7""
  },
  ""scripts"": {
    ""start"": ""webpack-dev-server --hot "",
    ""react-start"": ""set PORT=3005 &amp;&amp; node scripts/start.js"",
    ""build"": ""node scripts/build.js"",
    ""test"": ""node scripts/test.js --env=jsdom""
  },
  ""keywords"": [
    ""React"",
    ""Sample"",
    ""For"",
    ""MyApp""
  ],
  ""author"": ""Jasmel"",
  ""license"": ""ISC"",
  ""devDependencies"": {
    ""babel-preset-stage-1"": ""^6.24.1"",
    ""html-webpack-plugin"": ""^2.29.0""
  }
}
</code></pre>

<p>And this is my folder structure</p>

<p><a href=""https://i.stack.imgur.com/Dbzh5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Dbzh5.png"" alt=""enter image description here""></a></p>

<p>Please help me to know whats going on here.I ran <code>npm start</code>..then it shows the result webpack compiled successfully like this,</p>

<pre><code>D:\jasmel\react\webpacktest&gt;npm start

&gt; react@1.0.0 start D:\jasmel\react\webpacktest
&gt; webpack-dev-server --hot

 http://localhost:8080/webpack-dev-server/
webpack result is served from /
content is served from ./public
Hash: c189d361086fdc8489c3
Version: webpack 1.15.0
Time: 4092ms
    Asset    Size  Chunks             Chunk Names
driven.js  808 kB       0  [emitted]  main
chunk    {0} driven.js (main) 748 kB [rendered]
    [0] ./src/index.js 677 bytes {0} [built]
    [1] ./~/react/react.js 56 bytes {0} [built]
    [2] ./~/react/lib/React.js 5.08 kB {0} [built]
    [3] ./~/process/browser.js 5.42 kB {0} [built]
    [4] ./~/object-assign/index.js 2.11 kB {0} [built]
    [5] ./~/react/lib/ReactBaseClasses.js 5.44 kB {0} [built]
    [6] ./~/react/lib/reactProdInvariant.js 1.24 kB {0} [built]
    [7] ./~/react/lib/ReactNoopUpdateQueue.js 3.36 kB {0} [built]
    [8] ./~/fbjs/lib/warning.js 2.1 kB {0} [built]
    [9] ./~/fbjs/lib/emptyFunction.js 1.08 kB {0} [built]
   [10] ./~/react/lib/canDefineProperty.js 661 bytes {0} [built]
   [11] ./~/fbjs/lib/emptyObject.js 458 bytes {0} [built]
   [12] ./~/fbjs/lib/invariant.js 1.63 kB {0} [built]
   [13] ./~/react/lib/lowPriorityWarning.js 2.16 kB {0} [built]
   [14] ./~/react/lib/ReactChildren.js 6.19 kB {0} [built]
   [15] ./~/react/lib/PooledClass.js 3.36 kB {0} [built]
   [16] ./~/react/lib/ReactElement.js 11.2 kB {0} [built]
   [17] ./~/react/lib/ReactCurrentOwner.js 621 bytes {0} [built]
   [18] ./~/react/lib/ReactElementSymbol.js 622 bytes {0} [built]
   [19] ./~/react/lib/traverseAllChildren.js 7.03 kB {0} [built]
   [20] ./~/react/lib/getIteratorFn.js 1.12 kB {0} [built]
   [21] ./~/react/lib/KeyEscapeUtils.js 1.29 kB {0} [built]
   [22] ./~/react/lib/ReactDOMFactories.js 5.48 kB {0} [built]
   [23] ./~/react/lib/ReactElementValidator.js 9.2 kB {0} [built]
   [24] ./~/react/lib/ReactComponentTreeHook.js 11.8 kB {0} [built]
   [25] ./~/react/lib/checkReactTypeSpec.js 4.19 kB {0} [built]
   [26] ./~/react/lib/ReactPropTypeLocationNames.js 572 bytes {0} [built]
   [27] ./~/react/lib/ReactPropTypesSecret.js 442 bytes {0} [built]
   [28] ./~/react/lib/ReactPropTypes.js 500 bytes {0} [built]
   [29] ./~/prop-types/factory.js 890 bytes {0} [built]
   [30] ./~/prop-types/factoryWithTypeCheckers.js 18.6 kB {0} [built]
   [31] ./~/prop-types/lib/ReactPropTypesSecret.js 436 bytes {0} [built]
   [32] ./~/prop-types/checkPropTypes.js 2.94 kB {0} [built]
   [33] ./~/react/lib/ReactVersion.js 350 bytes {0} [built]
   [34] ./~/react/lib/createClass.js 688 bytes {0} [built]
   [35] ./~/create-react-class/factory.js 28.4 kB {0} [built]
   [36] ./~/react/lib/onlyChild.js 1.34 kB {0} [built]
   [37] ./~/react-dom/index.js 59 bytes {0} [built]
   [38] ./~/react-dom/lib/ReactDOM.js 5.17 kB {0} [built]
   [39] ./~/react-dom/lib/ReactDOMComponentTree.js 6.27 kB {0} [built]
   [40] ./~/react-dom/lib/reactProdInvariant.js 1.24 kB {0} [built]
   [41] ./~/react-dom/lib/DOMProperty.js 8.24 kB {0} [built]
   [42] ./~/react-dom/lib/ReactDOMComponentFlags.js 429 bytes {0} [built]
   [43] ./~/react-dom/lib/ReactDefaultInjection.js 3.5 kB {0} [built]
   [44] ./~/react-dom/lib/ARIADOMPropertyConfig.js 1.82 kB {0} [built]
   [45] ./~/react-dom/lib/BeforeInputEventPlugin.js 13.3 kB {0} [built]
   [46] ./~/react-dom/lib/EventPropagators.js 5.09 kB {0} [built]
   [47] ./~/react-dom/lib/EventPluginHub.js 9.11 kB {0} [built]
   [48] ./~/react-dom/lib/EventPluginRegistry.js 9.75 kB {0} [built]
   [49] ./~/react-dom/lib/EventPluginUtils.js 7.95 kB {0} [built]
   [50] ./~/react-dom/lib/ReactErrorUtils.js 2.19 kB {0} [built]
   [51] ./~/react-dom/lib/accumulateInto.js 1.69 kB {0} [built]
   [52] ./~/react-dom/lib/forEachAccumulated.js 855 bytes {0} [built]
   [53] ./~/fbjs/lib/ExecutionEnvironment.js 1.06 kB {0} [built]
   [54] ./~/react-dom/lib/FallbackCompositionState.js 2.43 kB {0} [built]
   [55] ./~/react-dom/lib/PooledClass.js 3.36 kB {0} [built]
   [56] ./~/react-dom/lib/getTextContentAccessor.js 955 bytes {0} [built]
   [57] ./~/react-dom/lib/SyntheticCompositionEvent.js 1.1 kB {0} [built]
   [58] ./~/react-dom/lib/SyntheticEvent.js 9.18 kB {0} [built]
   [59] ./~/react-dom/lib/SyntheticInputEvent.js 1.09 kB {0} [built]
   [60] ./~/react-dom/lib/ChangeEventPlugin.js 10.8 kB {0} [built]
   [61] ./~/react-dom/lib/ReactUpdates.js 9.53 kB {0} [built]
   [62] ./~/react-dom/lib/CallbackQueue.js 3.16 kB {0} [built]
   [63] ./~/react-dom/lib/ReactFeatureFlags.js 628 bytes {0} [built]
   [64] ./~/react-dom/lib/ReactReconciler.js 6.21 kB {0} [built]
   [65] ./~/react-dom/lib/ReactRef.js 2.56 kB {0} [built]
   [66] ./~/react-dom/lib/ReactOwner.js 3.53 kB {0} [built]
   [67] ./~/react-dom/lib/ReactInstrumentation.js 601 bytes {0} [built]
   [68] ./~/react-dom/lib/ReactDebugTool.js 11.7 kB {0} [built]
   [69] ./~/react-dom/lib/ReactInvalidSetStateWarningHook.js 984 bytes {0} [built]
   [70] ./~/react-dom/lib/ReactHostOperationHistoryHook.js 736 bytes {0} [built]
   [71] ./~/fbjs/lib/performanceNow.js 845 bytes {0} [built]
   [72] ./~/fbjs/lib/performance.js 588 bytes {0} [built]
   [73] ./~/react-dom/lib/Transaction.js 9.55 kB {0} [built]
   [74] ./~/react-dom/lib/inputValueTracking.js 3.1 kB {0} [built]
   [75] ./~/react-dom/lib/getEventTarget.js 1.01 kB {0} [built]
   [76] ./~/react-dom/lib/isEventSupported.js 1.94 kB {0} [built]
   [77] ./~/react-dom/lib/isTextInputElement.js 1.02 kB {0} [built]
   [78] ./~/react-dom/lib/DefaultEventPluginOrder.js 1.08 kB {0} [built]
   [79] ./~/react-dom/lib/EnterLeaveEventPlugin.js 3.15 kB {0} [built]
   [80] ./~/react-dom/lib/SyntheticMouseEvent.js 2.14 kB {0} [built]
   [81] ./~/react-dom/lib/SyntheticUIEvent.js 1.57 kB {0} [built]
   [82] ./~/react-dom/lib/ViewportMetrics.js 604 bytes {0} [built]
   [83] ./~/react-dom/lib/getEventModifierState.js 1.23 kB {0} [built]
   [84] ./~/react-dom/lib/HTMLDOMPropertyConfig.js 6.57 kB {0} [built]
   [85] ./~/react-dom/lib/ReactComponentBrowserEnvironment.js 904 bytes {0} [built]
   [86] ./~/react-dom/lib/DOMChildrenOperations.js 7.72 kB {0} [built]
   [87] ./~/react-dom/lib/DOMLazyTree.js 3.71 kB {0} [built]
   [88] ./~/react-dom/lib/DOMNamespaces.js 505 bytes {0} [built]
   [89] ./~/react-dom/lib/setInnerHTML.js 3.86 kB {0} [built]
   [90] ./~/react-dom/lib/createMicrosoftUnsafeLocalFunction.js 810 bytes {0} [built]
   [91] ./~/react-dom/lib/setTextContent.js 1.45 kB {0} [built]
   [92] ./~/react-dom/lib/escapeTextContentForBrowser.js 3.43 kB {0} [built]
   [93] ./~/react-dom/lib/Danger.js 2.24 kB {0} [built]
   [94] ./~/fbjs/lib/createNodesFromMarkup.js 2.66 kB {0} [built]
   [95] ./~/fbjs/lib/createArrayFromMixed.js 4.11 kB {0} [built]
   [96] ./~/fbjs/lib/getMarkupWrap.js 3.04 kB {0} [built]
   [97] ./~/react-dom/lib/ReactDOMIDOperations.js 955 bytes {0} [built]
   [98] ./~/react-dom/lib/ReactDOMComponent.js 38.9 kB {0} [built]
   [99] ./~/react-dom/lib/AutoFocusUtils.js 599 bytes {0} [built]
  [100] ./~/fbjs/lib/focusNode.js 704 bytes {0} [built]
  [101] ./~/react-dom/lib/CSSPropertyOperations.js 7.2 kB {0} [built]
  [102] ./~/react-dom/lib/CSSProperty.js 3.8 kB {0} [built]
  [103] ./~/fbjs/lib/camelizeStyleName.js 1 kB {0} [built]
  [104] ./~/fbjs/lib/camelize.js 708 bytes {0} [built]
  [105] ./~/react-dom/lib/dangerousStyleValue.js 3.06 kB {0} [built]
  [106] ./~/fbjs/lib/hyphenateStyleName.js 974 bytes {0} [built]
  [107] ./~/fbjs/lib/hyphenate.js 800 bytes {0} [built]
  [108] ./~/fbjs/lib/memoizeStringOnly.js 698 bytes {0} [built]
  [109] ./~/react-dom/lib/DOMPropertyOperations.js 7.61 kB {0} [built]
  [110] ./~/react-dom/lib/quoteAttributeValueForBrowser.js 700 bytes {0} [built]
  [111] ./~/react-dom/lib/ReactBrowserEventEmitter.js 12.6 kB {0} [built]
  [112] ./~/react-dom/lib/ReactEventEmitterMixin.js 958 bytes {0} [built]
  [113] ./~/react-dom/lib/getVendorPrefixedEventName.js 2.87 kB {0} [built]
  [114] ./~/react-dom/lib/ReactDOMInput.js 13.1 kB {0} [built]
  [115] ./~/react-dom/lib/LinkedValueUtils.js 5.24 kB {0} [built]
  [116] ./~/react-dom/lib/ReactPropTypesSecret.js 442 bytes {0} [built]
  [117] ./~/react-dom/lib/ReactDOMOption.js 3.69 kB {0} [built]
  [118] ./~/react-dom/lib/ReactDOMSelect.js 6.81 kB {0} [built]
  [119] ./~/react-dom/lib/ReactDOMTextarea.js 6.46 kB {0} [built]
  [120] ./~/react-dom/lib/ReactMultiChild.js 14.6 kB {0} [built]
  [121] ./~/react-dom/lib/ReactComponentEnvironment.js 1.3 kB {0} [built]
  [122] ./~/react-dom/lib/ReactInstanceMap.js 1.22 kB {0} [built]
  [123] ./~/react-dom/lib/ReactChildReconciler.js 6.11 kB {0} [built]
  [124] ./~/react-dom/lib/instantiateReactComponent.js 5.06 kB {0} [built]
  [125] ./~/react-dom/lib/ReactCompositeComponent.js 35.2 kB {0} [built]
  [126] ./~/react-dom/lib/ReactNodeTypes.js 1.02 kB {0} [built]
  [127] ./~/react-dom/lib/checkReactTypeSpec.js 4.21 kB {0} [built]
  [128] ./~/react-dom/lib/ReactPropTypeLocationNames.js 572 bytes {0} [built]
  [129] ./~/fbjs/lib/shallowEqual.js 1.74 kB {0} [built]
  [130] ./~/react-dom/lib/shouldUpdateReactComponent.js 1.4 kB {0} [built]
  [131] ./~/react-dom/lib/ReactEmptyComponent.js 704 bytes {0} [built]
  [132] ./~/react-dom/lib/ReactHostComponent.js 1.98 kB {0} [built]
  [133] ./~/react/lib/getNextDebugID.js 437 bytes {0} [built]
  [134] ./~/react-dom/lib/KeyEscapeUtils.js 1.29 kB {0} [built]
  [135] ./~/react-dom/lib/traverseAllChildren.js 7.04 kB {0} [built]
  [136] ./~/react-dom/lib/ReactElementSymbol.js 622 bytes {0} [built]
  [137] ./~/react-dom/lib/getIteratorFn.js 1.12 kB {0} [built]
  [138] ./~/react-dom/lib/flattenChildren.js 2.77 kB {0} [built]
  [139] ./~/react-dom/lib/ReactServerRenderingTransaction.js 2.29 kB {0} [built]
  [140] ./~/react-dom/lib/ReactServerUpdateQueue.js 4.83 kB {0} [built]
  [141] ./~/react-dom/lib/ReactUpdateQueue.js 9.35 kB {0} [built]
  [142] ./~/react-dom/lib/validateDOMNesting.js 13.7 kB {0} [built]
  [143] ./~/react-dom/lib/ReactDOMEmptyComponent.js 1.9 kB {0} [built]
  [144] ./~/react-dom/lib/ReactDOMTreeTraversal.js 3.72 kB {0} [built]
  [145] ./~/react-dom/lib/ReactDOMTextComponent.js 5.81 kB {0} [built]
  [146] ./~/react-dom/lib/ReactDefaultBatchingStrategy.js 1.88 kB {0} [built]
  [147] ./~/react-dom/lib/ReactEventListener.js 5.3 kB {0} [built]
  [148] ./~/fbjs/lib/EventListener.js 2.67 kB {0} [built]
  [149] ./~/fbjs/lib/getUnboundedScrollPosition.js 1.12 kB {0} [built]
  [150] ./~/react-dom/lib/ReactInjection.js 1.2 kB {0} [built]
  [151] ./~/react-dom/lib/ReactReconcileTransaction.js 5.26 kB {0} [built]
  [152] ./~/react-dom/lib/ReactInputSelection.js 4.27 kB {0} [built]
  [153] ./~/react-dom/lib/ReactDOMSelection.js 6.78 kB {0} [built]
  [154] ./~/react-dom/lib/getNodeForCharacterOffset.js 1.62 kB {0} [built]
  [155] ./~/fbjs/lib/containsNode.js 1.05 kB {0} [built]
  [156] ./~/fbjs/lib/isTextNode.js 605 bytes {0} [built]
  [157] ./~/fbjs/lib/isNode.js 828 bytes {0} [built]
  [158] ./~/fbjs/lib/getActiveElement.js 1.04 kB {0} [built]
  [159] ./~/react-dom/lib/SVGDOMPropertyConfig.js 7.32 kB {0} [built]
  [160] ./~/react-dom/lib/SelectEventPlugin.js 6.06 kB {0} [built]
  [161] ./~/react-dom/lib/SimpleEventPlugin.js 7.97 kB {0} [built]
  [162] ./~/react-dom/lib/SyntheticAnimationEvent.js 1.21 kB {0} [built]
  [163] ./~/react-dom/lib/SyntheticClipboardEvent.js 1.17 kB {0} [built]
  [164] ./~/react-dom/lib/SyntheticFocusEvent.js 1.07 kB {0} [built]
  [165] ./~/react-dom/lib/SyntheticKeyboardEvent.js 2.71 kB {0} [built]
  [166] ./~/react-dom/lib/getEventCharCode.js 1.5 kB {0} [built]
  [167] ./~/react-dom/lib/getEventKey.js 2.87 kB {0} [built]
  [168] ./~/react-dom/lib/SyntheticDragEvent.js 1.07 kB {0} [built]
  [169] ./~/react-dom/lib/SyntheticTouchEvent.js 1.28 kB {0} [built]
  [170] ./~/react-dom/lib/SyntheticTransitionEvent.js 1.23 kB {0} [built]
  [171] ./~/react-dom/lib/SyntheticWheelEvent.js 1.92 kB {0} [built]
  [172] ./~/react-dom/lib/ReactMount.js 25.5 kB {0} [built]
  [173] ./~/react-dom/lib/ReactDOMContainerInfo.js 967 bytes {0} [built]
  [174] ./~/react-dom/lib/ReactDOMFeatureFlags.js 439 bytes {0} [built]
  [175] ./~/react-dom/lib/ReactMarkupChecksum.js 1.47 kB {0} [built]
  [176] ./~/react-dom/lib/adler32.js 1.19 kB {0} [built]
  [177] ./~/react-dom/lib/ReactVersion.js 350 bytes {0} [built]
  [178] ./~/react-dom/lib/findDOMNode.js 2.46 kB {0} [built]
  [179] ./~/react-dom/lib/getHostComponentFromComposite.js 740 bytes {0} [built]
  [180] ./~/react-dom/lib/renderSubtreeIntoContainer.js 422 bytes {0} [built]
  [181] ./~/react-dom/lib/ReactDOMUnknownPropertyHook.js 4.32 kB {0} [built]
  [182] ./~/react-dom/lib/ReactDOMNullInputValuePropHook.js 1.37 kB {0} [built]
  [183] ./~/react-dom/lib/ReactDOMInvalidARIAHook.js 3.14 kB {0} [built]
  [184] ./src/index.css 899 bytes {0} [built]
  [185] ./~/css-loader!./src/index.css 222 bytes {0} [built]
  [186] ./~/css-loader/lib/css-base.js 1.46 kB {0} [built]
  [187] ./~/style-loader/addStyles.js 6.91 kB {0} [built]
  [188] ./src/App.js 2.92 kB {0} [built]
  [189] ./src/logo.svg 3.61 kB {0} [built]
  [190] ./src/App.css 893 bytes {0} [built]
  [191] ./~/css-loader!./src/App.css 519 bytes {0} [built]
  [192] ./src/registerServiceWorker.js 4.03 kB {0} [built]
webpack: Compiled successfully.
</code></pre>

<p>this showing a blank page when i start browser <strong>localhost:8080</strong> .No error in console.
when i added some text in index.html after <strong>root</strong> Div ,it showing in browser.
Why my js is not rendering inside the root div? any help would be appreciated.Iam new in react and webpack.Thanks in advance.</p>
","5193394","","5193394","","2017-07-24 06:10:40","2017-07-24 06:46:17","why my react app showing blank page after webpack-dev-server compilation?","<reactjs><webpack>","1","6","","",""
"35368382","1","35369802","","2016-02-12 17:08:58","","2","407","<pre><code>this.view = Blaze.render(Template.loginButtons, ReactDOM.findDOMNode(this.refs.container));
</code></pre>

<p>Using the accounts-ui package this works fine but when switching it out for another UI package (ian:accounts-ui-bootstrap-3) I suddenly get a </p>

<pre><code>'Can't render undefined' 
</code></pre>

<p>in my browser, shouldn't they both work since the template names are the same? I can insert them both using {{> loginButtons}} in a plain html file but not using the blaze.render method when switching to reactjs.</p>
","3397436","","1048200","","2016-02-12 19:11:15","2016-02-12 19:11:15","Template.loginButtons is undefined when using a different package (blaze.render & react)","<meteor><reactjs><meteor-blaze>","1","0","","",""
"32494407","1","","","2015-09-10 06:11:52","","3","2084","<p>I'm working through a TodoMVC example for the <a href=""http://rackt.github.io/redux/"" rel=""nofollow"">Redux</a> ecosystem. I've completed working code for the example and am now working through the creation of tests for each of the elements of the application.</p>

<p>For actions and reducers, the testing is very straightforward, but for the components, writing tests has proven somewhat more challenging.</p>

<p>My general component architecture looks like this:</p>

<pre><code>Home.js
      \-App.js
              \-TodoList.js
                          \-TodoItem.js
                                       \-TodoInput.js
</code></pre>

<p>Writing the unit tests for TodoInput.js has been relatively straightforward:</p>

<p>TodoInput.js:</p>

<pre><code>handleChange(e) {
    this.setState({ text: e.target.value });
  }

...

  render() {

    return (
      &lt;input type=""text"" autoFocus='true'
            className={classnames({
              edit: this.props.editing,
              'new-todo': this.props.newTodo
             })}
            value={this.state.text}
            placeholder={this.props.placeholder}
            onKeyDown={this.handleKeyDown.bind(this)}
            onBlur={this.handleBlur.bind(this)}
            onChange={this.handleChange.bind(this)}&gt;
      &lt;/input&gt;
    );
  }
</code></pre>

<p>TodoInput-test.js:</p>

<pre><code>const mockedTodo = {
  text: 'abc123',
  complete: false
};


it(`should update text from user input`, () =&gt; {
      const component = TestUtils.renderIntoDocument(
        &lt;TodoInput
          text = {mockedTodo.text}
          editing = {false}
          onSave = {_.noop}
        /&gt;
      );

      const inputComponent = TestUtils.findRenderedDOMComponentWithTag(component, 'input');

      expect(React.findDOMNode(inputComponent).value).toBe(mockedTodo.text);

      TestUtils.Simulate.change(React.findDOMNode(inputComponent), {target: {value: ""newValue""}});

      expect(React.findDOMNode(inputComponent).value).toBe(""newValue"");

      React.unmountComponentAtNode(React.findDOMNode(component));
});
</code></pre>

<p>But for TodoItem.js, testing has been a little trickier.</p>

<p>The render code branches based on whether or not an <code>editing</code> flag has been set on the item:</p>

<p>TodoItem.js:</p>

<pre><code>import React, { Component, PropTypes } from 'react';
import TodoInput from './TodoInput';
import classnames from 'classnames';

export default class TodoItem extends Component {

  static propTypes = {
    todo: PropTypes.object.isRequired,
    editTodo: PropTypes.func.isRequired,
    markTodoAsComplete: PropTypes.func.isRequired,
    deleteTodo: PropTypes.func.isRequired
  }

  constructor(props, context) {
    super(props, context);
    this.state = {
      editing: false
    };
  }

  handleDoubleClick() {
    this.setState({ editing: true });
  }


  handleSave(id, text) {
    if (text.length === 0) {
      this.props.deleteTodo(id);
    } else {
      this.props.editTodo(id, text);
    }
    this.setState({ editing: false });
  }

  render() {
    const {todo, markTodoAsComplete, deleteTodo} = this.props;
    let element;

    if (this.state.editing) {
      element = (
        &lt;TodoInput text={todo.text}
                       editing={this.state.editing}
                       onSave={(text) =&gt; this.handleSave(todo.id, text)} /&gt;
      );
    } else {
      element = (
        &lt;div className='view'&gt;
          &lt;label onDoubleClick={this.handleDoubleClick.bind(this)}&gt;
            {todo.text}
          &lt;/label&gt;
          &lt;input className='markComplete'
                 type='checkbox'
                 checked={todo.complete}
                 onChange={() =&gt; markTodoAsComplete(todo)} /&gt;
          &lt;button className='destroy'
                  onClick={() =&gt; deleteTodo(todo)} /&gt;
        &lt;/div&gt;
      );
    }

    return (
      &lt;li className={classnames({
        completed: todo.complete,
        editing: this.state.editing
      })}&gt;
        {element}
      &lt;/li&gt;
    )
  }
}
</code></pre>

<p>I'm a little stumped on how to go about writing a test that, for instance, would verify that a double-click on the component had successfully set the state to <code>editing: true</code>. </p>

<p>Typically, I have my tests divided into two parts, ""rendering"" and ""events"", i.e. for TodoItem-test.js:</p>

<pre><code>import React, { addons } from 'react/addons';
import _ from 'lodash';
import expect from 'expect';
const { TestUtils } = addons;

import TodoItem from '../TodoItem';

describe('TodoItem', () =&gt; {

  const mockedTodo = {
    text: 'abc123',
    complete: false
  };

describe('rendering', () =&gt; {
    let component;

    before(() =&gt; {
      component = TestUtils.renderIntoDocument(
        &lt;TodoItem
          todo={mockedTodo}
          editTodo={_.noop}
          markTodoAsComplete={_.noop}
          deleteTodo={_.noop}
        /&gt;
      );
    });

    afterEach(() =&gt; {
      React.unmountComponentAtNode(React.findDOMNode(component));
    });

    it('should render the element', () =&gt; {
      const liComponent = TestUtils.findRenderedDOMComponentWithTag(component, 'li');

      expect(liComponent).toExist();
    });

    it('should render text in label', () =&gt; {
      const labelComponent = TestUtils.findRenderedDOMComponentWithTag(component, 'label');

      expect(labelComponent).toExist();
      expect(React.findDOMNode(labelComponent).textContent).toEqual('abc123');
    });
  });

 describe('events', () =&gt; {
  ...

});
</code></pre>

<p>but in this case, I want to see if double-clicking on the component leads to the following:</p>

<ol>
<li>the component state should now have an <code>editing</code> flag associated with it</li>
<li>the <code>element</code> should have changed, and <code>TodoItem.js</code> should now render a <code>&lt;TodoInput/&gt;</code> component instead.</li>
</ol>

<p>What is the most efficient way to structure a test against this expected behavior? I am thinking that I should do two things:</p>

<p>First, test to see if a double-click on the component adds the expected <code>""editing: true""</code> flag. <strong>I am not sure how to do this</strong>. If I set up a test as follows:</p>

<pre><code>describe('events', () =&gt; {
    let component;
    let deleteTodoCallback = sinon.stub();

    beforeEach(() =&gt; {
      component = TestUtils.renderIntoDocument(
        &lt;TodoItem
          todo={mockedTodo}
          editTodo={_.noop}
          markTodoAsComplete={_.noop}
          deleteTodo={deleteTodoCallback}
        /&gt;
      );
    });

    afterEach(() =&gt; {
      React.unmountComponentAtNode(React.findDOMNode(component));
    });

    it(`should change the editing state to be true if a user double-clicks
          on the todo`, () =&gt; {

        const liComponent = TestUtils.findRenderedDOMComponentWithTag(component, 'li');

        // expect the editing flag to be false

        TestUtils.Simulate.doubleClick(React.findDOMNode(liComponent));

        // expect the editing flag to be true

    });
  });
</code></pre>

<p><strong>how do I go about testing to ensure that the editing flag has been set?</strong> <code>liComponent.props.editing</code> returns <code>undefined.</code></p>

<p>Second, have a <code>context(""if the component is editing mode"")</code> that tests to make sure that the following has been rendered correctly:</p>

<pre><code>  &lt;li className={classnames({
    completed: todo.complete,
    editing: this.state.editing
  })}&gt;
      &lt;TodoInput text={todo.text}
                   editing={this.state.editing}
                   onSave={(text) =&gt; this.handleSave(todo.id, text)} /&gt;
  &lt;/li&gt;
</code></pre>

<p>I'm also not sure how I would go about testing this rigorously as well.</p>
","972253","","218196","","2015-09-10 15:48:14","2015-09-10 16:37:57","unit testing a react component with mocha","<javascript><unit-testing><reactjs><redux>","1","0","2","",""
"33302359","1","","","2015-10-23 12:28:23","","1","1208","<p>I'm trying to integrate jquery ui slider with react:</p>

<pre><code>componentDidMount: -&gt;
  $(React.findDOMNode(@refs.slider)).slider
    value: @props.value
    min: @props.min
    max: @props.max
    step: @props.step
    slide: @handleSlide
</code></pre>

<p>Displaying the slider and handling the slide callback works fine, however I cannot update the slider from the component:</p>

<pre><code>  slider = $(React.findDOMNode(@refs.slider)).slider
  slider(""value"", 123)
</code></pre>

<p>This always fails with ""Uncaught TypeError: this.each is not a function"" inside jquery ui's ""widget.js"". Executing <code>$(""div.slider"").slider(""value"", 123)</code> in the javascript console and in the component works fine. </p>

<p>But how can I get it working without having to use a css selector and use the react ref?</p>
","258011","","258011","","2015-10-23 12:33:45","2016-03-03 10:55:03","using jquery ui slider with react","<reactjs>","1","0","","",""
"41253889","1","","","2016-12-21 01:45:26","","3","716","<p>I'm having trouble getting react-dnd to to work.  Specifically, while I can confirm dragging is being detected properly, my droppable targets are not detecting hover or drop events.  I've been following the example at <a href=""http://survivejs.com/react/implementing-kanban/drag-and-drop/"" rel=""nofollow noreferrer"">http://survivejs.com/react/implementing-kanban/drag-and-drop/</a> to create a draggable item.  I've tried to use a combination of the same examples and the official examples from the <a href=""http://gaearon.github.io/react-dnd/docs-tutorial.html"" rel=""nofollow noreferrer"">official repo</a> to create a DropTarget to accept the draggable.  However, my DropTarget is giving no indication that it is detecting the draggable.  My code below has multiple debugger statements to indicate if code is being reached, but none of them ever are. 
I suspect that the <code>compose</code> call at the end might be the problem, but I'm following Dan Abramov's example <a href=""https://github.com/gaearon/react-dnd/issues/373"" rel=""nofollow noreferrer"">here</a>.  Just to add to the problem, the React inspector in Chrome dev tools lets me see the <code>itemType</code> state variable change as I drag an item.  However, both the <code>canDrop</code> and <code>isOver</code> state variables remain false. I'd appreciate any help to get this to work.</p>

<pre><code>import { findDOMNode } from 'react-dom';
import React, { Component } from 'react';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import Paper from 'material-ui/Paper';
import FaDelete from 'react-icons/lib/fa/trash-o';
import RaisedButton from 'material-ui/RaisedButton';
import FaEdit from 'react-icons/lib/fa/star';
import actions from '../actions/actions';
import TextField from 'material-ui/TextField';
import { connect } from 'react-redux';
//import EmojiPickerPopup from './EmojiPickerPopup';
import RenderIf from 'render-if';
import globals from '../globals';
import { DropTarget } from 'react-dnd';
import { compose } from 'redux';

const locationItemContainer = {
    display: 'flex',
    flexDirection: 'column',
    backgroundColor: 'lightgoldenrodyellow',
    border: '1px solid Moccasin',
    width: ""33%"",
    maxHeight: ""15em""
}

const controlsContainer = {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: ""100%""
}

const paperStyle = {
    padding: '8px 4px',
    display: 'flex',
    flexDirection: ""column"",
    alignItems: 'center',
    justifyContent: 'center',
    width: ""100%"",
    height: ""100%""
};

class LocationItemComponent extends Component {
    constructor(props, context) {
        super(props, context);
        this.state = {
            locationMarkers: []
        }
    }

    componentWillReceiveProps(nextProps) {
        if (!this.props.isOver &amp;&amp; nextProps.isOver) {
            // You can use this as enter handler
            debugger
        }

        if (this.props.isOver &amp;&amp; !nextProps.isOver) {
            // You can use this as leave handler
            debugger
        }

        if (this.props.isOverCurrent &amp;&amp; !nextProps.isOverCurrent) {
            // You can be more specific and track enter/leave
            // shallowly, not including nested targets
            debugger
        }
    }

    nameChanged = (id, event, value) =&gt; {
        this.props.dispatch(actions.storyMapActions.updateMarkerName(value, id));
    }
    deleteMarker = (id) =&gt; {
        this.props.dispatch(actions.storyMapActions.deleteMarker(id));
    }
    showEmojiPicker = (id, event) =&gt; {
        this.props.dispatch(actions.modalsActions.showEmojiPicker(id, event.currentTarget))
    }
    render() {
        const { isOver, canDrop, connectDropTarget } = this.props;
        if (isOver) {
            console.log(""is over"");
        }
        return connectDropTarget(
            &lt;div style={locationItemContainer}&gt;
                &lt;MuiThemeProvider&gt;
                    &lt;Paper zDepth={5}
                        style={paperStyle}
                        rounded={false}&gt;
                        &lt;TextField
                            id=""markerName""
                            hintText=""marker Name""
                            onChange={this.nameChanged.bind(this, this.props.marker.id)}
                            value={this.props.marker.name}
                            underlineFocusStyle={{ color: globals.textUnderlineColor }}
                            /&gt;
                        &lt;div style={controlsContainer}&gt;
                            &lt;RaisedButton
                                icon={&lt;FaEdit /&gt;}
                                primary={true}
                                onClick={this.showEmojiPicker.bind(this, this.props.marker.id)} /&gt;
                            &lt;RaisedButton
                                icon={&lt;FaDelete /&gt;}
                                secondary={true}
                                onClick={this.deleteMarker.bind(this, this.props.marker.id)} /&gt;
                        &lt;/div&gt;
                    &lt;/Paper&gt;
                &lt;/MuiThemeProvider&gt;
            &lt;/div&gt;
        );
    }
}
const mapStateToProps = (state) =&gt; {
    return Object.assign({}, { state: state });
}

const locationTarget = {
    canDrop(props, monitor) {
        debugger;
        // You can disallow drop based on props or item
        const item = monitor.getItem();
        return true;
    },

    hover(props, monitor, component) {
        debugger;
        // This is fired very often and lets you perform side effects
        // in response to the hover. You can't handle enter and leave
        // here—if you need them, put monitor.isOver() into collect() so you
        // can just use componentWillReceiveProps() to handle enter/leave.

        // You can access the coordinates if you need them
        const clientOffset = monitor.getClientOffset();
        const componentRect = findDOMNode(component).getBoundingClientRect();

        // You can check whether we're over a nested drop target
        const isJustOverThisOne = monitor.isOver({ shallow: true });

        // You will receive hover() even for items for which canDrop() is false
        const canDrop = monitor.canDrop();
    },

    drop(props, monitor, component) {
        debugger;
        if (monitor.didDrop()) {
            // If you want, you can check whether some nested
            // target already handled drop
            debugger
            return;
        }
        // Obtain the dragged item
        const item = monitor.getItem();

        // You can do something with it
        //ChessActions.movePiece(item.fromPosition, props.position);

        // You can also do nothing and return a drop result,
        // which will be available as monitor.getDropResult()
        // in the drag source's endDrag() method
        return { moved: true };
    }
};

const collect = (connect, monitor) =&gt; {
    return {
        connectDropTarget: connect.dropTarget(),
        isOver: monitor.isOver(),
        canDrop: monitor.canDrop(),
        itemType: monitor.getItemType()
    };
}

export default compose(
    connect(mapStateToProps),
    DropTarget(globals.itemTypes.LOCATION_ITEM, locationTarget, collect)

)(LocationItemComponent);
</code></pre>
","438991","","438991","","2016-12-21 01:50:29","2016-12-21 01:50:29","react-dnd not detecting hover and drop events","<reactjs><redux><react-dnd>","0","3","","",""
"36181345","1","","","2016-03-23 14:46:39","","1","126","<p>I am trying to write unit tests for a simple react component that has a radio button. Whether or not the test is failing is beside the point because I am getting syntax errors before the test can do its job.
I am running React0.14.7, node0.12.0, and jest 0.4.0 (this version of jest is compatible with node0.12.0. My dependencies are listed below.<br></p>

<pre><code>""devDependencies"": {
""babel-jest"": ""^9.0.3"",
""babel-polyfill"": ""^6.7.2"",
""babel-preset-es2015"": ""^6.6.0"",
""babel-preset-react"": ""^6.5.0"",
""gulp"": ""latest"",
""gulp-concat"": ""latest"",
""gulp-less"": ""latest"",
""gulp-react"": ""latest"",
""gulp-sourcemaps"": ""latest"",
""jest-cli"": ""^0.4.0"",
""watch"": ""latest""
},
""jest"": {
  ""scriptPreprocessor"": ""&lt;rootDir&gt;/node_modules/babel-jest"",
""testFileExtensions"": [""es6"", ""js""],
""moduleFileExtensions"": [""js"", ""json"", ""es6""]
</code></pre>

<p>}</p>

<p>This is my test ""../src/<strong>tests</strong>/radio-group-test.js""</p>

<pre><code>jest.unmock('../components/radio-group.jsx')

import React from 'react'
import ReactDOM from 'react-dom'
import TestUtils from 'react-addons-test-utils'
import PolicyConditions from '../components/radio-group.jsx'

describe('../components/radio-group.jsx', () =&gt; {
  it('renders a subform when clicking a checkbox', () =&gt; {
    var conditions = TestUtils.renderIntoDocument(
      &lt;RadioGroup 
        radioType='labelRadios'
        name='email'
      /&gt;
    )

    var radioNode = ReactDOM.findDOMNode(radio)

    expect(radioNode.checked).toEqual('false')

    TestUtils.Simulate.change(
      TestUtils.findRenderedDOMComponentWithTag(radio, 'checked')
    )

    expect(radioNode.checked).toEqual('true')
  })
})
</code></pre>

<p>The error from the terminal:</p>

<pre><code>SyntaxError: ../node_modules/babel-jest: ../node_modules/babel-jest/src/index.js:15
process(src, filename) {
       ^ 
Unexpected token (
</code></pre>

<p>Its almost as if babel isn't doing its job in translating es2015 because I had an earlier error with using <code>const</code> before changing it to <code>var</code>.</p>

<p>Edit: apologies, forgot to add the code that is actually failing.</p>

<pre><code>'use strict';

var babel = require('babel-core');
var jestPreset = require('babel-preset-jest');

module.exports = {
  process(src, filename) {
    if (babel.util.canCompile(filename)) {
      return babel.transform(src, {
        auxiliaryCommentBefore: 'istanbul ignore next',
        filename,
        presets: [jestPreset],
        retainLines: true,
      }).code;
    }
    return src;
  },
};
</code></pre>
","6104813","","","","","2016-03-23 14:46:39","Unit testing react with jest 0.4.0 and node 0.12.0","<node.js><unit-testing><reactjs><jestjs>","0","0","1","",""
"44349377","1","","","2017-06-03 23:19:38","","0","146","<p>I'm trying to set up a react-dnd sortable list inside a react-virtualized <code>List</code>. The example I'm working from with react-dnd is here:</p>

<p><a href=""https://react-dnd.github.io/react-dnd/examples-sortable-simple.html"" rel=""nofollow noreferrer"">https://react-dnd.github.io/react-dnd/examples-sortable-simple.html</a></p>

<p>I've got it mostly working, but when I drag an item around, items that I'm hovering over don't adjust their opacity and reorder correctly. </p>

<p><a href=""https://i.stack.imgur.com/E8IRk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/E8IRk.png"" alt=""enter image description here""></a></p>

<p>Compare that to the example from react-dnd:<a href=""https://i.stack.imgur.com/1orQc.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1orQc.png"" alt=""enter image description here""></a></p>

<p>I've made an example project that demonstrates the problem (<a href=""https://github.com/ericdcobb/virtual-drag-n-drop"" rel=""nofollow noreferrer"">https://github.com/ericdcobb/virtual-drag-n-drop</a>), but will paste the code here. This is the DragDropContext:</p>

<pre><code>import React, {Component} from 'react';
import './App.css';
import {List} from 'react-virtualized';
import {name} from 'faker';
import Item from './Item.js';
import {DragDropContext} from 'react-dnd';
import HTML5Backend from 'react-dnd-html5-backend';
import update from 'react/lib/update';

class App extends Component {
    constructor(props) {
        super(props);

        const items = [];

        for (let i = 0; i &lt; 1000; i += 1) {
            const item = {
                id: i,
                text: name.findName()
            };
            items[i] = item;
        }

        this.state = {
            items: items
        }
        this.rowRenderer = this.rowRenderer.bind(this);
        this.moveItem = this.moveItem.bind(this);
    }

    moveItem(dragIndex, hoverIndex) {
        const {items} = this.state;
        const dragItem = items[dragIndex];
        this.setState(update(this.state, {
            items: {
                $splice: [
                    [
                        dragIndex, 1
                    ],
                    [hoverIndex, 0, dragItem]
                ]
            }
        }));
    }

    rowRenderer(row) {
        const {items} = this.state;
        const item = items[row.index]

        return (&lt;Item index={row.index} key={row.key} style={row.style} item={item} moveItem={this.moveItem}/&gt;);
    }

    render() {
        const {items} = this.state;
        return (
            &lt;div className=""App""&gt;
                &lt;List className=""list-group"" width={800} items={items} height={1000} rowCount={items.length} rowHeight={55} rowRenderer={this.rowRenderer}/&gt;
            &lt;/div&gt;
        );
    }
}

export default DragDropContext(HTML5Backend)(App);
</code></pre>

<p>And the DragSource/DragTarget:</p>

<pre><code>import React, {Component} from 'react';
import {DragSource, DropTarget} from 'react-dnd';
import { findDOMNode } from 'react-dom';
import _ from 'lodash';

const ItemSource = {
    beginDrag(props) {
        return {id: props.item.id,
        index: props.index};
    }
};

const ItemTarget = {
    hover(props, monitor, component) {
        const dragIndex = monitor.getItem().index;
        const hoverIndex = props.index;

        // Don't replace items with themselves
        if (dragIndex === hoverIndex) {
            return;
        }

        // Determine rectangle on screen
        const hoverBoundingRect = findDOMNode(component).getBoundingClientRect();

        // Get vertical middle
        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;

        // Determine mouse position
        const clientOffset = monitor.getClientOffset();

        // Get pixels to the top
        const hoverClientY = clientOffset.y - hoverBoundingRect.top;

        // Only perform the move when the mouse has crossed half of the items height
        // When dragging downwards, only move when the cursor is below 50%
        // When dragging upwards, only move when the cursor is above 50%

        // Dragging downwards
        if (dragIndex &lt; hoverIndex &amp;&amp; hoverClientY &lt; hoverMiddleY) {
            return;
        }

        // Dragging upwards
        if (dragIndex &gt; hoverIndex &amp;&amp; hoverClientY &gt; hoverMiddleY) {
            return;
        }

        // Time to actually perform the action
        props.moveItem(dragIndex, hoverIndex);

        // Note: we're mutating the monitor item here!
        // Generally it's better to avoid mutations,
        // but it's good here for the sake of performance
        // to avoid expensive index searches.
        monitor.getItem().index = hoverIndex;
    }
};

function collect(connect, monitor) {
    return {connectDragSource: connect.dragSource(), isDragging: monitor.isDragging()}
}

function connect(connect, monitor) {
    return {connectDropTarget: connect.dropTarget()}
}

class Item extends Component {

    render() {
        let self = this;
        const {connectDragSource, isDragging, connectDropTarget, style} = self.props;

        const opacity = isDragging
            ? 0
            : 1;

        return connectDragSource(connectDropTarget(
            &lt;div key={self.props.key} style={{...style, opacity}} className=""Item""&gt;
                &lt;div className=""row""&gt;
                    &lt;div className=""col-md-10""&gt;{self.props.item.text}&lt;/div&gt;

                &lt;/div&gt;
            &lt;/div&gt;
        ));
    }
}

//TODO constant for this first string
export default _.flow([
    DragSource('item', ItemSource, collect),
    DropTarget('item', ItemTarget, connect)
])(Item);
</code></pre>

<p>I am trying to get the items to flow around the dragged item, as they do in the example. It seems like in my implementation, the wrong item is becoming opaque and it is failing to shift up or down. </p>

<p>Apologies for some of the vague words here, I guess dragging and dropping stuff around the screen is difficult to talk about, hopefully the code and screenshots help explain my problem.</p>

<p>Thanks!</p>
","520730","","","","","2017-06-03 23:19:38","Why isn't opacity and list reordering working with react-dnd and react-virtualization?","<javascript><reactjs><react-virtualized><react-dnd>","0","2","1","",""
"42543420","1","","","2017-03-01 22:34:45","","0","397","<p>When calling the method from the northAmerica.js component class as below:</p>

<pre><code>import React, { Component } from 'react';
import {Link} from 'react-router';
import $ from 'jquery';
import ReactDOM from 'react-dom';


class NorthAmerica extends Component {

    componentDidMount() {

        &lt;script src='assets/jquery-jvectormap-2.0.3.min.js'&gt;&lt;/script&gt;;
        &lt;script src='assets/jquery-jvectormap-world-mill-en.min.js'&gt;&lt;/script&gt;;
        $('#world-map').vectorMap({map: 'world_mill_en'});
    }

    render(){
        return(
            &lt;div&gt;
                &lt;script src=""jquery-3.1.1.js""/&gt;
                &lt;script src=""jquery-jvectormap-2.0.3.min.js""/&gt;
                &lt;script src=""jquery-jvectormap-world-mill-en.min.js""/&gt;
                &lt;h1&gt;NORTH AMERICA MAP PLACE-HOLDER&lt;/h1&gt;
                &lt;li&gt;&lt;Link to=""/discover""&gt;DISCOVER&lt;/Link&gt;&lt;/li&gt;
                &lt;div id=""world-map"" /&gt;
            &lt;/div&gt;
        )
    }
}

export class northAmerica extends React.Component{
    render(){
        return(&lt;NorthAmerica/&gt;);
    }
}
</code></pre>

<p>I get the following error:</p>

<pre><code>bundle.js?compile=false:23794 Uncaught TypeError: (0 , _jquery2.default)(...).vectorMap is not a function
    at NorthAmerica.componentWillMount (bundle.js?compile=false:23794)
    at bundle.js?compile=false:27669
    at measureLifeCyclePerf (bundle.js?compile=false:27396)
    at ReactCompositeComponentWrapper.performInitialMount (bundle.js?compile=false:27668)
    at ReactCompositeComponentWrapper.mountComponent (bundle.js?compile=false:27579)
    at Object.mountComponent (bundle.js?compile=false:3177)
    at ReactCompositeComponentWrapper.performInitialMount (bundle.js?compile=false:27692)
    at ReactCompositeComponentWrapper.mountComponent (bundle.js?compile=false:27579)
    at Object.mountComponent (bundle.js?compile=false:3177)
    at ReactCompositeComponentWrapper._updateRenderedComponent (bundle.js?compile=false:28086)
</code></pre>

<p>I've also tried it this way:</p>

<pre><code>class NorthAmerica extends Component {
  componentDidMount() {
    const el = ReactDOM.findDOMNode(this.display);
    $(el).vectorMap({map: 'world_mill_en'});
  }

  render() {
    return &lt;div&gt;
      &lt;h1&gt;World Map&lt;/h1&gt;
      &lt;div 
        ref={display =&gt; this.display = display} 
        style={{width: '600px', height: '400px'}} 
      /&gt;
    &lt;/div&gt;;
  }
}
</code></pre>

<p>However, when calling the file from index.gsp (as below) the map works as it should.</p>

<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Food App&lt;/title&gt;
    &lt;link rel=""stylesheet"" href=""${resource(dir: 'css', file: 'text.css')}"" type=""text/css""&gt;
    &lt;link rel=""stylesheet"" href=""${resource(dir: 'css', file: 'jquery-jvectormap-2.0.3.css')}"" type=""text/css""
          media=""screen""&gt;
    &lt;asset:javascript src=""jquery-3.1.1.js""/&gt;
    &lt;asset:javascript src=""jquery-jvectormap-2.0.3.min.js""/&gt;
    &lt;asset:javascript src=""jquery-jvectormap-world-mill-en.min.js""/&gt;

&lt;/head&gt;
&lt;body&gt;

&lt;div id=""root"" align=""left""&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;script src='assets/jquery-jvectormap-2.0.3.min.js'&gt;&lt;/script&gt;
&lt;script src='assets/jquery-jvectormap-world-mill-en.min.js'&gt;&lt;/script&gt;
&lt;asset:javascript src=""bundle.js""/&gt;
&lt;div id=""world-map"" style=""width: 600px; height: 400px""&gt;&lt;/div&gt;
&lt;script&gt;
    $(function(){
        $('#world-map').vectorMap({map: 'world_mill_en'});
    });
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>I've tried including the assets and script src in so many places and it is getting bundled and shows up in the browser console when run... but the component still can't find the method. The northAmerica.js file gets passed to index.js as follows:</p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { Router, Route, Link, browserHistory, IndexRoute } from 'react-router'
import { CreateAccount } from './createaccount';
import { Menus } from './menu';
import { DiscoverApp } from './discover'
import { northAmerica } from './northAmerica'
import { southAmerica } from './southAmerica'
import { europe } from './europe'
import { africa } from './africa'
import { asia } from './asiaME'
import { australia } from './australia'
import * as map from './jquery-jvectormap-2.0.3.min.js'
import * as world from './jquery-jvectormap-world-mill-en.min.js'


ReactDOM.render((

    &lt;Router history = {browserHistory}&gt;
        &lt;Route path=""/"" component={CreateAccount}/&gt;
        &lt;Route path=""/menu"" component={Menus}/&gt;
        &lt;Route path=""/discover"" component={DiscoverApp}/&gt;

        &lt;Route path=""/NorthAmerica"" component={northAmerica}/&gt;
        &lt;Route path=""/SouthAmerica"" component={southAmerica}/&gt;
        &lt;Route path=""/Europe"" component={europe}/&gt;
        &lt;Route path=""/Asia"" component={asia}/&gt;
        &lt;Route path=""/Africa"" component={africa}/&gt;
        &lt;Route path=""/Australia"" component={australia}/&gt;
    &lt;/Router&gt;

), document.getElementById('root')); 
</code></pre>

<p>Any suggestions on where to go from here? Thanks a lot!</p>
","7622546","","7622546","","2017-03-01 22:37:59","2017-03-01 22:37:59","How do you call a method from an external javascript library in a react class?","<javascript><reactjs><grails><webpack>","0","3","","",""
"33997945","1","","","2015-11-30 11:48:21","","2","1097","<p>I'm using React &amp; React-router, 0.13.3, and React-widgets 3.1.0, all installed with bower; and brunch for build.</p>

<p>In a route, I'm creating a drop-down like:</p>

<pre><code>render: function()
{
  var trylist = ['pink', 'red', 'blue', 'white' ];
  var DropdownList = ReactWidgets.DropdownList;

  return (&lt;DropdownList defaultValue=""red"" data={trylist} /&gt; )
}
</code></pre>

<p>When I click on the drop-down, it gives this error in the console:</p>

<blockquote>
  <p>Uncaught TypeError: Cannot read property 'findDOMNode' of undefined</p>
</blockquote>

<p>The file is shown as react-widgets.js:2015. At this file/line:</p>

<pre><code>      findDOMNode: function findDOMNode(component) {
    return _reactDom2['default'].findDOMNode(component);
</code></pre>

<p>Help very much appreciated! Am rather a noob with JS, React.</p>
","4248233","","","","","2015-11-30 15:42:29","""Cannot read property 'findDOMNode' of undefined"" when using React-widgets","<javascript><reactjs>","1","0","","",""
"32470637","1","","","2015-09-09 03:54:11","","1","799","<p>I want to embed a script tag provided by a third party ad service into my react app. It is like a Github gist. It should run the script and write a <code>&lt;iframe&gt;</code> inside the HTML to show the ads.</p>

<p>The official scripts are something like this:</p>

<pre><code>&lt;script type=""text/javascript""&gt;
var cpro_id = ""uXXXXXXXX"";
&lt;/script&gt;
&lt;script src=""http://cpro.baidustatic.com/cpro/ui/c.js""&gt;&lt;/script&gt;
</code></pre>

<p>I tried to put the first script tag in the template HTML, and put the second in the component I need it to be, like this:</p>

<pre><code>...
componentDidMount () {
  let g = document.createElement ('script');
  g.setAttribute ('src','http://cpro.baidustatic.com/cpro/ui/c.js');
  React.findDOMNode (this.refs.ad).appendChild (g);
},
render() {
  return &lt;div ref='ad'&gt;&lt;/div&gt;;
}
...
</code></pre>

<p>Unfortunately, it failed and throw this error: <code>It isn't possible to write into a document from an asynchronously-loaded external script unless it is explicitly opened.</code></p>

<p>I tried <a href=""https://github.com/yariv/ReactScriptLoader"" rel=""nofollow"">ReactScriptLoader</a> and it gave me the same error.</p>

<p>I tried <code>dangerouslysetinnerhtml={{__html: '&lt;script src=""http://cpro.baidustatic.com/cpro/ui/c.js""&gt;&lt;/script&gt;'}}</code>, but failed.</p>

<p>I tried to study the code of <code>c.js</code> file and change all <code>document.write</code> to <code>innerHTML=...</code>, but failed.</p>

<p>Can anyone help? Thanks!</p>
","3433962","","","","","2015-09-09 03:54:11","How to embed content generating <script> in reactjs component","<javascript><reactjs>","0","3","","",""
"36662601","1","36662693","","2016-04-16 09:50:46","","1","81","<p>I am trying to write a simple test. I have Karma as the test runner and Mocha as the framework.</p>

<p>Each time I run the test, it fails with the error...
<code>TypeError: h1.findDOMNode is not a function</code></p>

<p>Here's the test script...</p>

<pre><code>// Article-test.jsx
var React = require('react'),
    TestUtils = require('react-addons-test-utils'),
    expect = require('expect'),
    Article = require('../Article.jsx');

it(""renders an h1"", function () {
    var article = TestUtils.renderIntoDocument(
        &lt;Article /&gt;
    );

    var h1 = TestUtils.findRenderedDOMComponentWithTag(
        article, 'h1'
    );

    expect(h1.findDOMNode().textContent).toEqual(""Example Title"");
});
</code></pre>

<p>This was after finding that <code>getDOMNode</code> is deprecated, and is now <code>findDOMNode</code>. I keep finding out methods which have been deprecated.</p>

<blockquote>
  <p>react + react-addons-test-utils ver. 15.0.1 | mocha ver. 2.4.5</p>
</blockquote>
","1298155","","","","","2016-04-16 10:01:16","Error 'h1.findDOMNode is not a function' when running a Karma test","<reactjs><mocha><reactjs-testutils>","1","0","","",""
"35322607","1","","","2016-02-10 17:59:53","","1","485","<p>I am trying to wrap jquery.gridster as a react component and getting an error.</p>

<p>'Uncaught TypeError: (0 , _jquery2.default)(...).gridster is not a function'</p>

<pre><code>import $ from 'jquery';
    componentDidMount() {
            var gridster = $(ReactDOM.findDOMNode(this)).gridster({
                widget_margins: [5, 5],
                widget_base_dimensions: [150, 150],
                resize: {
                    enabled: true
                }
            }).data('gridster');
        }
</code></pre>

<p>I have added script tags to index.html</p>

<pre><code>&lt;script type=""text/javascript"" src=""assets/jquery.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""assets/jquery.gridster.js"" charster=""utf-8""&gt;&lt;/script&gt;
</code></pre>

<p>I am not sure if this is the correct way, not sure how to import gridster.Has anyone tried this before?</p>
","477489","","","","","2016-04-07 08:08:51","jquery gridster react component","<javascript><reactjs><gridster>","1","3","1","",""
"51214269","1","","","2018-07-06 16:17:03","","0","19","<p>I am trying to view an InfoWindow everytime the maps is clicked, it will show an input field and a button to add the named location to list. For now, I am just trying to get the text out of the form, the problem that I am having is how to access the form when the button is clicked???!</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import ReactDOM from 'react-dom';
import PopUpForm from './PopUpForm';
import ReactDOMServer from 'react-dom/server'

class Map extends React.Component {
  
  state = {
      infowindow: new google.maps.InfoWindow({}),
  }

  componentDidUpdate(prevProps, prevState) {
    console.log('componentDidUpdate');
    if (prevProps.google !== this.props.google) {
      this.loadMap();
    }
  }

  componentDidMount() {
    console.log('componentDidMount');
    this.loadMap();
  }

  loadMap() {
    console.log('loadMap');
    if (this.props &amp;&amp; this.props.google) {
      // google is available
      const {google} = this.props;
      const maps = google.maps;

      const mapRef = this.refs.map;
      const node = ReactDOM.findDOMNode(mapRef);

      const {initialCenter, zoom} = this.props;
      const {lat, lng} = initialCenter;
      const center = new maps.LatLng(lat, lng);
      const mapConfig = Object.assign({}, {
        center,
        zoom
      })
      this.map = new maps.Map(node, mapConfig);

      // adding markers for corresponding saved places
      const pos = {lat: 59.329113196988345 , lng: 17.966015144369067};
      const marker = new google.maps.Marker({
        position: pos,
        map: this.map,
        title: 'first marker',
      });
      const infowindow = new google.maps.InfoWindow({
        content: `&lt;h3&gt;${marker.title}&lt;/h3&gt;`
      });
      marker.addListener('click', () =&gt; {
        infowindow.open(this.map, marker);
      });

      // pop up  infoWindoW on map
      this.map.addListener('click', (e) =&gt; {
        this.state.infowindow.close();
        const popUp = &lt;PopUpForm onSubmit={this.onSubmit}/&gt;;
        this.showPopupOnMap(e.latLng, popUp);
        google.maps.event.addListener(this.state.infowindow, 'domready', () =&gt; {
          // HOW TO ACCESS THE FORM HERE
        });
      })
      this.forceUpdate();
    }      
}

onSubmit = () =&gt; {
  e.preventDefault();
  window.alert('onSubmit form')
}

showPopupOnMap = (latLng, popUp) =&gt; {
  const contentString = ReactDOMServer.renderToString(popUp)

  const pos = { lat: latLng.lat(), lng: latLng.lng() };

  this.state.infowindow = new google.maps.InfoWindow({
    content: contentString,
    position: pos
  });
  this.state.infowindow.open(this.map)
}

renderChildren() {
  console.log('renderChildren');
  const {children} = this.props;
  if (!children) return;
  return React.Children.map(children, c =&gt; {
    return React.cloneElement(c, {
      map: this.map,
      google: this.props.google,
    });
  })
}

render() {
  console.log('render');
    const style = {
      width: '70vw',
      height: '70vh'
    }

    return (
      &lt;div  ref=""map"" style={style}&gt;
        loading map...
        {this.renderChildren()}
      &lt;/div&gt;
    )
  }
};

Map.defaultProps = {
  zoom: 11,
  initialCenter: {
    lat: 59.3293,
    lng: 18.0686
  }
}

export default Map;</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';

class PopUpForm extends React.Component {
    render() {
        return (
            &lt;div id='iwc' ref='iwc' &gt;
                &lt;b&gt;Add this location&lt;/b&gt;&lt;br /&gt;
                &lt;form ref='mapform' className='map-form' onSubmit={this.onSubmit}&gt;
                    &lt;input type='text' /&gt;
                    &lt;button id='btn'&gt;Add&lt;/button&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        );
    }
}

export default PopUpForm;</code></pre>
</div>
</div>
</p>

<p>inside of this.map.addListner(this.state.infoWindow, 'domready', someFunctionToBeCalled) I do not know how to acces the form in React, I searched about it all I could found is this:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>google.maps.event.addListener(info, 'domready', function() {
    document.id(""map-form"").addEvent(""submit"", function(e) {
        e.stop();
        console.log(""hi!"");
    });
});</code></pre>
</div>
</div>
</p>

<p>is this even possible? Am I missing something??</p>
","7463649","","","","","2018-07-07 07:48:19","How to access a form inside InfoWindow content in React using Google maps api and google-maps-react V2.0.2","<reactjs><google-maps><google-maps-api-3><infowindow><google-maps-react>","1","0","","",""
"33640969","1","","","2015-11-10 22:35:44","","2","465","<p>I'm interested in using react-style. I am getting errors though when trying to process my files in Gulp. I get the following error:</p>

<p>Error: Cannot find module 'react/lib/ExecutionEnvironment' from '/Users/nnnnnn/Google Drive/Code/reactTesting/reactTestOne/node_modules/react-style/lib'</p>

<p>The jsx file is here, just in case I've done something very silly:</p>

<pre><code>import React, {Component, PropTypes} from 'react';
var ReactDOM = require('react-dom');
var Stylesheet = require('react-style');

export default class ToDo extends React.Component {
    constructor(props){
        super(props);
    }

    componentDidMount() {
        var node = ReactDOM.findDOMNode(this);
        TweenLite.to(node, 0.5, {css:{opacity:1, x:100}, ease:Power4.easeOut});
    }

    render() {
        return (
            &lt;div styles={[styles.todo]} onClick={this.props.onClick} &gt;
                {this.props.text}
            &lt;/div&gt;
        )
    }
}

ToDo.propTypes = {
    onClick: PropTypes.func.isRequired,
    text: PropTypes.string.isRequired,
    completed: PropTypes.bool.isRequired
}

var styles = Stylesheet.create({
    todo: {
        opacity: 0,
        x: -100
    }
})
</code></pre>

<p>Google is not helping. Wondering if I need to compile the package somehow, quite tired so probably time to leave it for the night. But struggling to let it go until this is done. You know how it is :)</p>

<p>Cheers.</p>
","407371","","1505120","","2015-11-11 00:18:55","2015-11-11 09:18:54","Module error when styling react components with react-style","<reactjs><npm><npm-install>","1","0","","",""
"50312095","1","","","2018-05-13 01:58:42","","0","81","<p>I am new to react and have to do this neighborhood map project. The component i'm having problem with is trying to have the marker and the info windows outside the <code>loadmap()</code> function not sure how to implement it this is the code i have so far 
i have tried to have a function outside the <code>loadmap</code> function but any function inside addListener in the loadmap the react app does not recognize it i have tried to move the markers and info window completely outside the loadmap and pass the info window as arguments but if i use new google.maps.InfoWIndow outside that function i get a error not sure what to do all i want to do is to have a function for the markers and infowindow so i can pass a props from the app component and when that props change it will update the function so the markers and info windows update in the map.</p>

<p>this is the git of the project <a href=""https://github.com/fernandoapeguero/neighborhoodreact"" rel=""nofollow noreferrer"">https://github.com/fernandoapeguero/neighborhoodreact</a></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, { Component } from 'react';
import ReactDOM from 'react-dom'

export default class MapContainer extends Component {


  state ={
    img: []
  }

  componentDidMount() {
    this.loadMap();
    // call loadMap function to load the google map
  }

   imageLoader = (querySearch) =&gt; {

      fetch(""https://api.unsplash.com/search/photos?page=1&amp;query="" + querySearch ,{
        headers: {
          Authorization: ""Client-ID fa7b4d3f7a1cf70d22c9d0fe4446294f729e8fd1dfacd72f7582e81b593be383""
        }
      }
    ).then(data =&gt; data.json()
     ).then(data =&gt; {
       return data.results[2].urls.thumb
     }).catch(err =&gt; console.log(""image not found "" + err)

    );
    }

  loadMap() {
    if (this.props &amp;&amp; this.props.google) { // checks to make sure that props have been passed
      const {google} = this.props; // sets props equal to google
      const maps = google.maps; // sets maps to google maps props

      const mapRef = this.refs.map; // looks for HTML div ref 'map'. Returned in render below.
      const node = ReactDOM.findDOMNode(mapRef); // finds the 'map' div in the React DOM, names it node

      const mapConfig = Object.assign({}, {
        center: {lat: 40.7485722, lng: -74.0068633}, // sets center of google map to NYC.
        zoom: 11, // sets zoom. Lower numbers are zoomed further out.
        mapTypeId: 'roadmap' // optional main map layer. Terrain, satellite, hybrid or roadmap--if unspecified, defaults to roadmap.
      })

      this.map = new maps.Map(node, mapConfig);
      let bounds = new google.maps.LatLngBounds();

        this.props.allMarkers.forEach(loc =&gt; {
        const marker = new google.maps.Marker({
        position: loc.location,
        title: loc.title,
        map: this.map ,
        animation: google.maps.Animation.DROP
        })
      // let img = this.imageLoader(loc.title);
        // this.props.markerHolder.push(marker)
        bounds.extend(loc.location);

        let infoWin = new google.maps.InfoWindow({
            content:`&lt;img  src={require('${this.imageLoader(loc.title)}')} alt=""${loc.title}"" &gt; &lt;p&gt;${loc.title}&lt;/p&gt;`
        });

        marker.addListener('click',function(){
        infoWin.open(this.map , marker);
        })

       })// creates a new Google map on the specified node (ref='map') with the specified configuration set above.

      this.map.fitBounds(bounds);
    }
  }

  render() {
    const style = { // MUST specify dimensions of the Google map or it will not work. Also works best when style is specified inside the render function and created as an object
      width: this.props.mapWidth, // 90vw basically means take up 90% of the width screen. px also works.
      height: '100vh',
       // 75vh similarly will take up roughly 75% of the height of the screen. px also works.
    }

    return ( // in our return function you must return a div with ref='map' and style.
      &lt;div ref=""map"" style={style}&gt;
        loading map...
      &lt;/div&gt;
    )
  }
}</code></pre>
</div>
</div>
</p>
","8571727","","8034782","","2018-05-13 11:59:59","2018-05-13 11:59:59","how to re render infowindow and marker on google map react","<javascript><reactjs><google-maps>","0","0","0","",""
"37106885","1","45176185","","2016-05-09 02:09:56","","3","636","<p>I'm using mocha and JsDom to test my react component.</p>

<p>First of all my component works perfectly, so it is problem with the testing enviornment. </p>

<p>Situation:</p>

<p>I have a component that render a couple of <code>select</code> tag with id. Then a <code>componentDidMount</code> in the component that would use <code>document.getElementById</code> to get those select tags and add options to them. But when I run my test, it is showing null for these <code>getElementById</code>.</p>

<p>Now if I comment out <code>componentDidMount</code>, and assert stuff such as below, it works perfectly, so the component did render out those select tags.</p>

<pre><code>    describe('test component', function(){
      var renderedElement = ReactTestUtils.renderIntoDocument(&lt;Component/&gt;);
      var renderedNode = ReactDom.findDOMNode(renderedElement);
      it('should have the proper markup', function(){
        assert.equal(renderedNode.childElementCount, 5);
       [...]
      })
    })
</code></pre>

<p>what is causing the problem? Is it cause <code>document.getElementById</code> the document object doesn't exist in my testing environment cause Im using a 'fake' one, if so how should I test this?</p>

<p>below is my jsdom setup for mocha</p>

<pre><code>    (function () {
        'use strict';

        var jsdom = require('jsdom'),
            baseHTML,
            window;

        if (!global.window) {
            baseHTML = '&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang=""en""&gt;&lt;meta charset=""UTF-8""&gt;&lt;title&gt;Tests&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;';
            window = jsdom.jsdom(baseHTML).defaultView;

            global.window = window;
            global.document = window.document;
            global.navigator = window.navigator;
        }

    }());
</code></pre>
","308553","","308553","","2016-05-09 02:15:06","2017-07-18 20:11:09","mocha JSDOM testing on react, getElementById return null","<reactjs><mocha><jsdom>","1","0","","",""
"36921019","1","37448255","","2016-04-28 16:58:46","","1","878","<p>So, I have a list, and I can now drag elements (divs) out of that list, using react-draggable. React-draggable makes the original element draggable (makes sense), but I need to drag a copy (clone) of the original element, and keep the original element in place. 
So, I have the entities list that contain the elements, each element has an event that calls the parent element list hoping to clone the original shift, and wrap the original element with a draggable element in order to make it draggable. Once it it draggable/created, I want to attach it to a different element on the screen, and put the initial position to centre where the mouse cursor is. 
One last thing I want to do is that if the element is dropped in a ""wrong"" location, it should animate (react-motion I guess) a return to the original position. Originally it was written in Jquery and I obviously know how to use jquery-ui to make all this happen, but I'm a bit stuck with doing it the react way. </p>

<pre><code>   var Scheduler = require('scheduler/components/Scheduler');

    var ShiftTypeDiv = require('scheduler/components/ShiftType');

    var Draggable = ReactDraggable;

    var ShiftTypes = React.createClass({
      getInitialState: function() {
         return ({
          shiftTypes: SchedulerStore.getShiftTypes(),
          clonedItem: null
         })
      },
      handleStart: function (event, ui) {
        console.log('handleStart: ', event);
        console.log('Position: ', ui.position);
      },

      cloneShiftBeforeDrag: function (item) {
        console.log('cloning', item);
        React.cloneElement(item);
        ReactDOM.findDOMNode
        this.setState({
          clonedItem: item
        });
      },

      handleDrag: function (event, ui) {
        console.log('handledrag: ',ui);
        console.log('dragging');
      },

      handleStop: function (event, ui) {
        console.log('handleStop: ', event);
        console.log('Position: ', ui.position);
      },

      render: function() {

        var self = this;

        shiftTypesJSX = this.state.shiftTypes.map(function(shiftType,index) {
        return (
                &lt;ShiftTypeDiv shiftType={shiftType} key={index} cloneShiftBeforeDrag={self.cloneShiftBeforeDrag.bind(null, shiftType)} /&gt;
                )
        });

        return (
          &lt;div &gt;
             &lt;div className=""box-header""&gt;
              &lt;ul&gt;
                &lt;li className=""title title-name""&gt;Shift Templates&lt;/li&gt;
                &lt;li className=""title edit-link""&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/div&gt;
              &lt;div className=""box-content"" data-onboarding-item=""2""&gt;
                &lt;Draggable
                  handle="".ui-draggable""
                  zIndex={100}
                  onStart={this.handleStart}
                  onDrag={this.handleDrag}
                  onStop={this.handleStop}
                  &gt;
                  &lt;div className=""draggable-custom-shift ui-draggable ui-draggable-handle""&gt;&lt;strong&gt;New Shift&lt;/strong&gt;&lt;/div&gt;
                &lt;/Draggable&gt;
              &lt;/div&gt;
            &lt;div className=""box-content"" id=""shift-templates""&gt;
              &lt;div className=""row-fluid""&gt;
                &lt;div id=""shift-types-list"" className=""span12""&gt;
                  &lt;div className=""input-group shift-type-filter-form""&gt;
                    &lt;input type=""text"" className=""span12"" id=""shift-type-filter"" placeholder=""Filter shift templates"" /&gt;
                    &lt;i className=""icon-remove-sign"" id=""remove-shift-type-filter""&gt;&lt;/i&gt;
                  &lt;/div&gt;
                  &lt;div id=""shift_types"" &gt;
                    {shiftTypesJSX}
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          )
      }
    })

    module.exports = ShiftTypes;


var Scheduler = require('scheduler/components/Scheduler').default;

var Draggable = ReactDraggable;

var ShiftTypeDiv = React.createClass({
  handleStart: function (event, ui) {
    console.log('cloning');
    this.props.cloneShiftBeforeDrag(this);
  },

  handleDrag: function (event, ui) {
    console.log('handledrag: ',ui);
    console.log('dragging');
  },

  handleStop: function (event, ui) {
    console.log('handleStop: ', event);
    console.log('Position: ', ui);
    this.setState({

    })

  },
  render: function() {
    shiftType = this.props.shiftType;
    return (
      &lt;Draggable
              bounds=""body""
              zIndex={100}
              onStart={this.handleStart}
              onDrag={this.handleDrag}
              onStop={this.handleStop}
              position={null}
              &gt;
        &lt;div className=""draggable-shift-type ui-draggable ui-draggable-handle"" data-shift-type-id={shiftType.id}&gt;
          {shiftType.name} &lt;span dangerouslySetInnerHTML={{__html:shiftType.start_time + '-' + shiftType.end_time}}&gt;&lt;/span&gt;
        &lt;/div&gt;
      &lt;/Draggable&gt;
      )
  }
})

module.exports = ShiftTypeDiv;
</code></pre>
","5364505","","","","","2018-01-16 13:16:43","How to clone a react element for dragging purposes","<reactjs><draggable><react-motion>","2","0","","",""
"35956928","1","","","2016-03-12 11:14:51","","3","285","<p>I am trying to get meteor to work with react-bootstrap npm package, and I'm getting <code>Uncaught TypeError: _reactDom2.default.findDOMNode is not a function</code> no matter what I try.</p>

<p>For that purpose I use AdamBrodzinski/meteor-react-boilerplate, and while it works fine, it doesn't work for me when I try to add additional packages from npm. I tried material-ui too, and I got exactly the same error as I do now.</p>

<p>I also followed this tutorial: <a href=""http://react-in-meteor.readthedocs.org/en/latest/client-npm/"" rel=""nofollow"">http://react-in-meteor.readthedocs.org/en/latest/client-npm/</a></p>

<p>My repository I get an error in is: <a href=""https://github.com/vincaslt/meteor-chess"" rel=""nofollow"">https://github.com/vincaslt/meteor-chess</a></p>

<p>both\pages\Game.jsx is the file that contains my changes. I also made sure I referenced bootstrap components in app.browserify.js: </p>

<pre><code>Button = require('react-bootstrap/lib/Button')
Modal = require('react-bootstrap/lib/Modal')
</code></pre>

<p>I tried importing react-dom as npm package in the project, but that doesn't change anything regarding the error.</p>
","2650694","","","","","2016-03-12 11:14:51","Can't get meteor to work with react and npm","<meteor><reactjs><npm><react-bootstrap>","0","3","","",""
"45637699","1","","","2017-08-11 14:30:42","","0","90","<p>I'm trying to implement some react components for a grid system.
The current implementation uses jQuery, so I need to completely reimplement the JS functionality...
The grid system adds a class to all elements that wrap to row 2 or more.</p>

<p>I also want to identify if the element is in the rows first and/or last column..</p>

<p>I'm currently using <code>ReactDOM.findDOMNode(this)</code> to get the <code>offsetTop</code> and <code>parentElement.offsetTop</code></p>

<pre><code>export default class Cell extends Component {
  static propTypes = {
    children: PropTypes.node,
  };

  static defaultProps = {
    children: '',
  };

  constructor(props){
    super(props);
    this.checkMargin = this.checkMargin.bind(this)
  }

  checkMargin() {
    this.newRow = false
    const _elm = ReactDOM.findDOMNode(this)
    this.newRow = (_elm.offsetTop &gt; _elm.parentElement.offsetTop)
  }

  componentDidMount() {
    window.addEventListener('resize', this.checkMargin)
    this.checkMargin()
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.checkMargin)
  }

  render() {
    const { children } = this.props
    return (&lt;div className={this.newRow ? 'margin-top' : ''}&gt;{children}&lt;/div&gt;)
  }
}
</code></pre>

<p>The wrapping parent looks as follows:</p>

<pre><code>export default class Grid extends Component {

  static propTypes = {
    children: PropTypes.node,
    className: PropTypes.string,
  }

  static defaultProps = {
    children: '',
    className: '',
  }

  static childContextTypes = {
    cell: PropTypes.object.isRequired,
  }

  render() {
    const className = classNames(
        'grid-wrapper',
        this.props.className
    )
    const { children } = this.props

    return (
      &lt;div className={className}&gt;
        {children}
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p>The columns can be specified with classes on either the parent or the individual cell with a <code>child-width-1-3</code> on the parent or <code>width-2-3</code> on the cell.
There are a number of issues with this implementation though...</p>

<p>The question is Two-fold:</p>

<ul>
<li>It uses findDOMNode - I haven't found a case that shows to use <code>ref</code> in this context, but the recommendation is to use ref instead of <code>findDOMNode</code>.. but all examples I have seen relates to referencing other elements.</li>
<li>It wont actually update on resize .. since the <code>margin-top</code> class adds to the offset, and thus causes the element to still have a greater offset than it's parent, even if it have moved to the first row. Is there any way I can solve this without hardcoding the css values for the margin-top in to the component, or have the user supply it each time they want to use the component (as the user might change the value of <code>margin-top</code> in their less code variable).</li>
</ul>
","1203957","","1203957","","2017-08-11 21:44:01","2017-08-11 21:44:01","Get react component offset to direct parent","<javascript><reactjs><react-dom>","0","1","","",""
"39044223","1","","","2016-08-19 16:54:35","","0","201","<p>I am looking at using reactjs as a framework to manage/control the various chart widgets.</p>

<p>-- when I started looking to place these components into separate js files -- undefined errors started appearing.</p>

<p>-- then how to structure how the charts should be rendered on a panel, how interactions could be implemented -- master/slave relationships -- update cta</p>

<p><a href=""http://jsfiddle.net/cfrapLma/28/"" rel=""nofollow"">http://jsfiddle.net/cfrapLma/28/</a></p>

<pre><code>var config = [{
              ""width"": 200,
              ""height"": 200,
              ""type"": ""piechart"",
              ""serviceApi"": ""api.php?mode=GetCars""
          }, {
              ""width"": 100,
              ""height"": 100,
              ""type"": ""barchart"",
              ""serviceApi"": ""api.php?mode=GetBoats""
          },
          {
              ""width"": 200,
              ""height"": 200,
              ""type"": ""piechart"",
              ""serviceApi"": ""api.php?mode=GetCars""
          },
          {
              ""width"": 200,
              ""height"": 200,
              ""type"": ""linechart"",
              ""serviceApi"": ""api.php?mode=GetCars""
          }];



          var MultipleCharts = React.createClass({
              getChart: function(config) {
                  switch (config.type) {

                      case 'piechart':
                          return &lt;PieChart width={config.width} height={config.height} service={config.service} /&gt;
                      case 'barchart':
                          return &lt;BarChart width={config.width} height={config.height} service={config.service} /&gt;
                      case 'linechart':
                          return &lt;LineChart width={config.width} height={config.height} service={config.service} /&gt;
                  }
              },

              render: function () {
                  var config = this.props.config;

                  return (
                      &lt;div&gt;
                          {config.map((chartConfig, index) =&gt; {
                              return (
                                  &lt;div key={index} className={'holder' + index}&gt;
                                      {this.getChart(chartConfig)}
                                  &lt;/div&gt;
                              )
                          })}
                      &lt;/div&gt;
                  );
              }
          });

          var PieChart = React.createClass({
              componentDidMount: function () {
                  var $this = $(ReactDOM.findDOMNode(this));
                  console.log(""rendered div now engage d3"");
                  // set el height and width etc.
              },
              render: function () {
                  return (
                      &lt;div className=""piechart"" data-role=""piechart"" data-width={this.props.width} data-height={this.props.height}
                          data-service={this.props.service}&gt;pie.
                      &lt;/div&gt;
                  );
              }
          });

          var LineChart = React.createClass({
              componentDidMount: function () {
                  var $this = $(ReactDOM.findDOMNode(this));
                  console.log(""rendered div now engage d3"");
                  // set el height and width etc.
              },
              render: function () {
                  return (
                      &lt;div className=""linechart"" data-role=""linechart"" data-width={this.props.width} data-height={this.props.height}
                          data-service={this.props.service}&gt;line.
                      &lt;/div&gt;
                  );
              }
          });



          var BarChart = React.createClass({
              componentDidMount: function () {
                  var $this = $(ReactDOM.findDOMNode(this));
                  console.log(""rendered div now engage d3"");
                  // set el height and width etc.
              },
              render: function () {
                  return (
                      &lt;div className=""barchart"" data-role=""barchart"" data-width={this.props.width} data-height={this.props.height}
                          data-service={this.props.service}&gt;bar.
                      &lt;/div&gt;
                  );
              }
          });


          ReactDOM.render(
              &lt;MultipleCharts config={config} /&gt;,
              document.getElementById('example')
          );
</code></pre>
","2700673","","","","","2016-08-20 07:22:46","Splitting up react js components into separate files -- and handling the creation of a dashboard based application","<javascript><reactjs>","1","0","","",""
"39885009","1","39888356","","2016-10-05 23:05:15","","0","1012","<p>When I look at the following line in this <a href=""https://github.com/clauderic/react-sortable-hoc"" rel=""nofollow"">example</a>:</p>

<p><code>const SortableItem = SortableElement(({value}) =&gt; &lt;li&gt;{value}&lt;/li&gt;);</code></p>

<p>then I don't understand <strong>where is the lambda function</strong> <code>({value}) =&gt; &lt;li&gt;{value}&lt;/li&gt;</code> <strong>used</strong> in <a href=""https://github.com/clauderic/react-sortable-hoc/blob/master/src/SortableElement/index.js"" rel=""nofollow"">SortableElement</a> ?</p>

<p>Can someone please enlighten me ?</p>

<p>SortableElement's code:</p>

<pre><code>import React, {Component, PropTypes} from 'react';
import {findDOMNode} from 'react-dom';
import invariant from 'invariant';

// Export Higher Order Sortable Element Component
export default function SortableElement (WrappedComponent, config = {withRef: false}) {
    return class extends Component {
        static displayName = (WrappedComponent.displayName) ? `SortableElement(${WrappedComponent.displayName})` : 'SortableElement';
        static WrappedComponent = WrappedComponent;
        static contextTypes = {
            manager: PropTypes.object.isRequired
        };
        static propTypes = {
            index: PropTypes.number.isRequired,
            collection: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
            disabled: PropTypes.bool
        };
        static defaultProps = {
            collection: 0
        };
        componentDidMount() {

            let {collection, disabled, index} = this.props;

            if (!disabled) {
                this.setDraggable(collection, index);
            }
        }
        componentWillReceiveProps(nextProps) {
            const {index} = this.props;
            if (index !== nextProps.index &amp;&amp; this.node) {
                this.node.sortableInfo.index = nextProps.index;
            }
            if (this.props.disabled !== nextProps.disabled)
            {
                let {collection, disabled, index} = nextProps;
                if (disabled) {
                    this.removeDraggable(collection);
                }
                else {
                    this.setDraggable(collection, index);
                }
            }
        }
        componentWillUnmount() {
            let {collection, disabled} = this.props;

            if (!disabled) this.removeDraggable(collection);
        }
        setDraggable(collection, index){
            let node = this.node = findDOMNode(this);

            node.sortableInfo = {index, collection};

            this.ref = {node};
            this.context.manager.add(collection, this.ref);
        }
        removeDraggable(collection) {
            this.context.manager.remove(collection, this.ref);
        }
        getWrappedInstance() {
            invariant(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableElement() call');
            return this.refs.wrappedInstance;
        }
        render() {
            const ref = (config.withRef) ? 'wrappedInstance' : null;
            return (
                &lt;WrappedComponent ref={ref} {...this.props} /&gt;
            );
        }
    }
}
</code></pre>
","1198559","","","","","2016-10-06 08:47:16","function argument in component's constructor in react.js","<reactjs>","3","0","","",""
"47271416","1","47442114","","2017-11-13 18:45:46","","4","437","<p>I have the following Sharepoint Framework webpart, which basically renders a grid depending on a dropdown property which has the list names.</p>

<pre class=""lang-tsx prettyprint-override""><code>import * as React from ""react"";
import * as ReactDom from ""react-dom"";
import { Version } from ""@microsoft/sp-core-library"";
import {
  BaseClientSideWebPart,
  IPropertyPaneConfiguration,
  PropertyPaneTextField,
  PropertyPaneDropdown,
  IPropertyPaneDropdownOption,
  IPropertyPaneField,
  PropertyPaneLabel
} from ""@microsoft/sp-webpart-base"";

import * as strings from ""FactoryMethodWebPartStrings"";
import FactoryMethod from ""./components/FactoryMethod"";
import { IFactoryMethodProps } from ""./components/IFactoryMethodProps"";
import { IFactoryMethodWebPartProps } from ""./IFactoryMethodWebPartProps"";
import * as lodash from ""@microsoft/sp-lodash-subset"";
import List from ""./components/models/List"";
import { Environment, EnvironmentType } from ""@microsoft/sp-core-library"";
import IDataProvider from ""./components/dataproviders/IDataProvider"";
import MockDataProvider from ""./test/MockDataProvider"";
import SharePointDataProvider from ""./components/dataproviders/SharepointDataProvider"";

export default class FactoryMethodWebPart extends BaseClientSideWebPart&lt;IFactoryMethodWebPartProps&gt; {
  private _dropdownOptions: IPropertyPaneDropdownOption[];
  private _selectedList: List;
  private _disableDropdown: boolean;
  private _dataProvider: IDataProvider;
  private _factorymethodContainerComponent: FactoryMethod;

  protected onInit(): Promise&lt;void&gt; {
    this.context.statusRenderer.displayLoadingIndicator(this.domElement, ""Todo"");

    /*
    Create the appropriate data provider depending on where the web part is running.
    The DEBUG flag will ensure the mock data provider is not bundled with the web part when you package the
     solution for distribution, that is, using the --ship flag with the package-solution gulp command.
    */
    if (DEBUG &amp;&amp; Environment.type === EnvironmentType.Local) {
      this._dataProvider = new MockDataProvider();
    } else {
      this._dataProvider = new SharePointDataProvider();
      this._dataProvider.webPartContext = this.context;
    }

    this.openPropertyPane = this.openPropertyPane.bind(this);

    /*
    Get the list of tasks lists from the current site and populate the property pane dropdown field with the values.
    */
    this.loadLists()
      .then(() =&gt; {
        /*
         If a list is already selected, then we would have stored the list Id in the associated web part property.
         So, check to see if we do have a selected list for the web part. If we do, then we set that as the selected list
         in the property pane dropdown field.
        */
        if (this.properties.spListIndex) {
          this.setSelectedList(this.properties.spListIndex.toString());
          this.context.statusRenderer.clearLoadingIndicator(this.domElement);
        }
      });

    return super.onInit();
  }

  // render method of the webpart, actually calls Component
  public render(): void {
    const element: React.ReactElement&lt;IFactoryMethodProps &gt; = React.createElement(
      FactoryMethod,
      {
        spHttpClient: this.context.spHttpClient,
        siteUrl: this.context.pageContext.web.absoluteUrl,
        listName: this._dataProvider.selectedList === undefined ? ""GenericList"" : this._dataProvider.selectedList.Title,
        dataProvider: this._dataProvider,
        configureStartCallback: this.openPropertyPane
      }
    );

    // reactDom.render(element, this.domElement);
    this._factorymethodContainerComponent = &lt;FactoryMethod&gt;ReactDom.render(element, this.domElement);

  }

  // loads lists from the site and fill the dropdown.
  private loadLists(): Promise&lt;any&gt; {
    return this._dataProvider.getLists()
      .then((lists: List[]) =&gt; {
        // disable dropdown field if there are no results from the server.
        this._disableDropdown = lists.length === 0;
        if (lists.length !== 0) {
          this._dropdownOptions = lists.map((list: List) =&gt; {
            return {
              key: list.Id,
              text: list.Title
            };
          });
        }
      });
  }

  protected get dataVersion(): Version {
    return Version.parse(""1.0"");
  }

  protected onPropertyPaneFieldChanged(propertyPath: string, oldValue: any, newValue: any): void {
    /*
    Check the property path to see which property pane feld changed. If the property path matches the dropdown, then we set that list
    as the selected list for the web part.
    */
    if (propertyPath === ""spListIndex"") {
      this.setSelectedList(newValue);
    }

    /*
    Finally, tell property pane to re-render the web part.
    This is valid for reactive property pane.
    */
    super.onPropertyPaneFieldChanged(propertyPath, oldValue, newValue);
  }

  // sets the selected list based on the selection from the dropdownlist
  private setSelectedList(value: string): void {
    const selectedIndex: number = lodash.findIndex(this._dropdownOptions,
      (item: IPropertyPaneDropdownOption) =&gt; item.key === value
    );

    const selectedDropDownOption: IPropertyPaneDropdownOption = this._dropdownOptions[selectedIndex];

    if (selectedDropDownOption) {
      this._selectedList = {
        Title: selectedDropDownOption.text,
        Id: selectedDropDownOption.key.toString()
      };

      this._dataProvider.selectedList = this._selectedList;
    }
  }


  // we add fields dynamically to the property pane, in this case its only the list field which we will render
  private getGroupFields(): IPropertyPaneField&lt;any&gt;[] {
    const fields: IPropertyPaneField&lt;any&gt;[] = [];

    // we add the options from the dropdownoptions variable that was populated during init to the dropdown here.
    fields.push(PropertyPaneDropdown(""spListIndex"", {
      label: ""Select a list"",
      disabled: this._disableDropdown,
      options: this._dropdownOptions
    }));

    /*
    When we do not have any lists returned from the server, we disable the dropdown. If that is the case,
    we also add a label field displaying the appropriate message.
    */
    if (this._disableDropdown) {
      fields.push(PropertyPaneLabel(null, {
        text: ""Could not find tasks lists in your site. Create one or more tasks list and then try using the web part.""
      }));
    }

    return fields;
  }

  private openPropertyPane(): void {
    this.context.propertyPane.open();
  }

  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {
    return {
      pages: [
        {
          header: {
            description: strings.PropertyPaneDescription
          },
          groups: [
            {
              groupName: strings.BasicGroupName,
              /*
              Instead of creating the fields here, we call a method that will return the set of property fields to render.
              */
              groupFields: this.getGroupFields()
            }
          ]
        }
      ]
    };
  }
}
</code></pre>

<p>my component.tsx</p>

<pre><code>//#region Imports
import * as React from ""react"";
import styles from ""./FactoryMethod.module.scss"";
import  { IFactoryMethodProps } from ""./IFactoryMethodProps"";
import {
  IDetailsListItemState,
  IDetailsNewsListItemState,
  IDetailsDirectoryListItemState,
  IDetailsAnnouncementListItemState,
  IFactoryMethodState
} from ""./IFactoryMethodState"";
import { IListItem } from ""./models/IListItem"";
import { IAnnouncementListItem } from ""./models/IAnnouncementListItem"";
import { INewsListItem } from ""./models/INewsListItem"";
import { IDirectoryListItem } from ""./models/IDirectoryListItem"";
import { escape } from ""@microsoft/sp-lodash-subset"";
import { SPHttpClient, SPHttpClientResponse } from ""@microsoft/sp-http"";
import { ListItemFactory} from ""./ListItemFactory"";
import { TextField } from ""office-ui-fabric-react/lib/TextField"";
import {
  DetailsList,
  DetailsListLayoutMode,
  Selection,
  buildColumns,
  IColumn
} from ""office-ui-fabric-react/lib/DetailsList"";
import { MarqueeSelection } from ""office-ui-fabric-react/lib/MarqueeSelection"";
import { autobind } from ""office-ui-fabric-react/lib/Utilities"";
import PropTypes from ""prop-types"";
//#endregion


export default class FactoryMethod extends React.Component&lt;IFactoryMethodProps, IFactoryMethodState&gt; {
  constructor(props: IFactoryMethodProps, state: any) {
    super(props);
    this.setInitialState();
  }

  // lifecycle help here: https://staminaloops.github.io/undefinedisnotafunction/understanding-react/

  //#region Mouting events lifecycle

  // the data returned from render is neither a string nor a DOM node.
  // it's a lightweight description of what the DOM should look like.
  // inspects this.state and this.props and create the markup.
  // when your data changes, the render method is called again.
  // react diff the return value from the previous call to render with
  // the new one, and generate a minimal set of changes to be applied to the DOM.
  public render(): React.ReactElement&lt;IFactoryMethodProps&gt; {
    switch(this.props.listName) {
        case ""GenericList"":
          // tslint:disable-next-line:max-line-length
          return &lt;this.ListMarqueeSelection items={this.state.DetailsListItemState.items} columns={this.state.columns} /&gt;;
        case ""News"":
          // tslint:disable-next-line:max-line-length
          return &lt;this.ListMarqueeSelection items={this.state.DetailsNewsListItemState.items} columns={this.state.columns}/&gt;;
        case ""Announcements"":
          // tslint:disable-next-line:max-line-length
          return &lt;this.ListMarqueeSelection items={this.state.DetailsAnnouncementListItemState.items} columns={this.state.columns}/&gt;;
        case ""Directory"":
          // tslint:disable-next-line:max-line-length
          return &lt;this.ListMarqueeSelection items={this.state.DetailsDirectoryListItemState.items} columns={this.state.columns}/&gt;;
        default:
          return null;
    }
  }

   // invoked once, only on the client (not on the server), immediately AFTER the initial rendering occurs.
   public componentDidMount(): void {
    // you can access any refs to your children
    // (e.g., to access the underlying DOM representation - ReactDOM.findDOMNode).
    // the componentDidMount() method of child components is invoked before that of parent components.
    // if you want to integrate with other JavaScript frameworks,
    // set timers using setTimeout or setInterval,
    // or send AJAX requests, perform those operations in this method.
    this._configureWebPart = this._configureWebPart.bind(this);
    this.readItemsAndSetStatus("""");
  }

  //#endregion

  //#region Props changes lifecycle events (after a property changes from parent component)
  public componentWillReceiveProps(nextProps: IFactoryMethodProps): void {
    if(nextProps.listName !== this.props.listName) {
      this.readItemsAndSetStatus(nextProps.listName);
    }
  }

  //#endregion

  //#region private methods
  private _configureWebPart(): void {
    this.props.configureStartCallback();
  }

  public setInitialState(): void {
    this.state = {
      type: ""ListItem"",
      status: this.listNotConfigured(this.props)
        ? ""Please configure list in Web Part properties""
        : ""Ready"",
      columns:[],
      DetailsListItemState:{
        items:[]
      },
      DetailsNewsListItemState:{
        items:[]
      },
      DetailsDirectoryListItemState:{
        items:[]
      },
      DetailsAnnouncementListItemState:{
        items:[]
      },
    };
  }

  // reusable inline component
  private ListMarqueeSelection = (itemState: {columns: IColumn[], items: IListItem[] }) =&gt; (
      &lt;div&gt;
          &lt;DetailsList
            items={ itemState.items }
            columns={ itemState.columns }
            setKey=""set""
            layoutMode={ DetailsListLayoutMode.fixedColumns }
            selectionPreservedOnEmptyClick={ true }
            compact={ true }&gt;
          &lt;/DetailsList&gt;
      &lt;/div&gt;
  )

  // read items using factory method pattern and sets state accordingly
  private readItemsAndSetStatus(nextListName: string): void {
    this.setState({
      status: ""Loading all items...""
    });

    const factory: ListItemFactory = new ListItemFactory();
    factory.getItems(this.props.spHttpClient, this.props.siteUrl, nextListName)
    .then((items: any[]) =&gt; {
      const keyPart: string = this.props.listName === ""GenericList"" ? """" : nextListName;
        // the explicit specification of the type argument `keyof {}` is bad and
        // it should not be required.
        this.setState&lt;keyof {}&gt;({
          status: `Successfully loaded ${items.length} items`,
          [""Details"" + keyPart + ""ListItemState""] : {
            items
          },
          columns: buildColumns(items)
        });
    });
  }

  private listNotConfigured(props: IFactoryMethodProps): boolean {
    return props.listName === undefined ||
      props.listName === null ||
      props.listName.length === 0;
  }

  //#endregion
}
</code></pre>

<p>and my factory object</p>

<pre><code>import { SPHttpClient, SPHttpClientResponse } from ""@microsoft/sp-http"";
import { IWebPartContext } from ""@microsoft/sp-webpart-base"";
import { IListItem} from ""./models/IListItem"";
import { IFactory } from ""./IFactory"";
import { INewsListItem } from ""./models/INewsListItem"";
import { IDirectoryListItem } from ""./models/IDirectoryListItem"";
import { IAnnouncementListItem } from ""./models/IAnnouncementListItem"";

export class ListItemFactory implements IFactory {
    private _listItems: IListItem[];
    public getItems(requester: SPHttpClient, siteUrl: string, listName: string): Promise&lt;IListItem[]&gt; {
        if(listName === """"){
            listName = ""GenericList"";
        }
        switch(listName) {
            case ""GenericList"":
                let items: IListItem[];
                // tslint:disable-next-line:max-line-length
                return requester.get(`${siteUrl}/_api/web/lists/getbytitle('${listName}')/items?$select=Title,Id,Modified,Created,Author/Title,Editor/Title&amp;$expand=Author,Editor`,
                SPHttpClient.configurations.v1,
                {
                    headers: {
                        ""Accept"": ""application/json;odata=nometadata"",
                        ""odata-version"": """"
                    }
                })
                .then((response: SPHttpClientResponse): Promise&lt;{ value: IListItem[] }&gt; =&gt; {
                    return response.json(); 
                })
                .then((json: { value: IListItem[] }) =&gt; {
                    console.log(JSON.stringify(json.value));
                    return items=json.value.map((v,i)=&gt;(
                        { 
                            //key: v.id,
                            id: v.Id,
                            title: v.Title,
                            created: v.Created,
                            createdby: v.Author.Title,
                            modified: v.Modified,
                            modifiedby: v.Editor.Title                        
                        }
                    ));
                });  
            case ""News"":
                let newsitems: INewsListItem[];
                // tslint:disable-next-line:max-line-length
                return requester.get(`${siteUrl}/_api/web/lists/getbytitle('${listName}')/items?$select=Title,Id,Modified,Created,Created By,Modified By,newsheader,newsbody,expiryDate`,
                SPHttpClient.configurations.v1,
                {
                    headers: {
                        ""Accept"": ""application/json;odata=nometadata"",
                        ""odata-version"": """"
                    }
                })
                .then((response: SPHttpClientResponse): Promise&lt;{ value: INewsListItem[] }&gt; =&gt; {
                    return response.json();
                })
                .then((json: { value: INewsListItem[] }) =&gt; {
                    return items=json.value.map((v,i)=&gt;(
                        { 
                            id: v.Id,
                            title: v.Title,
                            created: v.Created,
                            createdby: v.Author.Title,
                            modified: v.Modified,
                            modifiedby: v.Editor.Title,
                            newsheader: v.newsheader,
                            newsbody: v.newsbody,
                            expiryDate: v.expiryDate
                        }
                    ));
                });
            case ""Announcements"":
                let announcementitems: IAnnouncementListItem[];
                return requester.get(`${siteUrl}/_api/web/lists/getbytitle('${listName}')/items?$select=Title,Id`,
                SPHttpClient.configurations.v1,
                {
                    headers: {
                        ""Accept"": ""application/json;odata=nometadata"",
                        ""odata-version"": """"
                    }
                })
                .then((response: SPHttpClientResponse): Promise&lt;{ value: IAnnouncementListItem[] }&gt; =&gt; {
                    return response.json();
                })
                .then((json: { value: IAnnouncementListItem[] }) =&gt; {
                    return items=json.value.map((v,i)=&gt;(
                        { 
                            id: v.Id,
                            title: v.Title,
                            created: v.Created,
                            createdby: v.Author.Title,
                            modified: v.Modified,
                            modifiedby: v.Editor.Title,
                            announcementBody: v.announcementBody,
                            expiryDate: v.expiryDate
                        }
                    ));
                });
            case ""Directory"":
                let directoryitems: IDirectoryListItem[];
                return requester.get(`${siteUrl}/_api/web/lists/getbytitle('${listName}')/items?$select=Title,Id`,
                SPHttpClient.configurations.v1,
                {
                    headers: {
                        ""Accept"": ""application/json;odata=nometadata"",
                        ""odata-version"": """"
                    }
                })
                .then((response: SPHttpClientResponse): Promise&lt;{ value: IDirectoryListItem[] }&gt; =&gt; {
                    return response.json();
                })
                .then((json: { value: IDirectoryListItem[] }) =&gt; {
                    return items=json.value.map((v,i)=&gt;(
                        { 
                            id: v.Id,
                            title: v.Title,
                            created: v.Created,
                            createdby: v.Author.Title,
                            modified: v.Modified,
                            modifiedby: v.Editor.Title,
                            firstName: v.firstName,
                            lastName: v.lastName,
                            mobileNumber: v.mobileNumber,
                            internalNumber: v.internalNumber
                        }
                    ));
                });
            default:
            // tslint:disable-next-line:max-line-length
                return requester.get(`${siteUrl}/_api/web/lists/getbytitle('${listName}')/items?$select=Title,Id,Modified,Created,Author/Title,Editor/Title&amp;$expand=Author,Editor`,
                SPHttpClient.configurations.v1,
                {
                    headers: {
                        ""Accept"": ""application/json;odata=nometadata"",
                        ""odata-version"": """"
                    }
                })
                .then((response: SPHttpClientResponse): Promise&lt;{ value: IListItem[] }&gt; =&gt; {
                    return response.json(); 
                })
                .then((json: { value: IListItem[] }) =&gt; {
                    console.log(JSON.stringify(json.value));
                    return items=json.value.map((v,i)=&gt;(
                        { 
                            //key: v.id,
                            id: v.Id,
                            title: v.Title,
                            created: v.Created,
                            createdby: v.Author.Title,
                            modified: v.Modified,
                            modifiedby: v.Editor.Title                        
                        }
                    ));
                }); 
            }
      }
}
</code></pre>

<p>The problem is that the first time it renders, the listname is undefined, so it reads data from the GenericList and I can see the grid rendered which is desired behavior</p>

<p>But whenever I select another list, I get an empty string as parameter on the getlistitems parameter, its not taking either Announcements, News, etc</p>

<p>What am I missing here?</p>
","1014217","","815507","","2017-11-23 00:10:14","2017-11-23 00:10:14","confused about reactjs lifecycle","<javascript><reactjs><typescript>","1","4","","",""
"39325581","1","","","2016-09-05 07:20:51","","13","15682","<p>I'm trying to add an <code>onScroll</code> event on a table. This is what I've tried:</p>

<pre><code>componentDidMount() {
    ReactDOM.findDOMNode(this.refs.table).addEventListener('scroll', this.listenScrollEvent);
}

componentWillUnmount() {
    ReactDOM.findDOMNode(this.refs.table).removeEventListener('scroll', this.listenScrollEvent);
}

listenScrollEvent() {
    console.log('Scroll event detected!');
}

render() {
    return (
        &lt;table ref=""table""&gt;
           [...]
        &lt;/table&gt;
    )
}
</code></pre>

<p>I tried <code>console.log(ReactDOM.findDOMNode(this.refs.table))</code> and I'm getting the correct result but scroll event is never fired at all. I looked in <a href=""https://stackoverflow.com/questions/36180414/reactjs-add-custom-event-listener-to-component"">here</a> but still failed. Any help would be so much appreciated.</p>
","6032709","","-1","","2017-05-23 11:47:01","2017-10-30 19:13:23","How to add scroll event in react component","<javascript><reactjs><ecmascript-6>","3","4","2","",""
"46209932","1","46210047","","2017-09-14 03:14:06","","1","66","<p>I playing reactjs v15 on copen. I got <code>unexpected token = error</code> on line</p>

<pre><code>  _handleClick = (e) =&gt; {
    console.log(ReactDOM.findDOMNode(this.refs.input));
  }
</code></pre>

<p>Here is my fully react code on codepen: <a href=""https://codepen.io/dotku/pen/QqwgVV?editors=1010"" rel=""nofollow noreferrer"">https://codepen.io/dotku/pen/QqwgVV?editors=1010</a></p>

<pre><code>class Welcome extends React.Component {
  _handleClick = (e) =&gt; {
    console.log(ReactDOM.findDOMNode(this.refs.input));
  }
  render() {
    return &lt;div&gt;
      &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;
      &lt;button onKeyPress={this._handleClick}&gt;click&lt;/button&gt;
      &lt;input ref=""input""/&gt;
    &lt;/div&gt;;
  }
}

const element = &lt;Welcome name=""Sara"" /&gt;;
ReactDOM.render(
  element,
  document.getElementById('root')
);
</code></pre>

<p>Anyone has any idea why?</p>
","1034630","","","","","2017-09-14 03:40:32","Unexpected Token = on event handle on reactjs v15","<reactjs>","1","1","","",""
"38490303","1","38494287","","2016-07-20 20:30:39","","1","730","<p>im tryin to integrate Jquery custom scrollbar plugin <a href=""http://manos.malihu.gr/jquery-custom-content-scroller/"" rel=""nofollow"">here</a> in react. here is my code </p>

<pre><code>import $ from ""jquery"";
import mCustomScrollbar from 'malihu-custom-scrollbar-plugin';
.....
 componentDidMount: function() {
     // fixed sidebar
        var self = this;
        mCustomScrollbar($);
        $(ReactDom.findDOMNode(this.refs.menu_fixed)).mCustomScrollbar({
            autoHideScrollbar: true,
            theme: 'minimal',
            mouseWheel:{ preventDefault: true }
        });
        self.forceUpdate();
  },
</code></pre>

<p>i get this error <em>index.jsx:51 Uncaught TypeError: (0 , _malihuCustomScrollbarPlugin2.default) is not a function</em> </p>

<p>did somebody can help to make it work thanks</p>
","3846352","","","","","2016-10-08 23:29:21","Reactjs: jQuery custom content scroller with reactjs","<javascript><jquery><reactjs>","2","2","","",""
"38561660","1","","","2016-07-25 07:10:55","","2","407","<p>One of my components has a <code>div</code> element into which I would like to spill and handle/mutate my own DOM - without React interfering. </p>

<p>I am using d3.js for that manual DOM manipulation, and no I am not looking for react-d3 solutions, I need plain d3 in there. </p>

<p>All works well for me, except the reacts console warnings:</p>

<p><code>
warning.js:44Warning: Unknown prop `xmlns` on &lt;svg&gt; tag. Remove this prop from the element. For details, see
</code></p>

<p>and</p>

<p><code>
warning.js:44 Warning: Unknown DOM property class. Did you mean className?
</code></p>

<p>So It complains about me using <code>class</code> instead of <code>className</code> or about having some html attributes which are not react style etc.. </p>

<p>I'd like to tell React that from this component and below, it shouldn’t interfere, I will manage the DOM below this component manually.</p>

<p>Code looks something like this:</p>

<pre><code>import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import SomeD3CustomComp from '../some-d3-custom-comp.js';

export default class MyComponent extends Component {

  componentDidMount() {
   this.injectChart();
  }

  componentDidUpdate() {
   this.injectChart();
  }

  injectChart() {
    const comp = findDOMNode(this.refs.nonReactContainer);
    const { chart } = this.props;
    const { shouldRender, data } = chart;
    if (shouldRender) {
      SomeD3CustomComp.render(comp, data);
    }
  }

  render() {
    const { chart, someOtherData } = this.props;
    const { shouldRender } = chart;
    return(
      &lt;article&gt;
        {
          shouldRender &amp;&amp;
          &lt;div className=""non-react-element"" ref=""nonReactContainer""&gt;&lt;/div&gt;
        }
        &lt;div className=""react-element""&gt;{someOtherData}&lt;/div&gt;
      &lt;/article&gt;
    );
  }
}
</code></pre>

<hr>

<h2>Update:</h2>

<p>The suggestion of returning <code>false</code> on <code>shouldComponentUpdate</code> doesnt take away the error messages I have stated above, maybe because of the fact that <code>shouldComponentUpdate</code> happens only when there is an update - after the first inject on <code>componentDidMount</code>. </p>

<p>Another problem with that approach is that if return <code>false</code> code never gets to the render method where more logic is implemented such as in the example above where I check if to render the container non react element. This is the way I simply remove all previously injected elements, in the previous state. </p>

<p>So I am still looking for help with that...</p>

<hr>

<h2>Solved!</h2>

<p>false alarm :/ just found out that those warning messages were related to a different part of the code. Was a strange coincidence from the time this new feature was developed and some older problem. Conclusion: look harder at the warning messages! 
So this integration with d3 actually works nice.</p>
","2373504","","2373504","","2016-07-26 05:32:39","2016-07-26 05:32:39","How to tell react.js NOT to reconcile or interfere from a certain element?","<dom><d3.js><svg><reactjs>","0","1","1","",""
"46082548","1","46082671","","2017-09-06 19:01:05","","2","713","<p>I read through a simillar <a href=""https://stackoverflow.com/questions/33031516/reactjs-finddomnode-and-getdomnode-are-not-functions"">topic</a> where the same error was discussed, however that did not solve my problem. I have a simple app component:</p>

<pre><code>import React, { Component } from 'react';
import ReactDOM from 'react-dom';

class SearchBox extends Component {

    render() {
        return (
            &lt;form onSubmit = {this.handleClick.bind(this)}&gt;
                &lt;input
                    ref=""search""
                    type=""text"" 
                    placeholder=""username...""/&gt;

                &lt;input
                    type=""submit""
                    value=""Search"" /&gt;
            &lt;/form&gt;
        );
    }

    handleClick(e) {
        e.preventDefault();
        let username = this.refs.search.findDOMNode().value;
        this.props.fetchUser(username);
        this.refs.search.findDOMNode().value = '';
    }

    fetchUser(username) {
        let url = `https://api.github.com/users/${username}`;

        this.fetchApi(url);
      }

    fetchApi(url) {
      fetch(url)
        .then((res) =&gt; res.json())
        .then((data) =&gt; {

          this.setState({
            username: data.login,
            image: data.avatar_url,
            name: data.name,
            location: data.location,
            followers: data.followers,
            following: data.following
          })
        })
    }
}

export default SearchBox;
</code></pre>

<p>After rendering the component, I get the following error:</p>

<pre><code>TypeError: this.refs.search.findDOMNode is not a function
  20 | 
  21 | handleClick(e) {
  22 |  e.preventDefault();
&gt; 23 |     let username = this.refs.search.findDOMNode().value;
  24 |     
  25 |     this.props.fetchUser(username);
  26 |      this.refs.search.findDOMNode().value = '';
</code></pre>

<p>I tried using the findDOMNode() and also getDOMNode() methods, but without luck. Both of them cause the same error to pop up. Any ideas?</p>
","7680471","","","","","2018-04-19 05:29:25","findDOMNode() and getDOMNode() are not a functions","<reactjs>","2","1","1","",""
"46378452","1","","","2017-09-23 10:13:20","","0","53","<p>In this scenario I have created a Dynamic table in reactJS, I am using <code>constructor</code>, <code>states</code> or <code>objects</code> or written a code for printing row and column table using <code>innerHTMl</code>, but I want to use <code>.map</code> function to create a table instead of <code>innerHTML</code>. So, in the <code>html</code> part how can I use <code>.map</code> function?</p>

<p>How can I use <code>.map</code> function for create row or column?</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;link href=""http://getbootstrap.com/dist/css/bootstrap.min.css"" rel=""stylesheet"" /&gt;
    &lt;link href=""http://getbootstrap.com/dist/js/bootstrap.min.js""&gt;
    &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.0.2/react.js""&gt;&lt;/script&gt;
    &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.0.2/react-dom.js""&gt;&lt;/script&gt;
    &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js""&gt;&lt;/script&gt;

    &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.29/browser.js""&gt;&lt;/script&gt;
    &lt;title&gt;My First React File&lt;/title&gt;
    &lt;style&gt;
        .level1 td,  .label1 tr {
          border: 1px solid black;
        }
        .level2 td, .label2 tr {
            border: 2px solid black;
        }
        .level3 td , .label3 tr {
            border: 3px solid black;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=""app""&gt;&lt;/div&gt;    
    &lt;script type=""text/jsx""&gt;      
      class DynamicTable extends React.Component { 
          constructor(props) {
              super(props);            
              this.state = {
                  data: 'Dynamic Table', 
                  tblborder :'level1'
              }
              this.tableHead = this.tableHead.bind(this);
              this.all_row = 1;
              this.all_col = 1;
              this.dTable = """";
              this.index_count = 0;
              this.table_value = 1;    
              self = this;             
          };    
         tableHead(top_event) {
            this.setState({data: top_event.target.value});
          }
          tableRows(rows_event) {
              let text = """";
              let create_rows = 0;
              var id = rows_event.target.id;
              if (id == ""all_row_range"") {
                self.all_row = rows_event.target.value;
              } else {
                self.all_col = rows_event.target.value;
              }
              let dTable= document.getElementById('dynamic_tbody');
              while(create_rows &lt; self.all_row) {
                  text += '&lt;tr&gt;';
                  for(let i = 0; i &lt; self.all_col; i++){
                      text += '&lt;td&gt;Editable cells&lt;/td&gt;';
                  }
                  text += '&lt;/tr&gt;';
                  create_rows = create_rows + 1;
              }
              ReactDOM.findDOMNode(dTable).innerHTML = text;
              document.getElementById('dynamic_style_table').style.borderWidth = self.table_value;
              self.index_count = 0;
          } 
          tableBold(bold_value) {
            let v = bold_value.target.value;
            v = ""level"" + v;
            self.setState({tblborder : v})
          } 
          tableColumnEdit(edit_event) {
              let edit_value = document.getElementById(""edit_cell_checkbox"").checked;
              let tbody = document.getElementById(""dynamic_tbody"");
              let tr_tag = tbody.getElementsByTagName(""tr"");
              if(edit_value == true) {
                  for(let td_index = 0; td_index &lt; tr_tag.length; td_index++) {
                     tr_tag[td_index].contentEditable = ""true"";
                  }
              } else {
                  for(let td_index = 0; td_index &lt; tr_tag.length; td_index++) {
                     tr_tag[td_index].contentEditable = ""false"";
                  }
              }
          }
          render() {  
                const style = {
                  area_Left: {
                      float: 'left',
                      height: '397px',
                      width: '45%',
                      padding: '20px 20px',
                      lineHeight: '4',
                      background: '#21618C',
                      margin: '15px'
                  },
                  area_Right: {
                      float: 'right',
                      background: '#F5B7B1',
                      color: '#333',
                      height: '398px',
                      width: '45%',
                      padding: '20px 20px',
                      margin: '15px'
                  },
                  font_Size: {
                      font_Size: '13',
                      font: 'cursive',
                      fontWeight: 'bold',
                      color: '#333'
                  },
                  first_input: {
                      width: '162px',
                      height: '25px',
                      position: 'relative',
                      left: '49%'
                  },
                  rows_Border: {
                      border: ""1px solid #333"",
                      margin: '2px 0 0 2px',
                      width: '450px',
                      height: '70px'
                  },
                  text_Box: {
                      margin: '2px 0 0 0'
                  },
                  select_box: {
                      position: 'relative',
                      left: '34%',
                      width: '162px',
                      height: '25px'
                  },
                  position: {
                      position: 'relative',
                      left: '28%',
                      width: '89px',
                      height: '22px'
                  },
                  meter_first: {
                      position: 'relative',
                      left: '16%',
                      background: 'red'
                  },
                  meter_second: {
                      position: 'relative',
                      left: '11%'
                  }
              }
              return (
                  &lt;div&gt;
                      &lt;form action=""#"" method=""post""&gt;
                          &lt;div class=""container""&gt;
                            &lt;div style={style.area_Left}&gt;
                                &lt;div class=""form-group"" style={style.text_Box}&gt;
                                    &lt;label htmlFor=""first_text"" style={style.font_Size}&gt;Table name&lt;/label&gt;
                                    &lt;input class=""form-control"" style={style.first_input } type=""text"" name=""first_text"" id=""first_text"" value = {this.state.data} onChange = {this.tableHead}/&gt;                  
                                &lt;/div&gt;
                                &lt;div class=""form-group""&gt;
                                    &lt;label htmlFor=""all_row_range"" style={style.font_Size}&gt;Range for row increment/decrement &lt;/label&gt;
                                    &lt;input class=""form-control"" style={style.meter_first} type=""range"" name=""all_row_range"" id=""all_row_range"" min=""1"" max=""5"" onChange = {this.tableRows} defaultValue=""0""/&gt;
                                &lt;/div&gt;
                                &lt;div class=""form-group""&gt;
                                    &lt;label htmlFor=""all_col_range"" style={style.font_Size}&gt;Range for column increment/decrement &lt;/label&gt;
                                    &lt;input class=""form-control"" style={style.meter_second} type=""range"" name=""all_col_range""  id=""all_col_range"" defaultValue=""0"" min=""1"" max=""5"" onChange = {this.tableRows}/&gt;
                                &lt;/div&gt;
                                &lt;div class=""form-group""&gt;
                                    &lt;label htmlFor=""bold_select_box"" style={style.font_Size}&gt;Boldness of border cell&lt;/label&gt;
                                    &lt;select class=""form-control"" style={style.select_box} name=""bold_select_box"" id=""bold_select_box"" onChange = {this.tableBold}&gt;
                                        &lt;option value=""1""&gt;Level-1&lt;/option&gt;
                                        &lt;option value=""2""&gt;Level-2&lt;/option&gt;
                                        &lt;option value=""3""&gt;Level-3&lt;/option&gt;

                                    &lt;/select&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                    &lt;label htmlFor=""edit_cell_checkbox"" style={style.font_Size}&gt;Edit on cell of the table&lt;/label&gt;
                                    &lt;input type=""checkbox"" style={style.position} name=""edit_cell_checkbox"" id=""edit_cell_checkbox"" value=""editing"" onClick = {this.tableColumnEdit}/&gt;
                                &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;div style={style.area_Right}&gt;
                                &lt;table style={style.rows_Border} id=""dynamic_style_table"" className={this.state.tblborder}&gt;
                                        &lt;caption&gt;&lt;h3&gt;{this.state.data}&lt;/h3&gt;&lt;/caption&gt; 
                                    &lt;tbody id=""dynamic_tbody""&gt;

                                    &lt;/tbody&gt;
                                &lt;/table&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/form&gt;
                    &lt;/div&gt;
              );
        }
      }
      React.render(&lt;DynamicTable /&gt;,document.getElementById('app'));
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
","8613746","","8388820","","2017-09-23 10:28:21","2017-09-23 17:17:29","How can use .map function instead of innerHTML() in react?","<reactjs>","2","0","","",""
"29443889","1","","","2015-04-04 07:30:29","","13","15127","<p>For some reason, I'm not able to use React.findDOMNode function. Browser complains about type error, saying React.findDOMNode is not a function. This is the code where this happens:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var React = require('react');
var Backbone = require('backbone');
var Car = require('models/car');
var NewCarForm = React.createClass({
  handleSubmit: function(e) {
    e.preventDefault();
    var brand = React.findDOMNode(this.refs.brand).value.trim();
   ...
    this.props.handleNewCar(new Car({brand: brand, model:model,   name:name, kmTraveled:odometer, litresSpent:litres}));
    return;
  },
  render: function() {
    console.log(""Inside NewCarForm"");
    return (
      &lt;form className=""contentSection"" onSubmit={this.handleSubmit}&gt;
        &lt;input type=""text"" placeholder=""Car Brand"" ref=""brand"" /&gt;
       ...
        &lt;input type=""submit"" value=""Post"" /&gt;
      &lt;/form&gt;
    );
  }
});
module.exports = NewCarForm;</code></pre>
</div>
</div>
</p>

<p>This is the only module where I try to use this function. The rest of React works fine, so I have no idea what could be the problem here.</p>
","4490572","","","","","2017-08-01 05:27:33","Can't use React.findDOMNode function","<javascript><reactjs>","4","2","","",""
"48059208","1","","","2018-01-02 10:22:59","","0","36","<p>I have an app using an import statement to load <code>scss</code> file. it builds fine but when loading in browser it errors</p>

<pre><code>VM148 transformed.js:19714 Uncaught ReferenceError: menuIcon is not defined
    at Sidebar.render (VM148 transformed.js:19714)
   ...
VM148 transformed.js:13839 The above error occurred in the &lt;Sidebar&gt; component:
    in Sidebar (created by App)
    in div (created by App)
    in App
</code></pre>

<p>I am using the code from the following url <a href=""https://ashiknesin.com/blog/build-custom-sidebar-component-react/"" rel=""nofollow noreferrer"">https://ashiknesin.com/blog/build-custom-sidebar-component-react/</a></p>

<p><strong>New error</strong> after appending empty string to <code>src</code></p>

<pre><code>VM279 transformed.js:831 Warning: Failed context type: The context `router` is marked as required in `Link`, but its value is `undefined`.
    in Link (created by Sidebar)
    in li (created by Sidebar)
    in ul (created by Sidebar)
    in nav (created by Sidebar)
    in Sidebar (created by App)
    in div (created by App)
    in App
...
VM279 transformed.js:418 Uncaught Error: You should not use &lt;Link&gt; outside a &lt;Router&gt;
...
(anonymous) @ VM279 transformed.js:66
VM279 transformed.js:13839 The above error occurred in the &lt;Link&gt; component:
    in Link (created by Sidebar)
    in li (created by Sidebar)
    in ul (created by Sidebar)
    in nav (created by Sidebar)
    in Sidebar (created by App)
    in div (created by App)
    in App
</code></pre>

<p><strong>sidebar.js</strong></p>

<pre><code>import React from 'react'
import ReactDOM from 'react-dom'
import { IndexLink, Link } from 'react-router'
//import { BrowserRouter, IndexLink, Link, Route } from 'react-router-dom'
import './Sidebar.scss'
import classNames from 'classnames'

class Sidebar extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            showMenu: false
        }
        this.toggleMenu = this.toggleMenu.bind(this)
    }
    componentDidMount() {
        document.addEventListener('click', this.handleClickOutside.bind(this), true);
    }

    componentWillUnmount() {
        document.removeEventListener('click', this.handleClickOutside.bind(this), true);
    }
    toggleMenu() {
        this.setState({ showMenu: !this.state.showMenu })
    }
    handleClickOutside(event) {
        const domNode = ReactDOM.findDOMNode(this);

        if ((!domNode || !domNode.contains(event.target))) {
            this.setState({
                showMenu: false
            });
        }
    }

    render() {

        const showMenu = this.state.showMenu;
        const sidebarClass = classNames({
            'sidebar': true,
            'sidebar-menu-expanded': showMenu,
            'sidebar-menu-collapsed': !showMenu
        });

        const elementsClass = classNames({
            'expanded-element': true,
            'is-hidden': !showMenu,
        });



    return (
      &lt;nav className={sidebarClass}&gt;
        &lt;img
          className=""menuIcon""
          src=""""
          onClick={this.toggleMenu}
        /&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;Link className=""expandable"" to=""/setting"" title=""Setting""&gt;
              &lt;img
                src={'https://png.icons8.com/setting/ffffff'}
                alt=""""
              /&gt;
              &lt;span className={elementsClass}&gt;Setting&lt;/span&gt;
            &lt;/Link&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/nav&gt;

        )
    }
}


export default Sidebar
</code></pre>
","1164789","","1164789","","2018-01-02 11:19:23","2018-01-02 11:19:23","menuIcon is not defined in react app when loading scss file","<reactjs><sass><class-names>","0","8","","",""
"37396686","1","37396908","","2016-05-23 17:03:52","","1","80","<p>I have the following piece of code that works in ReactJS v0.13.x:</p>

<pre><code>  handleEmail: function(e) {
      if (e.key === ""Enter"") {
          var input_text = this.refs.email.getDOMNode().value;      
          // more code here ....
      }
  },
  render: function() {
      return (
        &lt;div className='dlg' onClick={this.handleClick}&gt;
          &lt;p&gt;
            &lt;span className=""msg""&gt;{this.state.msg}&lt;/span&gt;
            &lt;input type=""text"" onKeyPress={this.handleEmail} ref=""email"" /&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      )
  }
</code></pre>

<p>Now I've tried to convert this code to make it compatible with react v15.0.1, and I've tried something like this:</p>

<pre><code>  handleEmail(e) {
      if (e.key === ""Enter"") {
          var input_text = ReactDOM.findDOMNode(this.refs.email).value;;       
          // more code here ....
      }
  }
  render() {
      return (
        &lt;div className='dlg' onClick={this.handleClick}&gt;
          &lt;p&gt;
            &lt;span className=""msg""&gt;{this.state.msg}&lt;/span&gt;
            &lt;input type=""text"" onKeyPress={this.handleEmail} ref=""email"" /&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      )
  }
</code></pre>

<p>but it fails, I've debugged the code and found that, using the newest syntax, 'this' is null in handleEmail function. </p>

<p>Does anybody have any hint why worked before and not now? (and most important :) ... how to fix this?)</p>
","2364438","","674326","","2016-05-23 17:18:27","2016-05-23 17:18:27","reactjs: how to access ref values in v15.1.0","<javascript><reactjs>","1","1","","",""
"38706566","1","39260323","","2016-08-01 19:21:24","","0","191","<pre><code>  - TypeError: Cannot read property 'addStyleRule' of undefined
    at Object.&lt;anonymous&gt; (node_modules/plotly.js/build/plotcss.js:61:15)
    at Object.&lt;anonymous&gt; (node_modules/plotly.js/src/plotly.js:30:1)
    at Object.&lt;anonymous&gt; (node_modules/plotly.js/src/core.js:15:14)
    at Object.&lt;anonymous&gt; (node_modules/plotly.js/lib/core.js:9:18)
    at Object.&lt;anonymous&gt; (node_modules/plotly.js/lib/index.js:15:12)

    at emitTwo (events.js:106:13)
    at process.emit (events.js:191:7)
    at process.nextTick (internal/child_process.js:719:12)
    at _combinedTickCallback (internal/process/next_tick.js:67:7)
    at process._tickCallback (internal/process/next_tick.js:98:9)
</code></pre>

<p>My react project uses plotly and it is having trouble with plotly when running a jest test</p>

<p>My test code looks like such:</p>

<pre><code>import React from 'react'
import ReactDOM from 'react-dom'
import TestUtils from 'react-addons-test-utils'

import AppBar from ""./index""
import Navigation from ""../navigation/""

// Use real modules for testing.
jest.unmock(""./index"")
jest.unmock(""./brand"")

describe(""AppBar"", () =&gt; {
  let component = &lt;AppBar /&gt;
  let element = TestUtils.renderIntoDocument(component)
  let node = ReactDOM.findDOMNode(element)

  it(""renders the navigation to screen"", () =&gt; {
    let el = TestUtils.findRenderedComponentWithType(element, Navigation)
    expect(el).toBeDefined()
  })
})
</code></pre>

<p>I figure that mocking plotly has something to do with the addStyleRule of undefined error but I haven't quite pinned down as to what needs to be mocked/unmocked for this particular case of using an external library</p>
","1557887","","2102634","","2016-12-08 22:46:56","2016-12-08 22:46:56","Plotly error when running jest test for react","<javascript><reactjs><plotly><jestjs>","1","0","","",""
"39666335","1","39710815","","2016-09-23 17:21:27","","0","1110","<p>I added a split button dropdown to my page using the example from <a href=""https://react-bootstrap.github.io/components.html#btn-dropdowns"" rel=""nofollow"">react-bootstrap</a> to test it out.</p>

<p>My code..</p>

<pre><code>&lt;SplitButton bsStyle={""primary""} title={""test""} key={1} id={`this-is-a-test`}&gt;
    &lt;MenuItem eventKey=""1""&gt;Action&lt;/MenuItem&gt;
    &lt;MenuItem eventKey=""2""&gt;Another action&lt;/MenuItem&gt;
    &lt;MenuItem eventKey=""3""&gt;Something else here&lt;/MenuItem&gt;
    &lt;MenuItem divider /&gt;
    &lt;MenuItem eventKey=""4""&gt;Separated link&lt;/MenuItem&gt;
&lt;/SplitButton&gt;
</code></pre>

<p>When clicking the split button dropdown, the console shows </p>

<blockquote>
  <p>Uncaught TypeError: Cannot read property 'findDOMNode' of undefined</p>
</blockquote>

<p>The error points to code in the react-bootstrap.js file.</p>

<pre><code>exports.default = function (componentOrElement) {
    return (0, _ownerDocument2.default)(_reactDom2.default.findDOMNode(componentOrElement));
};
</code></pre>

<p>I've looked at other answers suggesting to upgrade React and React-dom, but i think my versions are ok (Both are 15.3.0).</p>

<p>Edit:</p>

<p>It works in the <a href=""http://codepen.io/Zuperman24/pen/ALqXbO"" rel=""nofollow"">codepen</a> I created importing the same files. Issue must be with my implementation..</p>
","6650926","","6650926","","2016-09-23 18:39:18","2016-09-26 19:26:14","Uncaught TypeError: Cannot read property 'findDOMNode' of undefined when using react-bootstrap splitdown","<reactjs><react-bootstrap>","1","7","1","",""
"38463025","1","","","2016-07-19 15:41:05","","0","654","<p>I am using reactjs and I have one button and one input date dom on my react component. I want to open the date picker when click on the button. The input date dom defined as below</p>

<pre><code>&lt;input className='showSurgeryDate' type=""date""
                     onChange={this.setSurgeryDate.bind(this)} ref={(c) =&gt; this.datePicker = c }/&gt;
</code></pre>

<p>below is the onclick function defined on the button:</p>

<pre><code>let event = document.createEvent('MouseEvents')
let dom = ReactDom.findDOMNode(this.datePicker)
event.initEvent('click', true, false)
dom.dispatchEvent(event)
</code></pre>

<p>I use document.createEvent to create a click event. Then I call dispatchEvent on the dom but the date picker didn't popup. How can I let the date picker popup when user clicking on the button?</p>
","5421539","","","","","2016-07-19 15:41:05","How to trigger mouse click event on react component to open date picker","<javascript><reactjs>","0","5","1","",""
"47784831","1","","","2017-12-13 02:55:56","","1","138","<p>I need to do event bubbling through the deep nested components ,  I tried to do some thing like below</p>

<pre><code>   import {ReactDOM,render, unmountComponentAtNode} from 'react-dom';

  .........
  .........

  componentDidMount() {
    ReactDOM.findDOMNode(this).addEventListener('click', (event) =&gt; {
    event.stopPropagation();
  }, false)
}
</code></pre>

<p>I got the following error</p>

<pre><code>bundle.js:45 Uncaught TypeError: Cannot read property 'findDOMNode' of undefined
</code></pre>
","1355249","","","","","2017-12-13 08:03:34","Cannot read property 'findDOMNode' of undefined when using stopPropagation - reactJs","<javascript><reactjs><event-bubbling><react-dom>","1","0","","",""
"40747838","1","40764535","","2016-11-22 17:15:27","","0","100","<p>I am trying to setup a react based component library using browserify. This is importing other react based component library as a node module. Following is the browserify configuration in <code>grunt-browserify</code>.</p>

<pre><code>{
      options: {
        ""transform"": [
          [
            ""babelify"",
            {
              ""presets"": [
                ""es2015"",
                ""react"",
                ""stage-0""
              ]
            }
          ]
        ],
        browserifyOptions: {
          debug: true,
          extensions: ['.js', '.jsx'],
          entries: ['./src/js/index.js']
        }
      },
      dist: {
        src: ['src/index.js'],
        dest: 'dist/index.js'
      }
    }
</code></pre>

<p>I am importing a node module which contains react component.</p>

<pre><code>import orb from 'orb';
import React from 'react';

class ReactComponent extends React.Component {
   componentDidMount() {
    this.ptable = new orb.pgridwidget(this.props.config);
    this.ptable.render(ReactDom.findDOMNode(this));
   }
   render() {
      return (&lt;div&gt;&lt;/div&gt;);
   }
}

export ReactComponent;
</code></pre>

<p>I am getting following error.</p>

<blockquote>
  <blockquote>
    <p>SyntaxError: Unexpected token (102:12) while parsing /<strong><em>/node_modules/orb/src/js/react/orb.react.PivotChart.jsx while parsing file: /</em></strong>/node_modules/orb/src/js/react/orb.react.PivotChart.jsx</p>
  </blockquote>
</blockquote>

<p>Token position being mentioned is basically jsx. Looks like babelify is not using preset <code>react</code> for node_modules. How to make browserify use babel presets <code>react</code> for this file?</p>

<p><strong>Update</strong>
While working on webpack I have faced <a href=""https://stackoverflow.com/questions/40649505/error-when-loading-jsx-files-with-curly-braces-inside-jsx/40756486#40756486"">similar issue</a> which I was able to resolve later. But looks like browserify don't accept additional files like webpack does. Tried options like <code>noParse</code>, <code>external</code> but those are not working.</p>
","1184902","","-1","","2017-05-23 12:26:05","2016-11-23 12:25:30","Error when trying babelify of a react application which has another react component as node module","<reactjs><browserify><babel>","1","0","","",""
"31315983","1","31319624","","2015-07-09 11:22:49","","0","432","<p>I am trying to test a postcode search component in my react app. Below is my component and click handler which gets data from an api using superagent. I have karma, jasmine and webpack setup and running basic component tests, but how can I mock the data and user input? I have all the json in a data file. Can I get a simple example setup using stubbing and mocking?</p>

<pre><code>render: function () {
    return (
        &lt;div className=""mainContent add-school-page""&gt;
              &lt;Loader loaded={this.state.loaded}&gt;
            &lt;div className=""content has-header""&gt;
                &lt;div className=""list""&gt;
                    &lt;label className=""item item-input item-stacked-label""&gt;
                        &lt;span className=""input-label""&gt;Postcode&lt;/span&gt;
                        &lt;input ref=""postcode"" type=""text"" placeholder=""A12 3BC""/&gt;
                    &lt;/label&gt;
                &lt;/div&gt;
                &lt;div className=""padding""&gt;
                    &lt;button className=""button button-block button-positive clickable""
                        onClick={this.searchByPostcode}&gt;
                        Find School
                    &lt;/button&gt;
                &lt;/div&gt;
                &lt;SearchResults results={this.state.results} /&gt;
                &lt;br /&gt;
                &lt;br /&gt;
            &lt;/div&gt;
            &lt;/Loader&gt;
        &lt;/div&gt;
    );
},

searchByPostcode: function() {
    var postcode = React.findDOMNode(this.refs.postcode).value;
    var url = OsaApiService.buildRequestUrl('find_schools_postcode', [postcode]);
    fetch(url)
        .then(function (response) {
            return response.json();
        }).then(function (json) {
            this.setState({
                results: json.data,
            });
        }.bind(this)).catch(function (ex) {
            console.log(ex);
        });
}
</code></pre>

<p>Can anyone please tell me how I can get started? </p>

<p>I have tried Jest but the tests were taking forever to complete and as a watch task it took forever.</p>
","1901521","","1901521","","2015-07-09 11:31:20","2015-07-09 13:53:30","reactJs test mocked component input and reponse, where to start?","<javascript><unit-testing><mocking><reactjs>","1","0","","",""
"30643604","1","30645253","","2015-06-04 12:17:09","","5","25524","<p>I'm new to React and Javascript and I'm trying to render the following React component:</p>

<pre><code>'use strict';
var React = require('react');
import ToReadList from './toreadlist.js';

var ToRead = React.createClass({
getInitialState: function() {
    return { bookTitles: [] };
},
handleSubmit: function(e) {
    e.preventDefault();
    this.state.bookTitles.push(React.findDOMNode(this.refs.bookTitleInput).value.trim());
    this.setState({items: this.state.bookTitles});
},
render: function() {
    return (&lt;div&gt;
        &lt;form onSubmit={this.handleSubmit}&gt;&lt;input type=""text"" ref=""bookTitleInput""&gt;&lt;/input&gt;
            &lt;input type=""submit""&gt;&lt;/input&gt;&lt;/form&gt;
            &lt;ToReadList bookTitles={this.state.bookTitles} /&gt;
    &lt;/div&gt;
           );
}
});

module.exports = ToRead;
</code></pre>

<p>But I am having the following error on my console: ""<strong>Uncaught TypeError: Cannot read property 'toUpperCase' of undefined</strong>""</p>

<p>I tried to debug (because the error is obscure to me and no line in my code is indicated) and noticed that this particular line:</p>

<pre><code>this.state.bookTitles.push()
</code></pre>

<p>causes the error.</p>

<p>Please help!</p>

<p><strong>Edit</strong> 
The error is caused by a webpack var injection function:</p>

<pre><code>function autoGenerateWrapperClass(type) {
      return ReactClass.createClass({
        tagName: type.toUpperCase(),
        render: function() {
          return new ReactElement(
            type,
            null,
            null,
            null,
            null,
            this.props
          );
        }
      });
    }
</code></pre>
","3432383","","3432383","","2015-06-04 12:43:21","2018-04-06 08:52:27","Uncaught TypeError: Cannot read property 'toUpperCase' of undefined react state item","<javascript><reactjs><webpack>","4","6","0","",""
"33031516","1","33031619","","2015-10-09 06:40:09","","37","25301","<p>I'm building a web-app with ReactJS and Flux and I'm trying to get the node of my current div using the method <strong>findDOMNode</strong>  and I get the next error:</p>

<pre><code>Uncaught TypeError: React.findDOMNode is not a function
</code></pre>

<p>So, I tried to use <strong>getDOMNode</strong> and I get the very same error:</p>

<pre><code>Uncaught TypeError: React.getDOMNode is not a function
</code></pre>

<p>I'm using npm to build the JS, the code where I use these methods:</p>

<pre><code>var React = require('react');
var stores = require('../stores');
var MessagesUserContainer = require('./messageusercontainer');
var ChatStore = stores.ChatStore;
var owner = stores.getOwner();

var MessagesList = React.createClass({

    getInitialState: function(){
        return {'muc': []};
    },
    componentDidUpdate: function(){
        var node = React.findDOMNode(this); //Error here
        node.scrollTop = node.scrollHeight;
    },
    render: function(){
        return (
                &lt;div className=""chatScroll""&gt;
                    {this.state.muc}
                &lt;/div&gt;
            )
    }
});

module.exports = MessagesList;
</code></pre>

<p><strong>ReactJS verion: 0.14.0</strong></p>

<p><strong>EDIT</strong></p>

<p>As pointed out in the answers, the DOM library as of v0.14.0  is out of the React core, so I made a few changes to my code:</p>

<pre><code>var React = require('react');
var ReactDOM = require('react-dom');
var stores = require('../stores');
var MessagesUserContainer = require('./messageusercontainer');
var ChatStore = stores.ChatStore;
var owner = stores.getOwner();

var MessagesList = React.createClass({

    getInitialState: function(){
        return {'muc': []};
    },
    componentDidUpdate: function(){
        var node = ReactDOM.findDOMNode(this);
        node.scrollTop = node.scrollHeight;
    },
    render: function(){
        return (
                &lt;div className=""chatScroll""&gt;
                    {this.state.muc}
                &lt;/div&gt;
            )
    }
});

module.exports = MessagesList;
</code></pre>

<p>But I got another problem:</p>

<pre><code>Uncaught Error: Invariant Violation: findDOMNode was called on an unmounted component.
</code></pre>
","2456721","","2456721","","2015-10-09 07:04:37","2015-10-09 07:04:37","ReactJS findDOMNode and getDOMNode are not functions","<javascript><reactjs><reactjs-flux><flux>","2","0","5","",""
"38083580","1","38083850","","2016-06-28 18:22:11","","1","6086","<p>I am making a react project and using wavesurfer.js. When I hit a play button I change the prop playing from false to true, the method used to make the element actually play is visual.playPause(); however, I'm not sure how I would get a reference back to the variable after I created it (the variable being visual which was created inside the initWaveSurfer function). Any help would be amazing!!</p>

<pre><code>var React = require('react');
var ReactDom = require('react-dom');

var reactWaveSurfer = React.createClass({
  getInitialState: function(){
    return ({
      song: this.props.song,
      playing: this.props.playing
    });
  },
  componentDidMount: function () {
    this.initWavesurfer();
  },
  componentWillReceiveProps: function(nextProps) {
    this.setState({
      playing: nextProps.playing
    });
  },
  initWavesurfer: function () {
    var visualContainer = ReactDom.findDOMNode(this.refs.waveContainer);
    var visual = WaveSurfer.create({
      container: visualContainer,
      waveColor: 'blue',
      progressColor: 'purple',
      barWidth: '3',
      height: ""90"",
      maxCanvasWidth: 200
    });
    visual.load(this.state.song.audio_url);
  },
  render: function () {
    return &lt;div className=""wave-surfer"" ref=""waveContainer"" &gt;&lt;/div&gt;;
  }
});

module.exports = reactWaveSurfer;
</code></pre>
","4911390","","4911390","","2016-06-28 18:32:34","2016-06-28 18:38:16","If I make a variable inside a react component, how do I re-access it on a state change?","<javascript><variables><reactjs><prop>","3","3","1","",""
"47366852","1","","","2017-11-18 13:53:17","","4","290","<p>I want to use <a href=""http://clauderic.github.io/react-sortable-hoc/"" rel=""nofollow noreferrer"">react-sortable-hoc</a> with <a href=""https://bvaughn.github.io/react-virtualized/#/components/MultiGrid"" rel=""nofollow noreferrer"">react-virtualized's MultiGrid</a>. More specifically I would like to be able to sort the rows in the lower right grid.</p>

<h1>1st attempt</h1>

<p>I'm creating a SortableMultiGrid using</p>

<pre><code>const SortableMultiGrid = SortableContainer(MultiGrid, {
  withRef: true,
});
</code></pre>

<p>But when this mounts I get an error, with this message</p>

<blockquote>
  <p>Cannot read property 'ownerDocument' of undefined</p>
</blockquote>

<p>The error originates from the <a href=""https://github.com/clauderic/react-sortable-hoc/blob/master/src/SortableContainer/index.js#L113-L116"" rel=""nofollow noreferrer""><code>SortableContainer</code>'s componentDidMount method</a>.</p>

<h1>2nd attempt</h1>

<p>I found that the <code>SortableContainer</code> has a <code>getContainer</code> property, which is called just above the code that throws the error:</p>

<blockquote>
  <p>Optional function to return the scrollable container element. This property defaults to the SortableContainer element itself or (if useWindowAsScrollContainer is true) the window. Use this function to specify a custom container object (eg this is useful for integrating with certain 3rd party components such as FlexTable). This function is passed a single parameter (the wrappedInstance React element) and it is expected to return a DOM element.</p>
</blockquote>

<p>It's called with the MultiGrid component instance but when I try to get the DOM node from that, it returns <code>null</code>:</p>

<pre><code>getContainer={e =&gt; {
  const multiGrid = ReactDOM.findDOMNode(e);
  // multiGrid is null - I must return an HTMLElement
}}
</code></pre>

<p>I suspect that what this might be caused by the MultiGrid component not yet being mounted and I suspect that what I'm seeing is related to <a href=""https://github.com/clauderic/react-sortable-hoc/issues/135"" rel=""nofollow noreferrer"">https://github.com/clauderic/react-sortable-hoc/issues/135</a>.</p>

<h1>3rd attempt - works, but it's a hack</h1>

<p>I figured that I could probably trick the SortableContainer by first returning something that wouldn't throw the error and then when the reference to the lower right grid inside the multigrid can be determined, I could call the componentDidMount of the SortableContainer again.</p>

<pre><code>&lt;SortableMultiGrid
  // ...
  ref={sortableGrid =&gt; {
    if (sortableGrid) {
      const multiGrid = sortableGrid.getWrappedInstance();
      if (multiGrid &amp;&amp; multiGrid._bottomRightGrid) {
        const bottomRightGrid = multiGrid._bottomRightGrid;
        const bottomRightGridNode = ReactDOM.findDOMNode(
          bottomRightGrid
        );
        this.bottomRightGrid = bottomRightGridNode;
        // HACK: We shouldn't ever call componentDidMount on components
        sortableGrid.componentDidMount();
      }
    }
  }}
  getContainer={e =&gt; {
    if (this.bottomRightGrid) {
      return this.bottomRightGrid;
    } else {
      // If its unknown - return something that wont throw errors
      return {
        ownerDocument: document,
        addEventListener: () =&gt; { },
        removeEventListener: () =&gt; { }
      };
    }
  }}
/&gt;
</code></pre>

<p>This actually seem to work! But I would still like to know if anyone has ideas on how this could be achieved with more elegance or how either of the two libs should change to fix this issue. </p>

<hr>

<h1>CodeSandbox</h1>

<p>I've made two sandboxes to illustrate this:</p>

<ol>
<li>The first is a functional sortable Grid (I havn't implemented for the end state to be persisted): <a href=""https://codesandbox.io/s/710kxo247x"" rel=""nofollow noreferrer"">https://codesandbox.io/s/710kxo247x</a>. I implemented a ""rowRangeRenderer"" that renders rows of cells (note its not fully optimized with caching when scrolling), to replace the defaultCellRangeRenderer and allow for the rows to be wrapped by the SortableElement HOC.</li>
<li>Is an attempt to use a MultiGrid instead of a Grid - which shows the error mentioned above: <a href=""https://codesandbox.io/s/1z390ow44"" rel=""nofollow noreferrer"">https://codesandbox.io/s/1z390ow44</a></li>
<li>The third attempt - it sort of works, but it's a hack <a href=""https://codesandbox.io/s/pprwo6m350"" rel=""nofollow noreferrer"">https://codesandbox.io/s/pprwo6m350</a></li>
</ol>
","503899","","503899","","2017-11-18 19:52:23","2017-11-18 19:52:23","Using react-sortable-hoc with react-virtualized's MultiGrid","<reactjs><react-virtualized><react-sortable-hoc>","0","3","","",""
"39279473","1","","","2016-09-01 19:28:12","","0","48","<p>I have a data json looking like this.</p>

<pre><code>var config = [{
  ""craft-breweries"": {
    ""count"": 5,
    ""latest"": ""The Wimbledon Brewery Company Limited"",
    ""data"": [{
      ""title"": ""Belleville Brewing Company"",
      ""start"": 2013
    }, {
      ""title"": ""Kew Brewery"",
      ""start"": 2015
    }, {
      ""title"": ""Laines Brewery (Four Thieves)"",
      ""start"": 2015
    }, {
      ""title"": ""Sultan Brewery"",
      ""start"": 2015
    }, {
      ""title"": ""The Wimbledon Brewery Company Limited"",
      ""start"": 2015
    }]
  },
  ""farmer-markets"": {
    ""count"": 5
  },
  ""pie-markets"": {
    ""count"": 8
  }
 }];
</code></pre>

<p>-- I am trying to dynamically append components if the key exists.</p>

<p>So a function called getLayers is called. It loops through the json -- but the switch case appears to satisfy keys of the loop?</p>

<p>Like case: ""famers-markets""</p>

<p>satisfy's ""farmer-markets"" and ""pie-markets""? Is it because the switch case doesn't like the hypen?</p>

<pre><code>getLayers: function(data){
      var items = [];
      var j = 0;
      for (var layer in data) {
          console.log(""layer-------&gt;"", layer);

          switch (layer) {
            case 'craft-breweries':
              console.log(""craft-breweries"");
              items.push(&lt;CraftBreweries key={j} config={config[0][""craft-breweries""]} /&gt;);
            case 'farmer-markets':
              console.log(""farmer-markets"");
              items.push(&lt;FarmerMarket key={j} config={config[0][""farmer-markets""]} /&gt;);
            case 'pie-markets':
              console.log(""pie-markets"");
              items.push(&lt;PieMarket key={j} config={config[0][""pie-markets""]} /&gt;);  
          }

          console.log(""j"", j);
          j++;

      }

      console.log(""items"", items);
      return items;      
    }
</code></pre>

<hr>

<p>full piece</p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
//import App from './App';
import './index.css';



var config = [{
  ""craft-breweries"": {
    ""count"": 5,
    ""latest"": ""The Wimbledon Brewery Company Limited"",
    ""data"": [{
      ""title"": ""Belleville Brewing Company"",
      ""start"": 2013
    }, {
      ""title"": ""Kew Brewery"",
      ""start"": 2015
    }, {
      ""title"": ""Laines Brewery (Four Thieves)"",
      ""start"": 2015
    }, {
      ""title"": ""Sultan Brewery"",
      ""start"": 2015
    }, {
      ""title"": ""The Wimbledon Brewery Company Limited"",
      ""start"": 2015
    }]
  },
  ""farmer-markets"": {
    ""count"": 5
  },
  ""pie-markets"": {
    ""count"": 8
  }
 }];


var MultipleComponents = React.createClass({


    getLayers: function(data){
      var items = [];
      var j = 0;
      for (var layer in data) {
          console.log(""layer-------&gt;"", layer);

          switch (layer) {
            case 'craft-breweries':
              console.log(""craftbreweries"");
              items.push(&lt;CraftBreweries key={j} config={config[0][""craft-breweries""]} /&gt;);
            case 'farmer-markets':
              console.log(""farmermarkets"");
              items.push(&lt;FarmerMarket key={j} config={config[0][""farmer-markets""]} /&gt;);
            case 'pie-markets':
              console.log(""piemarkets"");
              items.push(&lt;PieMarket key={j} config={config[0][""pie-markets""]} /&gt;);
            default: 

          }

          console.log(""j"", j);
          j++;

      }

      console.log(""items"", items);
      return items;      
    },


    render: function () {
       var config = this.props.config;

       console.log(""config"", config);

       return (
            &lt;div className=""apps""&gt;
                {this.getLayers(config[0])}
            &lt;/div&gt;
        );
    }
});



var CraftBreweries = React.createClass({
    componentDidMount: function () {
        //var $this = $(ReactDOM.findDOMNode(this));
        console.log(""rendered div now engage d3"");
        // set el height and width etc.
    },
    render: function () {
        var props = this.props.config; 
        return (
            &lt;div className=""craftbreweries"" data-role=""craftbreweries""&gt;
                You have {props.count} number of breweries in your area. The latest one is {props.latest}.
            &lt;/div&gt;
        );
    }
});

var FarmerMarket = React.createClass({
    componentDidMount: function () {
        //var $this = $(ReactDOM.findDOMNode(this));
        console.log(""rendered div now engage d3"");
        // set el height and width etc.
    },
    render: function () {
        var props = this.props.config; 
        return (
            &lt;div className=""farmermarket"" data-role=""farmermarket""&gt;
                You have {props.count} number of farmer markets in your area.
            &lt;/div&gt;
        );
    }
});


var PieMarket = React.createClass({
    componentDidMount: function () {
        //var $this = $(ReactDOM.findDOMNode(this));
        console.log(""rendered div now engage d3"");
        // set el height and width etc.
    },
    render: function () {
        var props = this.props.config; 
        return (
            &lt;div className=""piemarket"" data-role=""piemarket""&gt;
                You have {props.count} number of pie markets in your area.
            &lt;/div&gt;
        );
    }
});


ReactDOM.render(
    &lt;MultipleComponents config={config} /&gt;,
    document.getElementById('root')
);
</code></pre>
","2700673","","2700673","","2016-09-01 19:35:19","2016-09-01 19:35:19","Javascript - switch case - reactjs bug?","<javascript><reactjs>","1","3","","",""
"49410221","1","","","2018-03-21 15:21:12","","0","41","<p>I have a small app using google-maps-react, I have added a rightclick event on map, but I m stuck now and I do not think I am in the right direction. My addNewMarker method has a InfoWindow with a button, which I want to use to call web api with a POST request. Is there a way to refactor the code in a pure react? </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';


export default class MapContainer extends Component {

    state = {
        locations: [
            { name: ""New York County Supreme Court"", location: { lat: 40.7143033, lng: -74.0036919 } },
            { name: ""Queens County Supreme Court"", location: { lat: 40.7046946, lng: -73.8091145 } },
            { name: ""Kings County Supreme Court"", location: { lat: 40.6940226, lng: -73.9890967 } },
            { name: ""Richmond County Supreme Court"", location: { lat: 40.6412336, lng: -74.0768597 } },
            { name: ""Bronx Supreme Court"", location: { lat: 40.8262388, lng: -73.9235238 } }
        ]
    }

    componentDidUpdate() {
        this.loadMap(); // call loadMap function to load the google map
    }



    loadMap() {
        if (this.props &amp;&amp; this.props.google) { // checks to make sure that props have been passed
            const { google } = this.props; // sets props equal to google
            const maps = google.maps; // sets maps to google maps props

            const mapRef = this.refs.map; // looks for HTML div ref 'map'. Returned in render below.
            const node = ReactDOM.findDOMNode(mapRef); // finds the 'map' div in the React DOM, names it node

            const mapConfig = Object.assign({}, {
                center: { lat: 40.7485722, lng: -74.0068633 }, // sets center of google map to NYC.
                zoom: 11, // sets zoom. Lower numbers are zoomed further out.
                mapTypeId: 'roadmap' // optional main map layer. Terrain, satellite, hybrid or roadmap--if unspecified, defaults to roadmap.
            })

            this.map = new maps.Map(node, mapConfig); // creates a new Google map on the specified node (ref='map') with the specified configuration set above.
            this.map.addListener('rightclick', (evt) =&gt; {
                this.addNewMarker(this.map, maps, evt);
            })

            // ==================
            // ADD MARKERS TO MAP
            // ==================
            this.state.locations.forEach(location =&gt; { // iterate through locations saved in state
                const marker = new maps.Marker({ // creates a new Google maps Marker object.
                    position: { lat: location.location.lat, lng: location.location.lng }, // sets position of marker to specified location
                    map: this.map, // sets markers to appear on the map we just created on line 35
                    title: location.name // the title of the marker is set to the name of the location
                });
            })

        }
    }

    addNewMarker(map, maps, e) {
        const latitude = e.latLng.lat();
        const longitude = e.latLng.lng();
        console.log(latitude + ', ' + longitude);
        var marker = new maps.Marker({
            position: e.latLng,
            map: map
        });
        var infowindow = new maps.InfoWindow({
            content: `&lt;div class=""btn-group btn-group-toggle"" data-toggle=""buttons""&gt;
            &lt;label class=""btn btn-primary active""&gt;&lt;input type=""radio"" name=""options"" id=""option1"" autocomplete=""off"" checked&gt;Патрул&lt;/label&gt;
            &lt;label class=""btn btn-primary active""&gt;&lt;input type=""radio"" name=""options"" id=""option2"" autocomplete=""off""&gt;Камера&lt;/label&gt;
            &lt;label class=""btn btn-primary active""&gt;&lt;input type=""radio"" name=""options"" id=""option3"" autocomplete=""off""&gt;Пешак&lt;/label&gt;
          &lt;/div&gt;
            &lt;h4&gt;${(new Date()).toString()}&lt;/h4&gt;
            &lt;div&gt;&lt;a class=""btn btn-large btn-success"" onclick=""postInfo();""&gt;Share&lt;/a&gt;
            &lt;/div&gt;`
        });
        infowindow.addListener('closeclick', function(){
            marker.setMap(null);
        });
        marker.addListener('click', function() {
            infowindow.open(this.map, marker);
        });
        infowindow.open(this.map, marker);
        }

    render() {
        const style = { // MUST specify dimensions of the Google map or it will not work. Also works best when style is specified inside the render function and created as an object
            width: '100vw', // 90vw basically means take up 90% of the width screen. px also works.
            height: '75vh' // 75vh similarly will take up roughly 75% of the height of the screen. px also works.
        }

        return ( // in our return function you must return a div with ref='map' and style.
            &lt;div ref=""map"" style={style}&gt;
                loading map...
      &lt;/div&gt;
        )
    }
}</code></pre>
</div>
</div>
</p>

<p>Thanks in advance!</p>
","9529546","","","","","2018-03-21 15:21:12","google-maps-react and how to transform javascript code in react Components","<reactjs><google-maps-react>","0","0","1","",""
"41781836","1","","","2017-01-21 16:40:41","","2","796","<p>I am trying to display the user location on the map using google-maps-react. I followed the fullstack tutorial, but I just can't seem to display the user location.  I will display my Map.js  Component below.  Please help me point out what I am doing wrong. Thank you.</p>

<pre><code>import React, { Component } from 'react'
import ReactDOM from 'react-dom';

class Map extends Component {
  constructor(props) {
    super(props);

    const {lat, lng} = this.props.initialCenter;
    this.state = {
      currentLocation: {
        lat: lat,
        lng: lng
      }
    }
  }
  componentDidUpdate(prevProps, prevState) {
    if (prevProps.google !== this.props.google) {
      this.loadMap();
    }
    if (prevState.currentLocation !== this.state.currentLocation) {
      this.recenterMap();
    }
  }
  recenterMap() {
    const map = this.map;
    const curr = this.state.currentLocation;

    const google = this.props.google;
    const maps = google.maps;

    if (map) {
        let center = new maps.LatLng(curr.lat, curr.lng)
        map.panTo(center)
    }
  }
  componentDidMount() {
    if (this.props.centerAroundCurrentLocation) {
        if (navigator &amp;&amp; navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((pos) =&gt; {
                const coords = pos.coords;
                this.setState({
                    currentLocation: {
                        lat: coords.latitude,
                        lng: coords.longitude
                    }
                })
            })
        }
    }
    this.loadMap();
  }
  loadMap() {
    if (this.props &amp;&amp; this.props.google) {
      // google is available
      const {google} = this.props;
      const maps = google.maps;

      const mapRef = this.refs.map;
      const node = ReactDOM.findDOMNode(mapRef);

      let {initialCenter, zoom} = this.props;
      const {lat, lng} = initialCenter;
      const center = new maps.LatLng(lat, lng);
      const mapConfig = Object.assign({}, {
        center: center,
        zoom: zoom
      })
      this.map = new maps.Map(node, mapConfig);
    }
  }
  render() {
    const style = {
      width: '100vw',
      height: '100vh'
    }
    return (
      &lt;div ref='map' style={style}&gt;
        Loading map...
      &lt;/div&gt;
    )
  }
}

Map.propTypes = {
  google: React.PropTypes.object,
  zoom: React.PropTypes.number,
  initialCenter: React.PropTypes.object,
  centerAroundCurrentLocation: React.PropTypes.bool
}
Map.defaultProps = {
  zoom: 13,
  // San Francisco, by default
  initialCenter: {
    lat: 37.774929,
    lng: -122.419416
  },
  centerAroundCurrentLocation: false
}


export default Map
</code></pre>
","6650932","","","","","2017-01-21 16:40:41","google-maps-react user location not working","<javascript><google-maps><reactjs><components>","0","1","2","",""
"47471200","1","","","2017-11-24 10:25:24","","2","125","<p>So the main aim of me using refs is so that I can reset the scroll position of a scrollable div, this is an image of the div before adding content <a href=""https://i.stack.imgur.com/ftiV6.png"" rel=""nofollow noreferrer"">this is how it looks before dynamically adding divs to the scrollable container div</a></p>

<p>This is a screenshot of the div after adding boxes to it:
<a href=""https://i.stack.imgur.com/3NEwq.png"" rel=""nofollow noreferrer"">the box is created outside of viewport and is created at the top of the scrollable area</a></p>

<p>So to be able to maintain the viewport at the top of the scrollable area I am hoping to use refs to do ReactDOM.findDOMNode(this.songIdWrapper) and then manipulate the scrollTop or use scrollTo methods.</p>

<p>Please find the code snippet below:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, {Component} from 'react';
import ReactDOM from 'react-dom';

class AddPlaylist extends Component {
    constructor(props){
        super(props);
        this.state = {
            displaySearch: false,
            id: '',
            playlistName:'',
            playlistTitle:'',
            songs:[]
        }

        this.handleIdSubmit = this.handleIdSubmit.bind(this);
        this.handleIdChange = this.handleIdChange.bind(this);
        this.handleNamechange = this.handleNamechange.bind(this);
        this.handleNameSubmit= this.handleNameSubmit.bind(this);
        this.callback=this.callback.bind(this);
    }
    componentWillUpdate () {
        console.log(ReactDOM.findDOMNode(this.songIdWrapper));
    }
    componentDidUpdate () {
        
    }

    callback (songId) {
        this.songIdWrapper=songId;
    }
    render () {
        return(
            &lt;div className='add-playlist-wrapper'&gt; 
                &lt;div className='form-wrapper container'&gt;
                    &lt;form onSubmit={this.handleNameSubmit} className='playlist-name-wrapper'&gt;
                            &lt;input className={this.state.submittedName ? 'hide-input' : ''} required onChange={this.handleNamechange} value={this.state.playlistName} placeholder='Playlist title'/&gt;
                            {this.state.submittedName ? &lt;p className='title'&gt;{this.state.playlistTitle}&lt;/p&gt; : null}
                    &lt;/form&gt;
                    &lt;form onSubmit={this.handleIdSubmit} className='add-id-wrapper'&gt;
                        &lt;div className='input-add-playlist'&gt;
                            &lt;input required onChange={this.handleIdChange} value={this.state.id} placeholder='Add song...'/&gt;
                            &lt;button type='submit' className='fabutton'&gt;
                                &lt;i className=""add-button fa fa-plus-square-o fa-3x"" aria-hidden=""true""&gt;&lt;/i&gt;
                            &lt;/button&gt;
                        &lt;/div&gt;
                    &lt;/form&gt;
                    &lt;div id='song-id-wrapper' ref={this.callback}&gt;
                    {this.state.songs.map((song, i) =&gt; {
                        return (&lt;div key={i} className='song'&gt;
                                    &lt;p&gt;{song}&lt;/p&gt;
                                &lt;/div&gt;
                        )
                    })}
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        )
    }

    handleIdSubmit (event) {
        event.preventDefault();
        const newState = this.state.songs.slice();
        newState.push(this.state.id);
        this.setState({
            songs:newState
        })
    }

    handleIdChange (event) {
        this.setState({
            id: event.target.value
        })
    }

    handleNamechange (event) {
        this.setState({
            playlistName: event.target.value
        })
    }

    handleNameSubmit (event) {
        event.preventDefault();
        this.setState({
            playlistTitle: this.state.playlistName
        })
    }

}

export default AddPlaylist;</code></pre>
</div>
</div>
</p>

<p>The error message I get is:
<a href=""https://i.stack.imgur.com/ELfRh.png"" rel=""nofollow noreferrer"">this is the error message stating that ref is not a prop</a></p>

<p>So I am quite new to react and as far as I'm aware this is an attribute on a div element not passed as a prop to a component. So I hope you can see my confusion as when I search google/stack-overflow I see a lot of comments relating to child components. I am fully aware string refs have been depreciated and that callbacks should be used but no matter what I try I cannot get rid of this error message.</p>

<p>Any help would be greatly appreciated.</p>
","8635545","","","","","2017-11-24 10:34:47","Error 'ref is not a prop' when using ref on a div inside of a react component","<reactjs><dom><jsx><react-dom><refs>","1","6","","",""
"46629977","1","","","2017-10-08 10:18:28","","1","221","<p>How do you add components such as charts in google trends in reactjs?</p>

<pre><code>componentDidUpdate() {
    const that = this
    const keyword = ""your keyword""

    conts script = document.createElement(""script"")
    script.src = ""https://ssl.gstatic.com/trends_nrtr/760_RC08/embed_loader.js""
    script.async = true

    ReactDOM.findDOMNode(this.refs.trendsWrapper1).appendChild(script)

    script.onload = function () {
       trends.embed.renderExploreWidgetTo(ReactDOM.findDOMNode(that.refs.trendsWrapper1), ""TIMESERIES"", {""comparisonItem"":[{""keyword"":keyword,""geo"":"""",""time"":""today 5-y""}],""category"":0,""property"":""""}, {""exploreQuery"":""q=%2Fm%2F0rfgxy2"",""guestPath"":""https://www.google.co.uk:443/trends/embed/""})
    }

}
</code></pre>

<p>I tried this and didn't work. Please try to suggest a much easier method than this as well.</p>
","6208328","","7248342","","2017-10-08 10:24:20","2018-01-23 07:22:13","Add google trends in react","<reactjs><google-trends>","1","0","","",""
"41650512","1","41650540","","2017-01-14 13:26:45","","1","626","<p>I am building a Markdown Previewer and i have a textarea where the user can type and see the result in real time on typing but i am struggling because the textarea can not be edited. I am using markedjs.</p>

<pre><code>class Previewer extends Component {
constructor(props) {
    super(props);
    this.state = { value: 'Heading\n=======\n\nSub-heading\n-----------\n \n### Another deeper heading\n \nParagraphs are separated\nby a blank line.\n\nLeave 2 spaces at the end of a line to do a  \nline break\n\nText attributes *italic*, **bold**, \n`monospace`, ~~strikethrough~~ .\n\nUnordered list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. apples\n  2. oranges\n  3. pears\n\nThe rain---not the reign---in\nSpain.\n\n *[David Dume](https://www.freecodecamp.com/dumed)*' };

    this.updateValue = this.updateValue.bind(this);
  }
  updateValue(val) {
    this.setState = { value: val };
  }
  markup(text) {
    var markup = marked(text, { sanitize: true });
    return { __html: markup}
  }
  render() {
    return (
      &lt;div className='row'&gt;
        &lt;div className='col-md-6'&gt;
          &lt;Markdown value={this.state.value} updateValue={this.updateValue} /&gt;
        &lt;/div&gt;
        &lt;div className='col-md-6'&gt;
          &lt;span dangerouslySetInnerHTML={this.markup(this.state.value)} /&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here i defined the textarea.</p>

<pre><code> class Markdown extends Component {
  constructor(props) {
    super(props);

    this.onChange = this.onChange.bind(this);
  }
  onChange(e) {
    var textarea = reactDOM.findDOMNode(this.refs.textarea);
    var val = textarea.value;
    this.props.updateValue(val);
  }
  render() {
    return (
      &lt;div className={this.props.className}&gt;
        &lt;textarea rows='22' type='text' value={this.props.value} ref='textarea'  className='form-control' onChange={this.onChange} /&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>
","7012462","","5185595","","2018-02-26 16:02:18","2018-02-26 16:02:18","Input field is not editable in reactjs","<javascript><reactjs>","2","0","1","",""
"41746645","1","","","2017-01-19 16:17:47","","1","345","<p>Hi there I am using Enzyme to test my react components. I was wondering what's the best way to test the fact that the component I am testing DOES include a certain child component with a certain props?</p>

<p>So far I have no success in doing this:</p>

<p>InlineEdit.js</p>

<pre><code>import React, { PropTypes } from 'react';
import ReactDOM from 'react-dom';
import debounce from 'lodash/debounce';

export default class InlineEdit extends React.Component {
    static propTypes = {
      label: PropTypes.string,
      value: PropTypes.string.isRequired,
      onChange: PropTypes.func.isRequired,
    };    
    static defaultProps = {
      label: null,
    };

    constructor(props) {
      super(props)
      this.state = {
        isOn: false,
        inputValue: props.value,
      }
      this.showInput = this.showInput.bind(this)
      this.hideInput = this.hideInput.bind(this)
      this.handleDisplayTextChange = this.handleDisplayTextChange.bind(this)
      this.debouncedHandleKeyDown = debounce(this.debouncedHandleKeyDown.bind(this), 200)
      this.handleKeyDown = this.handleKeyDown.bind(this)
      this.checkIfChanged = this.checkIfChanged.bind(this)
      this.commitChange = this.commitChange.bind(this)
      this.discardChange = this.discardChange.bind(this)
    }

    showInput() {
      this.setState({
        isOn: true,
      }, 
      () =&gt; {
        ReactDOM.findDOMNode(this.refs.namedInput).select()
      })
    }

    hideInput() {
      this.setState({
        isOn: false,
      })
    }

    handleDisplayTextChange(e) {
      this.setState({inputValue:e.target.value})
    }

    debouncedHandleKeyDown(key) {
      if( key == 'Enter') {
        this.commitChange()
      } else if ( key == 'Escape') {
        this.discardChange()
      }
    }

    handleKeyDown(e) {
      // http://stackoverflow.com/questions/22123055/react-keyboard-event-handlers-all-null
      this.debouncedHandleKeyDown(e.key)
    }

    checkIfChanged() {
      return this.state.inputValue !== this.props.value
    }

    commitChange() {
      this.hideInput()
      if(this.checkIfChanged()){
        this.props.onChange(this.state.inputValue)  
      }
    }
    discardChange(){
      this.hideInput()
      this.setState({inputValue: this.props.value})
    }

    render() {
      const { 
        onChange,
        value,
        label,
      } = this.props;

      const {
        isOn,
        inputValue,
      } = this.state;

      return  &lt;span style={{
                borderBottom: '1px dashed #000',
              }}&gt;
                { 
                  !isOn 
                    ? &lt;span onDoubleClick={this.showInput}&gt;{label || value}&lt;/span&gt;
                    : &lt;input 
                        ref=""namedInput""
                        onChange={this.handleDisplayTextChange}
                        onBlur={this.commitChange}
                        onKeyDown={this.handleKeyDown}
                        value={inputValue}
                      /&gt;
                }
              &lt;/span&gt;
    }
}
</code></pre>

<p>LineItemRow.js</p>

<pre><code>import React, { PropTypes } from 'react';
import InlineEdit from './InlineEdit';

const LineItemRow = ({
  project,
}) =&gt; (
  &lt;div&gt;
    &lt;InlineEdit 
      value={project.name} /&gt;
  &lt;/div&gt;
)
LineItemRow.propTypes = {
  project: PropTypes.object,
};

export default LineItemRow;
</code></pre>

<p>LineItemRow.spec.js</p>

<pre><code>import React from 'react';
import shallow from 'enzyme/shallow';
import expect from 'expect';
import sinon from 'sinon';

import { LineItemRow } from './LineItemRow';
import InlineEdit from '../lib/components/InlineEdit';
import LineItemSelectBox from './LineItemSelectBox';

describe('&lt;LineItemRow /&gt; component', function () {
  const setup = () =&gt; {
    const props = {
      project: {id: 1, name: '1000'},
    }
    const output = shallow(&lt;LineItemRow {...props} /&gt;)
    return {
      output,
      props,
    }
  }

  it.only('should contain project name', function () {
    const { output, props } = setup()
    const actual  = output.contains(&lt;InlineEdit value={props.project.name} /&gt;) // THIS IS FALSE
    const expected= true

    expect(actual).toEqual(expected)
  });

});
</code></pre>

<p>//package.json</p>

<pre><code>    {
      ""name"": ""client"",
      ""version"": ""1.0.0"",
      ""description"": """",
      ""main"": ""index.js"",
      ""scripts"": {
        ""test"": ""NODE_ENV=test mocha './app/**/*.spec.js' --compilers js:babel-register --recursive --require testSetup.js"",
        ""test:watch"": ""npm test -- --watch"",
        ""start"": ""NODE_ENV=dev node server.js""
      },
      ""author"": """",
      ""license"": ""ISC"",
      ""devDependencies"": {
        ""babel-core"": ""^6.7.4"",
        ""babel-eslint"": ""^6.0.4"",
        ""babel-loader"": ""^6.2.4"",
        ""babel-plugin-react-hot"": ""^1.0.4"",
        ""babel-plugin-transform-flow-strip-types"": ""^6.18.0"",
        ""babel-polyfill"": ""^6.7.4"",
        ""babel-preset-es2015"": ""^6.6.0"",
        ""babel-preset-react"": ""^6.5.0"",
        ""babel-preset-stage-0"": ""^6.5.0"",
        ""babel-register"": ""^6.7.2"",
        ""css-loader"": ""^0.23.1"",
        ""enzyme"": ""^2.2.0"",
        ""eslint"": ""^2.6.0"",
        ""eslint-plugin-react"": ""^5.0.1"",
        ""expect"": ""^1.16.0"",
        ""happypack"": ""^2.1.1"",
        ""jsdom"": ""^8.2.0"",
        ""mocha"": ""^2.4.5"",
        ""mocha-jsdom"": ""^1.1.0"",
        ""node-sass"": ""^3.4.2"",
        ""npm-check-updates"": ""^2.8.9"",
        ""npm-install-webpack-plugin"": ""^3.0.0"",
        ""react-addons-perf"": ""^15.1.0"",
        ""react-addons-test-utils"": ""^15.1.0"",
        ""react-hot-loader"": ""^3.0.0-beta.6"",
        ""react-render-visualizer"": ""^0.2.2"",
        ""redux-devtools"": ""^3.3.1"",
        ""redux-devtools-dock-monitor"": ""^1.1.1"",
        ""redux-devtools-log-monitor"": ""^1.0.11"",
        ""sinon"": ""^1.17.3"",
        ""style-loader"": ""^0.13.1"",
        ""webpack"": ""^1.13.1"",
        ""webpack-dev-server"": ""^1.14.1"",
        ""webpack-notifier"": ""^1.3.0"",
        ""why-did-you-update"": ""0.0.8""
      },
      ""dependencies"": {
        ""Faker"": ""^0.7.2"",
        ""aphrodite"": ""^1.1.0"",
        ""axios"": ""^0.12.0"",
        ""classnames"": ""^2.2.5"",
        ""color"": ""^0.11.3"",
        ""counterpart"": ""^0.17.4"",
        ""cuid"": ""^1.3.8"",
        ""damals"": ""^0.9.4"",
        ""delay"": ""^1.3.1"",
        ""draft-js"": ""^0.7.0"",
        ""draft-js-export-html"": ""^0.3.0"",
        ""fecha"": ""^2.1.0"",
        ""file-loader"": ""^0.8.5"",
        ""halogen"": ""^0.2.0"",
        ""history"": ""^2.0.1"",
        ""humanize-plus"": ""^1.8.2"",
        ""intl"": ""^1.1.0"",
        ""lodash"": ""^4.13.1"",
        ""memoizee"": ""^0.3.10"",
        ""normalizr"": ""^2.1.0"",
        ""pluralize"": ""^3.0.0"",
        ""query-string"": ""^4.2.2"",
        ""query-string-parser"": ""^0.1.4"",
        ""react"": ""^15.1.0"",
        ""react-addons-shallow-compare"": ""^15.1.0"",
        ""react-dnd"": ""^2.1.4"",
        ""react-dnd-html5-backend"": ""^2.1.2"",
        ""react-dom"": ""^15.1.0"",
        ""react-dropzone"": ""^3.4.0"",
        ""react-functional"": ""^1.2.0"",
        ""react-grid-layout"": ""^0.13.0"",
        ""react-modal"": ""^1.4.0"",
        ""react-player"": ""^0.12.0"",
        ""react-redux"": ""^4.4.5"",
        ""react-router"": ""^3.0.0-beta.1"",
        ""react-router-redux"": ""^4.0.0"",
        ""react-rte"": ""^0.5.0"",
        ""react-select"": ""^1.0.0-rc.2"",
        ""react-stateless"": ""^0.2.1"",
        ""redux"": ""^3.5.2"",
        ""redux-crud"": ""^1.0.0"",
        ""redux-form"": ""^5.2.5"",
        ""redux-saga"": ""^0.14.2"",
        ""reselect"": ""^2.2.1"",
        ""seamless-immutable"": ""^5.1.1"",
        ""url-loader"": ""^0.5.7""
      }
    }
</code></pre>

<p>The line I marked ""this is false"" is where I have most question about. how can I test that the child component InlineEdit will be given props XYZ?</p>

<p>Thank you!</p>
","126749","","126749","","2017-01-22 19:09:25","2017-01-22 19:09:25","enzyme react testing .contains() not matching","<reactjs><testing><enzyme>","0","6","","",""
"41489555","1","41856061","","2017-01-05 16:07:11","","2","441","<p>I am currently building a feature for file upload and sorting within react. </p>

<p>I have used the following examples:</p>

<ul>
<li><a href=""https://gaearon.github.io/react-dnd/examples-chessboard-tutorial-app.html"" rel=""nofollow noreferrer"">https://gaearon.github.io/react-dnd/examples-chessboard-tutorial-app.html</a></li>
<li><a href=""https://github.com/okonet/react-dropzone"" rel=""nofollow noreferrer"">https://github.com/okonet/react-dropzone</a></li>
<li><a href=""https://github.com/gaearon/react-dnd-html5-backend"" rel=""nofollow noreferrer"">https://github.com/gaearon/react-dnd-html5-backend</a></li>
</ul>

<p>Everything worked fine, until it came to eslint telling me not to use findDOMNode within js/componenets/File.jsx in my repository below.</p>

<p><a href=""https://github.com/GregHolmes/react-dnd-dropzone"" rel=""nofollow noreferrer"">https://github.com/GregHolmes/react-dnd-dropzone</a></p>

<p>It happens when I try to re-sort the position of the images. Ie drag 2nd image to 1st place. </p>

<p>After a search, I found an example over how to resolve this. However that example just wont work. This example was: <a href=""https://stackoverflow.com/questions/40499267/react-dnd-avoid-using-finddomnode#"">React DnD: Avoid using findDOMNode</a></p>

<p>As with their example I tried the following:</p>

<p>js/components/File.jsx:35</p>

<p><code>&lt;div ref={node =&gt; this.node = node} style={{ ...style, opacity }}&gt;</code></p>

<p>Then in the same file I uncomment line 62:</p>

<p><code>const rawComponent = component.getDecoratedComponentInstance();</code></p>

<p>and replace (line 71):</p>

<p><code>const hoverBoundingRect = findDOMNode(component).getBoundingClientRect();</code></p>

<p>with (line 70):</p>

<p><code>const hoverBoundingRect = rawComponent.node.getBoundingClientRect();</code></p>

<p>I then get:  </p>

<p><code>getDecoratedComponentInstance() is not a function</code></p>

<p>Does anyone have any idea how I might go about resolving this issue? I apologise for the mess in my code. I am new to react and have been attempting to keep things as clean as possible.</p>

<p><strong>Edit</strong></p>

<p>I thought I'd resolved the problem with the below. However doing this meant that I couldn't drag the images to the other box. Switching around the let exportFile = DragSource..... with DropTarget, gave me my initial issue of the function call not being a function.</p>

<p>At the bottom of my File.jsx file. I had: </p>

<pre><code>export default flow(
DropTarget(""FILE"", fileTarget, connect =&gt; ({
    connectDropTarget: connect.dropTarget()
})),
DragSource(""FILE"", fileSource, (connect, monitor) =&gt; ({
    connectDragSource: connect.dragSource(),
    isDragging: monitor.isDragging()
}))
)(File);
</code></pre>

<p>I replaced this with:</p>

<pre><code>function collectDragSource(connect, monitor) {
    return {
        connectDragSource: connect.dragSource(),
        isDragging: monitor.isDragging()
    };
}

function collectDropTarget(connect) {
    return {
        connectDropTarget: connect.dropTarget()
    };
}

let exportFile = DragSource('file', fileSource, collectDragSource)(File);
exportFile = DropTarget('file', fileTarget, collectDropTarget)(exportFile);

export default exportFile;
</code></pre>
","2477653","","-1","","2017-05-23 11:54:10","2017-01-25 15:57:29","react-dnd getDecoratedComponentInstance() is not a function","<reactjs><react-dom><react-dnd>","1","0","","",""
"31547875","1","31549836","","2015-07-21 19:25:05","","0","1352","<p>I want to add a canvas to react component. Which I have achieved:</p>

<pre><code>var React = require('react'),
    c = require('./../canvas_animation');

var Home = React.createClass({

 componentDidMount: function () {
    React.findDOMNode(this).childNodes[1].appendChild(c);
  }, 
</code></pre>

<p>This <a href=""https://jsfiddle.net/m3LLqtq8/"" rel=""nofollow"">link</a> contains canvas animation. </p>

<p>Problem: Everything is working fine in react apart from mouse events? How can I make them work? </p>

<pre><code>jQuery(document).ready(function()
            {
                $(document).mousedown(function(e)
                {
                    onMouseDown();
                });

                $(document).mouseup(function(e)
                {
                    onMouseUp();
                }); 
            })
</code></pre>

<p><a href=""https://jsfiddle.net/69z2wepo/12483/"" rel=""nofollow"">Replicated</a> here react having issue with events.</p>
","4955554","","4955554","","2015-07-21 20:11:29","2015-07-21 22:02:30","Add external JS to react component","<javascript><reactjs>","1","6","","",""
"33046466","1","33062377","","2015-10-09 20:18:00","","0","804","<p>I will try to make this question as short as possible.</p>

<p>I am trying to do some react.js server-side rendering but I am having a difficult time refactoring that info that I aquired from doing research online and applying it to my project.</p>

<p>I am using route model binding for all my routes in the application using the username in the mysql database. I have some routes within the react.js </p>

<p>Look at the snippet below:</p>

<pre><code>var FileUpload = React.createClass({

  handleFile: function(e) {
    var reader = new FileReader();
    var file = e.target.files[0];

    if (!file) return;

    reader.onload = function(img) {
      React.findDOMNode(this.refs.in).value = '';
      this.props.handleFileChange(img.target.result);
    }.bind(this);
    reader.readAsDataURL(file);
  },

  render: function() {
    return (
      &lt;input ref=""in"" type=""file"" accept=""image/*"" action=""images/{user}/dpUpload"" onChange={this.handleFile} /&gt;
    );
  }
});
</code></pre>

<p>If you take a look within <code>render:function()</code> where the HTML <code>input</code> tag, <code>action</code> has a route of <code>images/{user}/dpUpload</code>. Everyone who knows laravel that <code>{user}</code> can bind to be <code>admin</code> in a RESTful way. I need to bind whatever value the database gives me to react. This is what I'm currently getting</p>

<p><a href=""https://i.stack.imgur.com/IVW9y.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IVW9y.png"" alt=""View the images/{user}/dpUpload""></a></p>
","2885033","","710954","","2015-10-09 20:20:03","2015-10-13 16:13:15","Binding php database values to react.js","<javascript><php><mysql><laravel><reactjs>","1","0","","",""
"40499267","1","40581747","","2016-11-09 01:56:58","","11","3364","<p>I don't fully understand it but apparently <a href=""https://github.com/yannickcr/eslint-plugin-react/issues/678#issue-165177220"" rel=""noreferrer"">it isn't recommended to use findDOMNode()</a>.</p>

<p>I'm trying to create drag and drop component but I'm not sure how I should access refs from the component variable. This is an example of what I currently have:</p>

<pre><code>const cardTarget = {
    hover(props, monitor, component) {
        ...
        // Determine rectangle on screen
        const hoverBoundingRect = findDOMNode(component).getBoundingClientRect();
        ...
    }
}
</code></pre>

<p><a href=""https://github.com/gaearon/react-dnd/blob/master/examples/04%20Sortable/Simple/Card.js"" rel=""noreferrer"">Source</a></p>

<p><strong>Edit</strong></p>

<p>It might be caused by my component being both the drag and drop source and target as I can get it to work in <a href=""https://jsfiddle.net/hx7eutm1/2/"" rel=""noreferrer"">this example</a> but not <a href=""https://jsfiddle.net/h4w4btz9/1/"" rel=""noreferrer"">this one</a>.</p>
","1661462","","1661462","","2016-11-14 20:19:01","2017-11-06 13:43:09","React DnD: Avoid using findDOMNode","<reactjs><react-dnd>","3","1","3","",""
"41600065","1","","","2017-01-11 20:24:15","","4","5726","<p>This is my react component class</p>

<pre><code>class TestInstance extends React.Component {
    onClick(e) {
        //When the user clicks in the button, 
        //I need to read the custom-id property here
    }

    render() {
        return (
            &lt;Wrapper onClickCapture={this.onClick}&gt;
                &lt;div&gt;
                    &lt;button custom-data={{test: 'test data'}}&gt;Click Me&lt;/button&gt;
                &lt;/div&gt;
            &lt;/Wrapper&gt;
        );
    }
}
</code></pre>

<p>Here I'm listening to all click events that happen under the wrapper node. Whenever a click happens, I need to find out the react component instance associated with <code>e.target</code> and that instance's value for its <code>custom-data</code> prop. There will be multiple such children with different values for <code>custom-data</code> prop. Whenever such an element is clicked, I want to extract that element's value for its <code>custom-data</code> prop an do some stuff. What is the best way to do this in reactjs? One way would be to navigate the entire children tree and comapring the <code>e.target</code> instance for identity with the DOM elements for each of the children. I also found that <code>e._targetInst._currentElement.props</code> gives me the value of the props. But I don't know how reliable these undocumented variables are. Is there any documented solution for this? Basically I'm looking for something that gives me the opposite effect of ReactDOM.findDOMNode. I already have a DOM node and I need the React Element associated with that.</p>
","843241","","843241","","2017-01-12 05:12:35","2017-01-12 06:39:08","How to get the react component instance corresponding to event.target element in a click handler?","<javascript><reactjs>","3","9","1","",""
"33554493","1","","","2015-11-05 20:47:57","","1","1263","<p>I've been trying to work off of the simple sortable example in the react-dnd examples but I am having trouble trying to convert the es7 code to es6. I've tried using babel but I don't really understand the code that it spits out.
Here is my code that I've tried to translate from es7 to es6:</p>

<pre><code>import React, {PropTypes} from 'react';
import Router from 'react-router';
import { DragDropContext } from 'react-dnd';
import HTML5Backend from 'react-dnd-html5-backend';
import { DragSource, DropTarget } from 'react-dnd';

const style= {
  border: '1px dashed gray',
  padding: '0.5rem 1rem',
  marginBottom: '.5rem',
  backgroundColor: 'white',
  cursor: 'move'
}

const ItemTypes = {
  Coursepage: 'coursepage'
};

const coursePageSource = {
    beginDrag(props) {
        return {
            id: props.id,
            index: props.index
        }
    }
}

const coursePageTarget = {
    hover(props, monitor, component){
        const dragIndex = monitor.getItem().index;
        const hoverIndex = props.index;

        //don't replace items with themselves
        if(dragIndex === hoverIndex){
            return;
        }

        //Determine rectangle on screen
        const hoverBoundingRect = findDOMNode(component).getBoundingClientRect();

        //get vertical middle
        const hoverMiddleY = (hoverBoundingRect.Bottom - hoverBoundingRect.Top) /2;

        //get top pixels
        const hoverClientY = clientOffset.y - hoverBoundingRect.top;

        //only perform the move when the mouse has crossed half of the items height
        //when dragging downwards, only move when the cursor is below 50%
        //when dragging upwards, only move when the cursor is above 50%

        //dragging downwards
        if(dragIndex &lt; hoverIndex &amp;&amp; hoverClientY &lt; hoverMiddleY){
            return;
        }

        //dragging upwards
        if(dragIndex &gt; hoverIndex &amp;&amp; hoverClientY &gt; hoverMiddleY){
            return;
        }

        //time to actually perform the action
        props.moveObject(dragIndex, hoverIndex);


    }
}

// const propTypes = {
//     connectDragSource: PropTypes.func.isRequired,
//     connectDropTarget: PropTypes.func.isRequired,
//     index: PropTypes.number.isRequired,
//     isDragging: PropTypes.bool.isRequired,
//     id: PropTypes.any.isRequired,
//     text: PropTypes.string.isRequired,
//     moveCard: PropTypes.func.isRequired
// };

function collectDropTarget(connect) {
  return {
    connectDropTarget: connect.dropTarget(),
  };
}

/**
 * Specifies which props to inject into your component.
 */
function collectDragSource(connect, monitor) {
  return {
    // Call this function inside render()
    // to let React DnD handle the drag events:
    connectDragSource: connect.dragSource(),
    // You can ask the monitor about the current drag state:
    isDragging: monitor.isDragging()
  };
}

class Coursepage extends React.Component{

    render(){
        console.log(this.props);
        const {text, isDragging, connectDragSource, connectDropTarget} = this.props;
        const opacity = isDragging ? 0 : 1;
        return connectDragSource(connectDropTarget(
                &lt;div style={{opacity}}&gt;
                    {text}
                &lt;/div&gt;
        ));
    }
}
// Coursepage.propTypes = propTypes;
export default DragSource(ItemTypes.Coursepage, coursePageSource, collectDragSource)(Coursepage);
export default DropTarget(ItemTypes.Coursepage, coursePageTarget, collectDropTarget)(Coursepage);
</code></pre>

<p>Now the error I'm getting from this is </p>

<p>""Uncaught TypeError: connectDropTarget is not a function.""</p>

<p>I console logged this.props in render and I see that connectDragSource is showing up in the this.props object but not connectDropTarget.</p>

<p>Can anyone tell me what I'm missing?</p>

<p>By the way, this is the example code I was using:</p>

<p><a href=""https://github.com/gaearon/react-dnd/blob/master/examples/04%20Sortable/Simple/Card.js"" rel=""nofollow"">https://github.com/gaearon/react-dnd/blob/master/examples/04%20Sortable/Simple/Card.js</a></p>
","1171550","","218196","","2015-11-06 00:21:48","2016-01-26 22:21:27","react-dnd uncaught typerrors. Trying to follow the simple sortable example","<reactjs>","1","1","","",""
"50521307","1","","","2018-05-25 03:57:05","","1","138","<p>Hi I am struggling for a week solving this
Unexpected token 'import' error.</p>

<p>After tons of searching, now I know that this is a problem of babel-register which is not applying to mocha test, while webpack serve works fine.</p>

<p>At first I had an Unexpected token 'import' error when using antd library 
and I followed other solutions which told me to set .babelrc(setting node_modules: false) </p>

<p>But now I am getting same Unexpected token 'import' error from my test file. Please help me... This is not a duplicate and I've done almost every solution in the web related to this. I'm pretty sure that
--require babel-register is not working in mocha test.
Thank you.</p>

<p>myerror message</p>

<blockquote>
  <p>CSE_frontend choihongsuk$ npm run test</p>
  
  <blockquote>
    <p>redux-simple-starter@1.0.0 test /Users/choihongsuk/Desktop/-13-SNUCSE-website-SWPP-/CSE_frontend
    BABEL_ENV=test mocha --require babel-hook --require babel-register --require ./test/test_hel per.js --recursive ./test</p>
  </blockquote>
  
  <p>babel-preset-env: <code>DEBUG</code> option Using targets: {}</p>
  
  <p>Modules transform: false</p>
  
  <p>Using plugins:   check-es2015-constants {}<br>
  transform-es2015-arrow-functions {}<br>
  transform-es2015-block-scoped-functions {}<br>
  transform-es2015-block-scoping {}   transform-es2015-classes {}<br>
  transform-es2015-computed-properties {}<br>
  transform-es2015-destructuring {}   transform-es2015-duplicate-keys {}
  transform-es2015-for-of {}   transform-es2015-function-name {}<br>
  transform-es2015-literals {}   transform-es2015-object-super {}<br>
  transform-es2015-parameters {}   transform-es2015-shorthand-properties
  {}   transform-es2015-spread {}   transform-es2015-sticky-regex {}<br>
  transform-es2015-template-literals {}   transform-es2015-typeof-symbol
  {}   transform-es2015-unicode-regex {}   transform-regenerator {}<br>
  transform-exponentiation-operator {}   transform-async-to-generator {}
  syntax-trailing-function-commas {}
  /Users/choihongsuk/Desktop/-13-SNUCSE-website-SWPP-/CSE_frontend/test/test_helper.js:1
  (function (exports, require, module, __filename, __dirname) { import
  _$ from 'jquery';
                                                                ^^^^^^</p>
  
  <p>SyntaxError: Unexpected token import
      at new Script (vm.js:51:7)
      at createScript (vm.js:136:10)
      at Object.runInThisContext (vm.js:197:10)
      at Module._compile (module.js:613:28)
      at loader (/Users/choihongsuk/Desktop/-13-SNUCSE-website-SWPP-/CSE_frontend/node_modules/babel-register/lib/node.js:144:5)
      at Object.require.extensions.(anonymous function) [as .js] (/Users/choihongsuk/Desktop/-13-SNUCSE-website-SWPP-/CSE_frontend/node_modules/babel-register/lib/node.js:154:7)
      at Module.load (module.js:561:32)
      at tryModuleLoad (module.js:501:12)
      at Function.Module._load (module.js:493:3)
      at Module.require (module.js:593:17)
      at require (internal/module.js:11:18)
      at /Users/choihongsuk/Desktop/-13-SNUCSE-website-SWPP-/CSE_frontend/node_modules/mocha/bin/_mocha:366:3
      at Array.forEach ()
      at Object. (/Users/choihongsuk/Desktop/-13-SNUCSE-website-SWPP-/CSE_frontend/node_modules/mocha/bin/_mocha:365:10)
      at Module._compile (module.js:649:30)
      at Object.Module._extensions..js (module.js:660:10)
      at Module.load (module.js:561:32)
      at tryModuleLoad (module.js:501:12)
      at Function.Module._load (module.js:493:3)
      at Function.Module.runMain (module.js:690:10)
      at startup (bootstrap_node.js:194:16)
      at bootstrap_node.js:666:3 npm ERR! code ELIFECYCLE npm ERR! errno 1 npm ERR! redux-simple-starter@1.0.0 test: <code>BABEL_ENV=test mocha
  --require babel-hook --require babel-register --require ./test/test_helper.js --recursive ./test</code> npm ERR! Exit status 1 npm
  ERR! npm ERR! Failed at the redux-simple-starter@1.0.0 test script.
  npm ERR! This is probably not a problem with npm. There is likely
  additional logging output above.</p>
  
  <p>npm ERR! A complete log of this run can be found in: npm ERR!<br>
  /Users/choihongsuk/.npm/_logs/2018-05-25T03_45_58_998Z-debug.log</p>
</blockquote>

<p>package.json</p>

<pre><code>{
      ""name"": ""redux-simple-starter"",
      ""version"": ""1.0.0"",
      ""description"": ""Simple starter package for Redux with React and Babel support"",
      ""main"": ""index.js"",
      ""repository"": ""git@github.com:StephenGrider/ReduxSimpleStarter.git"",
      ""scripts"": {
        ""start"": ""webpack-dev-server --progress --colors --open --hot"",
        ""test"": ""BABEL_ENV=test mocha --require babel-hook --require babel-register --require ./test/test_helper.js --recursive ./test"",
        ""test:watch"": ""npm run test -- --watch""
      },
      ""author"": """",
      ""license"": ""ISC"",
      ""devDependencies"": {
        ""babel-core"": ""^6.26.3"",
        ""babel-loader"": ""^6.4.1"",
        ""babel-plugin-import"": ""^1.7.0"",
        ""babel-plugin-transform-class-properties"": ""^6.24.1"",
        ""babel-plugin-transform-decorators-legacy"": ""^1.3.4"",
        ""babel-plugin-transform-runtime"": ""^6.23.0"",
        ""babel-preset-env"": ""^1.7.0"",
        ""babel-preset-react"": ""^6.24.1"",
        ""babel-register"": ""^6.26.0"",
        ""chai"": ""^3.5.0"",
        ""chai-jquery"": ""^2.0.0"",
        ""css-loader"": ""^0.28.11"",
        ""enzyme"": ""^3.3.0"",
        ""jquery"": ""^2.2.1"",
        ""jsdom"": ""^8.1.0"",
        ""mocha"": ""^3.5.3"",
        ""react-hot-loader"": ""^4.1.3"",
        ""react-test-renderer"": ""^16.3.2"",
        ""style-loader"": ""^0.21.0"",
        ""webpack"": ""^3.4.1"",
        ""webpack-dev-server"": ""^2.9.7""
      },
      ""dependencies"": {
        ""antd"": ""^3.5.1"",
        ""axios"": ""^0.18.0"",
        ""babel-plugin-transform-async-to-generator"": ""^6.24.1"",
        ""babel-polyfill"": ""^6.26.0"",
        ""babel-preset-stage-1"": ""^6.1.18"",
        ""babel-runtime"": ""^6.26.0"",
        ""bootstrap"": ""^4.1.1"",
        ""core-js"": ""^2.5.6"",
        ""lodash"": ""^3.10.1"",
        ""react"": ""^16.3.2"",
        ""react-dom"": ""^16.3.2"",
        ""react-dropzone"": ""^4.2.9"",
        ""react-redux"": ""^5.0.7"",
        ""react-router"": ""^2.0.1"",
        ""react-router-dom"": ""^4.2.2"",
        ""reactstrap"": ""^6.0.1"",
        ""redux"": ""4.0.0"",
        ""redux-form"": ""^7.3.0"",
        ""redux-promise"": ""^0.5.3""
      }
    }
</code></pre>

<p>.babelrc</p>

<pre><code>{
  ""presets"": [""react"",[
    ""env"",
    {
      ""modules"": false,
      ""targets"": {
        ""node"": ""current""
      }
    }
  ], ""stage-1""
],
""env"": {
  ""test"": {
    ""presets"": [""react"",
      [
        ""env"",
        {
          ""modules"": false,
          ""debug"": true
        }
      ],
      ""stage-1""
    ]
  }
 },
  ""plugins"": [
    [""import"",
      { ""libraryName"": ""antd"",  ""libraryDirectory"": ""es"", ""style"": ""css"" }],
      ""transform-decorators-legacy"",
        ""transform-class-properties"",
        ""transform-async-to-generator"",
        ""transform-runtime""
  ]
}
</code></pre>

<p>webpack.config</p>

<pre><code>module.exports = {
  entry: ['./src/index.js', 'babel-register'],
  output: {
    path: __dirname,
    publicPath: '/',
    filename: 'bundle.js'
  },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        loader: 'babel-loader',
      },
      {
        test: /\.css$/,
        use: [ 'style-loader', 'css-loader' ]
      }
    ],
  },
  resolve: {
    extensions: ['*', '.js', '.jsx', '.css']
  },
  devServer: {
    historyApiFallback: true,
    contentBase: './',
    watchOptions: {
      aggregateTimeout: 300,
      poll: 1000
    }
  },

};
</code></pre>

<p>testhelper.js </p>

<pre><code>import _$ from 'jquery';
import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-dom/test-utils';
import jsdom from 'jsdom';
import chai, { expect } from 'chai';
import chaiJquery from 'chai-jquery';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import reducers from '../src/reducers';

global.document = jsdom.jsdom('&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;');
global.window = global.document.defaultView;
global.navigator = global.window.navigator;
const $ = _$(window);

chaiJquery(chai, chai.util, $);

function renderComponent(ComponentClass, props = {}, state = {}) {
  const componentInstance =  TestUtils.renderIntoDocument(
    &lt;Provider store={createStore(reducers, state)}&gt;
      &lt;ComponentClass {...props} /&gt;
    &lt;/Provider&gt;
  );

  return $(ReactDOM.findDOMNode(componentInstance));
}

$.fn.simulate = function(eventName, value) {
  if (value) {
    this.val(value);
  }
  TestUtils.Simulate[eventName](this[0]);
};

export {renderComponent, expect};
</code></pre>
","8584068","","","","","2018-05-25 03:57:05","babel-register not working in mocha test, nodejs react","<node.js><reactjs><mocha><babel><babel-register>","0","0","","",""
"39823515","1","","","2016-10-03 01:43:32","","0","157","<p>Whenever I do an npm run watch, I get this warning:</p>

<pre><code>WARNING in react-profile-page.1.0.0.min.js from UglifyJs
Side effects in initialization of unused variable React [./js/index.js:3,4]
Side effects in initialization of unused variable ReactDOM [./js/index.js:4,4]
Condition always true [./~/react/lib/traverseAllChildren.js:136,0]
Condition always true [./~/react/lib/ReactDOMComponentTree.js:97,0]
Condition always true [./~/react/lib/ReactDOMComponent.js:982,0]
Condition always true [./~/react/lib/ReactMultiChild.js:265,0]
Condition always true [./~/react/lib/ReactMultiChild.js:285,0]
Condition always true [./~/react/lib/instantiateReactComponent.js:91,0]
Condition always true [./~/react/lib/ReactNodeTypes.js:36,0]
Side effects in initialization of unused variable Transaction [./~/react/lib/ReactServerUpdateQueue.js:18,0]
Condition always true [./~/react/lib/findDOMNode.js:54,0]
Condition always true [./~/react/lib/findDOMNode.js:56,0]
</code></pre>

<p>Everywhere I read online seems to tell me these warnings should be disregarded, hwoever whenever I try to run my HTML page on my browser:</p>

<pre><code>&lt;!doctype HTML&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;title&gt;First React Page&lt;/title&gt;
  &lt;!--remember to change the name of your build files and match them here--&gt;
    &lt;link rel=""stylesheet"" href=""react-profile-page.1.0.0.css""&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;div id=""app""&gt;&lt;/div&gt;

&lt;/body&gt;

&lt;script src=""react-profile-page.1.0.0.js""&gt;&lt;/script&gt;
&lt;/html&gt;
</code></pre>

<p>I just get a blank screen, meaning that the react elements i've made in my index.js arent being read. So this warning must be why, right?</p>

<p>Here's index.js:</p>

<pre><code>""use strict""
var React = require('react');
var ReactDOM = require('react-dom');


var Person = function() {
    var name = 'Derek Zoolander';
    var imageUrl = 'http://uifaces.com/assets/static/images/zoolander.jpg';
    var job = 'Male model';
    return (
        &lt;div className=""person""&gt;
            &lt;div className=""person-name""&gt;{name}&lt;/div&gt;
            &lt;img className=""person-img"" src={imageUrl} /&gt;
            &lt;div className=""person-job""&gt;
                {job}
            &lt;/div&gt;
        &lt;/div&gt;
    );
};

document.addEventListener('DOMContentLoaded', function() {
    ReactDOM.render(&lt;Person /&gt;, document.getElementById('app'));
});
</code></pre>

<p>I just get a blank screen, meaning that the react elements i've made in my index.js arent being read. So this warning must be why, right? I tried getting rid of ""use strict"" and that eliminated the first two warningsm, but still not loading in the browser.</p>
","6110866","","","","","2016-10-03 05:14:45","unused variable React preventing react element from printing?","<javascript><html><reactjs>","0","2","","",""
"39338547","1","","","2016-09-05 22:53:10","","1","585","<p>Tests run, but they are rendering into the same document. On componentDidMount Style component appends CSS text to a style element in head with the class <code>.reactive-style</code> (know this is unorthodox and not idiosyncratic React). If <code>.reactive-style</code> does not already exist then the style element is created and added to head. Testing wise -- for simplicities sake -- I need to render into a new document for each test case.</p>

<p>Tests look like this:</p>

<pre class=""lang-js prettyprint-override""><code>import React from 'react';
import { findDOMNode, render } from 'react-dom';
import TestUtils from 'react-addons-test-utils';

const removeNewlines = (string) =&gt; (string.replace(/(\r\n|\n|\r)/gm, ''))

import Style from '../src/index.js';

describe('Style', () =&gt; {

  it('scopes only one root selector if a selector is union root selector', () =&gt; {
    const myTestUtils = Object.assign({}, TestUtils);
    const wrapper = myTestUtils.renderIntoDocument(
      &lt;div&gt;
        &lt;Style&gt;
          {`
            #box.rootClass { color: red; }
          `}

          &lt;div id=""box"" className=""rootClass"" /&gt;
        &lt;/Style&gt;
      &lt;/div&gt;
    );

    const rootNode = findDOMNode(wrapper).children[0];
    const styleNode = document.head.querySelector('.reactive-style');

    expect(rootNode.className).toEqual('rootClass _scoped-1830358384');
    expect( removeNewlines(styleNode.textContent) )
      .toEqual(` #box._scoped-1356475730.rootClass , ._scoped-1356475730  #box.rootClass { color: red; }`);
  });

  it('preserves quotes for the CSS property ""content""', () =&gt; {
    const myTestUtils = Object.assign({}, TestUtils);
    const wrapper = myTestUtils.renderIntoDocument(
        &lt;div&gt;
          &lt;Style&gt;
            {`
                .Slide:before { content: "" test ""; }
                .Slide:after { content: "" ""; }

                .Foo:after {
                  position: absolute;
                  content: """";
                  width: 100%;
                  height: 100%;
                  backgroud-color: rgba( 0, 0, 0, .7);
                  top: 0;
                  left: 0;
                  z-index: 1;
                }
              `}

            &lt;div className=""Slide"" /&gt;
          &lt;/Style&gt;
        &lt;/div&gt;
    );

    const rootNode = findDOMNode(wrapper).children[0];
    const styleNode = document.head.querySelector('.reactive-style');

    expect(rootNode.className).toEqual('Slide _scoped-864836516');
    expect( removeNewlines(styleNode.textContent) )
      .toEqual(` .Slide._scoped-864836516:before , ._scoped-864836516  .Slide:before { content: ' test '; } .Slide._scoped-864836516:after , ._scoped-864836516  .Slide:after { content: ' '; }._scoped-864836516  .Foo:after { position: absolute; content: ''; width: 100%; height: 100%; backgroud-color: rgba( 0, 0, 0, .7); top: 0; left: 0; z-index: 1; }`);
  });
});
</code></pre>

<p>Current output showing the innerHTML of the target style element in head growing with each test (undesired, want new document for each test case):</p>

<pre><code> FAIL  __tests__/Style.js (0.613s)
● Style › it scopes only one root selector if a selector is union root selector
  - Expected ' #box._scoped-1830358384.rootClass , ._scoped-1830358384  #box.rootClass { color: red; }' to equal ' #box._scoped-1356475730.rootClass , ._scoped-1356475730  #box.rootClass { color: red; }'.
        at jasmine.buildExpectationResult (node_modules/jest-jasmine2/src/index.js:80:44)
        at Object.eval (__tests__/Style.js:315:5)
        at Object.&lt;anonymous&gt; (node_modules/jest-jasmine2/src/jasmine-pit.js:35:32)
        at jasmine2 (node_modules/jest-jasmine2/src/index.js:253:7)
        at Test.run (node_modules/jest-cli/src/Test.js:44:12)
        at process._tickCallback (internal/process/next_tick.js:103:7)
● Style › it preserves quotes for the CSS property ""content""
  - Expected ' #box._scoped-1830358384.rootClass , ._scoped-1830358384  #box.rootClass { color: red; }' to equal ' .Slide._scoped-864836516:before , ._scoped-864836516  .Slide:before { content: ' test '; } .Slide._scoped-864836516:after , ._scoped-864836516  .Slide:after { content: ' '; }._scoped-864836516  .Foo:after { position: absolute; content: ''; width: 100%; height: 100%; backgroud-color: rgba( 0, 0, 0, .7); top: 0; left: 0; z-index: 1; }'.
        at jasmine.buildExpectationResult (node_modules/jest-jasmine2/src/index.js:80:44)
        at Object.eval (__tests__/Style.js:349:5)
        at Object.&lt;anonymous&gt; (node_modules/jest-jasmine2/src/jasmine-pit.js:35:32)
        at Object.&lt;anonymous&gt; (node_modules/jest-jasmine2/src/jasmine-pit.js:40:11)
        at jasmine2 (node_modules/jest-jasmine2/src/index.js:253:7)
        at Test.run (node_modules/jest-cli/src/Test.js:44:12)
        at process._tickCallback (internal/process/next_tick.js:103:7)
2 tests failed, 0 tests passed (2 total in 1 test suite, run time 1.323s)
</code></pre>

<p>See how the second test includes results from the first? Goal is to avoid that by rendering to a new document.</p>

<p>Have tried several things, like blanking out the innerHTML of the <code>.reactive-style</code> element via <code>document.head.querySelector('.reactive-style').innerHTML = '';</code> but when <code>expect()</code> runs the <code>styleNode.textContent</code> shows as empty so that does not work (presumably because <code>expect()</code> is running async and the <code>innerHTML</code> is cleared synchronously). Cheers and thanks for any assistance. </p>
","1079731","","1079731","","2016-09-05 22:58:35","2016-09-05 22:58:35","Testing react components componentDidMount, how do I render into a new document after each test?","<reactjs><jasmine><jestjs><reactjs-testutils>","0","0","","",""
"50901587","1","","","2018-06-18 00:57:52","","0","15","<p>I am trying to use chosen.js in my react application.
However, although I have read the documentation about refs and stuffs here( <a href=""https://reactjs.org/docs/integrating-with-other-libraries.html"" rel=""nofollow noreferrer"">https://reactjs.org/docs/integrating-with-other-libraries.html</a> ), I don't really get anything it's saying. What is ref and what does it do exactly? I have my react code and it does not work. Please if anyone could explain what this ref and this.$el do in react, I'd appreciate it.   </p>

<pre><code>import React, { Component } from 'react';
import $ from 'jquery';
import { findDOMNode } from 'react-dom';

class Chosen extends Component {

    componentDidMount(){
        this.el = $(this.el);
        this.$el.chosen();
    }

    componentWillUnmount(){
        this.$el.chosen('destroy');
    }
    render() {
        return (
            &lt;div&gt;
                &lt;select className=""Chosen-select"" ref={ el =&gt; this.el = el }&gt;
                    { this.props.children }
                &lt;/select&gt;
            &lt;/div&gt;
        )
    }
}

export default Chosen;
</code></pre>

<p>and also, </p>

<pre><code>import React from 'react';
import Chosen from './Chosen';

function Restaurants(props) {

    return (
        &lt;Chosen className=""Chosen-select"" onChange={ value =&gt; console.log(value) }&gt;
            {   
                [{name: 'h'}, {name: 'j'}, {name: 'k'}].forEach( r =&gt; {
                    &lt;option&gt;{ r.name }&lt;/option&gt;
                })
            }
        &lt;/Chosen&gt;
    );
}

export default Restaurants;
</code></pre>
","9032824","","","","","2018-06-18 00:57:52","using chosen.js on my react application","<javascript><jquery><node.js><reactjs><jquery-chosen>","0","0","","",""
"33440604","1","33440735","","2015-10-30 16:24:33","","1","612","<p>I am actually updating <a href=""https://github.com/ezequiel/react-typeahead-component"" rel=""nofollow"">https://github.com/ezequiel/react-typeahead-component</a> this component to be compatible to react >= 0.14 but while changing the methods I just run into one error:</p>

<p>Exchange <code>this.getDOMnode</code> for the reason it is deprecated with <code>this.findDOMnode</code> it occurs an error: <code>Uncaught TypeError: this.findDOMNode is not a function</code></p>

<p>So I tried a lot about that React isn't binding <code>this</code> automatically in 0.14 to several functions. But it did not really helped me out.</p>

<pre class=""lang-js prettyprint-override""><code>module.exports = React.createClass({
  displayName: 'Aria Status',

  propTypes: process.env.NODE_ENV === 'production' ? {} : {
    message: React.PropTypes.string
  },

  componentDidMount: function() {
    var _this = this;

    _this.setTextContent(_this.props.message).bind(this);
  },

  componentDidUpdate: function() {
    var _this = this;

    _this.setTextContent(_this.props.message).bind(this);
  },

  render: function() {
    return (
      React.createElement(""span"", {
        role: ""status"",
        ""aria-live"": ""polite"",
        style: {
          left: '-9999px',
          position: 'absolute'
        }
      })
    );
  },

  setTextContent: function(textContent) {
    this.findDOMNode().textContent = textContent || '';
  }
});
</code></pre>

<p>Maybe someone can point me somewhere to go ahead!</p>
","3318813","","","","","2015-10-30 16:39:36","reactjs - this is not a function error on upgrade","<javascript><function><reactjs><deprecated><typeahead>","1","1","","",""
"50621184","1","","","2018-05-31 09:38:43","","0","65","<p>Recently i am working on react.js crud application i like to use react.findDomNode for create record </p>

<pre><code>handleSubmit: function(e) {
        e.preventDefault();
        name = React.findDOMNode(this.refs.name).value.trim();
        email = React.findDOMNode(this.refs.email).value.trim();
        address = React.findDOMNode(this.refs.address).value.trim();
        state = React.findDOMNode(this.refs.state).value.trim();
        zip = React.findDOMNode(this.refs.zip).value.trim();
        city = React.findDOMNode(this.refs.city).value.trim();
</code></pre>

<p>but i face following error how can i reslove it i also use </p>

<blockquote>
  <p>ReactDOM.findDOMNode
  But still have same error 
  <a href=""https://i.stack.imgur.com/BDwFa.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/BDwFa.png"" alt=""enter image description here""></a></p>
</blockquote>
","7863163","","","","","2018-05-31 09:48:04","React.findDOMNode is not a function?","<javascript><php><reactjs>","1","1","","2018-05-31 10:04:49",""
"50876815","1","","","2018-06-15 13:41:02","","0","23","<p>hi all im trying to use google-maps-react to display a simple map with markers ,but am getting a blank screen with no map for some reason. ALso am getting no errors in the console.
 I provided api key in the index.html file. Any my other google maps librarires are working fine.   ANy help is greatly appreciated ! 
 Rating.js </p>

<pre><code>import React, { Component } from 'react';
import styles from './App.css';
import Map from './Map.js';

import { GoogleApiWrapper } from 'google-maps-react'

import MapContainer from './Map.js'
export default class Rating extends React.Component {
    render(){
        return(


&lt;section classname=""feature""&gt;
          &lt;div id=""banner"" &gt;
            &lt;div classname=""banner__text""&gt;
              &lt;div classname=""l-container""&gt;
                &lt;h2 classname=""heading-1""&gt;
                  &lt;span id=""li""&gt;Take the uncertainty out of planning&lt;/span&gt;

                &lt;/h2&gt;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;
                 &lt;h3 id=""fish""&gt; Never get lost finding the trail. With just one click, get the link right to the trail head. Access has never been so easy.&lt;/h3&gt;
                                  &lt;h3 id=""fish""&gt; Search for trails in any place you like ! Or use your current location to search!!!&lt;/h3&gt;
              &lt;/div&gt;

              &lt;div&gt;
            &lt;MapContainer google={this.props.google} /&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div classname=""feature__main feature__main--centered l-container""&gt;
            &lt;div classname=""feature__device feature__device--laptop""&gt;
            &lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt; &lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;   &lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt; &lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt; 
              &lt;div id=""device""&gt;
                &lt;img src=""http://www.downloadmaps.org/wp-content/uploads/2016/03/maps-laptop.jpg"" alt=""Trail Details Page""/&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div classname=""l-inner-container""&gt;
              &lt;h2 classname=""feature__heading heading-3""&gt;Know the details before you go.&lt;/h2&gt;
              &lt;p&gt;Browse hand-curated trail maps as well as trail reviews, photos and activity recordings &lt;br&gt;&lt;/br&gt; contributed by a
                community of hikers, mountain bikers, trail runners and more.&lt;/p&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/section&gt;


        );

   }
}
</code></pre>

<p>Map.js </p>

<pre><code>import React, { Component } from 'react';
import ReactDOM from 'react-dom'


export default class MapContainer extends Component {

  // ======================
  // ADD LOCATIONS TO STATE
  // ======================
  state = {
    locations: [
      { name: ""New York County Supreme Court"", location: {lat: 40.7143033, lng: -74.0036919} },
      { name: ""Queens County Supreme Court"", location: {lat: 40.7046946, lng: -73.8091145} },
      { name: ""Kings County Supreme Court"", location: {lat: 40.6940226, lng: -73.9890967} },
      { name: ""Richmond County Supreme Court"", location: {lat: 40.6412336, lng: -74.0768597} },
      { name: ""Bronx Supreme Court"", location: {lat: 40.8262388, lng: -73.9235238} }
    ]
  }

  componentDidUpdate() {
    this.loadMap(); // call loadMap function to load the google map
  }

  loadMap() {
    if (this.props &amp;&amp; this.props.google) { // checks to make sure that props have been passed
      const {google} = this.props; // sets props equal to google
      const maps = google.maps; // sets maps to google maps props

      const mapRef = this.refs.map; // looks for HTML div ref 'map'. Returned in render below.
      const node = ReactDOM.findDOMNode(mapRef); // finds the 'map' div in the React DOM, names it node

      const mapConfig = Object.assign({}, {
        center: {lat: 40.7485722, lng: -74.0068633}, // sets center of google map to NYC.
        zoom: 11, // sets zoom. Lower numbers are zoomed further out.
        mapTypeId: 'roadmap' // optional main map layer. Terrain, satellite, hybrid or roadmap--if unspecified, defaults to roadmap.
      })

      this.map = new maps.Map(node, mapConfig); // creates a new Google map on the specified node (ref='map') with the specified configuration set above.

  // ==================
  // ADD MARKERS TO MAP
  // ==================
      this.state.locations.forEach( location =&gt; { // iterate through locations saved in state
        const marker = new google.maps.Marker({ // creates a new Google maps Marker object.
          position: {lat: location.location.lat, lng: location.location.lng}, // sets position of marker to specified location
          map: this.map, // sets markers to appear on the map we just created on line 35
          title: location.name // the title of the marker is set to the name of the location
        });
      })

    }
  }

  render() {
    const style = { // 
      width: '100%', // 9h screen. px also works.
      height: '100%' // 
    }

    return ( // in our return function h ref='map' and style.

      &lt;div ref=""map"" style={style}&gt;

        loading map...
      &lt;/div&gt;
    )
  }
}
</code></pre>
","6646194","","","","","2018-07-17 23:12:49","react.js google maps not shwoing up","<reactjs>","1","0","","",""