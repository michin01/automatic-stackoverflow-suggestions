Title,Tags,Body
"Unit testing touch events in react native","<tdd><ecmascript-6><react-native><jestjs>","<p>I am trying to test drive react native code using <a href=""http://www.schibsted.pl/2015/10/testing-react-native-components-with-jest/"">this</a> guide. The react native is overridden by reactjs to enable shallow rendering and testing using jestjs.</p>

<p>Even though I am able test shallow rendered components (checking its presence and children), I am unable to test touch events.</p>

<pre><code>handleTouch() {
 this.setState({ showDescription: !this.state.showDescription });
}


render() {
const description = this.state.showDescription ? (&lt;Text style={styles.description}&gt;{this.props.entry.description}&lt;/Text&gt;) : null;
return (
  &lt;TouchableNativeFeedback onPress={() =&gt; this.handleTouch()}&gt;
    &lt;View style={styles.rowContainer}&gt;
      &lt;View style={styles.row}&gt;
      &lt;/View&gt;
      {description}
    &lt;/View&gt;
  &lt;/TouchableNativeFeedback&gt;
 )
}
</code></pre>

<p>I'm trying to test if on touch of <code>TouchableNativeFeedback</code>, <code>description</code> tag is rendered. The reactjs <a href=""https://facebook.github.io/react/docs/test-utils.html#simulate"">TestUtils</a> provides <code>Simulate</code> but it didn't work. </p>

<p>This is my spec setup:</p>

<pre><code>beforeEach(function() {
    profileView = TestUtils.renderIntoDocument(&lt;ProfileEntryView entry={entry}/&gt;);
    var touchableNativeFeedback = TestUtils.findRenderedComponentWithType(profileView, TouchableNativeFeedback);
    TestUtils.Simulate.onTouchEnd(touchableNativeFeedback);
});
</code></pre>

<p>How will I test UI interactions using reactjs <code>TestUtils</code> for react-native?</p>
"
"Plotly error when running jest test for react","<javascript><reactjs><plotly><jestjs>","<pre><code>  - TypeError: Cannot read property 'addStyleRule' of undefined
    at Object.&lt;anonymous&gt; (node_modules/plotly.js/build/plotcss.js:61:15)
    at Object.&lt;anonymous&gt; (node_modules/plotly.js/src/plotly.js:30:1)
    at Object.&lt;anonymous&gt; (node_modules/plotly.js/src/core.js:15:14)
    at Object.&lt;anonymous&gt; (node_modules/plotly.js/lib/core.js:9:18)
    at Object.&lt;anonymous&gt; (node_modules/plotly.js/lib/index.js:15:12)

    at emitTwo (events.js:106:13)
    at process.emit (events.js:191:7)
    at process.nextTick (internal/child_process.js:719:12)
    at _combinedTickCallback (internal/process/next_tick.js:67:7)
    at process._tickCallback (internal/process/next_tick.js:98:9)
</code></pre>

<p>My react project uses plotly and it is having trouble with plotly when running a jest test</p>

<p>My test code looks like such:</p>

<pre><code>import React from 'react'
import ReactDOM from 'react-dom'
import TestUtils from 'react-addons-test-utils'

import AppBar from ""./index""
import Navigation from ""../navigation/""

// Use real modules for testing.
jest.unmock(""./index"")
jest.unmock(""./brand"")

describe(""AppBar"", () =&gt; {
  let component = &lt;AppBar /&gt;
  let element = TestUtils.renderIntoDocument(component)
  let node = ReactDOM.findDOMNode(element)

  it(""renders the navigation to screen"", () =&gt; {
    let el = TestUtils.findRenderedComponentWithType(element, Navigation)
    expect(el).toBeDefined()
  })
})
</code></pre>

<p>I figure that mocking plotly has something to do with the addStyleRule of undefined error but I haven't quite pinned down as to what needs to be mocked/unmocked for this particular case of using an external library</p>
"