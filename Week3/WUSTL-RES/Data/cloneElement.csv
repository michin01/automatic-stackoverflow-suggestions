Id,Title,CommentCount,Body,Text
"30141352","Changing class and style of React children using cloneElement","0","<p>Using the latest React (0.13) I am attempting to change the class and style of a child element using <code>cloneElement</code> prior to rendering.</p>

<p>Looking through the tests: <a href=""https://github.com/facebook/react/blob/0.13-stable/src/classic/element/__tests__/ReactElementClone-test.js#L44"" rel=""nofollow noreferrer"">https://github.com/facebook/react/blob/0.13-stable/src/classic/element/<strong>tests</strong>/ReactElementClone-test.js#L44</a></p>

<p>And other answers: <a href=""https://stackoverflow.com/questions/24856044/reactjs-how-to-change-style-and-class-of-react-component/24856195#24856195"">ReactJS - How to change style and class of react component?</a></p>

<p>It seems like this should be pretty straightforward, however I can't seem to achieve the desired behavior as detailed in this fiddle: <a href=""https://jsfiddle.net/69z2wepo/7924/"" rel=""nofollow noreferrer"">https://jsfiddle.net/69z2wepo/7924/</a></p>
",""
"31415305","how to interact with unspecified number of react child components","0","<p>I've got a component which can contain any number of child components, and I want these child components, which contain input fields, to set those input fields to ""disabled"" when the state in the parent is changed. I've been attempting to use <code>React.cloneElement</code> with <code>React.Children.map</code> to modify the properties of the child elements, but it doesn't seem to be affecting anything.</p>

<p>Here's a simplified version:</p>

<pre><code># parent component
# assume that there's a @setState call in here somewhere
DisableableItem = React.createClass
  getInitialState: -&gt;
    disabled: false
  render: -&gt;
    &lt;div&gt;
      {
        React.Children.map @props.children, (child) =&gt;
          React.cloneElement child, isDisabled: @state.disabled
      }
    &lt;/div&gt;

# child component
ParameterizedOption = React.createClass
  getInitialState: -&gt;
    disabled: @props.isDisabled
  render: -&gt;
    &lt;div className=""parameterized-option""&gt;
      &lt;label&gt;{@props.text}&lt;/label&gt;
      &lt;div className=""input-group input-group-sm""&gt;
        &lt;input type={@props.inputType or ""text""} className=""form-control""
          placeholder={@props.initialInput or ""00.00""}
          disabled={@state.disabled}&gt;&lt;/input&gt;
      &lt;/div&gt;
    &lt;/div&gt;
</code></pre>

<p>And rendering it like:</p>

<pre><code>React.render &lt;DisableableItem&gt;
    &lt;ParameterizedOption text=""hey"" isDisabled=false /&gt;
    &lt;ParameterizedOption text=""hey"" isDisabled=false /&gt;
  &lt;/DisableableItem&gt;, document.body
</code></pre>

<p>So I'm <code>console.log</code>ging the output, and the state in the parent is getting modified when I want it to, but the children's props are not getting modified as I thought the <code>React.cloneElement</code> call would modify them (they're always false as they were at start). I've taken a look at <a href=""https://stackoverflow.com/questions/30840258/encapsulation-with-react-child-components"">these</a> <a href=""https://stackoverflow.com/questions/21285923/reactjs-two-components-communicating"">questions</a>, but I don't think they really apply, since <code>DisableableItem</code> doesn't know what its children are until they're given to it in the call to <code>React.render</code>, so it can't put <code>disabled={@state.disabled}</code> as one of the children's properties.</p>

<p>How would I reach in and modify these children's state? Am I misunderstanding what <code>cloneElement</code> is supposed to do?</p>
",""
"32365171","React, cloneElement - invariant error","0","<p>My team has been trying to think ahead on the topic of form validation using react components.</p>

<p>We've been following a guide we've seen <a href=""http://christianalfoni.github.io/javascript/2014/10/22/nailing-that-validation-with-reactjs.html"" rel=""nofollow noreferrer"">here</a> which looks really awesome and well thought out.</p>

<p>There's a property on the component here that looks a like this:</p>

<pre><code>registerInputs: function (children) {
  React.Children.forEach(children, function (child) {
    if (child.props.name) {
      child.props.attachToForm = this.attachToForm;
      child.props.detachFromForm = this.detachFromForm;
    }

    if (child.props.children) {
      this.registerInputs(child.props.children);
    }
  }.bind(this));
},
attachToForm: function (component) {
  this.inputs[component.props.name] = component;
},
detachFromForm: function (component) {
  delete this.inputs[component.props.name];
}
</code></pre>

<p>The problem with this is attaching props this way gives you a warning in react, it suggests to use cloneElement instead.  It DOES work though, it just gives some console warnings which I don't like to see.</p>

<p>So in ES6 fashion, my team came up with this:</p>

<pre><code>registerInputs = children =&gt; {
    React.Children.forEach(children, child =&gt; {
        if (child.props.name) {
            React.cloneElement(child, {
                attachToForm: this.attachToForm,
                detachFromForm: this.detachFromForm
            })
            //child.props.attachToForm = this.attachToForm;
            //child.props.detachFromForm = this.detachFromForm;
        }
        if (child.props.children) {
            this.registerInputs(child.props.children);
        }
    })
}
attachToForm = component =&gt; {
    this.inputs[component.props.name] = component;
    this.model[component.props.name] = component.state.value;
}
detachFromForm = component =&gt; {
    delete this.inputs[component.props.name];
    delete this.model[component.props.name];
}
</code></pre>

<p>This does <strong>not</strong> work, we get an invariant error saying the dom node wasn't found (the one that says you either have a <code>&lt;tbody&gt;</code> missing etc.).</p>

<p>To clarify: If we comment out the cloneElement block, and uncomment the explicit declaration of the prop on the children, it works -but with the warnings.</p>

<p>We've tried a few other solutions including the similar question posted <a href=""https://stackoverflow.com/questions/31841949/react-this-cloneelement-and-es6"">here</a>
but this did not work for us.  We also tried mapping, which seems to be common in the react docs and returning the new array with the new props that way, but we kept getting the invariant error.</p>

<p><strong>How come setting the props on the children works when doing so in object dot notation works (though advises against it) and the cloned element approach does not?</strong></p>

<p>Console logging seems to indicate that cloning the children and adding the props the way we have done it above is not actually adding anything to the props object.</p>
",""
"32804901","React - How to use cloneElement so it preserves context","0","<p>I'm using React's undocumented context feature, <a href=""https://blog.jscrambler.com/react-js-communication-between-components-with-contexts/"" rel=""nofollow"">per this article</a>. I noticed there's a caveat, which is that this context feature only works if you explicitly invoke a component:</p>

<pre><code>render() {
  return &lt;div&gt;&lt;SomeComponent /&gt;&lt;/div&gt;
}
</code></pre>

<p>If you clone the item, though, context is not passed down:</p>

<pre><code>render() {
  return &lt;div&gt;{React.cloneElement(this.props.content)}&lt;/div&gt;
}
</code></pre>

<p>Is this a bug? Or is there some way to make this work that I'm not aware of?</p>
",""
"33221473","404 page not found using Django + react-router","5","<p>I am trying to use <code>reactjs</code> and <code>react-router</code> (<code>1.x</code>) with my Django application but I am having a hard time putting all this together. Here is the github project just incase I dont provide enough information within this question.</p>

<p><a href=""https://github.com/liondancer/django-cherngloong"" rel=""nofollow noreferrer"">https://github.com/liondancer/django-cherngloong</a></p>

<p>I created a <code>path=""about""</code> within my <code>routes.js</code> </p>

<pre><code>var routes = (
    &lt;Router&gt;
        &lt;Route path=""/"" component={ Views.Layout }&gt;
            &lt;IndexRoute component={ Views.Index } /&gt;
            &lt;Route path=""about"" component={ Views.About } /&gt;
        &lt;/Route&gt;
        &lt;Route path=""*"" component={ Views.RouteNotFound } /&gt;
    &lt;/Router&gt;
);

export default routes;
</code></pre>

<p>My <code>layout.js</code></p>

<pre><code>class Layout extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        return (
            &lt;div id=""review-web""&gt;
                &lt;header className=""header""&gt;
                    &lt;LogoElement /&gt;
                    &lt;CenterPiece /&gt;
                &lt;/header&gt;
                &lt;div&gt;
                    { React.cloneElement(this.props.children, { path: this.props.path }) }
                &lt;/div&gt;
                &lt;Footer /&gt;
            &lt;/div&gt;
        );
    }
}

export default Layout;
</code></pre>

<p>When I enter in <code>localhost.8000/about</code> I get a <code>404</code> Django error</p>

<p><a href=""https://i.stack.imgur.com/CQF5r.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CQF5r.png"" alt=""enter image description here""></a></p>

<p>My goal is to keep the frontend and backend separate so I believe I should be able to use Django as just an endpoint for data and not for rendering views.</p>
","You'll need to split your route handling in the Django app - e.g. serve anything prefixed by `/api/*` with Django directly, and anything else (wildcard) to `/path/to/your/index.html` - which is your React app. Otherwise Django interprets the `/about` route as it's own - it doesn't talk to the React app whatsoever (it can't)."
"33221473","404 page not found using Django + react-router","5","<p>I am trying to use <code>reactjs</code> and <code>react-router</code> (<code>1.x</code>) with my Django application but I am having a hard time putting all this together. Here is the github project just incase I dont provide enough information within this question.</p>

<p><a href=""https://github.com/liondancer/django-cherngloong"" rel=""nofollow noreferrer"">https://github.com/liondancer/django-cherngloong</a></p>

<p>I created a <code>path=""about""</code> within my <code>routes.js</code> </p>

<pre><code>var routes = (
    &lt;Router&gt;
        &lt;Route path=""/"" component={ Views.Layout }&gt;
            &lt;IndexRoute component={ Views.Index } /&gt;
            &lt;Route path=""about"" component={ Views.About } /&gt;
        &lt;/Route&gt;
        &lt;Route path=""*"" component={ Views.RouteNotFound } /&gt;
    &lt;/Router&gt;
);

export default routes;
</code></pre>

<p>My <code>layout.js</code></p>

<pre><code>class Layout extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        return (
            &lt;div id=""review-web""&gt;
                &lt;header className=""header""&gt;
                    &lt;LogoElement /&gt;
                    &lt;CenterPiece /&gt;
                &lt;/header&gt;
                &lt;div&gt;
                    { React.cloneElement(this.props.children, { path: this.props.path }) }
                &lt;/div&gt;
                &lt;Footer /&gt;
            &lt;/div&gt;
        );
    }
}

export default Layout;
</code></pre>

<p>When I enter in <code>localhost.8000/about</code> I get a <code>404</code> Django error</p>

<p><a href=""https://i.stack.imgur.com/CQF5r.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CQF5r.png"" alt=""enter image description here""></a></p>

<p>My goal is to keep the frontend and backend separate so I believe I should be able to use Django as just an endpoint for data and not for rendering views.</p>
","does it work if you do: <Route path=""/about"" component={ Views.About } /> (see the slash I used at the beginning of the path). Edit: Also, are you sure you don't want to include this line ""<Route path=""about"" component={ Views.About } />"" on it's own? It's currently nested inside the other route."
"33221473","404 page not found using Django + react-router","5","<p>I am trying to use <code>reactjs</code> and <code>react-router</code> (<code>1.x</code>) with my Django application but I am having a hard time putting all this together. Here is the github project just incase I dont provide enough information within this question.</p>

<p><a href=""https://github.com/liondancer/django-cherngloong"" rel=""nofollow noreferrer"">https://github.com/liondancer/django-cherngloong</a></p>

<p>I created a <code>path=""about""</code> within my <code>routes.js</code> </p>

<pre><code>var routes = (
    &lt;Router&gt;
        &lt;Route path=""/"" component={ Views.Layout }&gt;
            &lt;IndexRoute component={ Views.Index } /&gt;
            &lt;Route path=""about"" component={ Views.About } /&gt;
        &lt;/Route&gt;
        &lt;Route path=""*"" component={ Views.RouteNotFound } /&gt;
    &lt;/Router&gt;
);

export default routes;
</code></pre>

<p>My <code>layout.js</code></p>

<pre><code>class Layout extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        return (
            &lt;div id=""review-web""&gt;
                &lt;header className=""header""&gt;
                    &lt;LogoElement /&gt;
                    &lt;CenterPiece /&gt;
                &lt;/header&gt;
                &lt;div&gt;
                    { React.cloneElement(this.props.children, { path: this.props.path }) }
                &lt;/div&gt;
                &lt;Footer /&gt;
            &lt;/div&gt;
        );
    }
}

export default Layout;
</code></pre>

<p>When I enter in <code>localhost.8000/about</code> I get a <code>404</code> Django error</p>

<p><a href=""https://i.stack.imgur.com/CQF5r.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CQF5r.png"" alt=""enter image description here""></a></p>

<p>My goal is to keep the frontend and backend separate so I believe I should be able to use Django as just an endpoint for data and not for rendering views.</p>
","@user2719875 Right now my application uses [this](https://github.com/liondancer/django-cherngloong/blob/master/assets/js/index.js) to use `route.js`. If I were to enter `localhost:8000/` it will display [this](https://github.com/liondancer/django-cherngloong/blob/master/assets/js/views/index.js) component]"
"33221473","404 page not found using Django + react-router","5","<p>I am trying to use <code>reactjs</code> and <code>react-router</code> (<code>1.x</code>) with my Django application but I am having a hard time putting all this together. Here is the github project just incase I dont provide enough information within this question.</p>

<p><a href=""https://github.com/liondancer/django-cherngloong"" rel=""nofollow noreferrer"">https://github.com/liondancer/django-cherngloong</a></p>

<p>I created a <code>path=""about""</code> within my <code>routes.js</code> </p>

<pre><code>var routes = (
    &lt;Router&gt;
        &lt;Route path=""/"" component={ Views.Layout }&gt;
            &lt;IndexRoute component={ Views.Index } /&gt;
            &lt;Route path=""about"" component={ Views.About } /&gt;
        &lt;/Route&gt;
        &lt;Route path=""*"" component={ Views.RouteNotFound } /&gt;
    &lt;/Router&gt;
);

export default routes;
</code></pre>

<p>My <code>layout.js</code></p>

<pre><code>class Layout extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        return (
            &lt;div id=""review-web""&gt;
                &lt;header className=""header""&gt;
                    &lt;LogoElement /&gt;
                    &lt;CenterPiece /&gt;
                &lt;/header&gt;
                &lt;div&gt;
                    { React.cloneElement(this.props.children, { path: this.props.path }) }
                &lt;/div&gt;
                &lt;Footer /&gt;
            &lt;/div&gt;
        );
    }
}

export default Layout;
</code></pre>

<p>When I enter in <code>localhost.8000/about</code> I get a <code>404</code> Django error</p>

<p><a href=""https://i.stack.imgur.com/CQF5r.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CQF5r.png"" alt=""enter image description here""></a></p>

<p>My goal is to keep the frontend and backend separate so I believe I should be able to use Django as just an endpoint for data and not for rendering views.</p>
","when you go to ""/"" does it successfully serve the Views.Layout page? To me it looks like your application does not know to server or look at routes.js. Did you configure your app to use routes.js?"
"33221473","404 page not found using Django + react-router","5","<p>I am trying to use <code>reactjs</code> and <code>react-router</code> (<code>1.x</code>) with my Django application but I am having a hard time putting all this together. Here is the github project just incase I dont provide enough information within this question.</p>

<p><a href=""https://github.com/liondancer/django-cherngloong"" rel=""nofollow noreferrer"">https://github.com/liondancer/django-cherngloong</a></p>

<p>I created a <code>path=""about""</code> within my <code>routes.js</code> </p>

<pre><code>var routes = (
    &lt;Router&gt;
        &lt;Route path=""/"" component={ Views.Layout }&gt;
            &lt;IndexRoute component={ Views.Index } /&gt;
            &lt;Route path=""about"" component={ Views.About } /&gt;
        &lt;/Route&gt;
        &lt;Route path=""*"" component={ Views.RouteNotFound } /&gt;
    &lt;/Router&gt;
);

export default routes;
</code></pre>

<p>My <code>layout.js</code></p>

<pre><code>class Layout extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        return (
            &lt;div id=""review-web""&gt;
                &lt;header className=""header""&gt;
                    &lt;LogoElement /&gt;
                    &lt;CenterPiece /&gt;
                &lt;/header&gt;
                &lt;div&gt;
                    { React.cloneElement(this.props.children, { path: this.props.path }) }
                &lt;/div&gt;
                &lt;Footer /&gt;
            &lt;/div&gt;
        );
    }
}

export default Layout;
</code></pre>

<p>When I enter in <code>localhost.8000/about</code> I get a <code>404</code> Django error</p>

<p><a href=""https://i.stack.imgur.com/CQF5r.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CQF5r.png"" alt=""enter image description here""></a></p>

<p>My goal is to keep the frontend and backend separate so I believe I should be able to use Django as just an endpoint for data and not for rendering views.</p>
","@elithrar nice idea! but in case of wildcard * server will return http status_code 200 for every request, but it's nice to return http status_code 404 for non existed urls."
"33947146","Webpack react-native-webpack-server import 3d part library","0","<p>Have this webpack config I am using react-native-webpack-server</p>

<pre class=""lang-js prettyprint-override""><code>var fs = require('fs');
var path = require('path');
var webpack = require('webpack');

var config = {
  debug: true,
  devtool: 'source-map',
  entry: {
    'index.ios': ['./src/main.js'],
  },

  output: {
    path: path.resolve(__dirname, 'build'),
    filename: '[name].js',
  },

  module: {
    loaders: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        loader: 'babel',
        query: { stage: 0, plugins: ['./build/babelRelayPlugin'] }
      },
    ],
  },

  plugins: [],
};
</code></pre>



<p>When I do import </p>

<p>import ScrollableTabView from 'react-native-scrollable-tab-view';</p>

<p>I got </p>

<pre class=""lang-js prettyprint-override""><code>ERROR in ./~/react-native-scrollable-tab-view/index.js
Module parse failed: /Users/butuzgol/Playground/watchme/node_modules/react-native-scrollable-tab-view/index.js Line 135: Unexpected token &lt;
You may need an appropriate loader to handle this file type.
|       return React.cloneElement(this.props.renderTabBar(), props);
|     } else {
|       return &lt;DefaultTabBar {...props} /&gt;;
|     }
|   },
 @ ./src/pages/dashboard.js 25:36-79
</code></pre>



<p>Also I found this issue <a href=""https://github.com/mjohnston/react-native-webpack-server/issues/34"" rel=""nofollow"">https://github.com/mjohnston/react-native-webpack-server/issues/34</a> but for now I haven't found solution</p>
",""
"34555766","inheritance is not working in react mocha test","0","<p>I have used the below structure to create a react component which is working on the browser after done babel. But the Layout spec is failing in my case since the <code>React</code> is declared in <code>Base</code> component only. Why the inheritance is not working in spec? </p>

<p><strong>Base.js</strong></p>

<pre><code>import React from 'react';

export default class Base extends React.Component {

}
</code></pre>

<p><strong>Layout.js</strong></p>

<pre><code>import 'Base' from './Base';

export default class Layout extends Base {
const sample = React.cloneElement(this.props.data, {ref: 't'});

}
</code></pre>

<p><strong>Test Case</strong></p>

<pre><code>import Layout from 'component/Layout'
import React from 'react';

describe('Layout', () =&gt; {
}
</code></pre>

<p><strong>Error message:</strong></p>

<pre><code>ReferenceError: Can't find variable: React
</code></pre>
",""
"35020735","Animated page transitions in react","7","<p>The past couple of weeks I've been working on an app using React. So far everything is working fine, but now I want to add some transitions to it. These transitions are a bit more complex than any examples I managed to find.</p>

<p>I've got 2 pages, an overview and a detail page which I'd like to transition between.</p>

<p>I'm using react-router to manage my routes:</p>

<pre><code>&lt;Route path='/' component={CoreLayout}&gt;

  &lt;Route path=':pageSlug' component={Overview} /&gt;
  &lt;Route path=':pageSlug/:detailSlug' component={DetailView} /&gt;

&lt;/Route&gt;
</code></pre>

<p>Overview looks like this:
<a href=""https://i.stack.imgur.com/oUmZn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oUmZn.png"" alt=""enter image description here""></a></p>

<p>Detailview looks like this:
<a href=""https://i.stack.imgur.com/TUUQg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TUUQg.png"" alt=""enter image description here""></a></p>

<p>The idea of the transition is that you click on one of the elements of the Overview. This element which has been clicked moves towards the position it should have on the detailView. The transition should be initiated by a route change (I think) and should also be able to happen in reverse.</p>

<p>I've already tried using <code>ReactTransitionGroup</code> on the Layout, which has a render method which looks like this:</p>

<pre><code>render () {
    return (
        &lt;div className='layout'&gt;
            &lt;ReactTransitionGroup&gt;
                React.cloneElement(this.props.children, { key: this.props.location.pathname })
            &lt;/ReactTransitionGroup&gt;
        &lt;/div&gt;
    )
}
</code></pre>

<p>This will give the child component the ability to receive the special <a href=""https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup"" rel=""nofollow noreferrer"">lifecycle hooks</a>. But I'd like to access the child components somehow during these hooks and still keep doing things the React way.</p>

<p>Could someone point me in the right direction for the next step to take? Or maybe point me to an example which I may have missed somewhere? In previous projects I used <a href=""http://emberjs.com/"" rel=""nofollow noreferrer"">Ember</a> together with <a href=""http://ember-animation.github.io/liquid-fire/"" rel=""nofollow noreferrer"">liquid fire</a> to get these kinds of transitions, is there maybe something like this for React?</p>

<p>I'm using <a href=""https://facebook.github.io/react/"" rel=""nofollow noreferrer"">react</a>/<a href=""https://github.com/rackt/react-redux"" rel=""nofollow noreferrer"">react-redux</a>/<a href=""https://github.com/rackt/react-router"" rel=""nofollow noreferrer"">react-router</a>/<a href=""https://github.com/rackt/react-router-redux"" rel=""nofollow noreferrer"">react-router-redux</a>.</p>
","you can use the greensock animation library with the lifecycle hooks to make some really cool transitions."
"35020735","Animated page transitions in react","7","<p>The past couple of weeks I've been working on an app using React. So far everything is working fine, but now I want to add some transitions to it. These transitions are a bit more complex than any examples I managed to find.</p>

<p>I've got 2 pages, an overview and a detail page which I'd like to transition between.</p>

<p>I'm using react-router to manage my routes:</p>

<pre><code>&lt;Route path='/' component={CoreLayout}&gt;

  &lt;Route path=':pageSlug' component={Overview} /&gt;
  &lt;Route path=':pageSlug/:detailSlug' component={DetailView} /&gt;

&lt;/Route&gt;
</code></pre>

<p>Overview looks like this:
<a href=""https://i.stack.imgur.com/oUmZn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oUmZn.png"" alt=""enter image description here""></a></p>

<p>Detailview looks like this:
<a href=""https://i.stack.imgur.com/TUUQg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TUUQg.png"" alt=""enter image description here""></a></p>

<p>The idea of the transition is that you click on one of the elements of the Overview. This element which has been clicked moves towards the position it should have on the detailView. The transition should be initiated by a route change (I think) and should also be able to happen in reverse.</p>

<p>I've already tried using <code>ReactTransitionGroup</code> on the Layout, which has a render method which looks like this:</p>

<pre><code>render () {
    return (
        &lt;div className='layout'&gt;
            &lt;ReactTransitionGroup&gt;
                React.cloneElement(this.props.children, { key: this.props.location.pathname })
            &lt;/ReactTransitionGroup&gt;
        &lt;/div&gt;
    )
}
</code></pre>

<p>This will give the child component the ability to receive the special <a href=""https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup"" rel=""nofollow noreferrer"">lifecycle hooks</a>. But I'd like to access the child components somehow during these hooks and still keep doing things the React way.</p>

<p>Could someone point me in the right direction for the next step to take? Or maybe point me to an example which I may have missed somewhere? In previous projects I used <a href=""http://emberjs.com/"" rel=""nofollow noreferrer"">Ember</a> together with <a href=""http://ember-animation.github.io/liquid-fire/"" rel=""nofollow noreferrer"">liquid fire</a> to get these kinds of transitions, is there maybe something like this for React?</p>

<p>I'm using <a href=""https://facebook.github.io/react/"" rel=""nofollow noreferrer"">react</a>/<a href=""https://github.com/rackt/react-redux"" rel=""nofollow noreferrer"">react-redux</a>/<a href=""https://github.com/rackt/react-router"" rel=""nofollow noreferrer"">react-router</a>/<a href=""https://github.com/rackt/react-router-redux"" rel=""nofollow noreferrer"">react-router-redux</a>.</p>
","I'm hosting an example app, see my updated answer :-)"
"35020735","Animated page transitions in react","7","<p>The past couple of weeks I've been working on an app using React. So far everything is working fine, but now I want to add some transitions to it. These transitions are a bit more complex than any examples I managed to find.</p>

<p>I've got 2 pages, an overview and a detail page which I'd like to transition between.</p>

<p>I'm using react-router to manage my routes:</p>

<pre><code>&lt;Route path='/' component={CoreLayout}&gt;

  &lt;Route path=':pageSlug' component={Overview} /&gt;
  &lt;Route path=':pageSlug/:detailSlug' component={DetailView} /&gt;

&lt;/Route&gt;
</code></pre>

<p>Overview looks like this:
<a href=""https://i.stack.imgur.com/oUmZn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oUmZn.png"" alt=""enter image description here""></a></p>

<p>Detailview looks like this:
<a href=""https://i.stack.imgur.com/TUUQg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TUUQg.png"" alt=""enter image description here""></a></p>

<p>The idea of the transition is that you click on one of the elements of the Overview. This element which has been clicked moves towards the position it should have on the detailView. The transition should be initiated by a route change (I think) and should also be able to happen in reverse.</p>

<p>I've already tried using <code>ReactTransitionGroup</code> on the Layout, which has a render method which looks like this:</p>

<pre><code>render () {
    return (
        &lt;div className='layout'&gt;
            &lt;ReactTransitionGroup&gt;
                React.cloneElement(this.props.children, { key: this.props.location.pathname })
            &lt;/ReactTransitionGroup&gt;
        &lt;/div&gt;
    )
}
</code></pre>

<p>This will give the child component the ability to receive the special <a href=""https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup"" rel=""nofollow noreferrer"">lifecycle hooks</a>. But I'd like to access the child components somehow during these hooks and still keep doing things the React way.</p>

<p>Could someone point me in the right direction for the next step to take? Or maybe point me to an example which I may have missed somewhere? In previous projects I used <a href=""http://emberjs.com/"" rel=""nofollow noreferrer"">Ember</a> together with <a href=""http://ember-animation.github.io/liquid-fire/"" rel=""nofollow noreferrer"">liquid fire</a> to get these kinds of transitions, is there maybe something like this for React?</p>

<p>I'm using <a href=""https://facebook.github.io/react/"" rel=""nofollow noreferrer"">react</a>/<a href=""https://github.com/rackt/react-redux"" rel=""nofollow noreferrer"">react-redux</a>/<a href=""https://github.com/rackt/react-router"" rel=""nofollow noreferrer"">react-router</a>/<a href=""https://github.com/rackt/react-router-redux"" rel=""nofollow noreferrer"">react-router-redux</a>.</p>
","@sammkj Just did, tell me what you think ;-)"
"35020735","Animated page transitions in react","7","<p>The past couple of weeks I've been working on an app using React. So far everything is working fine, but now I want to add some transitions to it. These transitions are a bit more complex than any examples I managed to find.</p>

<p>I've got 2 pages, an overview and a detail page which I'd like to transition between.</p>

<p>I'm using react-router to manage my routes:</p>

<pre><code>&lt;Route path='/' component={CoreLayout}&gt;

  &lt;Route path=':pageSlug' component={Overview} /&gt;
  &lt;Route path=':pageSlug/:detailSlug' component={DetailView} /&gt;

&lt;/Route&gt;
</code></pre>

<p>Overview looks like this:
<a href=""https://i.stack.imgur.com/oUmZn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oUmZn.png"" alt=""enter image description here""></a></p>

<p>Detailview looks like this:
<a href=""https://i.stack.imgur.com/TUUQg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TUUQg.png"" alt=""enter image description here""></a></p>

<p>The idea of the transition is that you click on one of the elements of the Overview. This element which has been clicked moves towards the position it should have on the detailView. The transition should be initiated by a route change (I think) and should also be able to happen in reverse.</p>

<p>I've already tried using <code>ReactTransitionGroup</code> on the Layout, which has a render method which looks like this:</p>

<pre><code>render () {
    return (
        &lt;div className='layout'&gt;
            &lt;ReactTransitionGroup&gt;
                React.cloneElement(this.props.children, { key: this.props.location.pathname })
            &lt;/ReactTransitionGroup&gt;
        &lt;/div&gt;
    )
}
</code></pre>

<p>This will give the child component the ability to receive the special <a href=""https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup"" rel=""nofollow noreferrer"">lifecycle hooks</a>. But I'd like to access the child components somehow during these hooks and still keep doing things the React way.</p>

<p>Could someone point me in the right direction for the next step to take? Or maybe point me to an example which I may have missed somewhere? In previous projects I used <a href=""http://emberjs.com/"" rel=""nofollow noreferrer"">Ember</a> together with <a href=""http://ember-animation.github.io/liquid-fire/"" rel=""nofollow noreferrer"">liquid fire</a> to get these kinds of transitions, is there maybe something like this for React?</p>

<p>I'm using <a href=""https://facebook.github.io/react/"" rel=""nofollow noreferrer"">react</a>/<a href=""https://github.com/rackt/react-redux"" rel=""nofollow noreferrer"">react-redux</a>/<a href=""https://github.com/rackt/react-router"" rel=""nofollow noreferrer"">react-router</a>/<a href=""https://github.com/rackt/react-router-redux"" rel=""nofollow noreferrer"">react-router-redux</a>.</p>
","hey @tommy , I'm looking to do similar transitions too! Do you mind sharing a small snippet on how you achieved it?"
"35020735","Animated page transitions in react","7","<p>The past couple of weeks I've been working on an app using React. So far everything is working fine, but now I want to add some transitions to it. These transitions are a bit more complex than any examples I managed to find.</p>

<p>I've got 2 pages, an overview and a detail page which I'd like to transition between.</p>

<p>I'm using react-router to manage my routes:</p>

<pre><code>&lt;Route path='/' component={CoreLayout}&gt;

  &lt;Route path=':pageSlug' component={Overview} /&gt;
  &lt;Route path=':pageSlug/:detailSlug' component={DetailView} /&gt;

&lt;/Route&gt;
</code></pre>

<p>Overview looks like this:
<a href=""https://i.stack.imgur.com/oUmZn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oUmZn.png"" alt=""enter image description here""></a></p>

<p>Detailview looks like this:
<a href=""https://i.stack.imgur.com/TUUQg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TUUQg.png"" alt=""enter image description here""></a></p>

<p>The idea of the transition is that you click on one of the elements of the Overview. This element which has been clicked moves towards the position it should have on the detailView. The transition should be initiated by a route change (I think) and should also be able to happen in reverse.</p>

<p>I've already tried using <code>ReactTransitionGroup</code> on the Layout, which has a render method which looks like this:</p>

<pre><code>render () {
    return (
        &lt;div className='layout'&gt;
            &lt;ReactTransitionGroup&gt;
                React.cloneElement(this.props.children, { key: this.props.location.pathname })
            &lt;/ReactTransitionGroup&gt;
        &lt;/div&gt;
    )
}
</code></pre>

<p>This will give the child component the ability to receive the special <a href=""https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup"" rel=""nofollow noreferrer"">lifecycle hooks</a>. But I'd like to access the child components somehow during these hooks and still keep doing things the React way.</p>

<p>Could someone point me in the right direction for the next step to take? Or maybe point me to an example which I may have missed somewhere? In previous projects I used <a href=""http://emberjs.com/"" rel=""nofollow noreferrer"">Ember</a> together with <a href=""http://ember-animation.github.io/liquid-fire/"" rel=""nofollow noreferrer"">liquid fire</a> to get these kinds of transitions, is there maybe something like this for React?</p>

<p>I'm using <a href=""https://facebook.github.io/react/"" rel=""nofollow noreferrer"">react</a>/<a href=""https://github.com/rackt/react-redux"" rel=""nofollow noreferrer"">react-redux</a>/<a href=""https://github.com/rackt/react-router"" rel=""nofollow noreferrer"">react-router</a>/<a href=""https://github.com/rackt/react-router-redux"" rel=""nofollow noreferrer"">react-router-redux</a>.</p>
","@tommy, thanks! I will do an experiment with it! =)"
"35020735","Animated page transitions in react","7","<p>The past couple of weeks I've been working on an app using React. So far everything is working fine, but now I want to add some transitions to it. These transitions are a bit more complex than any examples I managed to find.</p>

<p>I've got 2 pages, an overview and a detail page which I'd like to transition between.</p>

<p>I'm using react-router to manage my routes:</p>

<pre><code>&lt;Route path='/' component={CoreLayout}&gt;

  &lt;Route path=':pageSlug' component={Overview} /&gt;
  &lt;Route path=':pageSlug/:detailSlug' component={DetailView} /&gt;

&lt;/Route&gt;
</code></pre>

<p>Overview looks like this:
<a href=""https://i.stack.imgur.com/oUmZn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oUmZn.png"" alt=""enter image description here""></a></p>

<p>Detailview looks like this:
<a href=""https://i.stack.imgur.com/TUUQg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TUUQg.png"" alt=""enter image description here""></a></p>

<p>The idea of the transition is that you click on one of the elements of the Overview. This element which has been clicked moves towards the position it should have on the detailView. The transition should be initiated by a route change (I think) and should also be able to happen in reverse.</p>

<p>I've already tried using <code>ReactTransitionGroup</code> on the Layout, which has a render method which looks like this:</p>

<pre><code>render () {
    return (
        &lt;div className='layout'&gt;
            &lt;ReactTransitionGroup&gt;
                React.cloneElement(this.props.children, { key: this.props.location.pathname })
            &lt;/ReactTransitionGroup&gt;
        &lt;/div&gt;
    )
}
</code></pre>

<p>This will give the child component the ability to receive the special <a href=""https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup"" rel=""nofollow noreferrer"">lifecycle hooks</a>. But I'd like to access the child components somehow during these hooks and still keep doing things the React way.</p>

<p>Could someone point me in the right direction for the next step to take? Or maybe point me to an example which I may have missed somewhere? In previous projects I used <a href=""http://emberjs.com/"" rel=""nofollow noreferrer"">Ember</a> together with <a href=""http://ember-animation.github.io/liquid-fire/"" rel=""nofollow noreferrer"">liquid fire</a> to get these kinds of transitions, is there maybe something like this for React?</p>

<p>I'm using <a href=""https://facebook.github.io/react/"" rel=""nofollow noreferrer"">react</a>/<a href=""https://github.com/rackt/react-redux"" rel=""nofollow noreferrer"">react-redux</a>/<a href=""https://github.com/rackt/react-router"" rel=""nofollow noreferrer"">react-router</a>/<a href=""https://github.com/rackt/react-router-redux"" rel=""nofollow noreferrer"">react-router-redux</a>.</p>
","Have you made any progress on this? I tried to implement something like this and came up with a very basic solution, but it works. I got inspired by Androids Shared Element Transitions and the implementation in exponentjs/ex-navigation (React Native). It would be good to know if you found a good and reusable solution to this before I'm posting my stuff."
"35020735","Animated page transitions in react","7","<p>The past couple of weeks I've been working on an app using React. So far everything is working fine, but now I want to add some transitions to it. These transitions are a bit more complex than any examples I managed to find.</p>

<p>I've got 2 pages, an overview and a detail page which I'd like to transition between.</p>

<p>I'm using react-router to manage my routes:</p>

<pre><code>&lt;Route path='/' component={CoreLayout}&gt;

  &lt;Route path=':pageSlug' component={Overview} /&gt;
  &lt;Route path=':pageSlug/:detailSlug' component={DetailView} /&gt;

&lt;/Route&gt;
</code></pre>

<p>Overview looks like this:
<a href=""https://i.stack.imgur.com/oUmZn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oUmZn.png"" alt=""enter image description here""></a></p>

<p>Detailview looks like this:
<a href=""https://i.stack.imgur.com/TUUQg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TUUQg.png"" alt=""enter image description here""></a></p>

<p>The idea of the transition is that you click on one of the elements of the Overview. This element which has been clicked moves towards the position it should have on the detailView. The transition should be initiated by a route change (I think) and should also be able to happen in reverse.</p>

<p>I've already tried using <code>ReactTransitionGroup</code> on the Layout, which has a render method which looks like this:</p>

<pre><code>render () {
    return (
        &lt;div className='layout'&gt;
            &lt;ReactTransitionGroup&gt;
                React.cloneElement(this.props.children, { key: this.props.location.pathname })
            &lt;/ReactTransitionGroup&gt;
        &lt;/div&gt;
    )
}
</code></pre>

<p>This will give the child component the ability to receive the special <a href=""https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup"" rel=""nofollow noreferrer"">lifecycle hooks</a>. But I'd like to access the child components somehow during these hooks and still keep doing things the React way.</p>

<p>Could someone point me in the right direction for the next step to take? Or maybe point me to an example which I may have missed somewhere? In previous projects I used <a href=""http://emberjs.com/"" rel=""nofollow noreferrer"">Ember</a> together with <a href=""http://ember-animation.github.io/liquid-fire/"" rel=""nofollow noreferrer"">liquid fire</a> to get these kinds of transitions, is there maybe something like this for React?</p>

<p>I'm using <a href=""https://facebook.github.io/react/"" rel=""nofollow noreferrer"">react</a>/<a href=""https://github.com/rackt/react-redux"" rel=""nofollow noreferrer"">react-redux</a>/<a href=""https://github.com/rackt/react-router"" rel=""nofollow noreferrer"">react-router</a>/<a href=""https://github.com/rackt/react-router-redux"" rel=""nofollow noreferrer"">react-router-redux</a>.</p>
","FYI react-router v4 (still in alpha, maybe beta) has done away with the custom lifecycle hooks and simply uses the standard component lifecycle hooks, which might let you do what you are trying to do"
"36520479","How to use React.cloneElement to pass a function property with a return object?","4","<p>I'm using react-router which forces me to use <code>React.cloneElement</code> to pass down properties to my Children.  I can pass down objects and functions, but my issue is where one of my functions has a return object back up to the parent, which is always undefined.  The function triggers in the parent, but it doesn't receive the object I'm passing it from the child.</p>

<p>Here is a jsFiddle of the below example code if anyone wants to edit it <a href=""https://jsfiddle.net/conor909/gqdfwg6p/"" rel=""nofollow"">https://jsfiddle.net/conor909/gqdfwg6p/</a></p>

<pre><code>import React from ""react"";
import ReactDom from ""react-dom"";

const App = React.createClass({

    render() {
        return (
            &lt;div&gt;
                {this.getChildrenWithProps()}
            &lt;/div&gt;
        )
    },

    getChildrenWithProps() {
        return React.Children.map(this.props.children, (child) =&gt; {
            return React.cloneElement(child, {
                myFunction: this.myFunction
            });
        });
    },
    // NOTE:
    // the idea is that the variable 'newForm' should be sent back up to App, I can log out 'newForm' in the Child, but here in App, it is undefined.
    myFunction(newForm) {
        console.log(newForm); // =&gt; undefined object 
    }

});

const Child = React.createClass({

    propTypes: {
        myFunction: React.PropTypes.func,
        myForm: React.PropTypes.object
    },

    render() {
        return (
            &lt;form className=""col-sm-12""&gt;
                &lt;MyForm
                    changeForm={this.onChangeForm}
                    form={this.props.myForm} /&gt;
            &lt;/form&gt;
        )
    },

    onChangeForm(formChanges) {
        let newForm = {
            ...this.props.myForm,
            ...formChanges
        }
        // console.log(newForm); =&gt; here my newForm object looks fine 
        this.props.myFunction(newForm);
    }
});

const MyForm = React.createClass({

    propTypes: {
        changeForm: React.PropTypes.func.isRequired
    },

    render() {
        return (
             &lt;div&gt;
                 &lt;Input onChange={this.onChangeForm}&gt;
             &lt;/div&gt;
        )
    },

    onChangeForm(value) {
        this.props.changeForm({ something: value });
    }
});
</code></pre>
","@azium Apologies, my mistake. I'v made edits to the naming on functions"
"36520479","How to use React.cloneElement to pass a function property with a return object?","4","<p>I'm using react-router which forces me to use <code>React.cloneElement</code> to pass down properties to my Children.  I can pass down objects and functions, but my issue is where one of my functions has a return object back up to the parent, which is always undefined.  The function triggers in the parent, but it doesn't receive the object I'm passing it from the child.</p>

<p>Here is a jsFiddle of the below example code if anyone wants to edit it <a href=""https://jsfiddle.net/conor909/gqdfwg6p/"" rel=""nofollow"">https://jsfiddle.net/conor909/gqdfwg6p/</a></p>

<pre><code>import React from ""react"";
import ReactDom from ""react-dom"";

const App = React.createClass({

    render() {
        return (
            &lt;div&gt;
                {this.getChildrenWithProps()}
            &lt;/div&gt;
        )
    },

    getChildrenWithProps() {
        return React.Children.map(this.props.children, (child) =&gt; {
            return React.cloneElement(child, {
                myFunction: this.myFunction
            });
        });
    },
    // NOTE:
    // the idea is that the variable 'newForm' should be sent back up to App, I can log out 'newForm' in the Child, but here in App, it is undefined.
    myFunction(newForm) {
        console.log(newForm); // =&gt; undefined object 
    }

});

const Child = React.createClass({

    propTypes: {
        myFunction: React.PropTypes.func,
        myForm: React.PropTypes.object
    },

    render() {
        return (
            &lt;form className=""col-sm-12""&gt;
                &lt;MyForm
                    changeForm={this.onChangeForm}
                    form={this.props.myForm} /&gt;
            &lt;/form&gt;
        )
    },

    onChangeForm(formChanges) {
        let newForm = {
            ...this.props.myForm,
            ...formChanges
        }
        // console.log(newForm); =&gt; here my newForm object looks fine 
        this.props.myFunction(newForm);
    }
});

const MyForm = React.createClass({

    propTypes: {
        changeForm: React.PropTypes.func.isRequired
    },

    render() {
        return (
             &lt;div&gt;
                 &lt;Input onChange={this.onChangeForm}&gt;
             &lt;/div&gt;
        )
    },

    onChangeForm(value) {
        this.props.changeForm({ something: value });
    }
});
</code></pre>
","This is hard to follow because your function names don't match up. For instance `this.onSelectedOrigin` is undefined in `MyForm`"
"36520479","How to use React.cloneElement to pass a function property with a return object?","4","<p>I'm using react-router which forces me to use <code>React.cloneElement</code> to pass down properties to my Children.  I can pass down objects and functions, but my issue is where one of my functions has a return object back up to the parent, which is always undefined.  The function triggers in the parent, but it doesn't receive the object I'm passing it from the child.</p>

<p>Here is a jsFiddle of the below example code if anyone wants to edit it <a href=""https://jsfiddle.net/conor909/gqdfwg6p/"" rel=""nofollow"">https://jsfiddle.net/conor909/gqdfwg6p/</a></p>

<pre><code>import React from ""react"";
import ReactDom from ""react-dom"";

const App = React.createClass({

    render() {
        return (
            &lt;div&gt;
                {this.getChildrenWithProps()}
            &lt;/div&gt;
        )
    },

    getChildrenWithProps() {
        return React.Children.map(this.props.children, (child) =&gt; {
            return React.cloneElement(child, {
                myFunction: this.myFunction
            });
        });
    },
    // NOTE:
    // the idea is that the variable 'newForm' should be sent back up to App, I can log out 'newForm' in the Child, but here in App, it is undefined.
    myFunction(newForm) {
        console.log(newForm); // =&gt; undefined object 
    }

});

const Child = React.createClass({

    propTypes: {
        myFunction: React.PropTypes.func,
        myForm: React.PropTypes.object
    },

    render() {
        return (
            &lt;form className=""col-sm-12""&gt;
                &lt;MyForm
                    changeForm={this.onChangeForm}
                    form={this.props.myForm} /&gt;
            &lt;/form&gt;
        )
    },

    onChangeForm(formChanges) {
        let newForm = {
            ...this.props.myForm,
            ...formChanges
        }
        // console.log(newForm); =&gt; here my newForm object looks fine 
        this.props.myFunction(newForm);
    }
});

const MyForm = React.createClass({

    propTypes: {
        changeForm: React.PropTypes.func.isRequired
    },

    render() {
        return (
             &lt;div&gt;
                 &lt;Input onChange={this.onChangeForm}&gt;
             &lt;/div&gt;
        )
    },

    onChangeForm(value) {
        this.props.changeForm({ something: value });
    }
});
</code></pre>
","Are you trying to pass a callback to the child? You're just passing on object to `myFunction` so it's hard to see how you were planning to communicate something back to the parent?"
"36520479","How to use React.cloneElement to pass a function property with a return object?","4","<p>I'm using react-router which forces me to use <code>React.cloneElement</code> to pass down properties to my Children.  I can pass down objects and functions, but my issue is where one of my functions has a return object back up to the parent, which is always undefined.  The function triggers in the parent, but it doesn't receive the object I'm passing it from the child.</p>

<p>Here is a jsFiddle of the below example code if anyone wants to edit it <a href=""https://jsfiddle.net/conor909/gqdfwg6p/"" rel=""nofollow"">https://jsfiddle.net/conor909/gqdfwg6p/</a></p>

<pre><code>import React from ""react"";
import ReactDom from ""react-dom"";

const App = React.createClass({

    render() {
        return (
            &lt;div&gt;
                {this.getChildrenWithProps()}
            &lt;/div&gt;
        )
    },

    getChildrenWithProps() {
        return React.Children.map(this.props.children, (child) =&gt; {
            return React.cloneElement(child, {
                myFunction: this.myFunction
            });
        });
    },
    // NOTE:
    // the idea is that the variable 'newForm' should be sent back up to App, I can log out 'newForm' in the Child, but here in App, it is undefined.
    myFunction(newForm) {
        console.log(newForm); // =&gt; undefined object 
    }

});

const Child = React.createClass({

    propTypes: {
        myFunction: React.PropTypes.func,
        myForm: React.PropTypes.object
    },

    render() {
        return (
            &lt;form className=""col-sm-12""&gt;
                &lt;MyForm
                    changeForm={this.onChangeForm}
                    form={this.props.myForm} /&gt;
            &lt;/form&gt;
        )
    },

    onChangeForm(formChanges) {
        let newForm = {
            ...this.props.myForm,
            ...formChanges
        }
        // console.log(newForm); =&gt; here my newForm object looks fine 
        this.props.myFunction(newForm);
    }
});

const MyForm = React.createClass({

    propTypes: {
        changeForm: React.PropTypes.func.isRequired
    },

    render() {
        return (
             &lt;div&gt;
                 &lt;Input onChange={this.onChangeForm}&gt;
             &lt;/div&gt;
        )
    },

    onChangeForm(value) {
        this.props.changeForm({ something: value });
    }
});
</code></pre>
","Yes, I'm simply passing an object to `myFunction` but the object is `undefined` when logging it out in the parent"
"37310406","How to bootstrap component using react-router","2","<p>I'm running into an issue where my React components are just not being bootstrapped into the page, but no error messages are showing up so I don't know what's going on. I don't believe that the issue is with the CalcList.js or Calculator.js files, since I've been able to render them without any issue in a single-page (i.e. not using react-router) context.</p>

<p>Implemented using the index.js and App.js parents below, when I visit I just get an empty page without any feedback from the console.</p>

<p>index.js</p>

<pre><code>import React from 'react';
import {render} from 'react-dom';
import {Router, Route, Link, IndexRoute, browserHistory} from 'react-router';
import App from './App';
import {Calculator} from './Calculator';
import {CalcList} from './CalcList';

render ((
    &lt;Router history={browserHistory}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={CalcList} /&gt;
        &lt;Route path=""/calculator/:num"" component={Calculator} /&gt;
      &lt;/Route&gt;
    &lt;/Router&gt;
), document.getElementById('root'));
</code></pre>

<p>App.js</p>

<pre><code>import React, { Component } from 'react';
import {render} from 'react-dom';
import {Router, Route, IndexRoute, hashHistory} from 'react-router';
import CalcList from './CalcList';
import Calculator from './Calculator';

export default class App extends Component {
  render() {
    var children = React.Children.map(this.props.children, function(child) {
        return React.cloneElement(child);
    });
    return (
        &lt;div id=""app""&gt;
        {children}
      &lt;/div&gt;
    );
  }
}
</code></pre>
","How are you serving your app page (e.g. webpack dev server, other)? I ask because since you're using the HTML5 history api your server needs to support it (i.e.. when you request /calculator/1 your server should serve you index.html page). Does it work if inside index.js you do ```<Router history={hashHistory}>``` instead?"
"37310406","How to bootstrap component using react-router","2","<p>I'm running into an issue where my React components are just not being bootstrapped into the page, but no error messages are showing up so I don't know what's going on. I don't believe that the issue is with the CalcList.js or Calculator.js files, since I've been able to render them without any issue in a single-page (i.e. not using react-router) context.</p>

<p>Implemented using the index.js and App.js parents below, when I visit I just get an empty page without any feedback from the console.</p>

<p>index.js</p>

<pre><code>import React from 'react';
import {render} from 'react-dom';
import {Router, Route, Link, IndexRoute, browserHistory} from 'react-router';
import App from './App';
import {Calculator} from './Calculator';
import {CalcList} from './CalcList';

render ((
    &lt;Router history={browserHistory}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={CalcList} /&gt;
        &lt;Route path=""/calculator/:num"" component={Calculator} /&gt;
      &lt;/Route&gt;
    &lt;/Router&gt;
), document.getElementById('root'));
</code></pre>

<p>App.js</p>

<pre><code>import React, { Component } from 'react';
import {render} from 'react-dom';
import {Router, Route, IndexRoute, hashHistory} from 'react-router';
import CalcList from './CalcList';
import Calculator from './Calculator';

export default class App extends Component {
  render() {
    var children = React.Children.map(this.props.children, function(child) {
        return React.cloneElement(child);
    });
    return (
        &lt;div id=""app""&gt;
        {children}
      &lt;/div&gt;
    );
  }
}
</code></pre>
","Also, why are you cloning App children instead of just doing ```return (
        <div id=""app"">
        {this.props.children}
      </div>
    );```"
"37521798","When should I be using React.cloneElement vs this.props.children?","1","<p>I am still a noob at React and in many examples on the internet, I see this variation in rendering child elements which I find confusing. Normally I see this:</p>

<pre><code>class Users extends React.Component {
  render() {
    return (
      &lt;div&gt;
        &lt;h2&gt;Users&lt;/h2&gt;
        {this.props.children}
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p>But then I see an example like this:</p>

<pre><code>&lt;ReactCSSTransitionGroup
     component=""div""
     transitionName=""example""
     transitionEnterTimeout={500}
     transitionLeaveTimeout={500}
     &gt;
     {React.cloneElement(this.props.children, {
       key: this.props.location.pathname
      })}
&lt;/ReactCSSTransitionGroup&gt;
</code></pre>

<p>Now I understand the api but the <a href=""https://reactjs.org/docs/react-api.html#cloneelement"" rel=""noreferrer"">docs</a> don't exactly make clear when I should be using it. </p>

<p>So what does one do which the other can't? Could someone explain this to me with better examples?</p>
","https://www.youtube.com/watch?v=hEGg-3pIHlE this guy is showing how he uses cloneElement. Check this out for some examples"
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","Creating a reproducible snippet, perhaps using jsbin, will helps other actually help you instead of guessing. People answering questions there do so because they like to help — so make it easier for them to help you."
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","I believe that the parent component isnt getting re-rendered for some reason .. could you console.log props and see if you're actually receiving it?"
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","@WitVault i have tested your code and it works. Try to check in Logo , ```console.log('CHECK', this.props.logo)```"
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","@WitVault also i removed ""/"", before ""hello"""
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","also you define propTypes , but didn't pass src"
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","@WitVault current version react-router is [2.5.1](https://github.com/reactjs/react-router/blob/master/CHANGES.md)"
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","@Utro sorry that was a typo fixed that"
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","@GoshaArinich Updated my question with more details"
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","@Utro Was used in actual but forgot to remove here"
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","@WitVault Label componet doesnt participate?"
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","@Vijay do you see any answer here?"
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","I don't see any problem with the code other than not passing src in handleRedirectToMyLogo."
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","Is this fixed? Or still a problem?"
"38056800","How to maintain passed props to a component when url rendering that component is refreshed in react?","14","<p>I want to maintain passed props to a component when url rendering that component  is refreshed.</p>

<pre><code>class Logo extends React.Component {
    render(){
        return &lt;img className=""center"" {...this.props} /&gt;;
    }
  }

  Logo.propTypes = {
      src: React.PropTypes.string.isRequired
  };

  class Label extends React.Component {

     handleRedirectToMyLogo() {
        this.context.router.push('/hello');
     },

    render() {
        return
        &lt;div&gt;
            &lt;p className=""default-label""&gt; Hello World&lt;/p&gt;
            &lt;button
            type          = ""button""
            name          = ""myAcc""
            onClick       ={this.handleRedirectToLogo}&gt;  
            My Logo
           &lt;/button&gt;
       &lt;/div&gt;;
    }
  }
</code></pre>

<p>This my Main component</p>

<pre><code>module.exports   = React.createClass({

    getInitialState() {
        return {
         logo:""intialized logo object with src url and dimension""
        };
    },

    content() {

        if (this.props.children) {
            return React.cloneElement(this.props.children, { src : this.state.logo.src });
        } else {

            return (
                &lt;div&gt;
                  &lt;Header/&gt;
                  &lt;div className = ""container""&gt;
                    &lt;div className = ""row""&gt;
                      &lt;div id = ""content"" &gt;
                         Main component
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            );
        }
    },

    render() {
        return (
               &lt;div&gt;
                   {this.content()}
                   &lt;Footer /&gt;
               &lt;/div&gt;
        );
    }

});
</code></pre>

<p>This <strong>routes.js</strong> file</p>

<pre><code>module.exports = (
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;Route path=""/hello"" component={Logo} /&gt;
      &lt;Route path=""/label"" component={Label} /&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
);
</code></pre>

<p>I am rendering above component on url <code>/hello</code> from a main component <strong>link</strong> and passing required props from main component. 
First time it renders correctly but when I refresh the url <code>/hello</code> again component gets rendered but props are missing within <strong>Logo</strong>.</p>

<p>Please guide me through this.
I am using <strong>react-router v2.4 and react v 0.15</strong>.</p>
","If something is rendering and you don't want it to I would use `shouldComponentUpdate` to compare props and determine if it should update. If you need to keep the old props while consuming the new props, I would handle that in component `state`."
"38978936","""CSS module is undefined"" error when using react-css-modules with react-router with locale and webpack","0","<p>I'm using react with react-router and CSS-modules and webpack. This was all working nicely, but now a requirement has come in to be able to change language. I first tried to do this by only changing a state attribute to the different language, but when changing it the current route doesn't rerender, so the language change would only take effect when the next route change happens, i.e click on a link.</p>

<p>Plan B: trying to add the locale to the routing / so it appears in the URL now, which should then take effect because route update -> rerender. However I am getting errors when loading my CSS modules now. </p>

<p>This is my router setup:</p>

<pre><code>&lt;Router onUpdate={() =&gt; window.scrollTo(0, 0)} history={hashHistory}&gt;
    &lt;Route path=""/"" component={App}&gt;
      &lt;IndexRedirect to=""/english/hydraulics"" /&gt;
      &lt;Route path=""/:lang""&gt;
        &lt;IndexRedirect to=""/hydraulics"" /&gt;
        &lt;Route path=""/"" component={Hydraulics}/&gt;
        &lt;Route path=""hydraulics"" component={Hydraulics}/&gt;
        &lt;Route path=""bearings"" component={Bearings}/&gt;
        &lt;Route path=""compressor"" component={Compressor}/&gt;
        &lt;Route path=""gears"" component={Gears}/&gt;
      &lt;/Route&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;
</code></pre>

<p>This is my functions in my app:</p>

<pre><code>constructor(props) {
    super(props);

    this._updateLanguage = this._updateLanguage.bind(this);
  }

  componentWillMount() {
    this.setState({
      lang: 'english',
      language: english
    })
  }

  _updateLanguage(language) {
    this.setState({
      language: language === ENGLISH ? english : russian
    });
  }

  _addChildren() {
    return this.props.children ? React.cloneElement(this.props.children, {language: this.state.language}) : this.props.children;
  }

  render() {

    var language = this.state.language;
    var children = this.props.children;

    return &lt;div className={wrapper}&gt;
        &lt;Nav copy={this.state.language} location={this.props.location} callback={this._updateLanguage} locale={this.state.lang}/&gt;
        &lt;section className={content}&gt;
          { this._addChildren() }
        &lt;/section&gt;
      &lt;/div&gt;
  }
</code></pre>

<p>My default route is hydraulics, so am getting the error: </p>

<blockquote>
  <p>Uncaught Error: ""is-english/hydraulics"" CSS module is undefined.</p>
</blockquote>

<p>I wonder if it is a configuration in my webpack css modules loader:</p>

<pre><code>{
        test: /\.css$/,
        loader: ExtractTextPlugin.extract('style', 'css?modules&amp;importLoaders=1&amp;localIdentName=[name]__[local]___[hash:base64:5]')
      },
</code></pre>

<p>in the hydraulics.jsx I am importing the CSS like this:</p>

<pre><code>import styles from './hydraulics.css';
</code></pre>

<p>what I don't understand is why the css modules are loaded from ""is-english"", where is that ""is-"" prefix coming from? Also the file isn't in an english subfolder, it's just in the same folder as hydraulics.jsx</p>

<p>Or whether it's got something to do with the way the routes have been arranged?</p>
",""
"39206674","Check which props are allowed for react child components","3","<p>Is there a way to find out which props are allowed in React components when using <code>React.Children.map</code>. Here is an example: </p>

<pre><code>{React.Children.map(props.children, c =&gt; React.cloneElement(c, extendedProps))}
</code></pre>

<p>The <code>extendedProps</code> can hold unknown props for the specific child, which leads to an <a href=""https://facebook.github.io/react/warnings/unknown-prop.html"" rel=""nofollow"">Unknown Prop Warning</a>. </p>
","http://jsbin.com/rakenod/1/edit?html,js,output with propTypes checking"
"39206674","Check which props are allowed for react child components","3","<p>Is there a way to find out which props are allowed in React components when using <code>React.Children.map</code>. Here is an example: </p>

<pre><code>{React.Children.map(props.children, c =&gt; React.cloneElement(c, extendedProps))}
</code></pre>

<p>The <code>extendedProps</code> can hold unknown props for the specific child, which leads to an <a href=""https://facebook.github.io/react/warnings/unknown-prop.html"" rel=""nofollow"">Unknown Prop Warning</a>. </p>
","something like that? http://jsbin.com/tujusi/1/edit?html,js,output"
"40621433","How does react conditionally give the minified production bundle when NODE_ENV=production?","0","<p>If you build your project with <code>NODE_ENV=production</code>, react automatically includes the minified production verison of the lib in the bundle. Conversely, a non production build will include the dev unminified version of react.</p>

<p>How is this being achieved?</p>

<p>If we install react:</p>

<pre><code>npm install --save react
</code></pre>

<p>Then look at its <code>package.json</code> for the <code>main</code> key, it points to: </p>

<pre><code>""main"": ""react.js"",
</code></pre>

<p>Looking at <code>react.js</code> the contents of the file are simply:</p>

<pre><code>module.exports = require('./lib/React');
</code></pre>

<p>Looking in <code>./lib/React</code> I was expecting to see a conditional that loaded the minified build or not, but the conditionals seem to do other stuff:</p>

<pre><code>if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = require('./ReactElementValidator');
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if (process.env.NODE_ENV !== 'production') {
  var warned = false;
  __spread = function () {
    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;
    return _assign.apply(null, arguments);
  };
}
</code></pre>

<p>What is react doing exactly between prod and dev builds? It doesn't seem like it interacts with the minified and unminified builds in <code>/dist</code> as I thought. </p>
",""
"40759461","react.js get child value in parent component","0","<p>I have a parent Component [MainLayout] that has a child [ListItems] and that has multiple children [ListItem].</p>

<p>How can I get the value of the clicked child [ListItem] in the [MainLayout] component?</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/* index.js */

import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { Router, Route, Link, IndexRoute } from 'react-router'
import ListItems from './components/listitems';

class MainLayout extends Component {
    constructor(props) {
        super(props);

        this.state = {
            items: [],
            selectedItem: null
        };

        this.getTracks = this.getTracks.bind(this);

        this.listItemClicked = this.listItemClicked.bind(this);

        this.getTracks();

    }

    listItemClicked(item) {
        console.log(item);
    }

    getTracks() {

fetch('https://api.spotify.com/v1/search?q=newman&amp;type=track&amp;market=US')
                .then((response) =&gt; response.json())
                .then((responseJson) =&gt; {
                    this.setState({items: responseJson.tracks.items});
                    console.log(responseJson);
                    return responseJson;
                });
    }

    render() {
        return (
            &lt;div&gt;
                {this.props.children &amp;&amp; React.cloneElement(this.props.children, {
                    items: this.state.items,
                    onListItemClicked: this.listItemClicked
                })}
            &lt;/div&gt;
        );
    }
}

class App extends Component {
  constructor(props) {
    super(props);
  }

  render() {

    return (
        &lt;div&gt;
            &lt;ListItems onListItemClick={this.props.onListItemClicked} items={this.props.items} /&gt;
        &lt;/div&gt;
    );
  }

}


/* listitems.js */

import React, {Component} from 'react';
import ListItem from './listitem';

const ListItems = (props) =&gt; {

    const allitems = props.items.map((item) =&gt; {
        return (
            &lt;ListItem onListItemClick={props.onListItemClick} item={item} key={item.id} /&gt;
        )
    });


        return (
            &lt;ul className=""list-group""&gt;
                {allitems}
            &lt;/ul&gt;
        );


}
export default ListItems;

/* listitem.js */

import React, {Component} from 'react';

class ListItem extends Component {

    constructor (props) {
        super(props);
    }

    render() {
        return (
            &lt;div className=""""&gt;
                &lt;h4 onClick={this.props.onListItemClick}&gt;{this.props.item.album.artists['0'].name} - {this.props.item.name}&lt;/h4&gt;
            &lt;/div&gt;
        );
    }

}
export default ListItem;</code></pre>
</div>
</div>
</p>

<p>Thanks for the answers!</p>
",""
"40845869","cotentful api map content types to components in reactjs","3","<p>I am using contentful api to get content for a news-article and the body contains diffrent fields like question and answer. I use the api to get the content as json and i get the body as an array of objects.</p>

<pre><code>      ""body"": [
      {
        ""question"": ""what's up?""
      },
      {
        ""answer"": ""good good""
      }
    ],
</code></pre>

<p>I'm wondering if could map each field in the body array to different react component and pass the right props to that component?</p>

<pre><code>&lt;div {...other}&gt;
   {items.map((item, key) =&gt; (
     React.cloneElement(children, {
       key,
       ...item,
     })
   ))}
&lt;/div&gt;
</code></pre>
","Yes, you can. What have you tried so far? Check out https://facebook.github.io/react/docs/components-and-props.html for more info on components and properties."
"40845869","cotentful api map content types to components in reactjs","3","<p>I am using contentful api to get content for a news-article and the body contains diffrent fields like question and answer. I use the api to get the content as json and i get the body as an array of objects.</p>

<pre><code>      ""body"": [
      {
        ""question"": ""what's up?""
      },
      {
        ""answer"": ""good good""
      }
    ],
</code></pre>

<p>I'm wondering if could map each field in the body array to different react component and pass the right props to that component?</p>

<pre><code>&lt;div {...other}&gt;
   {items.map((item, key) =&gt; (
     React.cloneElement(children, {
       key,
       ...item,
     })
   ))}
&lt;/div&gt;
</code></pre>
","I suggest you add some code to your question to make it more clear what you have tried and what you are trying to achieve. I don't quite understand what you mean by ""An array of different elements"" and ""p with certain styling""."
"40845869","cotentful api map content types to components in reactjs","3","<p>I am using contentful api to get content for a news-article and the body contains diffrent fields like question and answer. I use the api to get the content as json and i get the body as an array of objects.</p>

<pre><code>      ""body"": [
      {
        ""question"": ""what's up?""
      },
      {
        ""answer"": ""good good""
      }
    ],
</code></pre>

<p>I'm wondering if could map each field in the body array to different react component and pass the right props to that component?</p>

<pre><code>&lt;div {...other}&gt;
   {items.map((item, key) =&gt; (
     React.cloneElement(children, {
       key,
       ...item,
     })
   ))}
&lt;/div&gt;
</code></pre>
","i have tried mapping then over the problem is i don't know what the article-body will contain. body array is like a array of different elements so question would a p with certain styling and the same would be for answer"
"41072564","How to use layout components in react.js with react-router","6","<p>I am working on my first react application with redux and react-router( also using react-router-redux). I want a way to present two different layouts; one layout when the user has not signed in and another when the user has signed in.</p>

<p>Please I would like to know how to fix this in my code or how to achieve the expected result otherwise.</p>

<p>Below is what I have tried:</p>

<ul>
<li><p>Created the root component App.js that reads the value from the state of the store to know if the user is logged in.</p>

<pre><code>import React, { Component } from 'react'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'

//Import Components
import Main from '../components/Main'

//Import necessary actions
import * as loginActions_ from '../actions/login'

const mapStateToProps = (state) =&gt; {
  return {
    loginStatus: state.loginStatus
  }
}

const mapDispatchToProps = (dispatch) =&gt; {
  const loginActions = bindActionCreators (loginActions_, dispatch)
    return {
      loginActions
    }
}

export default connect(mapStateToProps, mapDispatchToProps)(Main)
</code></pre></li>
<li><p>Created  a presentation(Main.js)  component that uses the loginStatus to render the appropriate layout. </p>

<pre><code>import React, { Component } from 'react'

import { Container } from 'semantic-ui-react'

import MainLayoutOut  from './MainLayoutOut'
import MainLayoutIn  from './MainLayoutIn'

export default class Main extends Component {
   constructor(props){
     super(props)
   }
   render(){
        const child = (this.props.loginStatus? &lt;MainLayoutIn loginStatus={this.props.loginStatus} loginActions={this.props.loginActions} /&gt;
                      : &lt;MainLayoutOut loginStatus={this.props.loginStatus} loginActions= {this.props.loginActions} /&gt; )
     return(
       &lt;Container&gt;
          {child}
       &lt;/Container&gt;
      )
   }
 }
</code></pre></li>
<li><p>The MainLayoutOut.js which renders it's own Menu, Content(the children) and a footer.</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment } from 'semantic-ui-react'

import Footer from './Footer'
import MenuOut from './MenuOut'

export default class MainLayoutOut extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container fluid&gt;
        &lt;MenuOut/&gt;
        &lt;Segment key='contentOut'&gt;
           {React.cloneElement(this.props.children, this.props)}
        &lt;/Segment&gt;
        &lt;Footer/&gt;
      &lt;/Container&gt;
     )
   }
  }
</code></pre></li>
<li><p>Similarly, the MainLayoutIn.js has the structure below:</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment, Header} from 'semantic-ui-react'

export default class MainLayoutIn extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container&gt;
         &lt;Segment key='menuIn'&gt;Header In&lt;/Segment&gt;
         &lt;Segment key='contentIn'&gt;
         &lt;Header as='h1'&gt;Content In&lt;/Header&gt;
           {/*this.props.children*/}
          &lt;/Segment&gt;
         &lt;Segment key='footerIn'&gt;FooterIn&lt;/Segment&gt;
       &lt;/Container&gt;
     )
   }
 }
</code></pre></li>
<li><p>Below is how I created the store.</p>

<pre><code>import { applyMiddleware, createStore } from 'redux'
import createLogger from 'redux-logger'
import ReduxThunk from 'redux-thunk'

import initialState from '../initialState'
import rootReducer from '../reducers'

const logger = createLogger()
const middlewares = [ReduxThunk, logger]

export default function configureStore(initialStateParam = initialState){
    return createStore(rootReducer, {}, applyMiddleware(...middlewares));
}
</code></pre></li>
<li><p>The reducers the root-reducers; reducers/index.js</p>

<pre><code>  import { combineReducers } from 'redux'
  import { routerReducer } from 'react-router-redux'

  import loginStatus from './loginStatus'

  const rootReducer = combineReducers({
    routing: routerReducer,
    loginStatus
  })

 export default rootReducer 
</code></pre>

<p>and the loginStatus reducer for now is like:</p>

<pre><code> export default function loginStatus(state = false, action){
    console.log('Login Status fired!')
    return state
 }
</code></pre></li>
<li><p>Lastly the client.js file that sets up the application.</p>

<pre><code>  import React from 'react'
  import { render } from 'react-dom'
  import { Provider } from 'react-redux'

  import { syncHistoryWithStore } from 'react-router-redux'
  import { Router, Route, IndexRoute, browserHistory } from 'react-router'

  import configureStore from '../src/store/configureStore'

  import App from '../src/containers/App'
  import Main from '../src/components/Main'
  import MainLayoutIn from '../src/components/MainLayoutIn'
  import MainLayoutOut from '../src/components/MainLayoutOut'
  import Blog from '../src/components/Blog'
  import SignUp from '../src/components/SignUp'
  import Login from '../src/components/Login'

  const store = configureStore()
  const history = syncHistoryWithStore(browserHistory, store)

  const router = (
    &lt;Provider store={store}&gt;
      &lt;Router history={history}&gt;
        &lt;Route path='/' component={App}&gt;
          &lt;Route path='/' component={Main}&gt;
            &lt;Route path='/' component={MainLayoutOut}&gt;
             &lt;IndexRoute component={Blog}&gt;&lt;/IndexRoute&gt;
             &lt;Route path='/login' component={Login}/&gt;
            &lt;Route path='/signup' component={SignUp}/&gt;
          &lt;/Route&gt;
          &lt;Route path='/' component={MainLayoutIn}&gt;

          &lt;/Route&gt;
        &lt;/Route&gt;
     &lt;/Route&gt;
   &lt;/Router&gt;
 &lt;/Provider&gt;
 )
 render( router ,document.getElementById('app'))
</code></pre></li>
</ul>

<p>The client.js file is to route the components of the app. I want that when a user login he should land on a page(the purpose MainLayoutOut.js) having a menu (with menu-items to access a list of blogs, sign up, and login) a content and footer. But when the user authenticates and is authorized he is suppose to see completely different layout (the purpose of MainLayoutIn.js) with its own Menu, content, and footer.</p>

<p>Running the above code yields the error message: </p>

<pre><code>   Uncaught TypeError: Cannot read property 'props' of undefined
   at Object.ReactElement.cloneElement    (http://localhost:3000/bundle.js:6362:35)
   at Object.cloneElement (http://localhost:3000/bundle.js:23625:49)
   at MainLayoutOut.render (http://localhost:3000/bundle.js:17164:28)
   at MainLayoutOut.tryRender (http://localhost:3000/bundle.js:3912:32)
   at MainLayoutOut.proxiedMethod (http://localhost:3000/bundle.js:52020:31)
   at http://localhost:3000/bundle.js:44855:22
   at measureLifeCyclePerf (http://localhost:3000/bundle.js:44134:13)
   at     ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (http://localhost:3000/bundle.js:44854:26)
   at ReactCompositeComponentWrapper._renderValidatedComponent (http://localhost:3000/bundle.js:44881:33)
   at ReactCompositeComponentWrapper.performInitialMount (http://localhost:3000/bundle.js:44421:31) 
</code></pre>
","No @Mayank Shukla :("
"41072564","How to use layout components in react.js with react-router","6","<p>I am working on my first react application with redux and react-router( also using react-router-redux). I want a way to present two different layouts; one layout when the user has not signed in and another when the user has signed in.</p>

<p>Please I would like to know how to fix this in my code or how to achieve the expected result otherwise.</p>

<p>Below is what I have tried:</p>

<ul>
<li><p>Created the root component App.js that reads the value from the state of the store to know if the user is logged in.</p>

<pre><code>import React, { Component } from 'react'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'

//Import Components
import Main from '../components/Main'

//Import necessary actions
import * as loginActions_ from '../actions/login'

const mapStateToProps = (state) =&gt; {
  return {
    loginStatus: state.loginStatus
  }
}

const mapDispatchToProps = (dispatch) =&gt; {
  const loginActions = bindActionCreators (loginActions_, dispatch)
    return {
      loginActions
    }
}

export default connect(mapStateToProps, mapDispatchToProps)(Main)
</code></pre></li>
<li><p>Created  a presentation(Main.js)  component that uses the loginStatus to render the appropriate layout. </p>

<pre><code>import React, { Component } from 'react'

import { Container } from 'semantic-ui-react'

import MainLayoutOut  from './MainLayoutOut'
import MainLayoutIn  from './MainLayoutIn'

export default class Main extends Component {
   constructor(props){
     super(props)
   }
   render(){
        const child = (this.props.loginStatus? &lt;MainLayoutIn loginStatus={this.props.loginStatus} loginActions={this.props.loginActions} /&gt;
                      : &lt;MainLayoutOut loginStatus={this.props.loginStatus} loginActions= {this.props.loginActions} /&gt; )
     return(
       &lt;Container&gt;
          {child}
       &lt;/Container&gt;
      )
   }
 }
</code></pre></li>
<li><p>The MainLayoutOut.js which renders it's own Menu, Content(the children) and a footer.</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment } from 'semantic-ui-react'

import Footer from './Footer'
import MenuOut from './MenuOut'

export default class MainLayoutOut extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container fluid&gt;
        &lt;MenuOut/&gt;
        &lt;Segment key='contentOut'&gt;
           {React.cloneElement(this.props.children, this.props)}
        &lt;/Segment&gt;
        &lt;Footer/&gt;
      &lt;/Container&gt;
     )
   }
  }
</code></pre></li>
<li><p>Similarly, the MainLayoutIn.js has the structure below:</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment, Header} from 'semantic-ui-react'

export default class MainLayoutIn extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container&gt;
         &lt;Segment key='menuIn'&gt;Header In&lt;/Segment&gt;
         &lt;Segment key='contentIn'&gt;
         &lt;Header as='h1'&gt;Content In&lt;/Header&gt;
           {/*this.props.children*/}
          &lt;/Segment&gt;
         &lt;Segment key='footerIn'&gt;FooterIn&lt;/Segment&gt;
       &lt;/Container&gt;
     )
   }
 }
</code></pre></li>
<li><p>Below is how I created the store.</p>

<pre><code>import { applyMiddleware, createStore } from 'redux'
import createLogger from 'redux-logger'
import ReduxThunk from 'redux-thunk'

import initialState from '../initialState'
import rootReducer from '../reducers'

const logger = createLogger()
const middlewares = [ReduxThunk, logger]

export default function configureStore(initialStateParam = initialState){
    return createStore(rootReducer, {}, applyMiddleware(...middlewares));
}
</code></pre></li>
<li><p>The reducers the root-reducers; reducers/index.js</p>

<pre><code>  import { combineReducers } from 'redux'
  import { routerReducer } from 'react-router-redux'

  import loginStatus from './loginStatus'

  const rootReducer = combineReducers({
    routing: routerReducer,
    loginStatus
  })

 export default rootReducer 
</code></pre>

<p>and the loginStatus reducer for now is like:</p>

<pre><code> export default function loginStatus(state = false, action){
    console.log('Login Status fired!')
    return state
 }
</code></pre></li>
<li><p>Lastly the client.js file that sets up the application.</p>

<pre><code>  import React from 'react'
  import { render } from 'react-dom'
  import { Provider } from 'react-redux'

  import { syncHistoryWithStore } from 'react-router-redux'
  import { Router, Route, IndexRoute, browserHistory } from 'react-router'

  import configureStore from '../src/store/configureStore'

  import App from '../src/containers/App'
  import Main from '../src/components/Main'
  import MainLayoutIn from '../src/components/MainLayoutIn'
  import MainLayoutOut from '../src/components/MainLayoutOut'
  import Blog from '../src/components/Blog'
  import SignUp from '../src/components/SignUp'
  import Login from '../src/components/Login'

  const store = configureStore()
  const history = syncHistoryWithStore(browserHistory, store)

  const router = (
    &lt;Provider store={store}&gt;
      &lt;Router history={history}&gt;
        &lt;Route path='/' component={App}&gt;
          &lt;Route path='/' component={Main}&gt;
            &lt;Route path='/' component={MainLayoutOut}&gt;
             &lt;IndexRoute component={Blog}&gt;&lt;/IndexRoute&gt;
             &lt;Route path='/login' component={Login}/&gt;
            &lt;Route path='/signup' component={SignUp}/&gt;
          &lt;/Route&gt;
          &lt;Route path='/' component={MainLayoutIn}&gt;

          &lt;/Route&gt;
        &lt;/Route&gt;
     &lt;/Route&gt;
   &lt;/Router&gt;
 &lt;/Provider&gt;
 )
 render( router ,document.getElementById('app'))
</code></pre></li>
</ul>

<p>The client.js file is to route the components of the app. I want that when a user login he should land on a page(the purpose MainLayoutOut.js) having a menu (with menu-items to access a list of blogs, sign up, and login) a content and footer. But when the user authenticates and is authorized he is suppose to see completely different layout (the purpose of MainLayoutIn.js) with its own Menu, content, and footer.</p>

<p>Running the above code yields the error message: </p>

<pre><code>   Uncaught TypeError: Cannot read property 'props' of undefined
   at Object.ReactElement.cloneElement    (http://localhost:3000/bundle.js:6362:35)
   at Object.cloneElement (http://localhost:3000/bundle.js:23625:49)
   at MainLayoutOut.render (http://localhost:3000/bundle.js:17164:28)
   at MainLayoutOut.tryRender (http://localhost:3000/bundle.js:3912:32)
   at MainLayoutOut.proxiedMethod (http://localhost:3000/bundle.js:52020:31)
   at http://localhost:3000/bundle.js:44855:22
   at measureLifeCyclePerf (http://localhost:3000/bundle.js:44134:13)
   at     ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (http://localhost:3000/bundle.js:44854:26)
   at ReactCompositeComponentWrapper._renderValidatedComponent (http://localhost:3000/bundle.js:44881:33)
   at ReactCompositeComponentWrapper.performInitialMount (http://localhost:3000/bundle.js:44421:31) 
</code></pre>
","You are passing props by ""loginStatus"" key in main component and accessing by this.props.children in MainLayoutIn and MainLayoutOut component, change that to this.props.loginStatus, and  put the console in main and log_in, log_out component to check props values are proper or not."
"41072564","How to use layout components in react.js with react-router","6","<p>I am working on my first react application with redux and react-router( also using react-router-redux). I want a way to present two different layouts; one layout when the user has not signed in and another when the user has signed in.</p>

<p>Please I would like to know how to fix this in my code or how to achieve the expected result otherwise.</p>

<p>Below is what I have tried:</p>

<ul>
<li><p>Created the root component App.js that reads the value from the state of the store to know if the user is logged in.</p>

<pre><code>import React, { Component } from 'react'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'

//Import Components
import Main from '../components/Main'

//Import necessary actions
import * as loginActions_ from '../actions/login'

const mapStateToProps = (state) =&gt; {
  return {
    loginStatus: state.loginStatus
  }
}

const mapDispatchToProps = (dispatch) =&gt; {
  const loginActions = bindActionCreators (loginActions_, dispatch)
    return {
      loginActions
    }
}

export default connect(mapStateToProps, mapDispatchToProps)(Main)
</code></pre></li>
<li><p>Created  a presentation(Main.js)  component that uses the loginStatus to render the appropriate layout. </p>

<pre><code>import React, { Component } from 'react'

import { Container } from 'semantic-ui-react'

import MainLayoutOut  from './MainLayoutOut'
import MainLayoutIn  from './MainLayoutIn'

export default class Main extends Component {
   constructor(props){
     super(props)
   }
   render(){
        const child = (this.props.loginStatus? &lt;MainLayoutIn loginStatus={this.props.loginStatus} loginActions={this.props.loginActions} /&gt;
                      : &lt;MainLayoutOut loginStatus={this.props.loginStatus} loginActions= {this.props.loginActions} /&gt; )
     return(
       &lt;Container&gt;
          {child}
       &lt;/Container&gt;
      )
   }
 }
</code></pre></li>
<li><p>The MainLayoutOut.js which renders it's own Menu, Content(the children) and a footer.</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment } from 'semantic-ui-react'

import Footer from './Footer'
import MenuOut from './MenuOut'

export default class MainLayoutOut extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container fluid&gt;
        &lt;MenuOut/&gt;
        &lt;Segment key='contentOut'&gt;
           {React.cloneElement(this.props.children, this.props)}
        &lt;/Segment&gt;
        &lt;Footer/&gt;
      &lt;/Container&gt;
     )
   }
  }
</code></pre></li>
<li><p>Similarly, the MainLayoutIn.js has the structure below:</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment, Header} from 'semantic-ui-react'

export default class MainLayoutIn extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container&gt;
         &lt;Segment key='menuIn'&gt;Header In&lt;/Segment&gt;
         &lt;Segment key='contentIn'&gt;
         &lt;Header as='h1'&gt;Content In&lt;/Header&gt;
           {/*this.props.children*/}
          &lt;/Segment&gt;
         &lt;Segment key='footerIn'&gt;FooterIn&lt;/Segment&gt;
       &lt;/Container&gt;
     )
   }
 }
</code></pre></li>
<li><p>Below is how I created the store.</p>

<pre><code>import { applyMiddleware, createStore } from 'redux'
import createLogger from 'redux-logger'
import ReduxThunk from 'redux-thunk'

import initialState from '../initialState'
import rootReducer from '../reducers'

const logger = createLogger()
const middlewares = [ReduxThunk, logger]

export default function configureStore(initialStateParam = initialState){
    return createStore(rootReducer, {}, applyMiddleware(...middlewares));
}
</code></pre></li>
<li><p>The reducers the root-reducers; reducers/index.js</p>

<pre><code>  import { combineReducers } from 'redux'
  import { routerReducer } from 'react-router-redux'

  import loginStatus from './loginStatus'

  const rootReducer = combineReducers({
    routing: routerReducer,
    loginStatus
  })

 export default rootReducer 
</code></pre>

<p>and the loginStatus reducer for now is like:</p>

<pre><code> export default function loginStatus(state = false, action){
    console.log('Login Status fired!')
    return state
 }
</code></pre></li>
<li><p>Lastly the client.js file that sets up the application.</p>

<pre><code>  import React from 'react'
  import { render } from 'react-dom'
  import { Provider } from 'react-redux'

  import { syncHistoryWithStore } from 'react-router-redux'
  import { Router, Route, IndexRoute, browserHistory } from 'react-router'

  import configureStore from '../src/store/configureStore'

  import App from '../src/containers/App'
  import Main from '../src/components/Main'
  import MainLayoutIn from '../src/components/MainLayoutIn'
  import MainLayoutOut from '../src/components/MainLayoutOut'
  import Blog from '../src/components/Blog'
  import SignUp from '../src/components/SignUp'
  import Login from '../src/components/Login'

  const store = configureStore()
  const history = syncHistoryWithStore(browserHistory, store)

  const router = (
    &lt;Provider store={store}&gt;
      &lt;Router history={history}&gt;
        &lt;Route path='/' component={App}&gt;
          &lt;Route path='/' component={Main}&gt;
            &lt;Route path='/' component={MainLayoutOut}&gt;
             &lt;IndexRoute component={Blog}&gt;&lt;/IndexRoute&gt;
             &lt;Route path='/login' component={Login}/&gt;
            &lt;Route path='/signup' component={SignUp}/&gt;
          &lt;/Route&gt;
          &lt;Route path='/' component={MainLayoutIn}&gt;

          &lt;/Route&gt;
        &lt;/Route&gt;
     &lt;/Route&gt;
   &lt;/Router&gt;
 &lt;/Provider&gt;
 )
 render( router ,document.getElementById('app'))
</code></pre></li>
</ul>

<p>The client.js file is to route the components of the app. I want that when a user login he should land on a page(the purpose MainLayoutOut.js) having a menu (with menu-items to access a list of blogs, sign up, and login) a content and footer. But when the user authenticates and is authorized he is suppose to see completely different layout (the purpose of MainLayoutIn.js) with its own Menu, content, and footer.</p>

<p>Running the above code yields the error message: </p>

<pre><code>   Uncaught TypeError: Cannot read property 'props' of undefined
   at Object.ReactElement.cloneElement    (http://localhost:3000/bundle.js:6362:35)
   at Object.cloneElement (http://localhost:3000/bundle.js:23625:49)
   at MainLayoutOut.render (http://localhost:3000/bundle.js:17164:28)
   at MainLayoutOut.tryRender (http://localhost:3000/bundle.js:3912:32)
   at MainLayoutOut.proxiedMethod (http://localhost:3000/bundle.js:52020:31)
   at http://localhost:3000/bundle.js:44855:22
   at measureLifeCyclePerf (http://localhost:3000/bundle.js:44134:13)
   at     ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (http://localhost:3000/bundle.js:44854:26)
   at ReactCompositeComponentWrapper._renderValidatedComponent (http://localhost:3000/bundle.js:44881:33)
   at ReactCompositeComponentWrapper.performInitialMount (http://localhost:3000/bundle.js:44421:31) 
</code></pre>
","In the TypeError trace above it's from the MainLayoutOut.render function"
"41072564","How to use layout components in react.js with react-router","6","<p>I am working on my first react application with redux and react-router( also using react-router-redux). I want a way to present two different layouts; one layout when the user has not signed in and another when the user has signed in.</p>

<p>Please I would like to know how to fix this in my code or how to achieve the expected result otherwise.</p>

<p>Below is what I have tried:</p>

<ul>
<li><p>Created the root component App.js that reads the value from the state of the store to know if the user is logged in.</p>

<pre><code>import React, { Component } from 'react'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'

//Import Components
import Main from '../components/Main'

//Import necessary actions
import * as loginActions_ from '../actions/login'

const mapStateToProps = (state) =&gt; {
  return {
    loginStatus: state.loginStatus
  }
}

const mapDispatchToProps = (dispatch) =&gt; {
  const loginActions = bindActionCreators (loginActions_, dispatch)
    return {
      loginActions
    }
}

export default connect(mapStateToProps, mapDispatchToProps)(Main)
</code></pre></li>
<li><p>Created  a presentation(Main.js)  component that uses the loginStatus to render the appropriate layout. </p>

<pre><code>import React, { Component } from 'react'

import { Container } from 'semantic-ui-react'

import MainLayoutOut  from './MainLayoutOut'
import MainLayoutIn  from './MainLayoutIn'

export default class Main extends Component {
   constructor(props){
     super(props)
   }
   render(){
        const child = (this.props.loginStatus? &lt;MainLayoutIn loginStatus={this.props.loginStatus} loginActions={this.props.loginActions} /&gt;
                      : &lt;MainLayoutOut loginStatus={this.props.loginStatus} loginActions= {this.props.loginActions} /&gt; )
     return(
       &lt;Container&gt;
          {child}
       &lt;/Container&gt;
      )
   }
 }
</code></pre></li>
<li><p>The MainLayoutOut.js which renders it's own Menu, Content(the children) and a footer.</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment } from 'semantic-ui-react'

import Footer from './Footer'
import MenuOut from './MenuOut'

export default class MainLayoutOut extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container fluid&gt;
        &lt;MenuOut/&gt;
        &lt;Segment key='contentOut'&gt;
           {React.cloneElement(this.props.children, this.props)}
        &lt;/Segment&gt;
        &lt;Footer/&gt;
      &lt;/Container&gt;
     )
   }
  }
</code></pre></li>
<li><p>Similarly, the MainLayoutIn.js has the structure below:</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment, Header} from 'semantic-ui-react'

export default class MainLayoutIn extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container&gt;
         &lt;Segment key='menuIn'&gt;Header In&lt;/Segment&gt;
         &lt;Segment key='contentIn'&gt;
         &lt;Header as='h1'&gt;Content In&lt;/Header&gt;
           {/*this.props.children*/}
          &lt;/Segment&gt;
         &lt;Segment key='footerIn'&gt;FooterIn&lt;/Segment&gt;
       &lt;/Container&gt;
     )
   }
 }
</code></pre></li>
<li><p>Below is how I created the store.</p>

<pre><code>import { applyMiddleware, createStore } from 'redux'
import createLogger from 'redux-logger'
import ReduxThunk from 'redux-thunk'

import initialState from '../initialState'
import rootReducer from '../reducers'

const logger = createLogger()
const middlewares = [ReduxThunk, logger]

export default function configureStore(initialStateParam = initialState){
    return createStore(rootReducer, {}, applyMiddleware(...middlewares));
}
</code></pre></li>
<li><p>The reducers the root-reducers; reducers/index.js</p>

<pre><code>  import { combineReducers } from 'redux'
  import { routerReducer } from 'react-router-redux'

  import loginStatus from './loginStatus'

  const rootReducer = combineReducers({
    routing: routerReducer,
    loginStatus
  })

 export default rootReducer 
</code></pre>

<p>and the loginStatus reducer for now is like:</p>

<pre><code> export default function loginStatus(state = false, action){
    console.log('Login Status fired!')
    return state
 }
</code></pre></li>
<li><p>Lastly the client.js file that sets up the application.</p>

<pre><code>  import React from 'react'
  import { render } from 'react-dom'
  import { Provider } from 'react-redux'

  import { syncHistoryWithStore } from 'react-router-redux'
  import { Router, Route, IndexRoute, browserHistory } from 'react-router'

  import configureStore from '../src/store/configureStore'

  import App from '../src/containers/App'
  import Main from '../src/components/Main'
  import MainLayoutIn from '../src/components/MainLayoutIn'
  import MainLayoutOut from '../src/components/MainLayoutOut'
  import Blog from '../src/components/Blog'
  import SignUp from '../src/components/SignUp'
  import Login from '../src/components/Login'

  const store = configureStore()
  const history = syncHistoryWithStore(browserHistory, store)

  const router = (
    &lt;Provider store={store}&gt;
      &lt;Router history={history}&gt;
        &lt;Route path='/' component={App}&gt;
          &lt;Route path='/' component={Main}&gt;
            &lt;Route path='/' component={MainLayoutOut}&gt;
             &lt;IndexRoute component={Blog}&gt;&lt;/IndexRoute&gt;
             &lt;Route path='/login' component={Login}/&gt;
            &lt;Route path='/signup' component={SignUp}/&gt;
          &lt;/Route&gt;
          &lt;Route path='/' component={MainLayoutIn}&gt;

          &lt;/Route&gt;
        &lt;/Route&gt;
     &lt;/Route&gt;
   &lt;/Router&gt;
 &lt;/Provider&gt;
 )
 render( router ,document.getElementById('app'))
</code></pre></li>
</ul>

<p>The client.js file is to route the components of the app. I want that when a user login he should land on a page(the purpose MainLayoutOut.js) having a menu (with menu-items to access a list of blogs, sign up, and login) a content and footer. But when the user authenticates and is authorized he is suppose to see completely different layout (the purpose of MainLayoutIn.js) with its own Menu, content, and footer.</p>

<p>Running the above code yields the error message: </p>

<pre><code>   Uncaught TypeError: Cannot read property 'props' of undefined
   at Object.ReactElement.cloneElement    (http://localhost:3000/bundle.js:6362:35)
   at Object.cloneElement (http://localhost:3000/bundle.js:23625:49)
   at MainLayoutOut.render (http://localhost:3000/bundle.js:17164:28)
   at MainLayoutOut.tryRender (http://localhost:3000/bundle.js:3912:32)
   at MainLayoutOut.proxiedMethod (http://localhost:3000/bundle.js:52020:31)
   at http://localhost:3000/bundle.js:44855:22
   at measureLifeCyclePerf (http://localhost:3000/bundle.js:44134:13)
   at     ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (http://localhost:3000/bundle.js:44854:26)
   at ReactCompositeComponentWrapper._renderValidatedComponent (http://localhost:3000/bundle.js:44881:33)
   at ReactCompositeComponentWrapper.performInitialMount (http://localhost:3000/bundle.js:44421:31) 
</code></pre>
","This is a good amount of code... can you point out which component is returning undefined props to help narrow this down? You should be able to get a better idea through the console inspector."
"41072564","How to use layout components in react.js with react-router","6","<p>I am working on my first react application with redux and react-router( also using react-router-redux). I want a way to present two different layouts; one layout when the user has not signed in and another when the user has signed in.</p>

<p>Please I would like to know how to fix this in my code or how to achieve the expected result otherwise.</p>

<p>Below is what I have tried:</p>

<ul>
<li><p>Created the root component App.js that reads the value from the state of the store to know if the user is logged in.</p>

<pre><code>import React, { Component } from 'react'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'

//Import Components
import Main from '../components/Main'

//Import necessary actions
import * as loginActions_ from '../actions/login'

const mapStateToProps = (state) =&gt; {
  return {
    loginStatus: state.loginStatus
  }
}

const mapDispatchToProps = (dispatch) =&gt; {
  const loginActions = bindActionCreators (loginActions_, dispatch)
    return {
      loginActions
    }
}

export default connect(mapStateToProps, mapDispatchToProps)(Main)
</code></pre></li>
<li><p>Created  a presentation(Main.js)  component that uses the loginStatus to render the appropriate layout. </p>

<pre><code>import React, { Component } from 'react'

import { Container } from 'semantic-ui-react'

import MainLayoutOut  from './MainLayoutOut'
import MainLayoutIn  from './MainLayoutIn'

export default class Main extends Component {
   constructor(props){
     super(props)
   }
   render(){
        const child = (this.props.loginStatus? &lt;MainLayoutIn loginStatus={this.props.loginStatus} loginActions={this.props.loginActions} /&gt;
                      : &lt;MainLayoutOut loginStatus={this.props.loginStatus} loginActions= {this.props.loginActions} /&gt; )
     return(
       &lt;Container&gt;
          {child}
       &lt;/Container&gt;
      )
   }
 }
</code></pre></li>
<li><p>The MainLayoutOut.js which renders it's own Menu, Content(the children) and a footer.</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment } from 'semantic-ui-react'

import Footer from './Footer'
import MenuOut from './MenuOut'

export default class MainLayoutOut extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container fluid&gt;
        &lt;MenuOut/&gt;
        &lt;Segment key='contentOut'&gt;
           {React.cloneElement(this.props.children, this.props)}
        &lt;/Segment&gt;
        &lt;Footer/&gt;
      &lt;/Container&gt;
     )
   }
  }
</code></pre></li>
<li><p>Similarly, the MainLayoutIn.js has the structure below:</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment, Header} from 'semantic-ui-react'

export default class MainLayoutIn extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container&gt;
         &lt;Segment key='menuIn'&gt;Header In&lt;/Segment&gt;
         &lt;Segment key='contentIn'&gt;
         &lt;Header as='h1'&gt;Content In&lt;/Header&gt;
           {/*this.props.children*/}
          &lt;/Segment&gt;
         &lt;Segment key='footerIn'&gt;FooterIn&lt;/Segment&gt;
       &lt;/Container&gt;
     )
   }
 }
</code></pre></li>
<li><p>Below is how I created the store.</p>

<pre><code>import { applyMiddleware, createStore } from 'redux'
import createLogger from 'redux-logger'
import ReduxThunk from 'redux-thunk'

import initialState from '../initialState'
import rootReducer from '../reducers'

const logger = createLogger()
const middlewares = [ReduxThunk, logger]

export default function configureStore(initialStateParam = initialState){
    return createStore(rootReducer, {}, applyMiddleware(...middlewares));
}
</code></pre></li>
<li><p>The reducers the root-reducers; reducers/index.js</p>

<pre><code>  import { combineReducers } from 'redux'
  import { routerReducer } from 'react-router-redux'

  import loginStatus from './loginStatus'

  const rootReducer = combineReducers({
    routing: routerReducer,
    loginStatus
  })

 export default rootReducer 
</code></pre>

<p>and the loginStatus reducer for now is like:</p>

<pre><code> export default function loginStatus(state = false, action){
    console.log('Login Status fired!')
    return state
 }
</code></pre></li>
<li><p>Lastly the client.js file that sets up the application.</p>

<pre><code>  import React from 'react'
  import { render } from 'react-dom'
  import { Provider } from 'react-redux'

  import { syncHistoryWithStore } from 'react-router-redux'
  import { Router, Route, IndexRoute, browserHistory } from 'react-router'

  import configureStore from '../src/store/configureStore'

  import App from '../src/containers/App'
  import Main from '../src/components/Main'
  import MainLayoutIn from '../src/components/MainLayoutIn'
  import MainLayoutOut from '../src/components/MainLayoutOut'
  import Blog from '../src/components/Blog'
  import SignUp from '../src/components/SignUp'
  import Login from '../src/components/Login'

  const store = configureStore()
  const history = syncHistoryWithStore(browserHistory, store)

  const router = (
    &lt;Provider store={store}&gt;
      &lt;Router history={history}&gt;
        &lt;Route path='/' component={App}&gt;
          &lt;Route path='/' component={Main}&gt;
            &lt;Route path='/' component={MainLayoutOut}&gt;
             &lt;IndexRoute component={Blog}&gt;&lt;/IndexRoute&gt;
             &lt;Route path='/login' component={Login}/&gt;
            &lt;Route path='/signup' component={SignUp}/&gt;
          &lt;/Route&gt;
          &lt;Route path='/' component={MainLayoutIn}&gt;

          &lt;/Route&gt;
        &lt;/Route&gt;
     &lt;/Route&gt;
   &lt;/Router&gt;
 &lt;/Provider&gt;
 )
 render( router ,document.getElementById('app'))
</code></pre></li>
</ul>

<p>The client.js file is to route the components of the app. I want that when a user login he should land on a page(the purpose MainLayoutOut.js) having a menu (with menu-items to access a list of blogs, sign up, and login) a content and footer. But when the user authenticates and is authorized he is suppose to see completely different layout (the purpose of MainLayoutIn.js) with its own Menu, content, and footer.</p>

<p>Running the above code yields the error message: </p>

<pre><code>   Uncaught TypeError: Cannot read property 'props' of undefined
   at Object.ReactElement.cloneElement    (http://localhost:3000/bundle.js:6362:35)
   at Object.cloneElement (http://localhost:3000/bundle.js:23625:49)
   at MainLayoutOut.render (http://localhost:3000/bundle.js:17164:28)
   at MainLayoutOut.tryRender (http://localhost:3000/bundle.js:3912:32)
   at MainLayoutOut.proxiedMethod (http://localhost:3000/bundle.js:52020:31)
   at http://localhost:3000/bundle.js:44855:22
   at measureLifeCyclePerf (http://localhost:3000/bundle.js:44134:13)
   at     ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (http://localhost:3000/bundle.js:44854:26)
   at ReactCompositeComponentWrapper._renderValidatedComponent (http://localhost:3000/bundle.js:44881:33)
   at ReactCompositeComponentWrapper.performInitialMount (http://localhost:3000/bundle.js:44421:31) 
</code></pre>
","Thank you @MayankShukla. But The MainLayoutOut and MainLayoutIn components are to embed other children component as specified in the router of the client.js file. May be I am doing it wrong, that's why I am open to another approach to achieve the expected result."
"41072564","How to use layout components in react.js with react-router","6","<p>I am working on my first react application with redux and react-router( also using react-router-redux). I want a way to present two different layouts; one layout when the user has not signed in and another when the user has signed in.</p>

<p>Please I would like to know how to fix this in my code or how to achieve the expected result otherwise.</p>

<p>Below is what I have tried:</p>

<ul>
<li><p>Created the root component App.js that reads the value from the state of the store to know if the user is logged in.</p>

<pre><code>import React, { Component } from 'react'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'

//Import Components
import Main from '../components/Main'

//Import necessary actions
import * as loginActions_ from '../actions/login'

const mapStateToProps = (state) =&gt; {
  return {
    loginStatus: state.loginStatus
  }
}

const mapDispatchToProps = (dispatch) =&gt; {
  const loginActions = bindActionCreators (loginActions_, dispatch)
    return {
      loginActions
    }
}

export default connect(mapStateToProps, mapDispatchToProps)(Main)
</code></pre></li>
<li><p>Created  a presentation(Main.js)  component that uses the loginStatus to render the appropriate layout. </p>

<pre><code>import React, { Component } from 'react'

import { Container } from 'semantic-ui-react'

import MainLayoutOut  from './MainLayoutOut'
import MainLayoutIn  from './MainLayoutIn'

export default class Main extends Component {
   constructor(props){
     super(props)
   }
   render(){
        const child = (this.props.loginStatus? &lt;MainLayoutIn loginStatus={this.props.loginStatus} loginActions={this.props.loginActions} /&gt;
                      : &lt;MainLayoutOut loginStatus={this.props.loginStatus} loginActions= {this.props.loginActions} /&gt; )
     return(
       &lt;Container&gt;
          {child}
       &lt;/Container&gt;
      )
   }
 }
</code></pre></li>
<li><p>The MainLayoutOut.js which renders it's own Menu, Content(the children) and a footer.</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment } from 'semantic-ui-react'

import Footer from './Footer'
import MenuOut from './MenuOut'

export default class MainLayoutOut extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container fluid&gt;
        &lt;MenuOut/&gt;
        &lt;Segment key='contentOut'&gt;
           {React.cloneElement(this.props.children, this.props)}
        &lt;/Segment&gt;
        &lt;Footer/&gt;
      &lt;/Container&gt;
     )
   }
  }
</code></pre></li>
<li><p>Similarly, the MainLayoutIn.js has the structure below:</p>

<pre><code>import React, {Component} from 'react'
import {Container, Segment, Header} from 'semantic-ui-react'

export default class MainLayoutIn extends Component {
  constructor(props){
    super(props)
  }
  render(){
    return(
      &lt;Container&gt;
         &lt;Segment key='menuIn'&gt;Header In&lt;/Segment&gt;
         &lt;Segment key='contentIn'&gt;
         &lt;Header as='h1'&gt;Content In&lt;/Header&gt;
           {/*this.props.children*/}
          &lt;/Segment&gt;
         &lt;Segment key='footerIn'&gt;FooterIn&lt;/Segment&gt;
       &lt;/Container&gt;
     )
   }
 }
</code></pre></li>
<li><p>Below is how I created the store.</p>

<pre><code>import { applyMiddleware, createStore } from 'redux'
import createLogger from 'redux-logger'
import ReduxThunk from 'redux-thunk'

import initialState from '../initialState'
import rootReducer from '../reducers'

const logger = createLogger()
const middlewares = [ReduxThunk, logger]

export default function configureStore(initialStateParam = initialState){
    return createStore(rootReducer, {}, applyMiddleware(...middlewares));
}
</code></pre></li>
<li><p>The reducers the root-reducers; reducers/index.js</p>

<pre><code>  import { combineReducers } from 'redux'
  import { routerReducer } from 'react-router-redux'

  import loginStatus from './loginStatus'

  const rootReducer = combineReducers({
    routing: routerReducer,
    loginStatus
  })

 export default rootReducer 
</code></pre>

<p>and the loginStatus reducer for now is like:</p>

<pre><code> export default function loginStatus(state = false, action){
    console.log('Login Status fired!')
    return state
 }
</code></pre></li>
<li><p>Lastly the client.js file that sets up the application.</p>

<pre><code>  import React from 'react'
  import { render } from 'react-dom'
  import { Provider } from 'react-redux'

  import { syncHistoryWithStore } from 'react-router-redux'
  import { Router, Route, IndexRoute, browserHistory } from 'react-router'

  import configureStore from '../src/store/configureStore'

  import App from '../src/containers/App'
  import Main from '../src/components/Main'
  import MainLayoutIn from '../src/components/MainLayoutIn'
  import MainLayoutOut from '../src/components/MainLayoutOut'
  import Blog from '../src/components/Blog'
  import SignUp from '../src/components/SignUp'
  import Login from '../src/components/Login'

  const store = configureStore()
  const history = syncHistoryWithStore(browserHistory, store)

  const router = (
    &lt;Provider store={store}&gt;
      &lt;Router history={history}&gt;
        &lt;Route path='/' component={App}&gt;
          &lt;Route path='/' component={Main}&gt;
            &lt;Route path='/' component={MainLayoutOut}&gt;
             &lt;IndexRoute component={Blog}&gt;&lt;/IndexRoute&gt;
             &lt;Route path='/login' component={Login}/&gt;
            &lt;Route path='/signup' component={SignUp}/&gt;
          &lt;/Route&gt;
          &lt;Route path='/' component={MainLayoutIn}&gt;

          &lt;/Route&gt;
        &lt;/Route&gt;
     &lt;/Route&gt;
   &lt;/Router&gt;
 &lt;/Provider&gt;
 )
 render( router ,document.getElementById('app'))
</code></pre></li>
</ul>

<p>The client.js file is to route the components of the app. I want that when a user login he should land on a page(the purpose MainLayoutOut.js) having a menu (with menu-items to access a list of blogs, sign up, and login) a content and footer. But when the user authenticates and is authorized he is suppose to see completely different layout (the purpose of MainLayoutIn.js) with its own Menu, content, and footer.</p>

<p>Running the above code yields the error message: </p>

<pre><code>   Uncaught TypeError: Cannot read property 'props' of undefined
   at Object.ReactElement.cloneElement    (http://localhost:3000/bundle.js:6362:35)
   at Object.cloneElement (http://localhost:3000/bundle.js:23625:49)
   at MainLayoutOut.render (http://localhost:3000/bundle.js:17164:28)
   at MainLayoutOut.tryRender (http://localhost:3000/bundle.js:3912:32)
   at MainLayoutOut.proxiedMethod (http://localhost:3000/bundle.js:52020:31)
   at http://localhost:3000/bundle.js:44855:22
   at measureLifeCyclePerf (http://localhost:3000/bundle.js:44134:13)
   at     ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (http://localhost:3000/bundle.js:44854:26)
   at ReactCompositeComponentWrapper._renderValidatedComponent (http://localhost:3000/bundle.js:44881:33)
   at ReactCompositeComponentWrapper.performInitialMount (http://localhost:3000/bundle.js:44421:31) 
</code></pre>
","ok, your props undefined issue is resolved ??"
"41404232","React TransitionGroup and React.cloneElement do not send updated props","0","<p>I am following Chang Wang's tutorial for making reusable React transitions with HOCs and <code>ReactTransitionGroup</code>(<a href=""https://medium.com/@cheapsteak/animations-with-reacttransitiongroup-4972ad7da286#.9d0ond1lo"" rel=""noreferrer"">Part 1</a> <a href=""https://medium.com/@cheapsteak/reusing-reacttransitiongroup-animations-with-higher-order-components-1e7043451f91#.jxwmzf8l7"" rel=""noreferrer"">Part 2</a>) in conjunction with Huan Ji's tutorial on page transitions (<a href=""https://medium.com/front-end-hacking/react-page-transition-animations-9d18c90a9831#.ielm852rq"" rel=""noreferrer"">Link</a>).</p>

<p>The problem I am facing is that <code>React.cloneElement</code>does not seem to be passing updated props into one of its children, while other children do properly receive updated props.</p>

<h2><strong>First, some code:</strong></h2>

<p><strong>TransitionContainer.js</strong></p>

<p><code>TransitionContainer</code> is a container component that is akin to <code>App</code> in Huan Ji's tutorial. It injects a slice of the state to it's children.</p>

<p>The children of the <code>TransitionGroup</code> are all an instance of an HOC called <code>Transition</code> (code further down)</p>

<pre><code>import React from 'react';
import TransitionGroup from 'react-addons-transition-group';
import {connect} from 'react-redux';
class TransitionContainer extends React.Component{
  render(){
    console.log(this.props.transitionState);
    console.log(""transitionContainer"");
    return(
      &lt;div&gt;
      &lt;TransitionGroup&gt;
      {
        React.Children.map(this.props.children,
         (child) =&gt; React.cloneElement(child,      //These children are all instances of the Transition HOC
           { key: child.props.route.path + ""//"" + child.type.displayName,
             dispatch: this.props.dispatch,
             transitionState: this.props.transitionState
           }
         )
        )
      }

      &lt;/TransitionGroup&gt;
      &lt;/div&gt;
    )
  }
}
export default connect((state)=&gt;({transitionState:state.transitions}),(dispatch)=&gt;({dispatch:dispatch}))(TransitionContainer)
</code></pre>

<p><strong>Transition.js</strong></p>

<p><code>Transition</code> is akin to Chang Wang's HOC. It takes some options, defines the <code>componentWillEnter</code> + <code>componentWillLeave</code> hooks, and wraps a component. <code>TransitionContainer</code> (above) injects <code>props.transitionState</code> into this HOC. However, sometimes the props do not update even if state changes (see <strong>The Problem</strong> below)</p>

<pre><code>import React from 'react';
import getDisplayName from 'react-display-name';
import merge from 'lodash/merge'
import classnames from 'classnames'
import * as actions from './actions/transitions'
export function transition(WrappedComponent, options) {
  return class Transition extends React.Component {
    static displayName = `Transition(${getDisplayName(WrappedComponent)})`;
    constructor(props) {
      super(props);
      this.state = {
          willLeave:false,
          willEnter:false,
          key: options.key
      };
    }
    componentWillMount(){
      this.props.dispatch(actions.registerComponent(this.state.key))
    }
    componentWillUnmount(){
      this.props.dispatch(actions.destroyComponent(this.state.key))
    }
    resetState(){
      this.setState(merge(this.state,{
        willLeave: false,
        willEnter: false
      }));
    }
    doTransition(callback,optionSlice,willLeave,willEnter){
      let {transitionState,dispatch} = this.props;
      if(optionSlice.transitionBegin){
        optionSlice.transitionBegin(transitionState,dispatch)
      }
      if(willLeave){
        dispatch(actions.willLeave(this.state.key))
      }
      else if(willEnter){
        dispatch(actions.willEnter(this.state.key))
      }
      this.setState(merge(this.state,{
        willLeave: willLeave,
        willEnter: willEnter
      }));
      setTimeout(()=&gt;{
        if(optionSlice.transitionComplete){
          optionSlice.transitionEnd(transitionState,dispatch);
        }
        dispatch(actions.transitionComplete(this.state.key))
        this.resetState();
        callback();
      },optionSlice.duration);
    }
    componentWillLeave(callback){
      this.doTransition(callback,options.willLeave,true,false)
    }
    componentWillEnter(callback){
      this.doTransition(callback,options.willEnter,false,true)
    }
    render() {

      console.log(this.props.transitionState);
      console.log(this.state.key);

      var willEnterClasses = options.willEnter.classNames
      var willLeaveClasses = options.willLeave.classNames
      var classes = classnames(
        {[willEnterClasses] : this.state.willEnter},
        {[willLeaveClasses] : this.state.willLeave},
      )
      return &lt;WrappedComponent animationClasses={classes} {...this.props}/&gt;
    }
  }
}
</code></pre>

<p><strong><em>options</em></strong></p>

<p>Options have the following structure: </p>

<pre><code>{
  willEnter:{
    classNames : ""a b c"",
    duration: 1000,
    transitionBegin: (state,dispatch) =&gt; {//some custom logic.},
    transitionEnd: (state,dispatch) =&gt; {//some custom logic.}
         // I currently am not passing anything here, but I hope to make this a library
         // and am adding the feature to cover any use case that may require it.

  },
  willLeave:{
    classNames : ""a b c"",
    duration: 1000,
    transitionBegin: (state,dispatch) =&gt; {//some custom logic.},
    transitionEnd: (state,dispatch) =&gt; {//some custom logic.}

  }
}
</code></pre>

<p><strong><em>Transition Lifecycle (onEnter or onLeave)</em></strong></p>

<ul>
<li>When the component is mounted, <code>actions.registerComponent</code> is dispatched

<ul>
<li><code>componentWillMount</code></li>
</ul></li>
<li>When the component's <code>componentWillLeave</code> or <code>componentWillEnter</code> hook is called, the corresponding slice of the options is sent to <code>doTransition</code></li>
<li>In doTransition:

<ul>
<li>The user supplied transitionBegin function is called (<code>optionSlice.transitionBegin</code>)</li>
<li>The default <code>action.willLeave</code> or <code>action.willEnter</code> is dispatched</li>
<li>A timeout is set for the duration of the animation (<code>optionSlice.duration</code>). When the timeout is complete: 

<ul>
<li>The user supplied transitionEnd function is called (<code>optionSlice.transitionEnd</code>)</li>
<li>The default <code>actions.transitionComplete</code> is dispatched</li>
</ul></li>
</ul></li>
</ul>

<p>Essentially, optionSlice just allows the user to pass in some options. <code>optionSlice.transitionBegin</code> and <code>optionSlice.transitionEnd</code> are just optional functions that are executed while the animation is going, if that suits a use case. I'm not passing anything in currently for my components, but I hope to make this a library soon, so I'm just covering my bases.</p>

<p><strong><em>Why Am I tracking transition states anyway?</em></strong></p>

<p><a href=""https://i.stack.imgur.com/aBmDg.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/aBmDg.png"" alt=""enter image description here""></a></p>

<p>Depending on the element that is entering, the exiting animation changes, and vice versa. </p>

<p>For example, in the image above, when the blue enters, red moves right, and when the blue exits, red moves left.  However when the green enters, red moves left and when the green exits, red moves right. To control this is why I need to know the state of current transitions.</p>

<h2><strong>The Problem:</strong></h2>

<p>The <code>TransitionGroup</code> contains two elements, one entering, one exiting (controlled by react-router). It passes a prop called <code>transitionState</code> to its children. The <code>Transition</code> HOC (children of <code>TransitionGroup</code>) dispatches certain redux actions through the course of an animation. The <code>Transition</code> component that is entering receives the props change as expected, but the component that is exiting is frozen. It's props do not change. </p>

<p>It is always the one that is exiting that does not receive updated props. I have tried switching the wrapped components (exiting and entering), and the issues is not due to the wrapped components.</p>

<h2><strong>Images</strong></h2>

<p><strong>On-Screen Transition:</strong>
<a href=""https://i.stack.imgur.com/pFVaM.gif"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/pFVaM.gif"" alt=""Transition""></a></p>

<p><strong>Transition in React DOM</strong></p>

<p><a href=""https://i.stack.imgur.com/5BAXE.gif"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/5BAXE.gif"" alt=""Transition2""></a></p>

<p>The exiting component Transition(Connect(Home))), in this case, is not receiving updated props.</p>

<p>Any ideas why this is the case? Thanks in advance for all the help.</p>

<p><strong>Update 1:</strong></p>

<pre><code>import React from 'react';
import TransitionGroup from 'react-addons-transition-group';
import {connect} from 'react-redux';
var childFactoryMaker = (transitionState,dispatch) =&gt; (child) =&gt; {
  console.log(child)
  return React.cloneElement(child, {
    key: (child.props.route.path + ""//"" + child.type.displayName),
    transitionState: transitionState,
    dispatch: dispatch
  })
}

class TransitionContainer extends React.Component{
  render(){
    let{
      transitionState,
      dispatch,
      children
    } = this.props
    return(
      &lt;div&gt;
      &lt;TransitionGroup childFactory={childFactoryMaker(transitionState,dispatch)}&gt;
          {
            children
          }
      &lt;/TransitionGroup&gt;
      &lt;/div&gt;
    )
  }
}

export default connect((state)=&gt;({transitionState:state.transitions}),(dispatch)=&gt;({dispatch:dispatch}))(TransitionContainer)
</code></pre>

<p>I've updated my <code>TransitionContainer</code> to the above. Now, the <code>componentWillEnter</code> and <code>componentWillLeave</code> hooks are not being called. I logged the <code>React.cloneElement(child, {...})</code> in the <code>childFactory</code> function, and the hooks (as well as my defined functions like <code>doTransition</code>) are present in the <code>prototype</code> attribute. Only <code>constructor</code>, <code>componentWillMount</code> and <code>componentWillUnmount</code> are called. I suspect this is because the <code>key</code> prop is not being injected through <code>React.cloneElement</code>. <code>transitionState</code> and <code>dispatch</code> are being injected though. </p>

<p><strong>Update 2:</strong></p>

<pre><code>import React from 'react';
import TransitionGroup from 'react-addons-transition-group';
import {connect} from 'react-redux';
var childFactoryMaker = (transitionState,dispatch) =&gt; (child) =&gt; {
  console.log(React.cloneElement(child, {
    transitionState: transitionState,
    dispatch: dispatch
  }));
  return React.cloneElement(child, {
    key: (child.props.route.path + ""//"" + child.type.displayName),
    transitionState: transitionState,
    dispatch: dispatch
  })
}

class TransitionContainer extends React.Component{
  render(){
    let{
      transitionState,
      dispatch,
      children
    } = this.props
    return(
      &lt;div&gt;
      &lt;TransitionGroup childFactory={childFactoryMaker(transitionState,dispatch)}&gt;
      {
        React.Children.map(this.props.children,
            (child) =&gt; React.cloneElement(child,      //These children are all instances of the Transition HOC
                { key: child.props.route.path + ""//"" + child.type.displayName}
            )
        )
      }
      &lt;/TransitionGroup&gt;
      &lt;/div&gt;
    )
  }
}

export default connect((state)=&gt;({transitionState:state.transitions}),(dispatch)=&gt;({dispatch:dispatch}))(TransitionContainer)
</code></pre>

<p>After further inspection of the TransitionGroup source, I realized that I put the key in the wrong place. All is well now. Thanks so much for the help!!</p>
",""
"41476790","How do I write a test for a component that uses React.cloneElement?","3","<p>My top level component takes <code>children</code> from <code>react-router</code> like so:</p>

<pre><code>class App extends Component {
  render() {
    return (
      &lt;div&gt;
         {React.cloneElement(children, this.props.widgets)}
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p>I'm trying to write a simple test with <code>jest</code>, like this:</p>

<pre><code>it('renders without crashing', () =&gt; {
  const div = document.createElement('div')
  ReactDOM.render(&lt;App /&gt;, div)
})
</code></pre>

<p>However, this test fails with the following error:</p>

<pre><code> FAIL  src/App.test.js
  ● renders without crashing

    TypeError: Cannot read property 'props' of undefined

      at Object.&lt;anonymous&gt;.ReactElement.cloneElement (node_modules/react/lib/ReactElement.js:271:34)
      at Object.cloneElement (node_modules/react/lib/ReactElementValidator.js:216:48)
      at App.render (src/App.js:50:57)
      at node_modules/react-dom/lib/ReactCompositeComponent.js:796:21
      at measureLifeCyclePerf (node_modules/react-dom/lib/ReactCompositeComponent.js:75:12)
      at ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (node_modules/react-dom/lib/ReactCompositeComponent.js:795:25)
      at ReactCompositeComponentWrapper._renderValidatedComponent (node_modules/react-dom/lib/ReactCompositeComponent.js:822:32)
      at ReactCompositeComponentWrapper.performInitialMount (node_modules/react-dom/lib/ReactCompositeComponent.js:362:30)
      at ReactCompositeComponentWrapper.mountComponent (node_modules/react-dom/lib/ReactCompositeComponent.js:258:21)
      at Object.mountComponent (node_modules/react-dom/lib/ReactReconciler.js:46:35)
      at ReactCompositeComponentWrapper.performInitialMount (node_modules/react-dom/lib/ReactCompositeComponent.js:371:34)
      at ReactCompositeComponentWrapper.mountComponent (node_modules/react-dom/lib/ReactCompositeComponent.js:258:21)
      at Object.mountComponent (node_modules/react-dom/lib/ReactReconciler.js:46:35)
      at mountComponentIntoNode (node_modules/react-dom/lib/ReactMount.js:104:32)
      at ReactReconcileTransaction.perform (node_modules/react-dom/lib/Transaction.js:140:20)
      at batchedMountComponentIntoNode (node_modules/react-dom/lib/ReactMount.js:126:15)
      at ReactDefaultBatchingStrategyTransaction.perform (node_modules/react-dom/lib/Transaction.js:140:20)
      at Object.batchedUpdates (node_modules/react-dom/lib/ReactDefaultBatchingStrategy.js:62:26)
</code></pre>

<p>Is there a way to mock <code>cloneElement</code>? Or to test the component in such a way that it ignores the call to <code>cloneElement</code>?</p>
","Possible duplicate of [How to test a prop update on React component](http://stackoverflow.com/questions/30614454/how-to-test-a-prop-update-on-react-component)"
"41476790","How do I write a test for a component that uses React.cloneElement?","3","<p>My top level component takes <code>children</code> from <code>react-router</code> like so:</p>

<pre><code>class App extends Component {
  render() {
    return (
      &lt;div&gt;
         {React.cloneElement(children, this.props.widgets)}
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p>I'm trying to write a simple test with <code>jest</code>, like this:</p>

<pre><code>it('renders without crashing', () =&gt; {
  const div = document.createElement('div')
  ReactDOM.render(&lt;App /&gt;, div)
})
</code></pre>

<p>However, this test fails with the following error:</p>

<pre><code> FAIL  src/App.test.js
  ● renders without crashing

    TypeError: Cannot read property 'props' of undefined

      at Object.&lt;anonymous&gt;.ReactElement.cloneElement (node_modules/react/lib/ReactElement.js:271:34)
      at Object.cloneElement (node_modules/react/lib/ReactElementValidator.js:216:48)
      at App.render (src/App.js:50:57)
      at node_modules/react-dom/lib/ReactCompositeComponent.js:796:21
      at measureLifeCyclePerf (node_modules/react-dom/lib/ReactCompositeComponent.js:75:12)
      at ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (node_modules/react-dom/lib/ReactCompositeComponent.js:795:25)
      at ReactCompositeComponentWrapper._renderValidatedComponent (node_modules/react-dom/lib/ReactCompositeComponent.js:822:32)
      at ReactCompositeComponentWrapper.performInitialMount (node_modules/react-dom/lib/ReactCompositeComponent.js:362:30)
      at ReactCompositeComponentWrapper.mountComponent (node_modules/react-dom/lib/ReactCompositeComponent.js:258:21)
      at Object.mountComponent (node_modules/react-dom/lib/ReactReconciler.js:46:35)
      at ReactCompositeComponentWrapper.performInitialMount (node_modules/react-dom/lib/ReactCompositeComponent.js:371:34)
      at ReactCompositeComponentWrapper.mountComponent (node_modules/react-dom/lib/ReactCompositeComponent.js:258:21)
      at Object.mountComponent (node_modules/react-dom/lib/ReactReconciler.js:46:35)
      at mountComponentIntoNode (node_modules/react-dom/lib/ReactMount.js:104:32)
      at ReactReconcileTransaction.perform (node_modules/react-dom/lib/Transaction.js:140:20)
      at batchedMountComponentIntoNode (node_modules/react-dom/lib/ReactMount.js:126:15)
      at ReactDefaultBatchingStrategyTransaction.perform (node_modules/react-dom/lib/Transaction.js:140:20)
      at Object.batchedUpdates (node_modules/react-dom/lib/ReactDefaultBatchingStrategy.js:62:26)
</code></pre>

<p>Is there a way to mock <code>cloneElement</code>? Or to test the component in such a way that it ignores the call to <code>cloneElement</code>?</p>
","Afraid not. The error message that person was receiving had the term `React.cloneElement` in it.  My question involves how to test when using `React.cloneElement`."
"41476790","How do I write a test for a component that uses React.cloneElement?","3","<p>My top level component takes <code>children</code> from <code>react-router</code> like so:</p>

<pre><code>class App extends Component {
  render() {
    return (
      &lt;div&gt;
         {React.cloneElement(children, this.props.widgets)}
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p>I'm trying to write a simple test with <code>jest</code>, like this:</p>

<pre><code>it('renders without crashing', () =&gt; {
  const div = document.createElement('div')
  ReactDOM.render(&lt;App /&gt;, div)
})
</code></pre>

<p>However, this test fails with the following error:</p>

<pre><code> FAIL  src/App.test.js
  ● renders without crashing

    TypeError: Cannot read property 'props' of undefined

      at Object.&lt;anonymous&gt;.ReactElement.cloneElement (node_modules/react/lib/ReactElement.js:271:34)
      at Object.cloneElement (node_modules/react/lib/ReactElementValidator.js:216:48)
      at App.render (src/App.js:50:57)
      at node_modules/react-dom/lib/ReactCompositeComponent.js:796:21
      at measureLifeCyclePerf (node_modules/react-dom/lib/ReactCompositeComponent.js:75:12)
      at ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (node_modules/react-dom/lib/ReactCompositeComponent.js:795:25)
      at ReactCompositeComponentWrapper._renderValidatedComponent (node_modules/react-dom/lib/ReactCompositeComponent.js:822:32)
      at ReactCompositeComponentWrapper.performInitialMount (node_modules/react-dom/lib/ReactCompositeComponent.js:362:30)
      at ReactCompositeComponentWrapper.mountComponent (node_modules/react-dom/lib/ReactCompositeComponent.js:258:21)
      at Object.mountComponent (node_modules/react-dom/lib/ReactReconciler.js:46:35)
      at ReactCompositeComponentWrapper.performInitialMount (node_modules/react-dom/lib/ReactCompositeComponent.js:371:34)
      at ReactCompositeComponentWrapper.mountComponent (node_modules/react-dom/lib/ReactCompositeComponent.js:258:21)
      at Object.mountComponent (node_modules/react-dom/lib/ReactReconciler.js:46:35)
      at mountComponentIntoNode (node_modules/react-dom/lib/ReactMount.js:104:32)
      at ReactReconcileTransaction.perform (node_modules/react-dom/lib/Transaction.js:140:20)
      at batchedMountComponentIntoNode (node_modules/react-dom/lib/ReactMount.js:126:15)
      at ReactDefaultBatchingStrategyTransaction.perform (node_modules/react-dom/lib/Transaction.js:140:20)
      at Object.batchedUpdates (node_modules/react-dom/lib/ReactDefaultBatchingStrategy.js:62:26)
</code></pre>

<p>Is there a way to mock <code>cloneElement</code>? Or to test the component in such a way that it ignores the call to <code>cloneElement</code>?</p>
","i think you forgot to pass the widgets props, it should be like this: `ReactDOM.render(<App widgets={some value} />, div)`"
"41481979","react-Router nested rouths refresh error with webpack","1","<p>When i use the <code>Link to=""/Home/PageA""</code>   It is work well, but when i refresh the page or typing ""/Home/PageA"" in brower,the bundle will error.</p>

<p>It is has some conflict between WebPack and React-Router?And how to fix it?</p>

<p>Thx in Advance.</p>

<p><strong>here is my pic Explain</strong></p>

<p><a href=""https://i.stack.imgur.com/ym89y.png"" rel=""nofollow noreferrer"">actPic</a>
<a href=""https://i.stack.imgur.com/zMDyX.png"" rel=""nofollow noreferrer"">errorPic</a></p>

<p><strong>here is my code:</strong></p>

<pre><code>import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { Router, Route, IndexRoute, browserHistory, Link } from 'react-router'

    const App = (props) =&gt; {
        console.log(""App"", props);
        const key = 'root';
        return (
            &lt;div&gt;
                {React.cloneElement(props.children || &lt;div /&gt;, { key })}
            &lt;/div&gt;
        );
    };


    const LoginPage = (props) =&gt; {
        console.log(""Login"", props);

        return (
            &lt;div className=""Image""&gt;
                &lt;h1&gt;this is LoginPage&lt;/h1&gt;
            &lt;/div&gt;
        );
    };

    const HomePage = (props) =&gt; {
        console.log(""Home"", props);
        return (
            &lt;div className=""Image""&gt;
                &lt;li&gt;&lt;Link to=""/Home/PageA""&gt;Tab 1&lt;/Link&gt;&lt;/li&gt;
                &lt;h1&gt;this is  Home page&lt;/h1&gt;
                {React.cloneElement(props.children || &lt;div /&gt;, { key: props.pathname })}
            &lt;/div&gt;
        );
    };

    const PageA = (props) =&gt; {
        console.log(""pageA"", props);
        return (
            &lt;div&gt;
                &lt;input type='button' value=""back"" onClick={props.router.goBack}&gt;&lt;/input&gt;
                this is pageA;
            &lt;/div&gt;
        );
    };



    ReactDOM.render((
        &lt;Router history={browserHistory}&gt;
            &lt;Route path=""/"" component={App}&gt;
                &lt;Route path=""Login"" component={LoginPage}&gt;
                &lt;/Route&gt;[enter image description here][1]
                &lt;Route path=""Home"" component={HomePage}&gt;
                    &lt;Route path=""PageA"" component={PageA}&gt;
                    &lt;/Route&gt;
                &lt;/Route&gt;
            &lt;/Route&gt;
        &lt;/Router&gt;

    ), document.getElementById('container'));
</code></pre>

<p><strong>here is my webPack.config</strong></p>

<pre><code>module.exports = {
    devtool: 'source-map', 
    entry: __dirname + ""/app/app.js"", 
    output: {
        path: __dirname + ""/app"", 
        filename: ""bundle.js"" 
    },
    module: { 
        loaders: [
            {
                test: /\.json$/,
                loader: ""json""
            }, {
                test: /\.js$/,
                exclude: /node_modules/,
                loader: 'babel', 
                query: {
                    presets: ['es2015', 'react']
                }
            }, {
                test: /\.css$/,
                loader: 'style!css' 
            }, {
                test: /\.(png|jpg)$/,
                loader: 'url?limit=25000'
            }
        ]
    },
    devServer: {
        port: ""9023"",
        contentBase: ""./app"", 
        colors: true, 
        historyApiFallback: true, 
        inline: true 
    }
}
</code></pre>
","You should webpack dev server as Lukas answered below."
"42077868","ReactJS + Redux: How to structure action creators down to each component?","2","<p>I have one parent component called <code>App.js</code>:</p>

<pre><code>...

render() {
  return (
    &lt;div&gt;
      {React.cloneElement(this.props.children, this.props}
    &lt;/div&gt;
  )
}

...

function mapDispatchToProps(dispatch) {
  return (
    actions: bindActionCreators(actions, 
  )
}

export default connect(
  ...,
  mapDispatchToProps
)(App)
</code></pre>

<p>And the props would be passed down to each component. I would like to have each component to have its action creators file, but then how can I tie all the action creators into one so that the action creators can be passed down from the <code>App.js</code> level? Any other suggestions would be appreciated too to have action creators down to each component.</p>

<p>Here is the structure so far:</p>

<pre><code>ComponentOne
..actions.js //action creators
..ComponentOne.js
ComponentTwo
..actions.js //action creators
..ComponentTwo.js
App.js
actions.js//should I compile all the action creators here?
</code></pre>

<p>And each <code>actions.js</code> would be made like so:</p>

<pre><code>let actions = {
  logSayings() {
    ...
  }
}

export default actions
</code></pre>

<p>Thank you in advance and will upvote/accept answer.</p>

<p><strong>REDUX SET UP</strong></p>

<p>store.js</p>

<pre><code>import { applyMiddleware, compose, createStore } from 'redux'
import rootReducer from './reducers/rootReducer'
import logger from 'redux-logger'
import thunk from 'redux-thunk'

let finalCreateStore = compose(
  applyMiddleware(thunk, logger())
)(createStore)

export default function configureStore(initialState = {articles: []}) {
  return finalCreateStore(rootReducer, initialState)
}
</code></pre>

<p>actions.js</p>

<pre><code>import { hashHistory } from 'react-router'
import { browserHistory } from 'react-router';

let actions = {
  updateBar(status) {
    return {
      type: 'UPDATE_BAR',
      indicator: status
    }
  }
}

export default actions
</code></pre>

<p>homeReducer.js</p>

<pre><code>const homeReducer = function(articles = [], action){
  switch(action.type){
    case 'UPDATE_BAR':
      return {
        indicator: action.indicator,
      }

    default:
      return articles
  }
}

export default homeReducer
</code></pre>

<p>index.js</p>

<pre><code>import React from 'react';
import {render} from 'react-dom';
import configureStore from '../../redux/store'
import { Provider } from 'react-redux'
import { Router, Route, IndexRoute, hashHistory } from 'react-router'

import App from './components/App'
import Home from './components/Home/Home'

let initialState = {

}

let store = configureStore(initialState)

render(
  &lt;div&gt;
    &lt;Provider store={store}&gt;
      &lt;Router history={hashHistory}&gt;
        &lt;Route
          component={App}
          path='/'
        &gt;
          &lt;IndexRoute component={Home}/&gt;
        &lt;/Route&gt;
      &lt;/Router&gt;
    &lt;/Provider&gt;
  &lt;/div&gt;,
  document.querySelector('.wrapper')
)
</code></pre>
","@Robsonsjre I've done that but it got to a point where it got too clustered. Too many action creators, and I would have to always scroll through the irrelevant ones and find the one that I need. Having action creators for a particular component helps me to look up and take action much more quicker on action creators."
"42077868","ReactJS + Redux: How to structure action creators down to each component?","2","<p>I have one parent component called <code>App.js</code>:</p>

<pre><code>...

render() {
  return (
    &lt;div&gt;
      {React.cloneElement(this.props.children, this.props}
    &lt;/div&gt;
  )
}

...

function mapDispatchToProps(dispatch) {
  return (
    actions: bindActionCreators(actions, 
  )
}

export default connect(
  ...,
  mapDispatchToProps
)(App)
</code></pre>

<p>And the props would be passed down to each component. I would like to have each component to have its action creators file, but then how can I tie all the action creators into one so that the action creators can be passed down from the <code>App.js</code> level? Any other suggestions would be appreciated too to have action creators down to each component.</p>

<p>Here is the structure so far:</p>

<pre><code>ComponentOne
..actions.js //action creators
..ComponentOne.js
ComponentTwo
..actions.js //action creators
..ComponentTwo.js
App.js
actions.js//should I compile all the action creators here?
</code></pre>

<p>And each <code>actions.js</code> would be made like so:</p>

<pre><code>let actions = {
  logSayings() {
    ...
  }
}

export default actions
</code></pre>

<p>Thank you in advance and will upvote/accept answer.</p>

<p><strong>REDUX SET UP</strong></p>

<p>store.js</p>

<pre><code>import { applyMiddleware, compose, createStore } from 'redux'
import rootReducer from './reducers/rootReducer'
import logger from 'redux-logger'
import thunk from 'redux-thunk'

let finalCreateStore = compose(
  applyMiddleware(thunk, logger())
)(createStore)

export default function configureStore(initialState = {articles: []}) {
  return finalCreateStore(rootReducer, initialState)
}
</code></pre>

<p>actions.js</p>

<pre><code>import { hashHistory } from 'react-router'
import { browserHistory } from 'react-router';

let actions = {
  updateBar(status) {
    return {
      type: 'UPDATE_BAR',
      indicator: status
    }
  }
}

export default actions
</code></pre>

<p>homeReducer.js</p>

<pre><code>const homeReducer = function(articles = [], action){
  switch(action.type){
    case 'UPDATE_BAR':
      return {
        indicator: action.indicator,
      }

    default:
      return articles
  }
}

export default homeReducer
</code></pre>

<p>index.js</p>

<pre><code>import React from 'react';
import {render} from 'react-dom';
import configureStore from '../../redux/store'
import { Provider } from 'react-redux'
import { Router, Route, IndexRoute, hashHistory } from 'react-router'

import App from './components/App'
import Home from './components/Home/Home'

let initialState = {

}

let store = configureStore(initialState)

render(
  &lt;div&gt;
    &lt;Provider store={store}&gt;
      &lt;Router history={hashHistory}&gt;
        &lt;Route
          component={App}
          path='/'
        &gt;
          &lt;IndexRoute component={Home}/&gt;
        &lt;/Route&gt;
      &lt;/Router&gt;
    &lt;/Provider&gt;
  &lt;/div&gt;,
  document.querySelector('.wrapper')
)
</code></pre>
","Why do you want to have action creators on all your child components? why you cant centralize your actions on App's mapDispatchToProps?"
"42122122","callback render loses router context for child react-router & redux","0","<p>I've been developing an idea but am getting stuck on something unusual (my brain hurts on react-router).</p>

<p>I am trying to dynamically render a list of items using .map from a returned object (of multiple similar objects) and appending them to the <code>render(){return(&lt;div /&gt;)}</code>. </p>

<p>I just dont know another way than call a function then .map the result for this callback.</p>

<p>I think that the way I'm doing this means the rendered items lose context. The react-router <code>&lt;Link /&gt;</code> will function as expected in the normal flow (placed inside the <code>render(){return(&lt;div /&gt;)}</code> ) but not when the item is created from outside of the render. I have posted the error below the code.</p>

<p>I have read Many different ways of getting around this using context and location/history and withRouter. Frankly I'm lost.</p>

<p>I would appreciate if someone could look at my example below and guide me in the right direction.</p>

<p>A few notes:
- main focus appears to be in mystuff
- i have many unnecessary imports i know
- stripped down for clarity, i would get lost otherwise</p>

<p>index</p>

<pre><code>import _ from 'lodash';
import React from 'react';
import { render } from 'react-dom';
import { Router, Route, IndexRoute, browserHistory } from 'react-router';
import { Provider } from 'react-redux';
import { store, history } from './store';

import Main from './Main';
import { routyr } from './Menu';

// remaining paths in Menu.js (routyr) for menu visibility
const router = (
  &lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={Main}&gt;
        {routyr}
      &lt;/Route&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;
)

render (router, document.getElementById('app'));
</code></pre>

<p>Main</p>

<pre><code>import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import * as actionCreators from './actionCreators';

import App from './app';

function mapStateToProps(state){
  return{
    info: state.info,
    myProfile: state.myProfile
  }
}

function mapDispatchToProps(dispatch){
  return { actions: bindActionCreators(actionCreators, dispatch) }
}

const Main = connect(mapStateToProps, mapDispatchToProps)(App);
export default Main;
</code></pre>

<p>routyr</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';
import { Router, Route, IndexRoute, browserHistory } from 'react-router';
import { Provider } from 'react-redux';

import { store, history } from './store';

//pages
import App from './app';
import Landing from './Landing';
import Me from './mystuff';
import ViewStuff from './viewStuff';

//Routes for index.js
export const routyr = (
  &lt;span&gt;
    &lt;IndexRoute component={Landing} /&gt;
    &lt;Route path=""/myStuff"" component={Me} /&gt;
    &lt;Route path=""/viewStuff"" component={ViewStuff} /&gt;
  &lt;/span&gt;
)

//Menu types
//loaded by app.js
export const menuLoggedIn = (
  &lt;div className=""MainMenu""&gt;
    &lt;Link to='/' className=""buttonA green""&gt;Home&lt;/Link&gt;
    &lt;Link to='myStuff' className=""buttonA green""&gt;My Stuff&lt;/Link&gt;
  &lt;/div&gt;
);
export const menuLoggedOut = (
  &lt;div className=""MainMenu""&gt;
    &lt;Link to='/login' className=""buttonA green""&gt;Login&lt;/Link&gt;
  &lt;/div&gt;
);
</code></pre>

<p>app</p>

<pre><code>import React from 'react';
import _ from 'lodash';
import { Link } from 'react-router';
import auth from './auth';
import Landing from './Landing';
import Header from './Header';
import { menuLoggedIn, menuLoggedOut } from './Menu';

export default class App extends React.Component {
  constructor(){
    super();
    this.state={
      auth: auth.loggedIn(),
      menu: null
    };
  }

  componentWillMount(){
    if (this.state.auth==true) {
      this.setState({
        menu: menuLoggedIn
      })
    }else{
      this.setState({
        menu: menuLoggedOut
      });
    }
  }

  render(){
    return (
      &lt;div&gt;
        &lt;Header /&gt;
        {this.state.menu}&lt;br /&gt;
        &lt;div id=""view""&gt;
          {React.cloneElement(this.props.children, this.props)}
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
};
</code></pre>

<p>mystuff</p>

<pre><code>import React, { PropTypes } from 'react';
import { render } from 'react-dom';
import { Link } from 'react-router';
import { withRouter } from 'react-router';
import { Provider } from 'react-redux';

import * from './whacks';

export default class Me extends React.Component{
  constructor(){
    super();
  }
  componentDidMount() {

    function listThem(oio){
      oio.map(function(ducks){
        render(

          &lt;div className=""ListItem""&gt;
            &lt;Link to=""/viewStuff""&gt; _BROKEN_ View Stuff&lt;/Link&gt;
            &lt;div className=""listLabel""&gt;{ducks.type}&lt;/div&gt;
            &lt;h3&gt;{ducks.description.title}&lt;/h3&gt;
            {ducks.description.long}
          &lt;/div&gt;, document.getElementById('fishes').appendChild(document.createElement('div'))

        );
      });
    }

    var some = new Whacks();

    some.thing(more, (close, open) =&gt; {

      if(close){
        console.log(close));
      } else {
        doIt(open);
      }

    });
  }

  render(){
    return(
      &lt;div&gt;
        &lt;Link to=""viewStuff""&gt; _WORKING_ View Stuff&lt;/Link&gt;
        &lt;div id=""fishes""&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    )
  }
}
</code></pre>

<p>store</p>

<pre><code>import { createStore, compose } from 'redux';
import { syncHistoryWithStore } from 'react-router-redux';
import { browserHistory } from 'react-router';
import { combineReducers } from 'redux';
import { routerReducer } from 'react-router-redux';

/*-------ROOT REDUCER---------*/
/*-------DEFAULT STATES---------*/
/*-------CREATE STORE---------*/
/*-------INTEGRATE HISTORY---------*/

import me from './reducers/obj';
import myProfile from './reducers/myProfile';

const rootReducer = combineReducers(
  {
    routing: routerReducer,
    me,
    myProfile
  }
);

//TEMP remove harcoded var
const uuidSet = ""fa78d964"";
export const defaultState = {
  uuid: uuidSet,
};

export const store = createStore(rootReducer, defaultState, window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__());
export const history = syncHistoryWithStore(browserHistory, store);
</code></pre>

<p>actionCreators</p>

<pre><code>export function me (obj){
  return {
    type: ""ADD_OBJECTLIST"",
    obj
  }
}

export function myProfile (dump){
  return {
    type: ""MY_DATA"",
    dump
  }
}
</code></pre>

<p>from package.json</p>

<pre><code>""react-redux"": ""^5.0.2"",
""react-router"": ""^3.0.2"",
""react-router-redux"": ""^4.0.7"",
""redux"": ""^3.6.0"",
</code></pre>

<p>error</p>

<blockquote>
  <p>Uncaught Error: s rendered outside of a router context cannot navigate.</p>
</blockquote>

<p>@UG,
I have tried the following in mystuff:</p>

<pre><code>constructor(){
  super();
  this.state={
    oio: {}
  };
}
</code></pre>

<p>and</p>

<pre><code>some.thing(more, (close, open) =&gt; {

      if(close){
        console.log(close));
      } else {
        this.setState({
          oio: open
        });
      }

});
</code></pre>

<p>and </p>

<pre><code>render(){
  let flat = this.state.oio;
  flat.map(function(ducks){
    return (
      &lt;div className=""ListItem""&gt;
        &lt;Link to=""/viewStuff""&gt;View Stuff&lt;/Link&gt;
        &lt;div className=""listLabel""&gt;{ducks.type}&lt;/div&gt;
        &lt;h3&gt;{ducks.description.title}&lt;/h3&gt;
        {ducks.description.long}
      &lt;/div&gt;
    )
  })
}
</code></pre>

<p>and receive</p>

<blockquote>
  <p>Uncaught TypeError: flat.map is not a function
      at Me.render</p>
</blockquote>
",""
"42578982","Is this a bug in React.cloneElement?","0","<p><a href=""https://facebook.github.io/react/docs/react-api.html#cloneelement"" rel=""nofollow noreferrer"">React's documentation</a> says:</p>

<blockquote>
  <p>React.cloneElement() is almost equivalent to:</p>
  
  <p><code>&lt;element.type {...element.props} {...props}&gt;{children}&lt;/element.type&gt;</code></p>
  
  <p>However, it also preserves refs. This means that if you get a child with a ref on it, you won't accidentally steal it from your ancestor. You will get the same ref attached to your new element.</p>
</blockquote>

<p>So I made this small example:</p>

<pre><code>import React, { Component, Children, cloneElement } from 'react';

class Wrapper extends Component {
    render() {
        return cloneElement(Children.only(this.props.children), {
            ref: (ref) =&gt; {
                console.log(""wrapper"", ref);
            },
        });
    }
}

const MyComponent = () =&gt;
    &lt;Wrapper&gt;
        &lt;div ref={ref =&gt; {
            console.log(""original"", ref);
        }}&gt;
            My content
        &lt;/div&gt;
    &lt;/Wrapper&gt;

export default MyComponent;
</code></pre>

<p>(Fiddle: <a href=""https://jsfiddle.net/pxho45um/"" rel=""nofollow noreferrer"">https://jsfiddle.net/pxho45um/</a>)</p>

<p>I thought rendering <code>MyComponent</code> would log both <code>""wrapper"" &lt;div&gt;...&lt;/div&gt;</code> and <code>""original"" &lt;div&gt;...&lt;/div&gt;</code>, but it seems like only the wrapper ref callback is called.</p>

<p>Isn't this contrary to the documentation? Or what do the React team mean when they say ""if you get a child with a ref on it, you won't accidentally steal it from your ancestor""?</p>
",""
"42764154","Reactjs: returning children with cloneElement","0","<p>I'm new to this and following a tutorial.  I've actually copied the code from the starter files but the children do now show in the React devtools, hence not rendering.  The components are fine and I can render them individually. PhotoGrid doesn't show as a child of Main that's all. This is the code:</p>

<p>Main.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';

const Main = React.createClass({
    render() {
        const props = this.props;

        return (
            &lt;div&gt;
                &lt;h1&gt;
                    &lt;Link to=""/""&gt;Reduxstagram&lt;/Link&gt;
                &lt;/h1&gt;

                { React.cloneElement(props.children, props) }
            &lt;/div&gt;
        );
    }
});

export default Main;
</code></pre>

<p>App.js</p>

<pre><code>    import React from 'react';

import { render } from 'react-dom';


// Import css
import css from './styles/style.styl';

// Import Components
import Main from './components/Main';
import Single from './components/Single';
import PhotoGrid from './components/PhotoGrid';

// import react router deps
import { Router, Route, IndexRoute, browserHistory } from 'react-router';


render(
  &lt;Router history={browserHistory}&gt;
    &lt;Route path=""/"" component={Main}&gt;
      &lt;IndexRoute component={PhotoGrid}&gt;&lt;/IndexRoute&gt;
      &lt;Route path=""/view/:postId"" component={Single}&gt;&lt;/Route&gt;
    &lt;/Route&gt;
  &lt;/Router&gt;, document.getElementById('root'));
</code></pre>
",""
"42991329","Why am I getting Failed prop type using react router and nested components","6","<p>So, I have a site with react router, and redux (example below is severely simplified)</p>

<pre><code>&lt;Route path=""/"" component={ A } &gt;
  &lt;Route path=""/B"" component={B} /&gt;
&lt;/Route&gt;
</code></pre>

<p><strong>A.jsx</strong></p>

<pre><code>class A extends Component {
    render () {
        const calculated_value_to_pass_down = FooBar()
        return (
            &lt;div&gt;
                {React.Children.map(this.props.children,
                    (child) =&gt; React.cloneElement(child, {
                        required_prop: calculated_value_to_pass_down
                    })
                )}
            &lt;/div&gt;
        )
    }
}    
export default A
</code></pre>

<p><strong>B.jsx</strong></p>

<pre><code>class B extends Component {
    render () {
        return (
            &lt;div&gt;
                { this.props.required_prop }
            &lt;/div&gt;
        )
    }
}    
B.propTypes = {
    required_prop: PropTypes.any.isRequired
}    
export default B
</code></pre>

<p>But, when I go to <code>localhost:8080/B</code> I get a error backtrace:</p>

<pre><code>Warning: Failed prop type: The prop `required_prop` is marked as required in `B`, but its value is `undefined`.
in A (created by RouterContext)
in RouterContext (created by Router)
in Router
in Provider
</code></pre>

<p>The page 100% works. And the error doesn't happen in production, but I hate the error showing up at all. </p>

<p>The page never actually renders with the undefined props even, I get the error before render is even called.</p>

<p>I know I could simply remove the .isRequired and it will work, but that idea smells rotten.</p>

<p>thanks!</p>
","where you are passing the props to component B ?"
"42991329","Why am I getting Failed prop type using react router and nested components","6","<p>So, I have a site with react router, and redux (example below is severely simplified)</p>

<pre><code>&lt;Route path=""/"" component={ A } &gt;
  &lt;Route path=""/B"" component={B} /&gt;
&lt;/Route&gt;
</code></pre>

<p><strong>A.jsx</strong></p>

<pre><code>class A extends Component {
    render () {
        const calculated_value_to_pass_down = FooBar()
        return (
            &lt;div&gt;
                {React.Children.map(this.props.children,
                    (child) =&gt; React.cloneElement(child, {
                        required_prop: calculated_value_to_pass_down
                    })
                )}
            &lt;/div&gt;
        )
    }
}    
export default A
</code></pre>

<p><strong>B.jsx</strong></p>

<pre><code>class B extends Component {
    render () {
        return (
            &lt;div&gt;
                { this.props.required_prop }
            &lt;/div&gt;
        )
    }
}    
B.propTypes = {
    required_prop: PropTypes.any.isRequired
}    
export default B
</code></pre>

<p>But, when I go to <code>localhost:8080/B</code> I get a error backtrace:</p>

<pre><code>Warning: Failed prop type: The prop `required_prop` is marked as required in `B`, but its value is `undefined`.
in A (created by RouterContext)
in RouterContext (created by Router)
in Router
in Provider
</code></pre>

<p>The page 100% works. And the error doesn't happen in production, but I hate the error showing up at all. </p>

<p>The page never actually renders with the undefined props even, I get the error before render is even called.</p>

<p>I know I could simply remove the .isRequired and it will work, but that idea smells rotten.</p>

<p>thanks!</p>
","Is `calculated_value_to_pass_down` undefined? @MayankShukla inside `React.cloneElement` i believe"
"42991329","Why am I getting Failed prop type using react router and nested components","6","<p>So, I have a site with react router, and redux (example below is severely simplified)</p>

<pre><code>&lt;Route path=""/"" component={ A } &gt;
  &lt;Route path=""/B"" component={B} /&gt;
&lt;/Route&gt;
</code></pre>

<p><strong>A.jsx</strong></p>

<pre><code>class A extends Component {
    render () {
        const calculated_value_to_pass_down = FooBar()
        return (
            &lt;div&gt;
                {React.Children.map(this.props.children,
                    (child) =&gt; React.cloneElement(child, {
                        required_prop: calculated_value_to_pass_down
                    })
                )}
            &lt;/div&gt;
        )
    }
}    
export default A
</code></pre>

<p><strong>B.jsx</strong></p>

<pre><code>class B extends Component {
    render () {
        return (
            &lt;div&gt;
                { this.props.required_prop }
            &lt;/div&gt;
        )
    }
}    
B.propTypes = {
    required_prop: PropTypes.any.isRequired
}    
export default B
</code></pre>

<p>But, when I go to <code>localhost:8080/B</code> I get a error backtrace:</p>

<pre><code>Warning: Failed prop type: The prop `required_prop` is marked as required in `B`, but its value is `undefined`.
in A (created by RouterContext)
in RouterContext (created by Router)
in Router
in Provider
</code></pre>

<p>The page 100% works. And the error doesn't happen in production, but I hate the error showing up at all. </p>

<p>The page never actually renders with the undefined props even, I get the error before render is even called.</p>

<p>I know I could simply remove the .isRequired and it will work, but that idea smells rotten.</p>

<p>thanks!</p>
","There is a big discussion already here : https://github.com/ReactTraining/react-router/issues/1857#issuecomment-180879045"
"42991329","Why am I getting Failed prop type using react router and nested components","6","<p>So, I have a site with react router, and redux (example below is severely simplified)</p>

<pre><code>&lt;Route path=""/"" component={ A } &gt;
  &lt;Route path=""/B"" component={B} /&gt;
&lt;/Route&gt;
</code></pre>

<p><strong>A.jsx</strong></p>

<pre><code>class A extends Component {
    render () {
        const calculated_value_to_pass_down = FooBar()
        return (
            &lt;div&gt;
                {React.Children.map(this.props.children,
                    (child) =&gt; React.cloneElement(child, {
                        required_prop: calculated_value_to_pass_down
                    })
                )}
            &lt;/div&gt;
        )
    }
}    
export default A
</code></pre>

<p><strong>B.jsx</strong></p>

<pre><code>class B extends Component {
    render () {
        return (
            &lt;div&gt;
                { this.props.required_prop }
            &lt;/div&gt;
        )
    }
}    
B.propTypes = {
    required_prop: PropTypes.any.isRequired
}    
export default B
</code></pre>

<p>But, when I go to <code>localhost:8080/B</code> I get a error backtrace:</p>

<pre><code>Warning: Failed prop type: The prop `required_prop` is marked as required in `B`, but its value is `undefined`.
in A (created by RouterContext)
in RouterContext (created by Router)
in Router
in Provider
</code></pre>

<p>The page 100% works. And the error doesn't happen in production, but I hate the error showing up at all. </p>

<p>The page never actually renders with the undefined props even, I get the error before render is even called.</p>

<p>I know I could simply remove the .isRequired and it will work, but that idea smells rotten.</p>

<p>thanks!</p>
","@MayankShukla I am passing the props via the cloneElement map in A.jsx"
"42991329","Why am I getting Failed prop type using react router and nested components","6","<p>So, I have a site with react router, and redux (example below is severely simplified)</p>

<pre><code>&lt;Route path=""/"" component={ A } &gt;
  &lt;Route path=""/B"" component={B} /&gt;
&lt;/Route&gt;
</code></pre>

<p><strong>A.jsx</strong></p>

<pre><code>class A extends Component {
    render () {
        const calculated_value_to_pass_down = FooBar()
        return (
            &lt;div&gt;
                {React.Children.map(this.props.children,
                    (child) =&gt; React.cloneElement(child, {
                        required_prop: calculated_value_to_pass_down
                    })
                )}
            &lt;/div&gt;
        )
    }
}    
export default A
</code></pre>

<p><strong>B.jsx</strong></p>

<pre><code>class B extends Component {
    render () {
        return (
            &lt;div&gt;
                { this.props.required_prop }
            &lt;/div&gt;
        )
    }
}    
B.propTypes = {
    required_prop: PropTypes.any.isRequired
}    
export default B
</code></pre>

<p>But, when I go to <code>localhost:8080/B</code> I get a error backtrace:</p>

<pre><code>Warning: Failed prop type: The prop `required_prop` is marked as required in `B`, but its value is `undefined`.
in A (created by RouterContext)
in RouterContext (created by Router)
in Router
in Provider
</code></pre>

<p>The page 100% works. And the error doesn't happen in production, but I hate the error showing up at all. </p>

<p>The page never actually renders with the undefined props even, I get the error before render is even called.</p>

<p>I know I could simply remove the .isRequired and it will work, but that idea smells rotten.</p>

<p>thanks!</p>
","when I do `console.log(this.props.required_prop)` on B.jsx's render method I always get a value, never `undefined`"
"42991329","Why am I getting Failed prop type using react router and nested components","6","<p>So, I have a site with react router, and redux (example below is severely simplified)</p>

<pre><code>&lt;Route path=""/"" component={ A } &gt;
  &lt;Route path=""/B"" component={B} /&gt;
&lt;/Route&gt;
</code></pre>

<p><strong>A.jsx</strong></p>

<pre><code>class A extends Component {
    render () {
        const calculated_value_to_pass_down = FooBar()
        return (
            &lt;div&gt;
                {React.Children.map(this.props.children,
                    (child) =&gt; React.cloneElement(child, {
                        required_prop: calculated_value_to_pass_down
                    })
                )}
            &lt;/div&gt;
        )
    }
}    
export default A
</code></pre>

<p><strong>B.jsx</strong></p>

<pre><code>class B extends Component {
    render () {
        return (
            &lt;div&gt;
                { this.props.required_prop }
            &lt;/div&gt;
        )
    }
}    
B.propTypes = {
    required_prop: PropTypes.any.isRequired
}    
export default B
</code></pre>

<p>But, when I go to <code>localhost:8080/B</code> I get a error backtrace:</p>

<pre><code>Warning: Failed prop type: The prop `required_prop` is marked as required in `B`, but its value is `undefined`.
in A (created by RouterContext)
in RouterContext (created by Router)
in Router
in Provider
</code></pre>

<p>The page 100% works. And the error doesn't happen in production, but I hate the error showing up at all. </p>

<p>The page never actually renders with the undefined props even, I get the error before render is even called.</p>

<p>I know I could simply remove the .isRequired and it will work, but that idea smells rotten.</p>

<p>thanks!</p>
","Looks like it's intentional: ""This is intentional; validating props at element creation time produces more useful errors. It also more closely matches the behavior of static type systems like Flow. Best for now is to simply mark those props optional. We also may introduce a feature in the future called context that will give another supported way to pass props from a parent..."" -> https://github.com/facebook/react/issues/4494"
"43702277","Passing data in store from one component to another on different urls using redux, react-router?","7","<p>I am having some trouble accessing what I wrote to the store after one of my actions fires and reading it on a different page and different component via react-router. Here is what my main code looks like:</p>

<pre><code>  &lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;
</code></pre>

<p>And so on the Index page the user fills out a form and the submit button for that form fires an action that saves all the form data into the store and brings them to /preview. However when I get the the Preview component and try to access the data I just stored it is nowhere to be found? How can I make it so that when the user fills out a form on the Index page, I can display their results on a different one.</p>

<p>Edit: Here are is the code for all my main components</p>

<pre><code>import React from 'react';
import { render } from 'react-dom';

import css from './styles/main.css';
import bootstrap from './styles/bootstrap.css';

import App from './components/App';
import LetterForm from './components/LetterForm';
import Preview from './components/Preview';

import { Router, Route, IndexRoute, browserHistory } from 'react-router';
import { Provider } from 'react-redux';
import store, {history} from './store';

const router = (
  &lt;Provider store={store}&gt;
        &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
        &lt;/Router&gt;
    &lt;/Provider&gt;
);

render(router, document.getElementById('root'));
</code></pre>

<p>App.js (submitLetter should contain all the form data, after the form is submitted)</p>

<pre><code>import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import * as actionCreators from '../actions/actionCreators';

import Main from './Main';

function mapStateToProps(state) {
    return {
    submitLocations: state.submitLocations,
    submitLetter: state.submitLetter
    }
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators(actionCreators, dispatch);
}

const App = connect(mapStateToProps, mapDispatchToProps)(Main);

export default App;
</code></pre>

<p>Main.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';
import SubmitTo from './SubmitTo';
import LetterForm from './LetterForm';

class Main extends React.Component{
    constructor(props){
        super(props);
    }
    render(){
        return (
            &lt;div className=""main-wrapper""&gt;
        &lt;nav className=""navbar navbar-default""&gt;
          &lt;div className=""container-fluid""&gt;
            &lt;div className=""navbar-header""&gt;
              &lt;button type=""button"" className=""navbar-toggle collapsed""&gt;
                &lt;span className=""sr-only""&gt;Toggle navigation&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a className=""navbar-brand"" href=""#""&gt;Logo Ipsum&lt;/a&gt;
            &lt;/div&gt;

            &lt;div className=""collapse navbar-collapse"" id=""bs-example-navbar-collapse-1""&gt;
              &lt;ul className=""nav navbar-nav""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Link&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
              &lt;ul className=""nav navbar-nav navbar-right""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Home&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;About&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Sign up&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;/nav&gt;
        &lt;div className=""main-container""&gt;
                  &lt;h1&gt;
                     Pitch your startup to the top tech sites, free!
                  &lt;/h1&gt;
          &lt;SubmitTo {...this.props}/&gt;
                  {React.cloneElement(this.props.children,this.props)}
        &lt;/div&gt;
            &lt;/div&gt;
        )
    }
}

export default Main;
</code></pre>

<p>LetterForm.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';

class LetterForm extends React.Component{
  constructor(props){
    super(props);
    this.state = {'companyInput':'','raisedInput':'','raiseLocation':''};
  }
  handleSubmit(){
    var company = this.refs.company.value;
    var companyType = this.refs.companyType.value;
    var raised = this.refs.raised.value;
    var raiseLocation = this.refs.raiseLocation.value;
    var stateCopy = Object.assign({},this.state);
    if(!company){
      stateCopy['companyInput'] = 'input-error';
    }else{
      stateCopy['companyInput'] = '';
    }
    if(!raised){
      stateCopy['raisedInput'] = 'input-error';
    }else{
      stateCopy['raisedInput'] = '';
    }
    if(!raiseLocation){
      stateCopy['raiseLocation'] = 'input-error';
    }else{
      stateCopy['raiseLocation'] = '';
    }
    this.setState(stateCopy);
    this.props.submitLetter(company,companyType,raised,raiseLocation);
  }
  render(){
    return (
      &lt;div className=""letter-form well""&gt;
        &lt;form ref=""letterForm""&gt;
          &lt;h2&gt;Dear TechCrunch Editor,&lt;/h2&gt;
          &lt;br/&gt;
          &lt;p&gt;I am working with a company called&lt;/p&gt;
          &lt;input ref=""company"" className={""flat-input big-input ""+this.state.companyInput}/&gt;
          &lt;br/&gt;
          &lt;p&gt;We are:&lt;/p&gt;
          &lt;label className=""letter-label""&gt;Bootstrapped&lt;/label&gt;&lt;input value=""bootstrapped"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;label className=""letter-label""&gt;Venture Backed&lt;/label&gt;&lt;input value=""venture"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;br/&gt;
          &lt;p&gt;and have just raised&lt;/p&gt; 
          &lt;input ref=""raised"" type=""number"" className={""flat-input small-input ""+this.state.raisedInput}/&gt;
          &lt;p&gt;from&lt;/p&gt;
          &lt;input ref=""raiseLocation"" className={""flat-input medium-input ""+this.state.raiseLocation}/&gt;
          &lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;
        &lt;/form&gt;
        &lt;button className=""btn btn-success"" onClick={this.handleSubmit.bind(this)}&gt;Next step&lt;/button&gt;
      &lt;/div&gt;
    )
  }
}

export default LetterForm;
</code></pre>
","The data inside redux should be using across the application through redux-connect. Can you post some piece of your code, so that we can easily identify the problem."
"43702277","Passing data in store from one component to another on different urls using redux, react-router?","7","<p>I am having some trouble accessing what I wrote to the store after one of my actions fires and reading it on a different page and different component via react-router. Here is what my main code looks like:</p>

<pre><code>  &lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;
</code></pre>

<p>And so on the Index page the user fills out a form and the submit button for that form fires an action that saves all the form data into the store and brings them to /preview. However when I get the the Preview component and try to access the data I just stored it is nowhere to be found? How can I make it so that when the user fills out a form on the Index page, I can display their results on a different one.</p>

<p>Edit: Here are is the code for all my main components</p>

<pre><code>import React from 'react';
import { render } from 'react-dom';

import css from './styles/main.css';
import bootstrap from './styles/bootstrap.css';

import App from './components/App';
import LetterForm from './components/LetterForm';
import Preview from './components/Preview';

import { Router, Route, IndexRoute, browserHistory } from 'react-router';
import { Provider } from 'react-redux';
import store, {history} from './store';

const router = (
  &lt;Provider store={store}&gt;
        &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
        &lt;/Router&gt;
    &lt;/Provider&gt;
);

render(router, document.getElementById('root'));
</code></pre>

<p>App.js (submitLetter should contain all the form data, after the form is submitted)</p>

<pre><code>import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import * as actionCreators from '../actions/actionCreators';

import Main from './Main';

function mapStateToProps(state) {
    return {
    submitLocations: state.submitLocations,
    submitLetter: state.submitLetter
    }
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators(actionCreators, dispatch);
}

const App = connect(mapStateToProps, mapDispatchToProps)(Main);

export default App;
</code></pre>

<p>Main.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';
import SubmitTo from './SubmitTo';
import LetterForm from './LetterForm';

class Main extends React.Component{
    constructor(props){
        super(props);
    }
    render(){
        return (
            &lt;div className=""main-wrapper""&gt;
        &lt;nav className=""navbar navbar-default""&gt;
          &lt;div className=""container-fluid""&gt;
            &lt;div className=""navbar-header""&gt;
              &lt;button type=""button"" className=""navbar-toggle collapsed""&gt;
                &lt;span className=""sr-only""&gt;Toggle navigation&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a className=""navbar-brand"" href=""#""&gt;Logo Ipsum&lt;/a&gt;
            &lt;/div&gt;

            &lt;div className=""collapse navbar-collapse"" id=""bs-example-navbar-collapse-1""&gt;
              &lt;ul className=""nav navbar-nav""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Link&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
              &lt;ul className=""nav navbar-nav navbar-right""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Home&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;About&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Sign up&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;/nav&gt;
        &lt;div className=""main-container""&gt;
                  &lt;h1&gt;
                     Pitch your startup to the top tech sites, free!
                  &lt;/h1&gt;
          &lt;SubmitTo {...this.props}/&gt;
                  {React.cloneElement(this.props.children,this.props)}
        &lt;/div&gt;
            &lt;/div&gt;
        )
    }
}

export default Main;
</code></pre>

<p>LetterForm.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';

class LetterForm extends React.Component{
  constructor(props){
    super(props);
    this.state = {'companyInput':'','raisedInput':'','raiseLocation':''};
  }
  handleSubmit(){
    var company = this.refs.company.value;
    var companyType = this.refs.companyType.value;
    var raised = this.refs.raised.value;
    var raiseLocation = this.refs.raiseLocation.value;
    var stateCopy = Object.assign({},this.state);
    if(!company){
      stateCopy['companyInput'] = 'input-error';
    }else{
      stateCopy['companyInput'] = '';
    }
    if(!raised){
      stateCopy['raisedInput'] = 'input-error';
    }else{
      stateCopy['raisedInput'] = '';
    }
    if(!raiseLocation){
      stateCopy['raiseLocation'] = 'input-error';
    }else{
      stateCopy['raiseLocation'] = '';
    }
    this.setState(stateCopy);
    this.props.submitLetter(company,companyType,raised,raiseLocation);
  }
  render(){
    return (
      &lt;div className=""letter-form well""&gt;
        &lt;form ref=""letterForm""&gt;
          &lt;h2&gt;Dear TechCrunch Editor,&lt;/h2&gt;
          &lt;br/&gt;
          &lt;p&gt;I am working with a company called&lt;/p&gt;
          &lt;input ref=""company"" className={""flat-input big-input ""+this.state.companyInput}/&gt;
          &lt;br/&gt;
          &lt;p&gt;We are:&lt;/p&gt;
          &lt;label className=""letter-label""&gt;Bootstrapped&lt;/label&gt;&lt;input value=""bootstrapped"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;label className=""letter-label""&gt;Venture Backed&lt;/label&gt;&lt;input value=""venture"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;br/&gt;
          &lt;p&gt;and have just raised&lt;/p&gt; 
          &lt;input ref=""raised"" type=""number"" className={""flat-input small-input ""+this.state.raisedInput}/&gt;
          &lt;p&gt;from&lt;/p&gt;
          &lt;input ref=""raiseLocation"" className={""flat-input medium-input ""+this.state.raiseLocation}/&gt;
          &lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;
        &lt;/form&gt;
        &lt;button className=""btn btn-success"" onClick={this.handleSubmit.bind(this)}&gt;Next step&lt;/button&gt;
      &lt;/div&gt;
    )
  }
}

export default LetterForm;
</code></pre>
","You can connect the store in Preview component, then it can read everything in the store wherever it is saved"
"43702277","Passing data in store from one component to another on different urls using redux, react-router?","7","<p>I am having some trouble accessing what I wrote to the store after one of my actions fires and reading it on a different page and different component via react-router. Here is what my main code looks like:</p>

<pre><code>  &lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;
</code></pre>

<p>And so on the Index page the user fills out a form and the submit button for that form fires an action that saves all the form data into the store and brings them to /preview. However when I get the the Preview component and try to access the data I just stored it is nowhere to be found? How can I make it so that when the user fills out a form on the Index page, I can display their results on a different one.</p>

<p>Edit: Here are is the code for all my main components</p>

<pre><code>import React from 'react';
import { render } from 'react-dom';

import css from './styles/main.css';
import bootstrap from './styles/bootstrap.css';

import App from './components/App';
import LetterForm from './components/LetterForm';
import Preview from './components/Preview';

import { Router, Route, IndexRoute, browserHistory } from 'react-router';
import { Provider } from 'react-redux';
import store, {history} from './store';

const router = (
  &lt;Provider store={store}&gt;
        &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
        &lt;/Router&gt;
    &lt;/Provider&gt;
);

render(router, document.getElementById('root'));
</code></pre>

<p>App.js (submitLetter should contain all the form data, after the form is submitted)</p>

<pre><code>import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import * as actionCreators from '../actions/actionCreators';

import Main from './Main';

function mapStateToProps(state) {
    return {
    submitLocations: state.submitLocations,
    submitLetter: state.submitLetter
    }
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators(actionCreators, dispatch);
}

const App = connect(mapStateToProps, mapDispatchToProps)(Main);

export default App;
</code></pre>

<p>Main.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';
import SubmitTo from './SubmitTo';
import LetterForm from './LetterForm';

class Main extends React.Component{
    constructor(props){
        super(props);
    }
    render(){
        return (
            &lt;div className=""main-wrapper""&gt;
        &lt;nav className=""navbar navbar-default""&gt;
          &lt;div className=""container-fluid""&gt;
            &lt;div className=""navbar-header""&gt;
              &lt;button type=""button"" className=""navbar-toggle collapsed""&gt;
                &lt;span className=""sr-only""&gt;Toggle navigation&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a className=""navbar-brand"" href=""#""&gt;Logo Ipsum&lt;/a&gt;
            &lt;/div&gt;

            &lt;div className=""collapse navbar-collapse"" id=""bs-example-navbar-collapse-1""&gt;
              &lt;ul className=""nav navbar-nav""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Link&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
              &lt;ul className=""nav navbar-nav navbar-right""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Home&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;About&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Sign up&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;/nav&gt;
        &lt;div className=""main-container""&gt;
                  &lt;h1&gt;
                     Pitch your startup to the top tech sites, free!
                  &lt;/h1&gt;
          &lt;SubmitTo {...this.props}/&gt;
                  {React.cloneElement(this.props.children,this.props)}
        &lt;/div&gt;
            &lt;/div&gt;
        )
    }
}

export default Main;
</code></pre>

<p>LetterForm.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';

class LetterForm extends React.Component{
  constructor(props){
    super(props);
    this.state = {'companyInput':'','raisedInput':'','raiseLocation':''};
  }
  handleSubmit(){
    var company = this.refs.company.value;
    var companyType = this.refs.companyType.value;
    var raised = this.refs.raised.value;
    var raiseLocation = this.refs.raiseLocation.value;
    var stateCopy = Object.assign({},this.state);
    if(!company){
      stateCopy['companyInput'] = 'input-error';
    }else{
      stateCopy['companyInput'] = '';
    }
    if(!raised){
      stateCopy['raisedInput'] = 'input-error';
    }else{
      stateCopy['raisedInput'] = '';
    }
    if(!raiseLocation){
      stateCopy['raiseLocation'] = 'input-error';
    }else{
      stateCopy['raiseLocation'] = '';
    }
    this.setState(stateCopy);
    this.props.submitLetter(company,companyType,raised,raiseLocation);
  }
  render(){
    return (
      &lt;div className=""letter-form well""&gt;
        &lt;form ref=""letterForm""&gt;
          &lt;h2&gt;Dear TechCrunch Editor,&lt;/h2&gt;
          &lt;br/&gt;
          &lt;p&gt;I am working with a company called&lt;/p&gt;
          &lt;input ref=""company"" className={""flat-input big-input ""+this.state.companyInput}/&gt;
          &lt;br/&gt;
          &lt;p&gt;We are:&lt;/p&gt;
          &lt;label className=""letter-label""&gt;Bootstrapped&lt;/label&gt;&lt;input value=""bootstrapped"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;label className=""letter-label""&gt;Venture Backed&lt;/label&gt;&lt;input value=""venture"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;br/&gt;
          &lt;p&gt;and have just raised&lt;/p&gt; 
          &lt;input ref=""raised"" type=""number"" className={""flat-input small-input ""+this.state.raisedInput}/&gt;
          &lt;p&gt;from&lt;/p&gt;
          &lt;input ref=""raiseLocation"" className={""flat-input medium-input ""+this.state.raiseLocation}/&gt;
          &lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;
        &lt;/form&gt;
        &lt;button className=""btn btn-success"" onClick={this.handleSubmit.bind(this)}&gt;Next step&lt;/button&gt;
      &lt;/div&gt;
    )
  }
}

export default LetterForm;
</code></pre>
","What would the could to connect the store in Preview look like? and @DatTran what part of the code should I post, reducers, actions?"
"43702277","Passing data in store from one component to another on different urls using redux, react-router?","7","<p>I am having some trouble accessing what I wrote to the store after one of my actions fires and reading it on a different page and different component via react-router. Here is what my main code looks like:</p>

<pre><code>  &lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;
</code></pre>

<p>And so on the Index page the user fills out a form and the submit button for that form fires an action that saves all the form data into the store and brings them to /preview. However when I get the the Preview component and try to access the data I just stored it is nowhere to be found? How can I make it so that when the user fills out a form on the Index page, I can display their results on a different one.</p>

<p>Edit: Here are is the code for all my main components</p>

<pre><code>import React from 'react';
import { render } from 'react-dom';

import css from './styles/main.css';
import bootstrap from './styles/bootstrap.css';

import App from './components/App';
import LetterForm from './components/LetterForm';
import Preview from './components/Preview';

import { Router, Route, IndexRoute, browserHistory } from 'react-router';
import { Provider } from 'react-redux';
import store, {history} from './store';

const router = (
  &lt;Provider store={store}&gt;
        &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
        &lt;/Router&gt;
    &lt;/Provider&gt;
);

render(router, document.getElementById('root'));
</code></pre>

<p>App.js (submitLetter should contain all the form data, after the form is submitted)</p>

<pre><code>import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import * as actionCreators from '../actions/actionCreators';

import Main from './Main';

function mapStateToProps(state) {
    return {
    submitLocations: state.submitLocations,
    submitLetter: state.submitLetter
    }
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators(actionCreators, dispatch);
}

const App = connect(mapStateToProps, mapDispatchToProps)(Main);

export default App;
</code></pre>

<p>Main.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';
import SubmitTo from './SubmitTo';
import LetterForm from './LetterForm';

class Main extends React.Component{
    constructor(props){
        super(props);
    }
    render(){
        return (
            &lt;div className=""main-wrapper""&gt;
        &lt;nav className=""navbar navbar-default""&gt;
          &lt;div className=""container-fluid""&gt;
            &lt;div className=""navbar-header""&gt;
              &lt;button type=""button"" className=""navbar-toggle collapsed""&gt;
                &lt;span className=""sr-only""&gt;Toggle navigation&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a className=""navbar-brand"" href=""#""&gt;Logo Ipsum&lt;/a&gt;
            &lt;/div&gt;

            &lt;div className=""collapse navbar-collapse"" id=""bs-example-navbar-collapse-1""&gt;
              &lt;ul className=""nav navbar-nav""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Link&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
              &lt;ul className=""nav navbar-nav navbar-right""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Home&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;About&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Sign up&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;/nav&gt;
        &lt;div className=""main-container""&gt;
                  &lt;h1&gt;
                     Pitch your startup to the top tech sites, free!
                  &lt;/h1&gt;
          &lt;SubmitTo {...this.props}/&gt;
                  {React.cloneElement(this.props.children,this.props)}
        &lt;/div&gt;
            &lt;/div&gt;
        )
    }
}

export default Main;
</code></pre>

<p>LetterForm.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';

class LetterForm extends React.Component{
  constructor(props){
    super(props);
    this.state = {'companyInput':'','raisedInput':'','raiseLocation':''};
  }
  handleSubmit(){
    var company = this.refs.company.value;
    var companyType = this.refs.companyType.value;
    var raised = this.refs.raised.value;
    var raiseLocation = this.refs.raiseLocation.value;
    var stateCopy = Object.assign({},this.state);
    if(!company){
      stateCopy['companyInput'] = 'input-error';
    }else{
      stateCopy['companyInput'] = '';
    }
    if(!raised){
      stateCopy['raisedInput'] = 'input-error';
    }else{
      stateCopy['raisedInput'] = '';
    }
    if(!raiseLocation){
      stateCopy['raiseLocation'] = 'input-error';
    }else{
      stateCopy['raiseLocation'] = '';
    }
    this.setState(stateCopy);
    this.props.submitLetter(company,companyType,raised,raiseLocation);
  }
  render(){
    return (
      &lt;div className=""letter-form well""&gt;
        &lt;form ref=""letterForm""&gt;
          &lt;h2&gt;Dear TechCrunch Editor,&lt;/h2&gt;
          &lt;br/&gt;
          &lt;p&gt;I am working with a company called&lt;/p&gt;
          &lt;input ref=""company"" className={""flat-input big-input ""+this.state.companyInput}/&gt;
          &lt;br/&gt;
          &lt;p&gt;We are:&lt;/p&gt;
          &lt;label className=""letter-label""&gt;Bootstrapped&lt;/label&gt;&lt;input value=""bootstrapped"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;label className=""letter-label""&gt;Venture Backed&lt;/label&gt;&lt;input value=""venture"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;br/&gt;
          &lt;p&gt;and have just raised&lt;/p&gt; 
          &lt;input ref=""raised"" type=""number"" className={""flat-input small-input ""+this.state.raisedInput}/&gt;
          &lt;p&gt;from&lt;/p&gt;
          &lt;input ref=""raiseLocation"" className={""flat-input medium-input ""+this.state.raiseLocation}/&gt;
          &lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;
        &lt;/form&gt;
        &lt;button className=""btn btn-success"" onClick={this.handleSubmit.bind(this)}&gt;Next step&lt;/button&gt;
      &lt;/div&gt;
    )
  }
}

export default LetterForm;
</code></pre>
","You can take a look at this example.
 [https://github.com/reactjs/redux/blob/master/examples/real-world/src/containers/RepoPage.js](https://github.com/reactjs/redux/blob/master/examples/real-world/src/containers/RepoPage.js). You should post your components, containers code"
"43702277","Passing data in store from one component to another on different urls using redux, react-router?","7","<p>I am having some trouble accessing what I wrote to the store after one of my actions fires and reading it on a different page and different component via react-router. Here is what my main code looks like:</p>

<pre><code>  &lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;
</code></pre>

<p>And so on the Index page the user fills out a form and the submit button for that form fires an action that saves all the form data into the store and brings them to /preview. However when I get the the Preview component and try to access the data I just stored it is nowhere to be found? How can I make it so that when the user fills out a form on the Index page, I can display their results on a different one.</p>

<p>Edit: Here are is the code for all my main components</p>

<pre><code>import React from 'react';
import { render } from 'react-dom';

import css from './styles/main.css';
import bootstrap from './styles/bootstrap.css';

import App from './components/App';
import LetterForm from './components/LetterForm';
import Preview from './components/Preview';

import { Router, Route, IndexRoute, browserHistory } from 'react-router';
import { Provider } from 'react-redux';
import store, {history} from './store';

const router = (
  &lt;Provider store={store}&gt;
        &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
        &lt;/Router&gt;
    &lt;/Provider&gt;
);

render(router, document.getElementById('root'));
</code></pre>

<p>App.js (submitLetter should contain all the form data, after the form is submitted)</p>

<pre><code>import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import * as actionCreators from '../actions/actionCreators';

import Main from './Main';

function mapStateToProps(state) {
    return {
    submitLocations: state.submitLocations,
    submitLetter: state.submitLetter
    }
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators(actionCreators, dispatch);
}

const App = connect(mapStateToProps, mapDispatchToProps)(Main);

export default App;
</code></pre>

<p>Main.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';
import SubmitTo from './SubmitTo';
import LetterForm from './LetterForm';

class Main extends React.Component{
    constructor(props){
        super(props);
    }
    render(){
        return (
            &lt;div className=""main-wrapper""&gt;
        &lt;nav className=""navbar navbar-default""&gt;
          &lt;div className=""container-fluid""&gt;
            &lt;div className=""navbar-header""&gt;
              &lt;button type=""button"" className=""navbar-toggle collapsed""&gt;
                &lt;span className=""sr-only""&gt;Toggle navigation&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a className=""navbar-brand"" href=""#""&gt;Logo Ipsum&lt;/a&gt;
            &lt;/div&gt;

            &lt;div className=""collapse navbar-collapse"" id=""bs-example-navbar-collapse-1""&gt;
              &lt;ul className=""nav navbar-nav""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Link&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
              &lt;ul className=""nav navbar-nav navbar-right""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Home&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;About&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Sign up&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;/nav&gt;
        &lt;div className=""main-container""&gt;
                  &lt;h1&gt;
                     Pitch your startup to the top tech sites, free!
                  &lt;/h1&gt;
          &lt;SubmitTo {...this.props}/&gt;
                  {React.cloneElement(this.props.children,this.props)}
        &lt;/div&gt;
            &lt;/div&gt;
        )
    }
}

export default Main;
</code></pre>

<p>LetterForm.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';

class LetterForm extends React.Component{
  constructor(props){
    super(props);
    this.state = {'companyInput':'','raisedInput':'','raiseLocation':''};
  }
  handleSubmit(){
    var company = this.refs.company.value;
    var companyType = this.refs.companyType.value;
    var raised = this.refs.raised.value;
    var raiseLocation = this.refs.raiseLocation.value;
    var stateCopy = Object.assign({},this.state);
    if(!company){
      stateCopy['companyInput'] = 'input-error';
    }else{
      stateCopy['companyInput'] = '';
    }
    if(!raised){
      stateCopy['raisedInput'] = 'input-error';
    }else{
      stateCopy['raisedInput'] = '';
    }
    if(!raiseLocation){
      stateCopy['raiseLocation'] = 'input-error';
    }else{
      stateCopy['raiseLocation'] = '';
    }
    this.setState(stateCopy);
    this.props.submitLetter(company,companyType,raised,raiseLocation);
  }
  render(){
    return (
      &lt;div className=""letter-form well""&gt;
        &lt;form ref=""letterForm""&gt;
          &lt;h2&gt;Dear TechCrunch Editor,&lt;/h2&gt;
          &lt;br/&gt;
          &lt;p&gt;I am working with a company called&lt;/p&gt;
          &lt;input ref=""company"" className={""flat-input big-input ""+this.state.companyInput}/&gt;
          &lt;br/&gt;
          &lt;p&gt;We are:&lt;/p&gt;
          &lt;label className=""letter-label""&gt;Bootstrapped&lt;/label&gt;&lt;input value=""bootstrapped"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;label className=""letter-label""&gt;Venture Backed&lt;/label&gt;&lt;input value=""venture"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;br/&gt;
          &lt;p&gt;and have just raised&lt;/p&gt; 
          &lt;input ref=""raised"" type=""number"" className={""flat-input small-input ""+this.state.raisedInput}/&gt;
          &lt;p&gt;from&lt;/p&gt;
          &lt;input ref=""raiseLocation"" className={""flat-input medium-input ""+this.state.raiseLocation}/&gt;
          &lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;
        &lt;/form&gt;
        &lt;button className=""btn btn-success"" onClick={this.handleSubmit.bind(this)}&gt;Next step&lt;/button&gt;
      &lt;/div&gt;
    )
  }
}

export default LetterForm;
</code></pre>
","I think there's something wrong with this line of code this.props.submitLetter(company,companyType,raised,raiseLocation); It should be a function to dispatch an action (that store data back to the redux store). After that, you can get it back in the other component."
"43702277","Passing data in store from one component to another on different urls using redux, react-router?","7","<p>I am having some trouble accessing what I wrote to the store after one of my actions fires and reading it on a different page and different component via react-router. Here is what my main code looks like:</p>

<pre><code>  &lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;
</code></pre>

<p>And so on the Index page the user fills out a form and the submit button for that form fires an action that saves all the form data into the store and brings them to /preview. However when I get the the Preview component and try to access the data I just stored it is nowhere to be found? How can I make it so that when the user fills out a form on the Index page, I can display their results on a different one.</p>

<p>Edit: Here are is the code for all my main components</p>

<pre><code>import React from 'react';
import { render } from 'react-dom';

import css from './styles/main.css';
import bootstrap from './styles/bootstrap.css';

import App from './components/App';
import LetterForm from './components/LetterForm';
import Preview from './components/Preview';

import { Router, Route, IndexRoute, browserHistory } from 'react-router';
import { Provider } from 'react-redux';
import store, {history} from './store';

const router = (
  &lt;Provider store={store}&gt;
        &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
        &lt;/Router&gt;
    &lt;/Provider&gt;
);

render(router, document.getElementById('root'));
</code></pre>

<p>App.js (submitLetter should contain all the form data, after the form is submitted)</p>

<pre><code>import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import * as actionCreators from '../actions/actionCreators';

import Main from './Main';

function mapStateToProps(state) {
    return {
    submitLocations: state.submitLocations,
    submitLetter: state.submitLetter
    }
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators(actionCreators, dispatch);
}

const App = connect(mapStateToProps, mapDispatchToProps)(Main);

export default App;
</code></pre>

<p>Main.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';
import SubmitTo from './SubmitTo';
import LetterForm from './LetterForm';

class Main extends React.Component{
    constructor(props){
        super(props);
    }
    render(){
        return (
            &lt;div className=""main-wrapper""&gt;
        &lt;nav className=""navbar navbar-default""&gt;
          &lt;div className=""container-fluid""&gt;
            &lt;div className=""navbar-header""&gt;
              &lt;button type=""button"" className=""navbar-toggle collapsed""&gt;
                &lt;span className=""sr-only""&gt;Toggle navigation&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a className=""navbar-brand"" href=""#""&gt;Logo Ipsum&lt;/a&gt;
            &lt;/div&gt;

            &lt;div className=""collapse navbar-collapse"" id=""bs-example-navbar-collapse-1""&gt;
              &lt;ul className=""nav navbar-nav""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Link&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
              &lt;ul className=""nav navbar-nav navbar-right""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Home&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;About&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Sign up&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;/nav&gt;
        &lt;div className=""main-container""&gt;
                  &lt;h1&gt;
                     Pitch your startup to the top tech sites, free!
                  &lt;/h1&gt;
          &lt;SubmitTo {...this.props}/&gt;
                  {React.cloneElement(this.props.children,this.props)}
        &lt;/div&gt;
            &lt;/div&gt;
        )
    }
}

export default Main;
</code></pre>

<p>LetterForm.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';

class LetterForm extends React.Component{
  constructor(props){
    super(props);
    this.state = {'companyInput':'','raisedInput':'','raiseLocation':''};
  }
  handleSubmit(){
    var company = this.refs.company.value;
    var companyType = this.refs.companyType.value;
    var raised = this.refs.raised.value;
    var raiseLocation = this.refs.raiseLocation.value;
    var stateCopy = Object.assign({},this.state);
    if(!company){
      stateCopy['companyInput'] = 'input-error';
    }else{
      stateCopy['companyInput'] = '';
    }
    if(!raised){
      stateCopy['raisedInput'] = 'input-error';
    }else{
      stateCopy['raisedInput'] = '';
    }
    if(!raiseLocation){
      stateCopy['raiseLocation'] = 'input-error';
    }else{
      stateCopy['raiseLocation'] = '';
    }
    this.setState(stateCopy);
    this.props.submitLetter(company,companyType,raised,raiseLocation);
  }
  render(){
    return (
      &lt;div className=""letter-form well""&gt;
        &lt;form ref=""letterForm""&gt;
          &lt;h2&gt;Dear TechCrunch Editor,&lt;/h2&gt;
          &lt;br/&gt;
          &lt;p&gt;I am working with a company called&lt;/p&gt;
          &lt;input ref=""company"" className={""flat-input big-input ""+this.state.companyInput}/&gt;
          &lt;br/&gt;
          &lt;p&gt;We are:&lt;/p&gt;
          &lt;label className=""letter-label""&gt;Bootstrapped&lt;/label&gt;&lt;input value=""bootstrapped"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;label className=""letter-label""&gt;Venture Backed&lt;/label&gt;&lt;input value=""venture"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;br/&gt;
          &lt;p&gt;and have just raised&lt;/p&gt; 
          &lt;input ref=""raised"" type=""number"" className={""flat-input small-input ""+this.state.raisedInput}/&gt;
          &lt;p&gt;from&lt;/p&gt;
          &lt;input ref=""raiseLocation"" className={""flat-input medium-input ""+this.state.raiseLocation}/&gt;
          &lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;
        &lt;/form&gt;
        &lt;button className=""btn btn-success"" onClick={this.handleSubmit.bind(this)}&gt;Next step&lt;/button&gt;
      &lt;/div&gt;
    )
  }
}

export default LetterForm;
</code></pre>
","You can refer the example in the link I embed above. In the example, loadRepo, loadStargazers are the actions that you can map to the component and call to push data to the reducer."
"43702277","Passing data in store from one component to another on different urls using redux, react-router?","7","<p>I am having some trouble accessing what I wrote to the store after one of my actions fires and reading it on a different page and different component via react-router. Here is what my main code looks like:</p>

<pre><code>  &lt;Provider store={store}&gt;
    &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;
</code></pre>

<p>And so on the Index page the user fills out a form and the submit button for that form fires an action that saves all the form data into the store and brings them to /preview. However when I get the the Preview component and try to access the data I just stored it is nowhere to be found? How can I make it so that when the user fills out a form on the Index page, I can display their results on a different one.</p>

<p>Edit: Here are is the code for all my main components</p>

<pre><code>import React from 'react';
import { render } from 'react-dom';

import css from './styles/main.css';
import bootstrap from './styles/bootstrap.css';

import App from './components/App';
import LetterForm from './components/LetterForm';
import Preview from './components/Preview';

import { Router, Route, IndexRoute, browserHistory } from 'react-router';
import { Provider } from 'react-redux';
import store, {history} from './store';

const router = (
  &lt;Provider store={store}&gt;
        &lt;Router history={history}&gt;
      &lt;Route path=""/"" component={App}&gt;
        &lt;IndexRoute component={LetterForm}&gt;&lt;/IndexRoute&gt;
        &lt;Route path=""/preview"" component={Preview}&gt;&lt;/Route&gt;
      &lt;/Route&gt;
        &lt;/Router&gt;
    &lt;/Provider&gt;
);

render(router, document.getElementById('root'));
</code></pre>

<p>App.js (submitLetter should contain all the form data, after the form is submitted)</p>

<pre><code>import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import * as actionCreators from '../actions/actionCreators';

import Main from './Main';

function mapStateToProps(state) {
    return {
    submitLocations: state.submitLocations,
    submitLetter: state.submitLetter
    }
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators(actionCreators, dispatch);
}

const App = connect(mapStateToProps, mapDispatchToProps)(Main);

export default App;
</code></pre>

<p>Main.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';
import SubmitTo from './SubmitTo';
import LetterForm from './LetterForm';

class Main extends React.Component{
    constructor(props){
        super(props);
    }
    render(){
        return (
            &lt;div className=""main-wrapper""&gt;
        &lt;nav className=""navbar navbar-default""&gt;
          &lt;div className=""container-fluid""&gt;
            &lt;div className=""navbar-header""&gt;
              &lt;button type=""button"" className=""navbar-toggle collapsed""&gt;
                &lt;span className=""sr-only""&gt;Toggle navigation&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
                &lt;span className=""icon-bar""&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a className=""navbar-brand"" href=""#""&gt;Logo Ipsum&lt;/a&gt;
            &lt;/div&gt;

            &lt;div className=""collapse navbar-collapse"" id=""bs-example-navbar-collapse-1""&gt;
              &lt;ul className=""nav navbar-nav""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Link&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
              &lt;ul className=""nav navbar-nav navbar-right""&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Home&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;About&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=""#""&gt;Sign up&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;/nav&gt;
        &lt;div className=""main-container""&gt;
                  &lt;h1&gt;
                     Pitch your startup to the top tech sites, free!
                  &lt;/h1&gt;
          &lt;SubmitTo {...this.props}/&gt;
                  {React.cloneElement(this.props.children,this.props)}
        &lt;/div&gt;
            &lt;/div&gt;
        )
    }
}

export default Main;
</code></pre>

<p>LetterForm.js</p>

<pre><code>import React from 'react';
import { Link } from 'react-router';

class LetterForm extends React.Component{
  constructor(props){
    super(props);
    this.state = {'companyInput':'','raisedInput':'','raiseLocation':''};
  }
  handleSubmit(){
    var company = this.refs.company.value;
    var companyType = this.refs.companyType.value;
    var raised = this.refs.raised.value;
    var raiseLocation = this.refs.raiseLocation.value;
    var stateCopy = Object.assign({},this.state);
    if(!company){
      stateCopy['companyInput'] = 'input-error';
    }else{
      stateCopy['companyInput'] = '';
    }
    if(!raised){
      stateCopy['raisedInput'] = 'input-error';
    }else{
      stateCopy['raisedInput'] = '';
    }
    if(!raiseLocation){
      stateCopy['raiseLocation'] = 'input-error';
    }else{
      stateCopy['raiseLocation'] = '';
    }
    this.setState(stateCopy);
    this.props.submitLetter(company,companyType,raised,raiseLocation);
  }
  render(){
    return (
      &lt;div className=""letter-form well""&gt;
        &lt;form ref=""letterForm""&gt;
          &lt;h2&gt;Dear TechCrunch Editor,&lt;/h2&gt;
          &lt;br/&gt;
          &lt;p&gt;I am working with a company called&lt;/p&gt;
          &lt;input ref=""company"" className={""flat-input big-input ""+this.state.companyInput}/&gt;
          &lt;br/&gt;
          &lt;p&gt;We are:&lt;/p&gt;
          &lt;label className=""letter-label""&gt;Bootstrapped&lt;/label&gt;&lt;input value=""bootstrapped"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;label className=""letter-label""&gt;Venture Backed&lt;/label&gt;&lt;input value=""venture"" type=""radio"" ref=""companyType"" name=""companyType""/&gt;
          &lt;br/&gt;
          &lt;p&gt;and have just raised&lt;/p&gt; 
          &lt;input ref=""raised"" type=""number"" className={""flat-input small-input ""+this.state.raisedInput}/&gt;
          &lt;p&gt;from&lt;/p&gt;
          &lt;input ref=""raiseLocation"" className={""flat-input medium-input ""+this.state.raiseLocation}/&gt;
          &lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;&lt;br/&gt;
          &lt;p&gt;Extra text&lt;/p&gt;
        &lt;/form&gt;
        &lt;button className=""btn btn-success"" onClick={this.handleSubmit.bind(this)}&gt;Next step&lt;/button&gt;
      &lt;/div&gt;
    )
  }
}

export default LetterForm;
</code></pre>
","@DatTran I have added my components and container code"
"43818279","Getting an error when migrating from v3 to v4 react-router","0","<p>I decided to use react-router v4 instead of v3 and change my paths so they work with v4 of the router and redux, but I get the error below(I exported all components using export default and didn't forget to export anything). What is wrong with my code?</p>

<blockquote>
  <p>Element type is invalid: expected a string (for built-in components)
  or a class/function (for composite components) but got: undefined. You
  likely forgot to export your component from the file it's defined in.</p>
</blockquote>

<p>I tried to turn this v3 router code, which worked:</p>

<pre><code>&lt;Router history={history}&gt;
  &lt;Route path=""/"" component={App}&gt;
    &lt;IndexRoute component={UserGrid}&gt;&lt;/IndexRoute&gt;
    &lt;Route path=""/login"" component={Login}&gt;&lt;/Route&gt;
    &lt;Route path=""/users/:userId"" component={UserPage}&gt;&lt;/Route&gt;
    &lt;Route path=""/registration"" component={RegistrationPage}&gt;&lt;/Route&gt;
    &lt;Route path=""/topSecret"" component={requireAuth(SecretComponent)}&gt;&lt;/Route&gt;
  &lt;/Route&gt;
&lt;/Router&gt;
</code></pre>

<p>Into v4 code like so:</p>

<pre><code>const history = createBrowserHistory()

const router = (
  &lt;Provider store={store}&gt;
    &lt;BrowserRouter history={history}&gt;
        &lt;App&gt;
          &lt;Route exact path=""/"" component={UserGrid}&gt;&lt;/Route&gt;
          &lt;Route path=""/login"" component={Login}&gt;&lt;/Route&gt;
          &lt;Route path=""/users/:userId"" component={UserPage}&gt;&lt;/Route&gt;
          &lt;Route path=""/registration"" component={RegistrationPage}&gt;&lt;/Route&gt;
          &lt;Route path=""/topSecret"" component={requireAuth(SecretComponent)}&gt;&lt;/Route&gt;
        &lt;/App&gt;
    &lt;/BrowserRouter&gt;
  &lt;/Provider&gt;
)

ReactDOM.render(
  router,
  document.getElementById('root')
)
</code></pre>

<p>App.js:</p>

<pre><code>class App extends React.Component {
    render() {
        return (
            &lt;div&gt;
                &lt;NavBar /&gt;
                {React.cloneElement(this.props.children, this.props)}
            &lt;/div&gt;
        )
    }
}

function mapStateToProps (state) {
  return {
    session: state.session,
    users: state.users
  }
}

function mapDispatchToProps (dispatch) {
  return bindActionCreators(actionCreators, dispatch)
}


export default connect(mapStateToProps, mapDispatchToProps)(App)
</code></pre>

<p>Store:</p>

<pre><code>import {applyMiddleware, createStore} from 'redux'
import {createLogger} from 'redux-logger'
import { connectRouter, routerMiddleware } from 'connected-react-router'
import thunk from 'redux-thunk'
import { createBrowserHistory } from 'history'
import rootReducer from '../reducers/rootReducer'
import async from '../middlewares/async'
import {authUser} from '../actions/actionCreators'

const history = createBrowserHistory()

const initialState = {
  bla-bla
}

const store = createStore(
  connectRouter(history)(rootReducer),
  initialState,
  applyMiddleware(
    async,
    thunk,
    routerMiddleware(history),
    createLogger()
  )
)

export default store
</code></pre>
",""
"43973589","react router 4 nested components not working properly","0","<p>I am switching from react-router 3.x to 4.x and I am not able to render nested routes.</p>

<p>I bootstrapped an application using <a href=""https://github.com/facebookincubator/create-react-app"" rel=""nofollow noreferrer"">create-react-app</a></p>

<pre><code>index.js file

import React from 'react';
import ReactDOM from 'react-dom';
import Routes from './routes';
import './index.css';

ReactDOM.render(&lt;Routes /&gt;, document.getElementById('root'));

routes.js file

import React from 'react';
import _ from 'lodash';
import {
  BrowserRouter as Router,
  Route,
} from 'react-router-dom';
import { dojoRequire } from 'esri-loader';
import EsriLoader from 'esri-loader-react';

import App from './components/App';
import Home from './components/Home';

/**
 * Helper component to wrap app
 */
class AppWrapper extends React.Component {
  /**
   * Util function to render the children
   * Whenever a state change happens in react application, react will render the component again
   * and we wish to pass the updated state to the children as props
   */
  renderChildren() {
    const {children} = this.props;
    if (!children) {
      return;
    }

    return React.Children.map(children, c =&gt; React.cloneElement(c, _.omit(this.props, 'children'), { }));
  }

  render() {
    const child = this.renderChildren();
    return (
      &lt;App {...this.props}&gt;
        {child}
      &lt;/App&gt;
    );
  }
}

/**
 * Root Loader component to load esri api
 */
class LoaderComponent extends React.Component {

  constructor(props) {
    super(props);
    this.state = { loaded: false };
  }

  /**
   * Callback fired when arc GIS api is loaded
   * Now load the requirejs modules using dojorequire
   */
  esriReady() {
    dojoRequire(['esri/Map', 'esri/views/MapView'], (Map, MapView) =&gt; {
      this.setState({ Map, MapView, loaded: true });
    });
  }

  render() {
    const options = {
      url: 'https://js.arcgis.com/4.3/',
    };
    return (
      &lt;div&gt;
        &lt;EsriLoader options={options} ready={this.esriReady.bind(this)} /&gt;
        &lt;AppWrapper {...this.state}&gt;
          &lt;Route exact path=""/home"" component={Home} /&gt;
        &lt;/AppWrapper&gt;
      &lt;/div&gt;
    );
  }
};

const Routes = (props) =&gt; (
  &lt;Router {...props}&gt;
    &lt;Route exact path=""/"" component={LoaderComponent} /&gt;
  &lt;/Router&gt;
);

export default Routes;
</code></pre>

<p>App and home components are simple div tags that renders <code>&lt;div&gt;Hello world App&lt;/div&gt;</code> and <code>&lt;div&gt;Hello world Home&lt;/div&gt;</code></p>

<p>The <code>App</code> component renders perfectly, but when I navigate to <code>http://localhost:3000/home</code> component I see an empty page.</p>

<p><strong>What I would like to do is</strong></p>

<p>When the user launched the app the user should be redirected to <code>/home</code> and I would like to define two additional routes for <code>App</code> Component</p>

<pre><code>&lt;Route exact path=""/a"" component={A} /&gt;
&lt;Route exact path=""/b"" component={B} /&gt;
</code></pre>

<p>Currently I am not able to redirect to <code>/home</code> on app load and not able to define nested routes for <code>App</code> Component.</p>

<blockquote>
  <p>NOTE: This above code was working fine for react-router version 3.x. To redirect on page load I would use <code>IndexRedirect</code>.</p>
</blockquote>

<p>I already had a look at <a href=""https://stackoverflow.com/questions/42095600/nested-routes-in-v4"">this</a> and <a href=""https://stackoverflow.com/questions/41474134/nested-routes-with-react-router-v4"">this</a> question and I tried all possible solutions in those questions but none is working.</p>

<p><strong>I would like to have all the route handling in <code>routes.js</code> file</strong>.</p>
",""
"45623426","Nested Component react.cloneElement with react-form","2","<p>I would like to fix a problem with this library : <a href=""https://github.com/tannerlinsley/react-form"" rel=""nofollow noreferrer"">react-form</a>. 
For information, this is my current error : </p>

<blockquote>
  <p>Uncaught Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object. Check the render method of <code>CustomInput</code>.</p>
</blockquote>

<p>This is what i'm trying to do : </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>&lt;CustomInput field=""date"" showErrors={false}&gt;
    &lt;DatePickerForm /&gt;
&lt;/CustomInput&gt;</code></pre>
</div>
</div>
</p>

<p>this is my CustomInput Component : </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, { Component } from 'react';
import FormInput from 'react-form';

class CustomInput extends Component {
  render() {
    const { showErrors, field, children } = this.props;
    return (
      &lt;FormInput showErrors={showErrors} field={field}&gt;
        {({ setValue }) =&gt; {
          return (
            React.cloneElement(children, { setValueForm: setValue })
          );
        }}
      &lt;/FormInput&gt;
    );
  }
}
export default CustomInput;</code></pre>
</div>
</div>
</p>

<p>React.cloneElement(children, { setValueForm: setValue }) seems to return an object. 
But if i just render React.cloneElement without ""FormInput"" part, the rendering is ok. 
So, i suppose the problem come from the function of FormInput. </p>

<p>What do i make wrong ? </p>

<p>you can check the <a href=""https://github.com/tannerlinsley/react-form/blob/master/src/formInput.js"" rel=""nofollow noreferrer"">FormInput class</a></p>

<p>Thanks.</p>
","@Dekel it's very complicated to explain by writing ^^. My final point is : i don't want to write in each component (that uses form), ""<FormInput>blablabla</FormInput>"" ... i would prefer just have <customInput> way. More readable firstly.
Secondly, in each child component of FormInput (in this example : datepicker) , i need to set a default value for each field of the current form. So, instead, every time, write this, i'm trying to have a more readable big form components."
"45623426","Nested Component react.cloneElement with react-form","2","<p>I would like to fix a problem with this library : <a href=""https://github.com/tannerlinsley/react-form"" rel=""nofollow noreferrer"">react-form</a>. 
For information, this is my current error : </p>

<blockquote>
  <p>Uncaught Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object. Check the render method of <code>CustomInput</code>.</p>
</blockquote>

<p>This is what i'm trying to do : </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>&lt;CustomInput field=""date"" showErrors={false}&gt;
    &lt;DatePickerForm /&gt;
&lt;/CustomInput&gt;</code></pre>
</div>
</div>
</p>

<p>this is my CustomInput Component : </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, { Component } from 'react';
import FormInput from 'react-form';

class CustomInput extends Component {
  render() {
    const { showErrors, field, children } = this.props;
    return (
      &lt;FormInput showErrors={showErrors} field={field}&gt;
        {({ setValue }) =&gt; {
          return (
            React.cloneElement(children, { setValueForm: setValue })
          );
        }}
      &lt;/FormInput&gt;
    );
  }
}
export default CustomInput;</code></pre>
</div>
</div>
</p>

<p>React.cloneElement(children, { setValueForm: setValue }) seems to return an object. 
But if i just render React.cloneElement without ""FormInput"" part, the rendering is ok. 
So, i suppose the problem come from the function of FormInput. </p>

<p>What do i make wrong ? </p>

<p>you can check the <a href=""https://github.com/tannerlinsley/react-form/blob/master/src/formInput.js"" rel=""nofollow noreferrer"">FormInput class</a></p>

<p>Thanks.</p>
","Can you explain what exactly are you trying to accomplish there?"
"46127964","Calling a props provided method that uses react-router properties","6","<p>I'm having a hard time wrapping my head around this issue. I was wondering if someone here would be able to take a look? I have a component that I'm passing a method called <code>this.fetchContent</code> to as props called Filter. <code>this.fetchContent</code> fires an action creator that uses axios via Redux to get some data from an API, I pass it the current page location using react-router via<code>this.props.params</code>.</p>

<p>The issue occurs with calling the method from the child component. What I've done is bound <code>this.props.fetchContent</code> to an onClick handler inside the Filter component. Whenever I click the <code>&lt;Link /&gt;</code> tag the function fires, and the page route gets updated. However the value of the parent components <code>props</code> doesn't update until <em>after</em> the function has fired, causing only every other click to produce the correct API call.</p>

<p><strong>App:</strong></p>

<pre><code>class App extends Component {
  constructor(props) {
    super(props)

    this.fetchContent = this.fetchContent.bind(this);
  }
  static contextTypes = {
    router: PropTypes.object
  };

  componentDidMount() {
    this.fetchContent();
  }

  fetchContent() {
    let query = `${this.props.params.sub}/${this.props.params.filter}`;
    this.props.fetchList(query, this.props.location.search);
  }

  render() {
    return (
      &lt;div&gt;
        &lt;Filter 
          filter={this.props.params.filter}
          sub={this.props.params.sub}
          search={this.props.location.search}
          fetchContent={this.fetchContent} /&gt;
          {React.cloneElement(this.props.children, this.props)}
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p><strong>Filter</strong></p>

<pre><code>class Filter extends Component {

    render() {
        return (
            &lt;div className=""mdl-tabs mdl-js-tabs mdl-js-ripple-effect""&gt;
                &lt;div className=""mdl-tabs__tab-bar""&gt;
                    &lt;Link to={`/r/${this.props.sub}/new/${this.props.search}`} onClick={this.props.fetchContent}&gt;
                        &lt;span className=""mdl-tabs__tab is-active""&gt;Hot&lt;/span&gt;
                    &lt;/Link&gt;
                &lt;/div&gt;
            &lt;/div&gt;  
        )
    }
}
</code></pre>

<p>I understand what's happening here but I'm not sure what the React-friendly way of solving this issue is. How can I re-factor my code to produce the results I need and what are the best practices for solving this sort of issue?</p>

<p><strong>Edit:</strong> Updated the syntax but still seeing the same issue. </p>
","why do you need to wrap this in another function `fetchContent={() => this.fetchContent}` while you can write it like `fetchContent={this.fetchContent}`"
"46127964","Calling a props provided method that uses react-router properties","6","<p>I'm having a hard time wrapping my head around this issue. I was wondering if someone here would be able to take a look? I have a component that I'm passing a method called <code>this.fetchContent</code> to as props called Filter. <code>this.fetchContent</code> fires an action creator that uses axios via Redux to get some data from an API, I pass it the current page location using react-router via<code>this.props.params</code>.</p>

<p>The issue occurs with calling the method from the child component. What I've done is bound <code>this.props.fetchContent</code> to an onClick handler inside the Filter component. Whenever I click the <code>&lt;Link /&gt;</code> tag the function fires, and the page route gets updated. However the value of the parent components <code>props</code> doesn't update until <em>after</em> the function has fired, causing only every other click to produce the correct API call.</p>

<p><strong>App:</strong></p>

<pre><code>class App extends Component {
  constructor(props) {
    super(props)

    this.fetchContent = this.fetchContent.bind(this);
  }
  static contextTypes = {
    router: PropTypes.object
  };

  componentDidMount() {
    this.fetchContent();
  }

  fetchContent() {
    let query = `${this.props.params.sub}/${this.props.params.filter}`;
    this.props.fetchList(query, this.props.location.search);
  }

  render() {
    return (
      &lt;div&gt;
        &lt;Filter 
          filter={this.props.params.filter}
          sub={this.props.params.sub}
          search={this.props.location.search}
          fetchContent={this.fetchContent} /&gt;
          {React.cloneElement(this.props.children, this.props)}
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p><strong>Filter</strong></p>

<pre><code>class Filter extends Component {

    render() {
        return (
            &lt;div className=""mdl-tabs mdl-js-tabs mdl-js-ripple-effect""&gt;
                &lt;div className=""mdl-tabs__tab-bar""&gt;
                    &lt;Link to={`/r/${this.props.sub}/new/${this.props.search}`} onClick={this.props.fetchContent}&gt;
                        &lt;span className=""mdl-tabs__tab is-active""&gt;Hot&lt;/span&gt;
                    &lt;/Link&gt;
                &lt;/div&gt;
            &lt;/div&gt;  
        )
    }
}
</code></pre>

<p>I understand what's happening here but I'm not sure what the React-friendly way of solving this issue is. How can I re-factor my code to produce the results I need and what are the best practices for solving this sort of issue?</p>

<p><strong>Edit:</strong> Updated the syntax but still seeing the same issue. </p>
","` However the value of the parent components props doesn't update until after the function has fired` How are you passing the props to parent and how is the props gets updated ?"
"46127964","Calling a props provided method that uses react-router properties","6","<p>I'm having a hard time wrapping my head around this issue. I was wondering if someone here would be able to take a look? I have a component that I'm passing a method called <code>this.fetchContent</code> to as props called Filter. <code>this.fetchContent</code> fires an action creator that uses axios via Redux to get some data from an API, I pass it the current page location using react-router via<code>this.props.params</code>.</p>

<p>The issue occurs with calling the method from the child component. What I've done is bound <code>this.props.fetchContent</code> to an onClick handler inside the Filter component. Whenever I click the <code>&lt;Link /&gt;</code> tag the function fires, and the page route gets updated. However the value of the parent components <code>props</code> doesn't update until <em>after</em> the function has fired, causing only every other click to produce the correct API call.</p>

<p><strong>App:</strong></p>

<pre><code>class App extends Component {
  constructor(props) {
    super(props)

    this.fetchContent = this.fetchContent.bind(this);
  }
  static contextTypes = {
    router: PropTypes.object
  };

  componentDidMount() {
    this.fetchContent();
  }

  fetchContent() {
    let query = `${this.props.params.sub}/${this.props.params.filter}`;
    this.props.fetchList(query, this.props.location.search);
  }

  render() {
    return (
      &lt;div&gt;
        &lt;Filter 
          filter={this.props.params.filter}
          sub={this.props.params.sub}
          search={this.props.location.search}
          fetchContent={this.fetchContent} /&gt;
          {React.cloneElement(this.props.children, this.props)}
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p><strong>Filter</strong></p>

<pre><code>class Filter extends Component {

    render() {
        return (
            &lt;div className=""mdl-tabs mdl-js-tabs mdl-js-ripple-effect""&gt;
                &lt;div className=""mdl-tabs__tab-bar""&gt;
                    &lt;Link to={`/r/${this.props.sub}/new/${this.props.search}`} onClick={this.props.fetchContent}&gt;
                        &lt;span className=""mdl-tabs__tab is-active""&gt;Hot&lt;/span&gt;
                    &lt;/Link&gt;
                &lt;/div&gt;
            &lt;/div&gt;  
        )
    }
}
</code></pre>

<p>I understand what's happening here but I'm not sure what the React-friendly way of solving this issue is. How can I re-factor my code to produce the results I need and what are the best practices for solving this sort of issue?</p>

<p><strong>Edit:</strong> Updated the syntax but still seeing the same issue. </p>
","i really cant see where your props are getting updated ? I think you are mentioning about `props.params` in `app`, but where or how is it getting updated ? Can you brief that part ?"
"46127964","Calling a props provided method that uses react-router properties","6","<p>I'm having a hard time wrapping my head around this issue. I was wondering if someone here would be able to take a look? I have a component that I'm passing a method called <code>this.fetchContent</code> to as props called Filter. <code>this.fetchContent</code> fires an action creator that uses axios via Redux to get some data from an API, I pass it the current page location using react-router via<code>this.props.params</code>.</p>

<p>The issue occurs with calling the method from the child component. What I've done is bound <code>this.props.fetchContent</code> to an onClick handler inside the Filter component. Whenever I click the <code>&lt;Link /&gt;</code> tag the function fires, and the page route gets updated. However the value of the parent components <code>props</code> doesn't update until <em>after</em> the function has fired, causing only every other click to produce the correct API call.</p>

<p><strong>App:</strong></p>

<pre><code>class App extends Component {
  constructor(props) {
    super(props)

    this.fetchContent = this.fetchContent.bind(this);
  }
  static contextTypes = {
    router: PropTypes.object
  };

  componentDidMount() {
    this.fetchContent();
  }

  fetchContent() {
    let query = `${this.props.params.sub}/${this.props.params.filter}`;
    this.props.fetchList(query, this.props.location.search);
  }

  render() {
    return (
      &lt;div&gt;
        &lt;Filter 
          filter={this.props.params.filter}
          sub={this.props.params.sub}
          search={this.props.location.search}
          fetchContent={this.fetchContent} /&gt;
          {React.cloneElement(this.props.children, this.props)}
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p><strong>Filter</strong></p>

<pre><code>class Filter extends Component {

    render() {
        return (
            &lt;div className=""mdl-tabs mdl-js-tabs mdl-js-ripple-effect""&gt;
                &lt;div className=""mdl-tabs__tab-bar""&gt;
                    &lt;Link to={`/r/${this.props.sub}/new/${this.props.search}`} onClick={this.props.fetchContent}&gt;
                        &lt;span className=""mdl-tabs__tab is-active""&gt;Hot&lt;/span&gt;
                    &lt;/Link&gt;
                &lt;/div&gt;
            &lt;/div&gt;  
        )
    }
}
</code></pre>

<p>I understand what's happening here but I'm not sure what the React-friendly way of solving this issue is. How can I re-factor my code to produce the results I need and what are the best practices for solving this sort of issue?</p>

<p><strong>Edit:</strong> Updated the syntax but still seeing the same issue. </p>
","When the route changes props gets passed from React Router"
"46127964","Calling a props provided method that uses react-router properties","6","<p>I'm having a hard time wrapping my head around this issue. I was wondering if someone here would be able to take a look? I have a component that I'm passing a method called <code>this.fetchContent</code> to as props called Filter. <code>this.fetchContent</code> fires an action creator that uses axios via Redux to get some data from an API, I pass it the current page location using react-router via<code>this.props.params</code>.</p>

<p>The issue occurs with calling the method from the child component. What I've done is bound <code>this.props.fetchContent</code> to an onClick handler inside the Filter component. Whenever I click the <code>&lt;Link /&gt;</code> tag the function fires, and the page route gets updated. However the value of the parent components <code>props</code> doesn't update until <em>after</em> the function has fired, causing only every other click to produce the correct API call.</p>

<p><strong>App:</strong></p>

<pre><code>class App extends Component {
  constructor(props) {
    super(props)

    this.fetchContent = this.fetchContent.bind(this);
  }
  static contextTypes = {
    router: PropTypes.object
  };

  componentDidMount() {
    this.fetchContent();
  }

  fetchContent() {
    let query = `${this.props.params.sub}/${this.props.params.filter}`;
    this.props.fetchList(query, this.props.location.search);
  }

  render() {
    return (
      &lt;div&gt;
        &lt;Filter 
          filter={this.props.params.filter}
          sub={this.props.params.sub}
          search={this.props.location.search}
          fetchContent={this.fetchContent} /&gt;
          {React.cloneElement(this.props.children, this.props)}
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p><strong>Filter</strong></p>

<pre><code>class Filter extends Component {

    render() {
        return (
            &lt;div className=""mdl-tabs mdl-js-tabs mdl-js-ripple-effect""&gt;
                &lt;div className=""mdl-tabs__tab-bar""&gt;
                    &lt;Link to={`/r/${this.props.sub}/new/${this.props.search}`} onClick={this.props.fetchContent}&gt;
                        &lt;span className=""mdl-tabs__tab is-active""&gt;Hot&lt;/span&gt;
                    &lt;/Link&gt;
                &lt;/div&gt;
            &lt;/div&gt;  
        )
    }
}
</code></pre>

<p>I understand what's happening here but I'm not sure what the React-friendly way of solving this issue is. How can I re-factor my code to produce the results I need and what are the best practices for solving this sort of issue?</p>

<p><strong>Edit:</strong> Updated the syntax but still seeing the same issue. </p>
","@Panther react-router is updating props on the parent. I adjusted the syntax and still see the issue. `this.props.params` doesn't update until after `this.fetchContent` gets called, resulting in the props argument of my action creator being out of date."
"46127964","Calling a props provided method that uses react-router properties","6","<p>I'm having a hard time wrapping my head around this issue. I was wondering if someone here would be able to take a look? I have a component that I'm passing a method called <code>this.fetchContent</code> to as props called Filter. <code>this.fetchContent</code> fires an action creator that uses axios via Redux to get some data from an API, I pass it the current page location using react-router via<code>this.props.params</code>.</p>

<p>The issue occurs with calling the method from the child component. What I've done is bound <code>this.props.fetchContent</code> to an onClick handler inside the Filter component. Whenever I click the <code>&lt;Link /&gt;</code> tag the function fires, and the page route gets updated. However the value of the parent components <code>props</code> doesn't update until <em>after</em> the function has fired, causing only every other click to produce the correct API call.</p>

<p><strong>App:</strong></p>

<pre><code>class App extends Component {
  constructor(props) {
    super(props)

    this.fetchContent = this.fetchContent.bind(this);
  }
  static contextTypes = {
    router: PropTypes.object
  };

  componentDidMount() {
    this.fetchContent();
  }

  fetchContent() {
    let query = `${this.props.params.sub}/${this.props.params.filter}`;
    this.props.fetchList(query, this.props.location.search);
  }

  render() {
    return (
      &lt;div&gt;
        &lt;Filter 
          filter={this.props.params.filter}
          sub={this.props.params.sub}
          search={this.props.location.search}
          fetchContent={this.fetchContent} /&gt;
          {React.cloneElement(this.props.children, this.props)}
      &lt;/div&gt;
    );
  }
}
</code></pre>

<p><strong>Filter</strong></p>

<pre><code>class Filter extends Component {

    render() {
        return (
            &lt;div className=""mdl-tabs mdl-js-tabs mdl-js-ripple-effect""&gt;
                &lt;div className=""mdl-tabs__tab-bar""&gt;
                    &lt;Link to={`/r/${this.props.sub}/new/${this.props.search}`} onClick={this.props.fetchContent}&gt;
                        &lt;span className=""mdl-tabs__tab is-active""&gt;Hot&lt;/span&gt;
                    &lt;/Link&gt;
                &lt;/div&gt;
            &lt;/div&gt;  
        )
    }
}
</code></pre>

<p>I understand what's happening here but I'm not sure what the React-friendly way of solving this issue is. How can I re-factor my code to produce the results I need and what are the best practices for solving this sort of issue?</p>

<p><strong>Edit:</strong> Updated the syntax but still seeing the same issue. </p>
","That is what.. as far as i see.. there no route change! How do u change the route ?"
"46244010","transform ""Route children"" and ""cloneElement"" to RouterV4","3","<p>I want to write a Router in React Project. But Route children and cloneElement  work not anymore by Version 4. I haven't found demo or tutor to teach how to pass value in router in Router Version 4.</p>

<p>Have someone idea to solve that?</p>

<p>My project in Github: <a href=""https://github.com/LeMueller/musicplayer-by-react/tree/dev"" rel=""nofollow noreferrer"">https://github.com/LeMueller/musicplayer-by-react/tree/dev</a></p>

<p>Thanks a lot.</p>

<pre><code>import React, {Component} from 'react';
import Header from './commen/header.js';
import Player from './page/player.js';
import {MUSIC_LIST} from '../config/musiclist';
import MusicListUI from './page/musiclistui.js';

import {HashRouter, Switch, Route, Link} from 'react-router-dom';


class MusicApp extends Component{
    constructor(props){
        super(props);
        this.state={
            musiclist: MUSIC_LIST,
            currentMusicItem: MUSIC_LIST[0]
        }
    }

    componentDidMount(){


        $('#player').jPlayer({
            ready:function(){
                $(this).jPlayer('setMedia',{
                    mp3:'http://oj4t8z2d5.bkt.clouddn.com/%E9%AD%94%E9%AC%BC%E4%B8%AD%E7%9A%84%E5%A4%A9%E4%BD%BF.mp3'
                }).jPlayer('play');
            },
            supplied:'mp3',
            wmode: 'window'
        });


    }

    componentWillUnMount(){

    }

    render(){
        return(
            &lt;div&gt;
                {React.cloneElement(this.props.children, this.state)}               
            &lt;/div&gt;
        )
    }
}

export default class Root extends Component{
    render(){
        return(
            &lt;HashRouter&gt;
                &lt;div&gt;
                    &lt;Header/&gt;
                    &lt;Route exact path=""/"" component={MusicApp}&gt;
                        &lt;Route exact path=""/"" component={Player }&gt;&lt;/Route&gt;
                        &lt;Route path=""/list"" component={MusicListUI}&gt;&lt;/Route&gt;
                    &lt;/Route&gt;
                &lt;/div&gt;

            &lt;/HashRouter&gt;
        )
    }   
}
</code></pre>
","Are you looking to pass props to a component via a <Route /> component?"
"46244010","transform ""Route children"" and ""cloneElement"" to RouterV4","3","<p>I want to write a Router in React Project. But Route children and cloneElement  work not anymore by Version 4. I haven't found demo or tutor to teach how to pass value in router in Router Version 4.</p>

<p>Have someone idea to solve that?</p>

<p>My project in Github: <a href=""https://github.com/LeMueller/musicplayer-by-react/tree/dev"" rel=""nofollow noreferrer"">https://github.com/LeMueller/musicplayer-by-react/tree/dev</a></p>

<p>Thanks a lot.</p>

<pre><code>import React, {Component} from 'react';
import Header from './commen/header.js';
import Player from './page/player.js';
import {MUSIC_LIST} from '../config/musiclist';
import MusicListUI from './page/musiclistui.js';

import {HashRouter, Switch, Route, Link} from 'react-router-dom';


class MusicApp extends Component{
    constructor(props){
        super(props);
        this.state={
            musiclist: MUSIC_LIST,
            currentMusicItem: MUSIC_LIST[0]
        }
    }

    componentDidMount(){


        $('#player').jPlayer({
            ready:function(){
                $(this).jPlayer('setMedia',{
                    mp3:'http://oj4t8z2d5.bkt.clouddn.com/%E9%AD%94%E9%AC%BC%E4%B8%AD%E7%9A%84%E5%A4%A9%E4%BD%BF.mp3'
                }).jPlayer('play');
            },
            supplied:'mp3',
            wmode: 'window'
        });


    }

    componentWillUnMount(){

    }

    render(){
        return(
            &lt;div&gt;
                {React.cloneElement(this.props.children, this.state)}               
            &lt;/div&gt;
        )
    }
}

export default class Root extends Component{
    render(){
        return(
            &lt;HashRouter&gt;
                &lt;div&gt;
                    &lt;Header/&gt;
                    &lt;Route exact path=""/"" component={MusicApp}&gt;
                        &lt;Route exact path=""/"" component={Player }&gt;&lt;/Route&gt;
                        &lt;Route path=""/list"" component={MusicListUI}&gt;&lt;/Route&gt;
                    &lt;/Route&gt;
                &lt;/div&gt;

            &lt;/HashRouter&gt;
        )
    }   
}
</code></pre>
","yes, i think so. but in Version 4. there are many things in V 3."
"46244010","transform ""Route children"" and ""cloneElement"" to RouterV4","3","<p>I want to write a Router in React Project. But Route children and cloneElement  work not anymore by Version 4. I haven't found demo or tutor to teach how to pass value in router in Router Version 4.</p>

<p>Have someone idea to solve that?</p>

<p>My project in Github: <a href=""https://github.com/LeMueller/musicplayer-by-react/tree/dev"" rel=""nofollow noreferrer"">https://github.com/LeMueller/musicplayer-by-react/tree/dev</a></p>

<p>Thanks a lot.</p>

<pre><code>import React, {Component} from 'react';
import Header from './commen/header.js';
import Player from './page/player.js';
import {MUSIC_LIST} from '../config/musiclist';
import MusicListUI from './page/musiclistui.js';

import {HashRouter, Switch, Route, Link} from 'react-router-dom';


class MusicApp extends Component{
    constructor(props){
        super(props);
        this.state={
            musiclist: MUSIC_LIST,
            currentMusicItem: MUSIC_LIST[0]
        }
    }

    componentDidMount(){


        $('#player').jPlayer({
            ready:function(){
                $(this).jPlayer('setMedia',{
                    mp3:'http://oj4t8z2d5.bkt.clouddn.com/%E9%AD%94%E9%AC%BC%E4%B8%AD%E7%9A%84%E5%A4%A9%E4%BD%BF.mp3'
                }).jPlayer('play');
            },
            supplied:'mp3',
            wmode: 'window'
        });


    }

    componentWillUnMount(){

    }

    render(){
        return(
            &lt;div&gt;
                {React.cloneElement(this.props.children, this.state)}               
            &lt;/div&gt;
        )
    }
}

export default class Root extends Component{
    render(){
        return(
            &lt;HashRouter&gt;
                &lt;div&gt;
                    &lt;Header/&gt;
                    &lt;Route exact path=""/"" component={MusicApp}&gt;
                        &lt;Route exact path=""/"" component={Player }&gt;&lt;/Route&gt;
                        &lt;Route path=""/list"" component={MusicListUI}&gt;&lt;/Route&gt;
                    &lt;/Route&gt;
                &lt;/div&gt;

            &lt;/HashRouter&gt;
        )
    }   
}
</code></pre>
","I have added an answer for passing props. Also, in v4 you don't nest <Routes />. You instead put them inside other components. Here is a good article: https://css-tricks.com/react-router-4/"
"46943534","How to implement react motion simple example","0","<p>I have been following examples on on this <a href=""https://github.com/chenglou/react-motion/issues/287"" rel=""nofollow noreferrer"">issue on github</a> and on this <a href=""https://medium.com/@zrisha/simple-transition-with-react-motion-236ae5f348b1"" rel=""nofollow noreferrer"">example</a> from medium.</p>

<p>Here is my code for the transition component</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>export default function Transition (props) {
    let defaultStyles = [], styles = [];
    const {children} = props;
    React.Children.map(children, (child)=&gt;{

        if(child){
            defaultStyles.push({
                key: child.key,
                data: child,
                style: {opacity: 0}
            });

            styles.push({
                key: child.key,
                data: child,
                style: {opacity: spring(1)}
            })
        }
    });

    function willEnter() {
        return {opacity: 0}
    }

    function willLeave() {
        return {opacity: spring(0, {stiffness: 90, damping: 11})}
    }

    console.log(styles, defaultStyles);

    &lt;TransitionMotion styles={styles} defaultStyles={defaultStyles} willEnter={willEnter} willLeave={willLeave} children={props.children}&gt;
        {
            (styles)=&gt;{
                return(
                    &lt;div&gt;
                        {
                            styles.map((child)=&gt;{
                                const {key, data, style} = child;
                                return React.cloneElement(
                                    data,
                                    {key, style}
                                )
                            })
                        }
                    &lt;/div&gt;
                )
            }
        }
    &lt;/TransitionMotion&gt;
};</code></pre>
</div>
</div>
</p>

<p>And here is a simple component I tried to build using it</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class GroupItem extends Component{

    render(){
        return(
            &lt;Transition&gt;
                {&lt;div key=""1""&gt;Hello there&lt;/div&gt;}
            &lt;/Transition&gt;
        )
    }
}</code></pre>
</div>
</div>
</p>

<p>On trying to open the group component I get the following message</p>

<p><strong>bundle.js:4882 Warning: Transition(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.</strong></p>

<p>I do not know where this is coming from in the Transition component any help would be great.</p>
",""
"47028558","React.cloneElement inside React.Children.map is causing element keys to change","2","<p>As the title states, using <code>React.cloneElement</code> inside <code>React.Children.map</code> is causing element keys to change.</p>

<p>Here is a <a href=""https://codesandbox.io/s/91jm9609w"" rel=""nofollow noreferrer"">sandbox</a> demonstrating this.</p>

<pre><code>React.Children.map(children, (child) =&gt; {
    let clonedEl = React.cloneElement( child );
    console.log(clonedEl);
    return clonedEl;
});
</code></pre>

<p>The result of that block of code has elements with <code>.$</code> added to the front of every key. This is really confusing for two reasons.</p>

<p>1: The documentation says that <a href=""https://reactjs.org/docs/react-api.html#cloneelement"" rel=""nofollow noreferrer"">cloneElement</a> will preserve keys and refs. </p>

<blockquote>
  <p>Clone and return a new React element using element as the starting point. The resulting element will have the original element’s props with the new props merged in shallowly. New children will replace existing children. key and ref from the original element will be preserved.</p>
</blockquote>

<p>2: The results of the <code>console.log</code> is an element with preserved keys and ref...</p>

<p>This would lead me to believe that the addition is happening somewhere in the React.Children.map code.</p>

<p>UPDATE: After looking at the code for React.Children.map...</p>

<p>I figured out it is getting added by the following function chain: mapChilren -> mapIntoWithKeyPrefixInternal -> traverseAllChildren -> traverseAllChildrenImpl -> mapSingleChildIntoContext.</p>

<p><code>mapSingleChildIntoContext</code>'s third argument is childKey. It is called with <code>nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar</code> as it's third argument inside <code>traverseAllChildrenImpl</code>.</p>

<p><code>SEPARATOR = "".""</code> and <code>getComponentKey</code> returns the key with a $ prefixed to it within the escape function.</p>

<p>UPDATED PROBLEM:</p>

<p>Now I'm looking for a way around this... I'm not sure if there is one considering traverseAllChildrenImpl is called with an empty string as the <code>nameSoFar</code> within traverseAllChildren.</p>

<p>I think this may be intended the intended behavior of <code>React.Children.map</code> to build new DOM. This is causing a for me when trying to update the props on dynamic children.</p>

<p>SOLUTION: Don't use things how they're not intended to be used.</p>

<p>I was building a grouping of form controls that are really easy for the developer. The state tree is dynamically built by mapping the children and using . delineated string names from elements with names to create keys and values on the top level component.</p>

<p>The top level form component has onChange handlers for different types of controls and they are applied to the onChange properties of elements as needed. This mapping was done in the componentWillMount method and is what was causing me problems.</p>

<p>Moving the mapping to the render method allowed me to not have to update the children in the handles. Updating in the handles was causing elements to lose focus. All is good now!</p>
","Not exactly an answer to your question but you can use `React.Children.forEach` as an alternative."
"47028558","React.cloneElement inside React.Children.map is causing element keys to change","2","<p>As the title states, using <code>React.cloneElement</code> inside <code>React.Children.map</code> is causing element keys to change.</p>

<p>Here is a <a href=""https://codesandbox.io/s/91jm9609w"" rel=""nofollow noreferrer"">sandbox</a> demonstrating this.</p>

<pre><code>React.Children.map(children, (child) =&gt; {
    let clonedEl = React.cloneElement( child );
    console.log(clonedEl);
    return clonedEl;
});
</code></pre>

<p>The result of that block of code has elements with <code>.$</code> added to the front of every key. This is really confusing for two reasons.</p>

<p>1: The documentation says that <a href=""https://reactjs.org/docs/react-api.html#cloneelement"" rel=""nofollow noreferrer"">cloneElement</a> will preserve keys and refs. </p>

<blockquote>
  <p>Clone and return a new React element using element as the starting point. The resulting element will have the original element’s props with the new props merged in shallowly. New children will replace existing children. key and ref from the original element will be preserved.</p>
</blockquote>

<p>2: The results of the <code>console.log</code> is an element with preserved keys and ref...</p>

<p>This would lead me to believe that the addition is happening somewhere in the React.Children.map code.</p>

<p>UPDATE: After looking at the code for React.Children.map...</p>

<p>I figured out it is getting added by the following function chain: mapChilren -> mapIntoWithKeyPrefixInternal -> traverseAllChildren -> traverseAllChildrenImpl -> mapSingleChildIntoContext.</p>

<p><code>mapSingleChildIntoContext</code>'s third argument is childKey. It is called with <code>nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar</code> as it's third argument inside <code>traverseAllChildrenImpl</code>.</p>

<p><code>SEPARATOR = "".""</code> and <code>getComponentKey</code> returns the key with a $ prefixed to it within the escape function.</p>

<p>UPDATED PROBLEM:</p>

<p>Now I'm looking for a way around this... I'm not sure if there is one considering traverseAllChildrenImpl is called with an empty string as the <code>nameSoFar</code> within traverseAllChildren.</p>

<p>I think this may be intended the intended behavior of <code>React.Children.map</code> to build new DOM. This is causing a for me when trying to update the props on dynamic children.</p>

<p>SOLUTION: Don't use things how they're not intended to be used.</p>

<p>I was building a grouping of form controls that are really easy for the developer. The state tree is dynamically built by mapping the children and using . delineated string names from elements with names to create keys and values on the top level component.</p>

<p>The top level form component has onChange handlers for different types of controls and they are applied to the onChange properties of elements as needed. This mapping was done in the componentWillMount method and is what was causing me problems.</p>

<p>Moving the mapping to the render method allowed me to not have to update the children in the handles. Updating in the handles was causing elements to lose focus. All is good now!</p>
","Good point, I could ""manually"" rebuild the children with forEach. I think that might have to be the work around. I think this may be intended behavior of map."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","@ArmanCharan Sorry, it is `Vote` not `Voting`. I modified the code a little to make the question. I've updated the question with the correct information."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","@AbdennourTOUMI I am using React 15.6"
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","Next step might be to try nesting the routes within a [`<Switch/>`](https://reacttraining.com/react-router/web/api/Switch) statement, seeing as giving the `<App/>` component one child seems to work."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","@Joshua_M for future reference, anytime you see an `Element type is invalid` that means you are referencing a JSX element incorrectly. Either you have an error in your export/import statements (such as in this case) an issue with your casing (If it is not in pascal case react will throw an error) or a missing return statement in your render method"
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","are u using React 16 ?"
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","Simple error in your first `<Route/>`'s `component` prop. Change `Vote` to `Voting`, or vice versa, to match your import statement."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","Hey, I cracked it with the props directly in **App.jsx**, so App.jsx returns the `<Switch />` with the directly routed components. Thanks so much for your help."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","`<Switch/>` worked a treat, thank you. Unfortunately I'm still not getting any data in either page, even after binding the functions in the `constructor`."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","You can also pass `props` directly to route components like so: `<Route path=""/"" component={() => <Vote pair={pair}/>} />`. It might be cleaner to declare the routes from inside of your `<App/>` component's file for the sake of passing data."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","Also, `getPair()` isn't bound to `this`. You might want to try calling it using an arrow function or binding it inside of your component's `constructor()` method."
"47584828","Importing stylesheet in a server rendered react view - TypeError: style._getCss is not a function","2","<p>I am building an isomorphic react-redux app on top of NodeJS. I am rendering my homePage from the server. However, my styles are not reflected in my rendered view. I would like to import stylesheets just how I do it on the client side. I tried <a href=""https://stackoverflow.com/questions/36507147/webpack-es6-how-to-import-stylesheets"">this article</a> and <a href=""https://stackoverflow.com/questions/30347722/importing-css-files-in-isomorphic-react-components"">this</a> too, but neither of them actually got me what I want to achieve.</p>

<p>Here are more details on the project.</p>

<p>.babelrc</p>

<pre><code>{
 ""presets"": [ ""es2015"", ""react"", ""stage-0""],
 ""plugins"": [""transform-decorators-legacy"", [""transform-assets"", {
            ""extensions"": [""scss""],
            ""name"": ""[name].[ext]?[sha512:hash:base64:7]"",
          }]]
 }
</code></pre>

<p>webpack.config.js</p>

<pre><code>const path = require('path');
module.exports = [
    {
      name: 'client',
      target: 'web',
      entry: './routes/client.jsx',
      output: {
        path: path.join(__dirname, 'assets'),
        filename: 'client.js',
        publicPath: '/assets/',
      },
      resolve: {
        extensions: ['.js', '.jsx']
      },
      devtool: 'source-map',
      module: {
        rules: [
            {
                test: /\.(js|jsx)$/,
                exclude: /(node_modules\/)/,
                use: [{ loader: 'babel-loader'}]
            },
            {
                test: /\.scss$/,
                use: [
                    { loader: 'isomorphic-style-loader' },
                    {
                        loader: 'css-loader',
                        options: {
                            modules: true,
                            importLoaders: 1,
                            localIdentName: '[name]__[local]___[hash:base64:5]',
                            sourceMap: true
                        }
                    },
                    { loader: 'sass-loader'}
                ]
            }
        ],
    },
}];
</code></pre>

<p>server.js</p>

<pre><code>import express from 'express'
import React from 'react'
import { createStore } from 'redux'
import { Provider } from 'react-redux'
import MainStore from './views/store/MainStore'
import { StaticRouter } from 'react-router-dom';
import Routes from './routes/routes';
import Template from './views/templates/template';
import { Helmet } from 'react-helmet';
import { renderToString } from 'react-dom/server'
import ReactDOMServer from 'react-dom/server';
import ContextProvider from './routes/contextProvider'

const webpackDevMiddleware = require('webpack-dev-middleware')
const config = require('./webpack/webpack.development.config.js')
const webpack = require('webpack')
const app = express()
const port = 3000
const compiler = webpack(config);

let preloadedState = { shipper: {view: ""from_server""} }

app.use('/assets', express.static('./assets'))
app.use(webpackDevMiddleware(compiler, {
   publicPath: ""/assets/"",
}));

app.use(handleRender);

function handleRender(req, res) {
   // Create a new Redux store instance
   const store = createStore(MainStore, preloadedState)
   const css = new Set(); // CSS for all rendered React components
   const context = { insertCss: (...styles) =&gt; styles.forEach(style =&gt;   
   css.add(style._getCss())) }

   const html = renderToString(
     &lt;Provider store={store}&gt;
        &lt;StaticRouter context={context}&gt;
            &lt;ContextProvider context={context}&gt;
            &lt;Routes /&gt;
        &lt;/ContextProvider&gt;
        &lt;/StaticRouter&gt;
     &lt;/Provider&gt;
  )
  const finalState = store.getState()
  const helmet = Helmet.renderStatic();
  const preloadedState = store.getState()
  res.send(renderFullPage(html, preloadedState));
 }

 function renderFullPage(html, finalState) {
    return `
      &lt;!doctype html&gt;
      &lt;html&gt;
         &lt;head&gt;
            &lt;title&gt;Redux Universal Example&lt;/title&gt;
            &lt;style type=""text/css""&gt;${[...css].join('')}&lt;/style&gt;
         &lt;/head&gt;
         &lt;body&gt;
             &lt;div id=""root""&gt;${html}&lt;/div&gt;
             &lt;script&gt;
                window.__PRELOADED_STATE__ = ${JSON.stringify(preloadedState).replace(/&lt;/g, '\\u003c')}
             &lt;/script&gt;
             &lt;script src=""./assets/client.js""&gt;&lt;/script&gt;
         &lt;/body&gt;
    &lt;/html&gt;
    `
  }

app.listen(port)
</code></pre>

<p>contextProvider.js</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Routes from './routes.jsx';

export default class ContextProvider extends Component {
   static childContextTypes = {
   insertCss: PropTypes.func,
}

 getChildContext() {
    return { ...this.props.context }
  }

 render() {
    const { children, ...props } = this.props
    return React.cloneElement(children, props)
  }
}
</code></pre>

<p>I am importing it in my homePresenter as</p>

<pre><code>import homePageStyle from './home.scss';
</code></pre>

<p>and using it in my div in the same component as </p>

<pre><code>&lt;div className=""component""&gt;
</code></pre>

<p>If I change this to</p>

<pre><code>&lt;div className={homePageStyle.component}&gt;
</code></pre>

<p>I get an error on the browser </p>

<pre><code>TypeError: style._getCss is not a function at server.js:52:84
</code></pre>

<p>On the browser, I could see that the div has class name as 'component'; it;'s just it is not inheriting the styles.</p>

<p>Any suggestions on what I am missing here?</p>
","did you use `import withStyles from 'isomorphic-style-loader/lib/withStyles';` in your react component?"
"47584828","Importing stylesheet in a server rendered react view - TypeError: style._getCss is not a function","2","<p>I am building an isomorphic react-redux app on top of NodeJS. I am rendering my homePage from the server. However, my styles are not reflected in my rendered view. I would like to import stylesheets just how I do it on the client side. I tried <a href=""https://stackoverflow.com/questions/36507147/webpack-es6-how-to-import-stylesheets"">this article</a> and <a href=""https://stackoverflow.com/questions/30347722/importing-css-files-in-isomorphic-react-components"">this</a> too, but neither of them actually got me what I want to achieve.</p>

<p>Here are more details on the project.</p>

<p>.babelrc</p>

<pre><code>{
 ""presets"": [ ""es2015"", ""react"", ""stage-0""],
 ""plugins"": [""transform-decorators-legacy"", [""transform-assets"", {
            ""extensions"": [""scss""],
            ""name"": ""[name].[ext]?[sha512:hash:base64:7]"",
          }]]
 }
</code></pre>

<p>webpack.config.js</p>

<pre><code>const path = require('path');
module.exports = [
    {
      name: 'client',
      target: 'web',
      entry: './routes/client.jsx',
      output: {
        path: path.join(__dirname, 'assets'),
        filename: 'client.js',
        publicPath: '/assets/',
      },
      resolve: {
        extensions: ['.js', '.jsx']
      },
      devtool: 'source-map',
      module: {
        rules: [
            {
                test: /\.(js|jsx)$/,
                exclude: /(node_modules\/)/,
                use: [{ loader: 'babel-loader'}]
            },
            {
                test: /\.scss$/,
                use: [
                    { loader: 'isomorphic-style-loader' },
                    {
                        loader: 'css-loader',
                        options: {
                            modules: true,
                            importLoaders: 1,
                            localIdentName: '[name]__[local]___[hash:base64:5]',
                            sourceMap: true
                        }
                    },
                    { loader: 'sass-loader'}
                ]
            }
        ],
    },
}];
</code></pre>

<p>server.js</p>

<pre><code>import express from 'express'
import React from 'react'
import { createStore } from 'redux'
import { Provider } from 'react-redux'
import MainStore from './views/store/MainStore'
import { StaticRouter } from 'react-router-dom';
import Routes from './routes/routes';
import Template from './views/templates/template';
import { Helmet } from 'react-helmet';
import { renderToString } from 'react-dom/server'
import ReactDOMServer from 'react-dom/server';
import ContextProvider from './routes/contextProvider'

const webpackDevMiddleware = require('webpack-dev-middleware')
const config = require('./webpack/webpack.development.config.js')
const webpack = require('webpack')
const app = express()
const port = 3000
const compiler = webpack(config);

let preloadedState = { shipper: {view: ""from_server""} }

app.use('/assets', express.static('./assets'))
app.use(webpackDevMiddleware(compiler, {
   publicPath: ""/assets/"",
}));

app.use(handleRender);

function handleRender(req, res) {
   // Create a new Redux store instance
   const store = createStore(MainStore, preloadedState)
   const css = new Set(); // CSS for all rendered React components
   const context = { insertCss: (...styles) =&gt; styles.forEach(style =&gt;   
   css.add(style._getCss())) }

   const html = renderToString(
     &lt;Provider store={store}&gt;
        &lt;StaticRouter context={context}&gt;
            &lt;ContextProvider context={context}&gt;
            &lt;Routes /&gt;
        &lt;/ContextProvider&gt;
        &lt;/StaticRouter&gt;
     &lt;/Provider&gt;
  )
  const finalState = store.getState()
  const helmet = Helmet.renderStatic();
  const preloadedState = store.getState()
  res.send(renderFullPage(html, preloadedState));
 }

 function renderFullPage(html, finalState) {
    return `
      &lt;!doctype html&gt;
      &lt;html&gt;
         &lt;head&gt;
            &lt;title&gt;Redux Universal Example&lt;/title&gt;
            &lt;style type=""text/css""&gt;${[...css].join('')}&lt;/style&gt;
         &lt;/head&gt;
         &lt;body&gt;
             &lt;div id=""root""&gt;${html}&lt;/div&gt;
             &lt;script&gt;
                window.__PRELOADED_STATE__ = ${JSON.stringify(preloadedState).replace(/&lt;/g, '\\u003c')}
             &lt;/script&gt;
             &lt;script src=""./assets/client.js""&gt;&lt;/script&gt;
         &lt;/body&gt;
    &lt;/html&gt;
    `
  }

app.listen(port)
</code></pre>

<p>contextProvider.js</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Routes from './routes.jsx';

export default class ContextProvider extends Component {
   static childContextTypes = {
   insertCss: PropTypes.func,
}

 getChildContext() {
    return { ...this.props.context }
  }

 render() {
    const { children, ...props } = this.props
    return React.cloneElement(children, props)
  }
}
</code></pre>

<p>I am importing it in my homePresenter as</p>

<pre><code>import homePageStyle from './home.scss';
</code></pre>

<p>and using it in my div in the same component as </p>

<pre><code>&lt;div className=""component""&gt;
</code></pre>

<p>If I change this to</p>

<pre><code>&lt;div className={homePageStyle.component}&gt;
</code></pre>

<p>I get an error on the browser </p>

<pre><code>TypeError: style._getCss is not a function at server.js:52:84
</code></pre>

<p>On the browser, I could see that the div has class name as 'component'; it;'s just it is not inheriting the styles.</p>

<p>Any suggestions on what I am missing here?</p>
","@Umesh Thank you for the lead. I inserted, but I am now running into a different issue. I followed the process here https://github.com/kriasoft/isomorphic-style-loader/issues/110 and https://github.com/kriasoft/react-starter-kit/issues/378 and according to the documentation of isomorphic-style-loader, isomorphic-style-loader provides two helper methods on to the styles object - ._insertCss() (injects CSS into the DOM) and ._getCss() (returns a CSS string).  I am however getting the error ""TypeError: style._getCss is not a function at server.js:52:84"""
"47717250","React-no-redux cant pass appstate through react-router","0","<p>Im trying to use React-No-Redux which is redux but without the redux package. i will put my code below because the issue im having is that i can access the props in my navbar which is outside the router but i cant access the appState from inside any of the components inside of my router.</p>

<p>AppState.js</p>

<pre><code>import React, { Component } from 'react';

export default class AppState extends Component {
  constructor(props) {
    super(props);
    this.state = {
      test: 'hello im a test string'
    };
    this.setAppState = this.setAppState.bind(this);
}

setAppState(newState, callback) {
  this.setState(newState, callback);
}

render() {
  return (
    &lt;div className=""AppState""&gt;
    {React.Children.map(this.props.children, child =&gt; {
      return React.cloneElement(child, {
      appState: this.state,
      setAppState: this.setAppState
      });
    })}
  &lt;/div&gt;
  );
}
}
</code></pre>

<p>index.js</p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import registerServiceWorker from './registerServiceWorker';

import AppState from './AppState';
import StateConstants from './constants/stateConstants';
import Error404 from './views/errorPages/Error404';

ReactDOM.render(
  &lt;Router&gt;
    &lt;AppState&gt;
      &lt;App
        setAppState={this.setAppState}
        appState={this.appState}
      /&gt;
    &lt;/AppState&gt;
  &lt;/Router&gt;
  , 
  document.getElementById('root')
);
registerServiceWorker();
</code></pre>

<p>App.js</p>

<pre><code>import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';

import Error404 from './views/errorPages/Error404';
import Home from './views/pages/Home';
import Navbar from './partials/Navbar';

import './App.css';

class App extends Component {
  render() {
    return (
      &lt;div&gt;
        &lt;Navbar 
          setAppState={this.props.setAppState}
          appState={this.props.appState}
        /&gt;
        &lt;Switch&gt;
          &lt;Route exact path='/' component={Home} appState={this.props.appState} setAppState={this.props.setAppState} /&gt;
          &lt;Route component={Error404} /&gt;
        &lt;/Switch&gt;
      &lt;/div&gt;
    );
  }
}

export default App;
</code></pre>

<p>Navbar.js</p>

<pre><code>import React, { Component } from 'react';

export default class Navbar extends Component {
  constructor(props){
    super(props);
    console.log(this.props);
  }

  render(){
    return (
      &lt;div className=""navbar""&gt;&lt;center&gt;&lt;h1&gt;Hello Navbar&lt;/h1&gt;&lt;/center&lt;/div&gt;
    );
}
}
</code></pre>

<p>Home.js the one it is erroring on it says cannot read property test of undefined</p>

<pre><code>import React, { Component } from 'react';

export default class Home extends Component{
  constructor(props){
    super(props);
    console.log(this.props);
  }

  render(){
    return (
      &lt;div&gt;
        {this.props.appState.test}
      &lt;/div&gt;
    );
  }

}
</code></pre>

<p>This should work as I have done it before and this is the exact same thing I did last time.</p>
",""
"47823748","react-intl testing using enzyme","0","<p>I am trying to test React-intl using enzyme. 
I have 1 languages french and english
My App.js is as follows</p>

<pre><code>import React from 'react'
import PropTypes from 'prop-types'
import LocaleDropDown from './components/LocaleDropDown'
import {FormattedDate, FormattedTime, FormattedNumber, injectIntl} from 'react-intl'
function App ({children}) {
  return (
    &lt;div className=""container-fluid""&gt;
      {children}
      &lt;div className = ""date-time-wrapper""&gt;
        &lt;span&gt;Date: &lt;/span&gt;&lt;FormattedDate value={new Date()}/&gt;&lt;br/&gt;
        &lt;span&gt;Time: &lt;/span&gt;&lt;FormattedTime value={new Date()}/&gt;&lt;br/&gt;
        &lt;span&gt;Number: &lt;/span&gt;&lt;FormattedNumber value={1000}/&gt;&lt;br/&gt;&lt;br/&gt;
      &lt;/div&gt;
      &lt;LocaleDropDown/&gt;
    &lt;/div&gt;
  )
}

App.propTypes = {
  children: PropTypes.node.isRequired
}

export default injectIntl(App)
</code></pre>

<p>My app.spec.js is</p>

<pre><code>    import React from 'react'
    import ReactDOM from 'react-dom'
    import { shallow } from 'enzyme'
    import sinon from 'sinon'
    import { addLocaleData, IntlProvider } from 'react-intl'
    import App from './App'
    import RecipeList from './recipes/RecipeList/RecipeList'
    import {shallowWithIntlForApp} from './recipes/helpers/intl-test'
    import fr from './locales/fr.json'

    describe('App', () =&gt; {
      it('renders without crashing', () =&gt; {
        const div = document.createElement('div')
        ReactDOM.render(&lt;IntlProvider locale=""en""&gt;&lt;App/&gt;&lt;/IntlProvider&gt;, div)
      })

  it('renders french text when locale is french', () =&gt; {

    const locale = 'fr'
    const langData = {'fr': fr}
    const messages = langData[locale]
    const intlProvider = new IntlProvider({ locale: 'fr', messages}, {})
    const { intl } = intlProvider.getChildContext()
    const wrapper = shallowWithIntlForApp(&lt;App/&gt;, { intl }).first().shallow()
    const date1 = wrapper.find('div.date-time-wrapper').childAt(1)
    console.log(date1.render().text())
    })
  })
</code></pre>

<p>My helper function is
intl-test.js</p>

<pre><code>import React from 'react'
import { IntlProvider, intlShape } from 'react-intl'
import { mount, shallow } from 'enzyme'
import Cookie from 'js-cookie'
import en from '../../locales/en.json'
const locale = Cookie.get('locale') || 'en'
const messages = en[locale]
const intlProvider = new IntlProvider({ locale: 'en', messages }, {})
const { intl } = intlProvider.getChildContext()

/**
 * When using React-Intl `inject    Intl` on components, props.intl is required.
 */
function nodeWithIntlProp (node) {
  return React.cloneElement(node, { intl })
}

export function shallowWithIntl (node) {
  return shallow(nodeWithIntlProp(node), { context: { intl } })
}

export function shallowWithIntlForApp (node, {intl}) {
  return shallow(nodeWithIntlProp(node), { context: { intl } })
}

export function mountWithIntl (node) {
  return mount(nodeWithIntlProp(node), {
    context: { intl },
    childContextTypes: { intl: intlShape }
  })
}
</code></pre>

<p>I am expecting the line console.log(date1.render().text()) to give me the date in ""fr"" format but it fails. it says"" Invariant Violation: [React Intl] Could not find required <code>intl</code> object.  needs to exist in the component ancestry."" 
What is wrong here? I was assuming that adding ""first().shallow()"" would fix this particular error but it did not</p>
",""
"48011113","Add props to component of wrapped route in react router v4","4","<p>I have routes that share the same behauvior, layout, etc. I'd like to pass props from layout to those components (Dashboard and Login) inside Route</p>

<p>My routes.js file is the following one</p>

<pre><code>//imports omited    
export default (
    &lt;AppLayout&gt;
        &lt;Route component={Dashboard} path=""/"" key=""/"" /&gt;
        &lt;Route component={Login} path=""/login"" key=""/login"" /&gt;
    &lt;/AppLayout&gt;
);
</code></pre>

<p>The render method of AppLayout.js has this code</p>

<pre><code>const childrenWithExtraProp = React.Children.map(this.props.children, (child) =&gt; {
            return React.cloneElement(child, {
                component: React.cloneElement(child.props.component, {
                    functions: {
                        updateMenuTitle: this.updateTitle //function
                    }
                })
            });
        });
</code></pre>

<p>This code results on numerous errors:</p>

<pre><code>Warning: Failed prop type: Invalid prop `component` of type `object` supplied to `Route`, expected `function`.
    in Route
    in AppHeader
    in Router (created by BrowserRouter)
    in BrowserRouter (created by App)
    in App


Check the render method of `Route`.
    in Route
    in AppHeader
    in Router (created by BrowserRouter)
    in BrowserRouter (created by App)
    in App


Uncaught Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.

    Check the render method of `Route`.
        at invariant (invariant.js?7313:42)
        at createFiberFromElement (react-dom.development.js?cada:5753)
        at reconcileSingleElement (react-dom.development.js?cada:7531)
        at reconcileChildFibers (react-dom.development.js?cada:7635)
        at reconcileChildrenAtExpirationTime (react-dom.development.js?cada:7756)
        at reconcileChildren (react-dom.development.js?cada:7747)
        at finishClassComponent (react-dom.development.js?cada:7881)
        at updateClassComponent (react-dom.development.js?cada:7850)
        at beginWork (react-dom.development.js?cada:8225)
        at performUnitOfWork (react-dom.development.js?cada:10224)
</code></pre>

<p>At the last project I've worked we where using Routes inside Route, but at React-Router v4 this is not allowed.</p>

<p>Edit: before was something like this:</p>

<pre><code>//Array of routes declared before
export default (
    &lt;Router history={browserHistory}&gt;
        &lt;Route path=""/"" component={General}&gt;
            &lt;IndexRoute component={Index} /&gt;
            {routes}
        &lt;/Route&gt;
    &lt;/Router&gt;
);
</code></pre>
","It looks like the error is coming from `component={Dashboard}` or `component={Login}`. Check what those two classes are. You may be exporting them incorrectly"
"48011113","Add props to component of wrapped route in react router v4","4","<p>I have routes that share the same behauvior, layout, etc. I'd like to pass props from layout to those components (Dashboard and Login) inside Route</p>

<p>My routes.js file is the following one</p>

<pre><code>//imports omited    
export default (
    &lt;AppLayout&gt;
        &lt;Route component={Dashboard} path=""/"" key=""/"" /&gt;
        &lt;Route component={Login} path=""/login"" key=""/login"" /&gt;
    &lt;/AppLayout&gt;
);
</code></pre>

<p>The render method of AppLayout.js has this code</p>

<pre><code>const childrenWithExtraProp = React.Children.map(this.props.children, (child) =&gt; {
            return React.cloneElement(child, {
                component: React.cloneElement(child.props.component, {
                    functions: {
                        updateMenuTitle: this.updateTitle //function
                    }
                })
            });
        });
</code></pre>

<p>This code results on numerous errors:</p>

<pre><code>Warning: Failed prop type: Invalid prop `component` of type `object` supplied to `Route`, expected `function`.
    in Route
    in AppHeader
    in Router (created by BrowserRouter)
    in BrowserRouter (created by App)
    in App


Check the render method of `Route`.
    in Route
    in AppHeader
    in Router (created by BrowserRouter)
    in BrowserRouter (created by App)
    in App


Uncaught Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.

    Check the render method of `Route`.
        at invariant (invariant.js?7313:42)
        at createFiberFromElement (react-dom.development.js?cada:5753)
        at reconcileSingleElement (react-dom.development.js?cada:7531)
        at reconcileChildFibers (react-dom.development.js?cada:7635)
        at reconcileChildrenAtExpirationTime (react-dom.development.js?cada:7756)
        at reconcileChildren (react-dom.development.js?cada:7747)
        at finishClassComponent (react-dom.development.js?cada:7881)
        at updateClassComponent (react-dom.development.js?cada:7850)
        at beginWork (react-dom.development.js?cada:8225)
        at performUnitOfWork (react-dom.development.js?cada:10224)
</code></pre>

<p>At the last project I've worked we where using Routes inside Route, but at React-Router v4 this is not allowed.</p>

<p>Edit: before was something like this:</p>

<pre><code>//Array of routes declared before
export default (
    &lt;Router history={browserHistory}&gt;
        &lt;Route path=""/"" component={General}&gt;
            &lt;IndexRoute component={Index} /&gt;
            {routes}
        &lt;/Route&gt;
    &lt;/Router&gt;
);
</code></pre>
","@AndyRay before I had 

```const childrenWithExtraProp = React.Children.map(this.props.children, child => {
			return React.cloneElement(child, {
				updateMenuTitle: this.updateTitle
			});
		});```

React App was working but I couldn't access to this.props.updateMenuTitle function from Dashboard component. If I'm not wrong, this means that my components work perfectly. I've tryied to remove this children mapping and everything works. The thing is that I'd like to pass props to components of Route and I don't know how."
"48011113","Add props to component of wrapped route in react router v4","4","<p>I have routes that share the same behauvior, layout, etc. I'd like to pass props from layout to those components (Dashboard and Login) inside Route</p>

<p>My routes.js file is the following one</p>

<pre><code>//imports omited    
export default (
    &lt;AppLayout&gt;
        &lt;Route component={Dashboard} path=""/"" key=""/"" /&gt;
        &lt;Route component={Login} path=""/login"" key=""/login"" /&gt;
    &lt;/AppLayout&gt;
);
</code></pre>

<p>The render method of AppLayout.js has this code</p>

<pre><code>const childrenWithExtraProp = React.Children.map(this.props.children, (child) =&gt; {
            return React.cloneElement(child, {
                component: React.cloneElement(child.props.component, {
                    functions: {
                        updateMenuTitle: this.updateTitle //function
                    }
                })
            });
        });
</code></pre>

<p>This code results on numerous errors:</p>

<pre><code>Warning: Failed prop type: Invalid prop `component` of type `object` supplied to `Route`, expected `function`.
    in Route
    in AppHeader
    in Router (created by BrowserRouter)
    in BrowserRouter (created by App)
    in App


Check the render method of `Route`.
    in Route
    in AppHeader
    in Router (created by BrowserRouter)
    in BrowserRouter (created by App)
    in App


Uncaught Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.

    Check the render method of `Route`.
        at invariant (invariant.js?7313:42)
        at createFiberFromElement (react-dom.development.js?cada:5753)
        at reconcileSingleElement (react-dom.development.js?cada:7531)
        at reconcileChildFibers (react-dom.development.js?cada:7635)
        at reconcileChildrenAtExpirationTime (react-dom.development.js?cada:7756)
        at reconcileChildren (react-dom.development.js?cada:7747)
        at finishClassComponent (react-dom.development.js?cada:7881)
        at updateClassComponent (react-dom.development.js?cada:7850)
        at beginWork (react-dom.development.js?cada:8225)
        at performUnitOfWork (react-dom.development.js?cada:10224)
</code></pre>

<p>At the last project I've worked we where using Routes inside Route, but at React-Router v4 this is not allowed.</p>

<p>Edit: before was something like this:</p>

<pre><code>//Array of routes declared before
export default (
    &lt;Router history={browserHistory}&gt;
        &lt;Route path=""/"" component={General}&gt;
            &lt;IndexRoute component={Index} /&gt;
            {routes}
        &lt;/Route&gt;
    &lt;/Router&gt;
);
</code></pre>
","Oh I see, you're cloning the route in AppLayout"
"48011113","Add props to component of wrapped route in react router v4","4","<p>I have routes that share the same behauvior, layout, etc. I'd like to pass props from layout to those components (Dashboard and Login) inside Route</p>

<p>My routes.js file is the following one</p>

<pre><code>//imports omited    
export default (
    &lt;AppLayout&gt;
        &lt;Route component={Dashboard} path=""/"" key=""/"" /&gt;
        &lt;Route component={Login} path=""/login"" key=""/login"" /&gt;
    &lt;/AppLayout&gt;
);
</code></pre>

<p>The render method of AppLayout.js has this code</p>

<pre><code>const childrenWithExtraProp = React.Children.map(this.props.children, (child) =&gt; {
            return React.cloneElement(child, {
                component: React.cloneElement(child.props.component, {
                    functions: {
                        updateMenuTitle: this.updateTitle //function
                    }
                })
            });
        });
</code></pre>

<p>This code results on numerous errors:</p>

<pre><code>Warning: Failed prop type: Invalid prop `component` of type `object` supplied to `Route`, expected `function`.
    in Route
    in AppHeader
    in Router (created by BrowserRouter)
    in BrowserRouter (created by App)
    in App


Check the render method of `Route`.
    in Route
    in AppHeader
    in Router (created by BrowserRouter)
    in BrowserRouter (created by App)
    in App


Uncaught Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.

    Check the render method of `Route`.
        at invariant (invariant.js?7313:42)
        at createFiberFromElement (react-dom.development.js?cada:5753)
        at reconcileSingleElement (react-dom.development.js?cada:7531)
        at reconcileChildFibers (react-dom.development.js?cada:7635)
        at reconcileChildrenAtExpirationTime (react-dom.development.js?cada:7756)
        at reconcileChildren (react-dom.development.js?cada:7747)
        at finishClassComponent (react-dom.development.js?cada:7881)
        at updateClassComponent (react-dom.development.js?cada:7850)
        at beginWork (react-dom.development.js?cada:8225)
        at performUnitOfWork (react-dom.development.js?cada:10224)
</code></pre>

<p>At the last project I've worked we where using Routes inside Route, but at React-Router v4 this is not allowed.</p>

<p>Edit: before was something like this:</p>

<pre><code>//Array of routes declared before
export default (
    &lt;Router history={browserHistory}&gt;
        &lt;Route path=""/"" component={General}&gt;
            &lt;IndexRoute component={Index} /&gt;
            {routes}
        &lt;/Route&gt;
    &lt;/Router&gt;
);
</code></pre>
","@AndyRay is it forbidden (cloning a route)?"
"48112685","Is there a known defect in enzyme, react-dom/test-tools, or jsdom that effects clientHeight?","0","<p>I'm having an issue where <code>clientHeight</code> is <code>undefined</code> instead of the actual height of the DOM element.  This code <strong>works as expected in the browser</strong>. </p>

<p><strong>Component</strong></p>

<pre><code>class MyWidget extends React.Component {
    constructor() {
        super();
        this.state = { contentHeight: 0 };
    }

    componentWillReceiveProps(nextProps) {
        this.setState(() =&gt; ({
            contentHeight: nextProps.open ? this.content.firstChild.clientHeight : 0
        }));
    }

    render() {
        const { controlId, open, trigger, children } = this.props;
        return (
            &lt;div&gt;
                &lt;button tabIndex=""0"" aria-controls={controlId}&gt;
                    { cloneElement(trigger, { open }) }
                &lt;/button&gt;
                &lt;div
                    id={controlId}
                    ref={(element) =&gt; {
                        this.content = element;
                    }}
                    aria-hidden={open}
                    style={{ maxHeight: this.state.contentHeight }}
                &gt;
                    { cloneElement(children, { open }) }
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>However, when mounting the component and simulating a prop change, the <code>clientHeight</code> of the child <code>div</code> reports <code>undefined</code>.</p>

<p><strong>Unit Test</strong></p>

<pre><code>// Arrange
const wrapper = mount(
    &lt;MyWidget trigger={&lt;span&gt;click me&lt;/span&gt;} open={false}&gt;
        &lt;div style={{ height: 90, padding: 5 }}&gt;Lorum Ipsum&lt;/div&gt;
    &lt;/MyWidget&gt;
);

// Act
wrapper.setProps({ open: true });

// Assert
expect(wrapper.children('div').prop('style')).to.have.property('maxHeight', 100);

// Result
AssertionError: expected { maxHeight: undefined } to have a property 'maxHeight' of 100, but got undefined
</code></pre>

<p>I'm not entirely convinced that enzyme is the cause of this since it feels like its related to the underlying <code>react-dom/test-tools</code> and/or <code>jsdom</code>.  I've added a note on an <a href=""https://github.com/airbnb/enzyme/issues/1434"" rel=""nofollow noreferrer"">enzyme discussion</a> since I'd appreciate some help in debugging this further.</p>
",""
"48377657","react-hammerjs — pan always cancels","0","<p>I have such a React Component:</p>

<pre><code>import Rect from 'react';
import Hammer from 'react-hammerjs';
import { DIRECTION_ALL } from 'hammerjs';
import AnSvg from '!svg-react-loader?name=AnSvg!../../../assets/svg/an-svg.svg';

class MyComponent extends React.Component {
  construct(props) {
    super(props);
  }

  render () {
    const
      instance = AnSvg(AnSvg.defaultProps),

      clone = React.cloneElement(instance, /*adding some css classes here*/)
    ;

    return (
      &lt;Hammer
        onPanStart={e =&gt; console.log('start')}
        onPan={e =&gt; console.log('panning)}
        onPanEnd={e =&gt; console.log('end')}
        onPanCancel={e =&gt; console.log('cancel')}
        options={{
          touchAction:'compute',
            recognizers: {
            pan: {
              direction: DIRECTION_ALL,
              threshold: 10
            }
          }
       }}&gt;{clone}&lt;/Hammer&gt;
    );
  }
}
</code></pre>

<p>The <code>pan-end</code> event is never triggered, but the <code>pan-cancel</code> instead, even if the target does not change. So the output looks like that:</p>

<pre><code>start
(6) panning
cancel &lt;-- also missing sometimes
</code></pre>

<p>What causes Hammerjs to trigger the <code>pan-cancel</code> event?</p>
",""
"48921725","render simple HTML with react.cloneElement","4","<p>React.cloneElement() always require first parameter as react component which should be passed as children in props. </p>

<p>Is there are way to pass a simple HTML node as a children. Please refer the code below for better understanding of my issue:</p>

<p>Dialog.jsx (Common component):</p>

<pre><code> return (
            &lt;div className=""app-dialog-jsx"" ref={(ele) =&gt; this.ele = ele}&gt;
                {this.state.show &amp;&amp; React.cloneElement(this.props.children, {
                    contentStyle: {
                        height: 400,
                        overflowY: 'auto',
                        overflowX: 'hidden'
                    },
                    method1: this. method1,
                    method2: this. method2
                })}
            &lt;/div&gt;
        );
</code></pre>

<p>now I can not pass:</p>

<pre><code>&lt;Dialog
  ref={(dialog)=&gt;this.dialog=dialog}
  method1={()=&gt;console.log(1)}
  method2 ={()=&gt;console.log(1)}
&gt;
  &lt;h4&gt;somethign&lt;/h4&gt;
&lt;/Dialog&gt;
</code></pre>

<p>H4 needs to be a react component otherwise it will not set the props in cloneElement. How can I send simple HTML here, any help?</p>
","whats the issue? it should work. check [**working fiddle**](https://jsfiddle.net/mayankshukla5031/ysgxehdq/). let me know if i am missing something."
"48921725","render simple HTML with react.cloneElement","4","<p>React.cloneElement() always require first parameter as react component which should be passed as children in props. </p>

<p>Is there are way to pass a simple HTML node as a children. Please refer the code below for better understanding of my issue:</p>

<p>Dialog.jsx (Common component):</p>

<pre><code> return (
            &lt;div className=""app-dialog-jsx"" ref={(ele) =&gt; this.ele = ele}&gt;
                {this.state.show &amp;&amp; React.cloneElement(this.props.children, {
                    contentStyle: {
                        height: 400,
                        overflowY: 'auto',
                        overflowX: 'hidden'
                    },
                    method1: this. method1,
                    method2: this. method2
                })}
            &lt;/div&gt;
        );
</code></pre>

<p>now I can not pass:</p>

<pre><code>&lt;Dialog
  ref={(dialog)=&gt;this.dialog=dialog}
  method1={()=&gt;console.log(1)}
  method2 ={()=&gt;console.log(1)}
&gt;
  &lt;h4&gt;somethign&lt;/h4&gt;
&lt;/Dialog&gt;
</code></pre>

<p>H4 needs to be a react component otherwise it will not set the props in cloneElement. How can I send simple HTML here, any help?</p>
","Can you please check here https://jsfiddle.net/pk1t65Lu/17/. I have modified"
"48921725","render simple HTML with react.cloneElement","4","<p>React.cloneElement() always require first parameter as react component which should be passed as children in props. </p>

<p>Is there are way to pass a simple HTML node as a children. Please refer the code below for better understanding of my issue:</p>

<p>Dialog.jsx (Common component):</p>

<pre><code> return (
            &lt;div className=""app-dialog-jsx"" ref={(ele) =&gt; this.ele = ele}&gt;
                {this.state.show &amp;&amp; React.cloneElement(this.props.children, {
                    contentStyle: {
                        height: 400,
                        overflowY: 'auto',
                        overflowX: 'hidden'
                    },
                    method1: this. method1,
                    method2: this. method2
                })}
            &lt;/div&gt;
        );
</code></pre>

<p>now I can not pass:</p>

<pre><code>&lt;Dialog
  ref={(dialog)=&gt;this.dialog=dialog}
  method1={()=&gt;console.log(1)}
  method2 ={()=&gt;console.log(1)}
&gt;
  &lt;h4&gt;somethign&lt;/h4&gt;
&lt;/Dialog&gt;
</code></pre>

<p>H4 needs to be a react component otherwise it will not set the props in cloneElement. How can I send simple HTML here, any help?</p>
","Yes, this should work.  <h4></h4> is a React Element when you use it inside JSX."
"48921725","render simple HTML with react.cloneElement","4","<p>React.cloneElement() always require first parameter as react component which should be passed as children in props. </p>

<p>Is there are way to pass a simple HTML node as a children. Please refer the code below for better understanding of my issue:</p>

<p>Dialog.jsx (Common component):</p>

<pre><code> return (
            &lt;div className=""app-dialog-jsx"" ref={(ele) =&gt; this.ele = ele}&gt;
                {this.state.show &amp;&amp; React.cloneElement(this.props.children, {
                    contentStyle: {
                        height: 400,
                        overflowY: 'auto',
                        overflowX: 'hidden'
                    },
                    method1: this. method1,
                    method2: this. method2
                })}
            &lt;/div&gt;
        );
</code></pre>

<p>now I can not pass:</p>

<pre><code>&lt;Dialog
  ref={(dialog)=&gt;this.dialog=dialog}
  method1={()=&gt;console.log(1)}
  method2 ={()=&gt;console.log(1)}
&gt;
  &lt;h4&gt;somethign&lt;/h4&gt;
&lt;/Dialog&gt;
</code></pre>

<p>H4 needs to be a react component otherwise it will not set the props in cloneElement. How can I send simple HTML here, any help?</p>
","But test1 is not rendering the props. I want simple HTML to render the props. That is the problem."
"50073052","Passing a value onto a child component (this.props.children) in react","11","<p>I have a child component in a Layout that I want to pass a props value too. But I don't know how. In the class below the layoutFileDataRequest() receives a string variable from a child component on a click event.  There is a need to send that value to one of the this.props.children components so it can update. </p>

<p>How do I do this? In the code below  <code>React.cloneElement(child, {</code> does not change it always stays the same which means I can't update the child prop.</p>

<pre><code>  export default class Layout extends React.Component {
    constructor(props) {
      super(props)

      this.layoutFileDataRequest = this.layoutFileDataRequest.bind(this);
      this.state = {
        newData: '',
        returnData: 'test',

      }
    }

    /**
     *  Received request from server add it to 
     *  react component so that it can be rendered
     */
    layoutFileDataRequest(data) {
      this.setState({ returnData:data })
    }


    renderChildren() {
      return React.Children.map(this.props.children, child =&gt; {
        console.log(this.state.returnData); 
          return React.cloneElement(child, {
            data: this.state.returnData
          })
      });
    } 

    /**
     *  Render request
     * 
     * 
     */
    render() {
      const { location } = this.props;
      const title = this.state.newData;
      return (
        &lt;div id=""app-container"" class={title}&gt;
          &lt;Nav location={location} /&gt;
          &lt;main id=""main""&gt;
            &lt;h1&gt;{title}&lt;/h1&gt;
            &lt;section&gt;
                {this.renderChildren()}
            &lt;/section&gt;
          &lt;/main&gt;
          &lt;Project layoutFileDataRequest={this.layoutFileDataRequest} /&gt;
          &lt;Footer /&gt;
        &lt;/div&gt;
      );
    }
  }


export default class Project extends React.Component {
  constructor(props) {
    super(props)

    this.projectFileDataRequest = this.projectFileDataRequest.bind(this);

    this.state = {
      newData: [],
    }

  }


  /**
   *  Received request from server add it to 
   *  react component so that it can be rendered
   */
  projectFileDataRequest(data) {
    this.props.layoutFileDataRequest(data);
  }


  /**
   *  Received request from server add it to 
   *  react component so that it can be rendered
   */
  componentDidMount() {
    ApiCalls.readSassDirData()
      .then(function (serverData) {
        this.setState({ newData: serverData[0].data })
      }.bind(this));
  }


  /**
   *  Render request
   */
  render() {
    const listOfObjects = this.state.newData;
    return (
      &lt;aside id=""project""&gt;
        &lt;h2&gt;Files&lt;/h2&gt;
        &lt;FileListing listOfObjects={listOfObjects} projectFileDataRequest={this.projectFileDataRequest} /&gt;,
       &lt;/aside&gt;
    );
  }
}
</code></pre>
","I have just added it above or you can see it here https://github.com/purencool/purencool_editor/blob/master/src/js/components/layout/Project.js"
"51098355","How to create a speedometer in react native","1","<p>I am creating charts using d3 and svg in react native in which i have created an progress bar chart. I would like to use this progress bar chart as speedometer by having a needle shows the current value.
Can anyone tell me how to create a speedometer in react native.</p>

<pre><code>    import React, { PureComponent } from 'react';
import {
  View,
} from 'react-native';
import PropTypes from 'prop-types';
import * as shape from 'd3-shape';
import Path from './animated-path';
import Svg, { G } from 'react-native-svg';

export default class Gauge extends PureComponent {
  state = {
    height: 0,
    width: 0,
  }

  _onLayout(event) {
    const {
      nativeEvent: {
        layout: {
          height,
          width,
        }
      }
    } = event;
    this.setState({height, width});
  }
  render() {
    const {
      style,
      progressColor,
      backgroundColor,
      strokeWidth,
      startAngle,
      endAngle,
      animate,
      animationDuration,
      children,
      cornerRadius,
    } = this.props

    let { progress } = this.props

    const {
      height, width
    } = this.state

    const outerDiameter = Math.min(width, height)

    if (!isFinite(progress) || isNaN(progress)) {
      progress = 0;
    }

    const data = [
      {
        key: 'rest',
        value: 1 - progress,
        color: backgroundColor,
      },
      {
        key: 'progress',
        value: progress,
        color: progressColor,
      }
    ]

    const pieSlices = shape
          .pie()
          .value(d =&gt; d.value)
          .sort((a) =&gt; a.key === 'rest' ? 1 : -1)
          .startAngle(startAngle)
          .endAngle(endAngle)
          (data)

    const arcs = pieSlices.map((slice, index) =&gt; (
      {
        ...data[index],
        ...slice,
        path: shape.arc()
        .outerRadius(outerDiameter / 2)
        .innerRadius((outerDiameter / 2) - strokeWidth)
        .startAngle(index === 0 ? startAngle : slice.startAngle)
        .endAngle(index === 0 ? endAngle : slice.endAngle)
        .cornerRadius(cornerRadius)
        (),
      }
    ))

    const extraProps = {
      width,
      height,
    }

    return (
      &lt;View style={ style } onLayout={event =&gt; this._onLayout(event)}&gt;
        {
          height &gt; 0 &amp;&amp; width &gt; 0 &amp;&amp;
          &lt;Svg style={{height, width}}&gt;
            &lt;G x={width / 2}
              y={height / 2}
              &gt;
              {
                React.Children.map(children, child =&gt; {
                  if (child &amp;&amp; child.props.belowChart) {
                    return React.cloneElement(child, extraProps)
                  }
                  return null
                })
              }
              {
                arcs.map((shape, index) =&gt; {
                  return (
                    &lt;Path
                       key={index}
                       fill={shape.color}
                       d={shape.path}
                       animate={animate}
                       animationDuration={animationDuration}
                    /&gt;
                  )
                })
              }
              {
                React.Children.map(children, child =&gt; {
                  if (child &amp;&amp; !child.props.belowChart) {
                    return React.cloneElement(child, extraProps)
                  }
                  return null
                })
              }
            &lt;/G&gt;
          &lt;/Svg&gt;
        }
      &lt;/View&gt;
    )
  }
}

Gauge.propTypes = {
  progress: PropTypes.number.isRequired,
  style: PropTypes.any,
  progressColor: PropTypes.any,
  backgroundColor: PropTypes.any,
  strokeWidth: PropTypes.number,
  startAngle: PropTypes.number,
  endAngle: PropTypes.number,
  animate: PropTypes.bool,
  cornerRadius: PropTypes.number,
  animationDuration: PropTypes.number,
}

Gauge.defaultProps = {
  progressColor: 'black',
  backgroundColor: '#ECECEC',
  strokeWidth: 5,
  startAngle: 0,
  endAngle: Math.PI * 2,
  cornerRadius: 45,
}
</code></pre>

<p>App.js</p>

<pre><code>&lt;GaugeChartExample /&gt;
</code></pre>

<p>The output which is got is like as follows:</p>

<p><a href=""https://i.stack.imgur.com/6FJ7F.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6FJ7F.png"" alt=""Output""></a></p>
","Have you try to pass the progress status every time and use [LayoutAnimation](https://facebook.github.io/react-native/docs/layoutanimation.html)?"
"51214269","How to access a form inside InfoWindow content in React using Google maps api and google-maps-react V2.0.2","0","<p>I am trying to view an InfoWindow everytime the maps is clicked, it will show an input field and a button to add the named location to list. For now, I am just trying to get the text out of the form, the problem that I am having is how to access the form when the button is clicked???!</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import ReactDOM from 'react-dom';
import PopUpForm from './PopUpForm';
import ReactDOMServer from 'react-dom/server'

class Map extends React.Component {
  
  state = {
      infowindow: new google.maps.InfoWindow({}),
  }

  componentDidUpdate(prevProps, prevState) {
    console.log('componentDidUpdate');
    if (prevProps.google !== this.props.google) {
      this.loadMap();
    }
  }

  componentDidMount() {
    console.log('componentDidMount');
    this.loadMap();
  }

  loadMap() {
    console.log('loadMap');
    if (this.props &amp;&amp; this.props.google) {
      // google is available
      const {google} = this.props;
      const maps = google.maps;

      const mapRef = this.refs.map;
      const node = ReactDOM.findDOMNode(mapRef);

      const {initialCenter, zoom} = this.props;
      const {lat, lng} = initialCenter;
      const center = new maps.LatLng(lat, lng);
      const mapConfig = Object.assign({}, {
        center,
        zoom
      })
      this.map = new maps.Map(node, mapConfig);

      // adding markers for corresponding saved places
      const pos = {lat: 59.329113196988345 , lng: 17.966015144369067};
      const marker = new google.maps.Marker({
        position: pos,
        map: this.map,
        title: 'first marker',
      });
      const infowindow = new google.maps.InfoWindow({
        content: `&lt;h3&gt;${marker.title}&lt;/h3&gt;`
      });
      marker.addListener('click', () =&gt; {
        infowindow.open(this.map, marker);
      });

      // pop up  infoWindoW on map
      this.map.addListener('click', (e) =&gt; {
        this.state.infowindow.close();
        const popUp = &lt;PopUpForm onSubmit={this.onSubmit}/&gt;;
        this.showPopupOnMap(e.latLng, popUp);
        google.maps.event.addListener(this.state.infowindow, 'domready', () =&gt; {
          // HOW TO ACCESS THE FORM HERE
        });
      })
      this.forceUpdate();
    }      
}

onSubmit = () =&gt; {
  e.preventDefault();
  window.alert('onSubmit form')
}

showPopupOnMap = (latLng, popUp) =&gt; {
  const contentString = ReactDOMServer.renderToString(popUp)

  const pos = { lat: latLng.lat(), lng: latLng.lng() };

  this.state.infowindow = new google.maps.InfoWindow({
    content: contentString,
    position: pos
  });
  this.state.infowindow.open(this.map)
}

renderChildren() {
  console.log('renderChildren');
  const {children} = this.props;
  if (!children) return;
  return React.Children.map(children, c =&gt; {
    return React.cloneElement(c, {
      map: this.map,
      google: this.props.google,
    });
  })
}

render() {
  console.log('render');
    const style = {
      width: '70vw',
      height: '70vh'
    }

    return (
      &lt;div  ref=""map"" style={style}&gt;
        loading map...
        {this.renderChildren()}
      &lt;/div&gt;
    )
  }
};

Map.defaultProps = {
  zoom: 11,
  initialCenter: {
    lat: 59.3293,
    lng: 18.0686
  }
}

export default Map;</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';

class PopUpForm extends React.Component {
    render() {
        return (
            &lt;div id='iwc' ref='iwc' &gt;
                &lt;b&gt;Add this location&lt;/b&gt;&lt;br /&gt;
                &lt;form ref='mapform' className='map-form' onSubmit={this.onSubmit}&gt;
                    &lt;input type='text' /&gt;
                    &lt;button id='btn'&gt;Add&lt;/button&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        );
    }
}

export default PopUpForm;</code></pre>
</div>
</div>
</p>

<p>inside of this.map.addListner(this.state.infoWindow, 'domready', someFunctionToBeCalled) I do not know how to acces the form in React, I searched about it all I could found is this:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>google.maps.event.addListener(info, 'domready', function() {
    document.id(""map-form"").addEvent(""submit"", function(e) {
        e.stop();
        console.log(""hi!"");
    });
});</code></pre>
</div>
</div>
</p>

<p>is this even possible? Am I missing something??</p>
",""
"51369551","React native cloneElement while preserving the children","0","<p>From the documentation cloneElement removes the old children if the third parameter is added (<a href=""https://reactjs.org/docs/react-api.html#cloneelement"" rel=""nofollow noreferrer"">https://reactjs.org/docs/react-api.html#cloneelement</a>).</p>

<p>However if one wants to add a list of new child components instead of replacing them, how can this be achieved? Doing: 
<code>&lt;View&gt;{this._childViews}&lt;/View&gt;</code> will not work as I have no access to the old childrens, and providing such list will end up being a bad solution. As I see it two possible solutions exists:
1. Programmatically access the list of old children on the given view.
2. Use a method with the same behaviour, which instead adds the new children to the list of old childrens. </p>

<p>Any ideas? </p>
",""
"51664907","TypeError: styleSheet.getName is not a function when importing components from npm based react libs using styled-components","0","<h3>Context</h3>

<p>I'm writing a react component library based on <a href=""https://www.styled-components.com/"" rel=""nofollow noreferrer"">Styled Components</a> in NPM to be shared across my downstream React projects.</p>

<p>All of my projects are isomorphic React apps. They implement Styled components server-side rendering (SSR) as <a href=""https://www.styled-components.com/docs/advanced#server-side-rendering"" rel=""nofollow noreferrer"">outlined in the official documentation</a> as such:</p>

<pre><code>import { ServerStyleSheet } from 'styled-components';

const sheet = new ServerStyleSheet();
const html = ReactDOMServer.renderToString(sheet.collectStyles(App));
const css = sheet.getStyleElement().map((el, idx) =&gt; (el ? React.cloneElement(el, { key: idx }) : el));
const page = &lt;Html content={html} state={apolloState} assetMap={assetMap} css={css} helmet={helmet} /&gt;;
res.send(`&lt;!doctype html&gt;\n${ReactDOMServer.renderToStaticMarkup(page)}`);
res.end();
</code></pre>

<h3>Problem</h3>

<p>When I import a component from  my aforementioned react component library from npm and call it in my project, I get the following error:</p>

<pre><code>TypeError: styleSheet.getName is not a function
    at ComponentStyle.generateAndInjectStyles (/project/node_modules/my-react-component-library/node_modules/styled-components/lib/models/ComponentStyle.js:95:37)
    at StyledComponent.generateAndInjectStyles (/project/node_modules/my-react-component-library/node_modules/styled-components/lib/models/StyledComponent.js:154:40)
    at StyledComponent.componentWillMount (/project/node_modules/my-react-component-library/node_modules/styled-components/lib/models/StyledComponent.js:192:40)
    ...
</code></pre>

<h3>Questions</h3>

<ol>
<li><p>Is this problem coming from my npm library not enabling SSR or the end-user implementation of the styled components ssr?</p></li>
<li><p>How can this be solved?</p></li>
</ol>
",""
"51683931","Send props to react router component from parent layout component","0","<p>I have created a layout component called <code>Main</code> which sends user prop to its children component using <code>React.cloneElement(children, { user: 'First Name'})</code>, but unable to pass that user prop to Route component.</p>

<blockquote>
  <p>index.js</p>
</blockquote>

<pre><code>import React from ""react"";
import ReactDOM from ""react-dom"";
import { BrowserRouter as Router, Route } from ""react-router-dom"";
import Main from ""./Main.jsx"";
import Home from ""./Home.jsx"";

const App = () =&gt; (
  &lt;Router&gt;
    &lt;Main&gt;
      &lt;Route
        path=""/""
        render={props =&gt; {
          return &lt;Home {...props} /&gt;;
        }}
      /&gt;
    &lt;/Main&gt;
  &lt;/Router&gt;
);

const rootElement = document.getElementById(""root"");
ReactDOM.render(&lt;App /&gt;, rootElement);
</code></pre>

<blockquote>
  <p>Main.jsx</p>
</blockquote>

<pre><code>import React from ""react"";

export default props =&gt; {
  return &lt;div&gt;{React.cloneElement(props.children, { user: ""Username"" })}&lt;/div&gt;;
};
</code></pre>

<blockquote>
  <p>Home.jsx</p>
</blockquote>

<pre><code>import React from ""react"";

export default props =&gt; {
  const { user } = props;
  return &lt;div&gt;User - {user}&lt;/div&gt;;
};
</code></pre>

<p>But unable to get <code>user</code> prop in <code>Home</code> component. If I do not use <code>Route</code> then it gets passed to <code>Home</code>.</p>

<p>When I do this, then <code>Home</code> receives <code>user</code> prop.</p>

<pre><code>&lt;Main&gt;
   &lt;Home /&gt;
&lt;/Main&gt;
</code></pre>

<p>How can I get <code>user</code> prop and send it to component rendered by <code>Route</code>?</p>

<p>Codesandox link of the scenario - <a href=""https://codesandbox.io/s/kmyrj0zr8o"" rel=""nofollow noreferrer"">https://codesandbox.io/s/kmyrj0zr8o</a></p>
",""