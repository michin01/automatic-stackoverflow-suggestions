Id,Title,CommentCount,Body,Text
"32277383","react testing: shallow rendering - getRenderOutput returning null","0","<p>I'm just getting started with react testing, trying to use shallow rendering.</p>

<p>I can't figure what's going on here - I believe my code follows all instructions I've seen with examples (e.g. <a href=""http://racingtadpole.com/blog/test-react-with-jest/"" rel=""nofollow"">http://racingtadpole.com/blog/test-react-with-jest/</a>)</p>

<p>but I'm getting null with <code>shallowRenderer.getRenderOutput();</code></p>

<p>Additionally I'm confused as when I log out shallowRenderer, I don't see any getRenderOutput method??</p>

<pre class=""lang-jsx prettyprint-override""><code>import React from 'react/addons';
import Icon from '../../components/shared/Icon.jsx';

const TestUtils = React.addons.TestUtils;

function getRenderOutput(elt) {
  console.log('elt: ', elt);
  const shallowRenderer = TestUtils.createRenderer();
  shallowRenderer.render(elt);
  console.log('shallowRenderer: ', shallowRenderer);
  const output = shallowRenderer.getRenderOutput();
  console.log('output: ', output);
  return output;
}


describe('&lt;Icon /&gt;', () =&gt; {

  it('should pass props through', () =&gt; {
    const result = getRenderOutput(&lt;Icon type='octicon' name='file-directory' classNames=""icon-roomy icon-muted"" /&gt;);
    console.log('result: ', result);
  });

});
</code></pre>

<p>And the resulting output:</p>

<pre><code>elt:  

{ type:
   { [Function: Icon]
     _isMockFunction: true,
     mock: { calls: [], instances: [] },
     mockClear: [Function],
     mockReturnValueOnce: [Function],
     mockReturnValue: [Function],
     mockImpl: [Function],
     mockImplementation: [Function],
     mockReturnThis: [Function],
     _getMockImplementation: [Function],
     defaultProps: { type: 'fa', classNames: '' },
     propTypes:
      { type: [Object],
        name: [Object],
        prefix: [Object],
        classNames: [Object],
        title: [Object] } },
  key: null,
  ref: null,
  _owner: null,
  _context: {},
  _store:
   { props:
      { type: 'octicon',
        name: 'file-directory',
        classNames: 'icon-roomy icon-muted' },
     originalProps:
      { type: 'octicon',
        name: 'file-directory',
        classNames: 'icon-roomy icon-muted' } } }
shallowRenderer:  { _instance:
   { _currentElement:
      { type: [Object],
        key: null,
        ref: null,
        _owner: null,
        _context: {},
        _store: [Object] },
     _rootNodeID: '.0',
     _instance:
      { getClassNames: [Object],
        render: [Object],
        setState: [Object],
        forceUpdate: [Object],
        props: [Object],
        context: {},
        refs: {},
        _reactInternalInstance: [Circular],
        state: null },
     _pendingElement: null,
     _pendingStateQueue: null,
     _pendingReplaceState: false,
     _pendingForceUpdate: false,
     _renderedComponent: { _renderedOutput: null, _currentElement: [Object] },
     _context: {},
     _mountOrder: 1,
     _isTopLevel: false,
     _pendingCallbacks: null } }
output:  null
result:  null
</code></pre>
",""
"32851295","React jest shallowRender getRenderOutput returning null","0","<p>I've been studying React, and I tried to make a jest test with the shallowRender but always return null on shallowRenderer.getRenderOutput()</p>

<p><strong>MyComponent.react.js</strong></p>

<pre><code>import React from 'react';

export default class MyComponent extends React.Component {
  render() {
    return &lt;div&gt;Hello World!&lt;/div&gt;;
  }
}
</code></pre>

<p><strong>__test__/MyComponent.react.js</strong></p>

<pre><code>jest.dontMock('../MyComponent.react.js');

import React from 'react/addons';
import MyComponent from '../MyComponent.react.js';

var TestUtils = React.addons.TestUtils;

describe('MyComponent', () =&gt; {

  it('test', () =&gt; {
    let shallowRenderer = TestUtils.createRenderer();
    shallowRenderer.render(&lt;MyComponent/&gt;);
    let vdom = shallowRenderer.getRenderOutput();

    console.log(vdom);
    expect(1).toEqual(1);
  });
});
</code></pre>

<p><strong>npm test</strong></p>

<pre><code>&gt; jest-test@1.0.0 test /home/bruno/Stuffs/jest-test
&gt; jest

Using Jest CLI v0.5.8
 PASS  __tests__/MyComponent.js (0.897s)
null
1 test passed (1 total)
Run time: 1.189s
</code></pre>

<p><strong>package.json</strong></p>

<pre><code>{
  ...
  ""scripts"": {
    ""test"": ""jest""
  },
  ""devDependencies"": {
    ""babel"": ""^5.8.23"",
    ""babel-jest"": ""^5.3.0"",
    ""jest-cli"": ""^0.5.8"",
    ""react"": ""^0.13.3"",
    ""skin-deep"": ""^0.6.1""
  },
  ""jest"": {
    ""scriptPreprocessor"": ""&lt;rootDir&gt;/node_modules/babel-jest"",
    ""testFileExtensions"": [
      ""es6"",
      ""js""
    ],
    ""unmockedModulePathPatterns"": [
      ""&lt;rootDir&gt;/node_modules/react""
    ],
    ""moduleFileExtensions"": [
      ""js"",
      ""json"",
      ""es6""
    ]
  }
}
</code></pre>
",""
"34944804","Test react onClick event with tape","0","<p>I want to test onClick event on React with Tape. The documentation says that all you have to do is to just call directly the onClick event callback before comparison. But when I call handleSubmit event before the comparison I get an error- handleSubmit is not defined.</p>

<pre><code>    import React, { Component, PropTypes } from 'react'
    import {createRenderer} from 'react-addons-test-utils';
    import tape from 'tape';
    import addAssertions from 'extend-tape';
    import jsxEquals from 'tape-jsx-equals';

    const test = addAssertions(tape, {jsxEquals});

    class MyComponent extends Component{
      constructor(props) {
            super(props)
            this.state = {text: 'here is text'}
      }
      handleSubmit(e){
            this.setState({text: 'new text'})
      }
      render() {
        return (
            &lt;div&gt;
              {this.state.text}
              &lt;button onClick={(e) =&gt; this.handleSubmit(e)}&gt;Update&lt;/button&gt;
            &lt;/div&gt;
        );
      }
    };

    test('MyComponent is properly rendered', (t) =&gt; {
        t.plan(1);
        const text = 'here is text'
        const renderer = createRenderer();
        renderer.render(&lt;MyComponent /&gt;);
        const result = renderer.getRenderOutput();
        handleSubmit();
        t.jsxEquals(result, &lt;div&gt;{text}&lt;button onClick={(e) =&gt; this.handleSubmit(e)}&gt;Update&lt;/button&gt;&lt;/div&gt;);
        t.end();
    });
</code></pre>
",""
"35565777","Mocha: ReferenceError: window is not defined when testing react with shallow rendering?","3","<p>I'm new to the unit testing world with React, and was following along with an egghead video on the subject. In trying out shallow rendering, tests only work with some of my components. </p>

<p>A few of my components, however, contain charts made using react-chartist and the chartist library. When attempting to run tests on those components, I get this error:</p>

<pre><code>&gt; kindred-web-healthreader@0.0.1 test /Users/HilaryMBP/Kindred/kindred-web-healthreader
&gt; mocha './src/**/*.spec.js' --compilers js:babel/register

/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/chartist/dist/chartist.js:958
}(window, document, Chartist));
  ^

ReferenceError: window is not defined
    at /Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/chartist/dist/chartist.js:958:3
    at Chartist.version (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/chartist/dist/chartist.js:11:22)
    at Object.&lt;anonymous&gt; (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/chartist/dist/chartist.js:15:2)
    at Module._compile (module.js:425:26)
    at Module._extensions..js (module.js:432:10)
    at Object.require.extensions.(anonymous function) [as .js] (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:214:7)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:313:12)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at Object.&lt;anonymous&gt; (/Users/HilaryMBP/Kindred/kindred-web-healthreader/src/js/utils/ChartistUtils.js:13:17)
    at Module._compile (module.js:425:26)
    at normalLoader (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:199:5)
    at Object.require.extensions.(anonymous function) [as .js] (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:216:7)
   at Module.load (module.js:356:32)
    at Function.Module._load (module.js:313:12)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at /Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/mocha/lib/mocha.js:219:27
    at Array.forEach (native)
    at Mocha.loadFiles (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/mocha/lib/mocha.js:216:14)
    at Mocha.run (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/mocha/lib/mocha.js:468:10)
    at Object.&lt;anonymous&gt; (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/mocha/bin/_mocha:403:18)
    at Module._compile (module.js:425:26)
    at Object.Module._extensions..js (module.js:432:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:313:12)
    at Function.Module.runMain (module.js:457:10)
    at startup (node.js:138:18)
    at node.js:974:3
</code></pre>

<p>This only happens with components whose children import Chartist or react-chartist. </p>

<p>Here's my test file that's not working, for reference:</p>

<pre><code>import React from 'react';
import TestUtils from 'react-addons-test-utils';
import expect from 'expect';
import expectJSX from 'expect-jsx';
import Pain from '../components/Pain/Pain.jsx';

expect.extend(expectJSX);

describe('Pain', () =&gt; {

    it('should render', () =&gt; {
        const renderer = TestUtils.createRenderer();
        renderer.render(&lt;Pain /&gt;);
        const actual = renderer.getRenderOutput();
        const expected = '';
        expect(actual).toIncludeJSX(expected);
    });
});
</code></pre>

<p>What could be happening here?</p>
","Shallow rendering is a technique for testing components without the need for a DOM. If any of your components need access to dom objects like `window` you'll need something like jsdom. Give this a try https://github.com/rstacruz/mocha-jsdom"
"35565777","Mocha: ReferenceError: window is not defined when testing react with shallow rendering?","3","<p>I'm new to the unit testing world with React, and was following along with an egghead video on the subject. In trying out shallow rendering, tests only work with some of my components. </p>

<p>A few of my components, however, contain charts made using react-chartist and the chartist library. When attempting to run tests on those components, I get this error:</p>

<pre><code>&gt; kindred-web-healthreader@0.0.1 test /Users/HilaryMBP/Kindred/kindred-web-healthreader
&gt; mocha './src/**/*.spec.js' --compilers js:babel/register

/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/chartist/dist/chartist.js:958
}(window, document, Chartist));
  ^

ReferenceError: window is not defined
    at /Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/chartist/dist/chartist.js:958:3
    at Chartist.version (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/chartist/dist/chartist.js:11:22)
    at Object.&lt;anonymous&gt; (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/chartist/dist/chartist.js:15:2)
    at Module._compile (module.js:425:26)
    at Module._extensions..js (module.js:432:10)
    at Object.require.extensions.(anonymous function) [as .js] (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:214:7)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:313:12)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at Object.&lt;anonymous&gt; (/Users/HilaryMBP/Kindred/kindred-web-healthreader/src/js/utils/ChartistUtils.js:13:17)
    at Module._compile (module.js:425:26)
    at normalLoader (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:199:5)
    at Object.require.extensions.(anonymous function) [as .js] (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:216:7)
   at Module.load (module.js:356:32)
    at Function.Module._load (module.js:313:12)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at /Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/mocha/lib/mocha.js:219:27
    at Array.forEach (native)
    at Mocha.loadFiles (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/mocha/lib/mocha.js:216:14)
    at Mocha.run (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/mocha/lib/mocha.js:468:10)
    at Object.&lt;anonymous&gt; (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/mocha/bin/_mocha:403:18)
    at Module._compile (module.js:425:26)
    at Object.Module._extensions..js (module.js:432:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:313:12)
    at Function.Module.runMain (module.js:457:10)
    at startup (node.js:138:18)
    at node.js:974:3
</code></pre>

<p>This only happens with components whose children import Chartist or react-chartist. </p>

<p>Here's my test file that's not working, for reference:</p>

<pre><code>import React from 'react';
import TestUtils from 'react-addons-test-utils';
import expect from 'expect';
import expectJSX from 'expect-jsx';
import Pain from '../components/Pain/Pain.jsx';

expect.extend(expectJSX);

describe('Pain', () =&gt; {

    it('should render', () =&gt; {
        const renderer = TestUtils.createRenderer();
        renderer.render(&lt;Pain /&gt;);
        const actual = renderer.getRenderOutput();
        const expected = '';
        expect(actual).toIncludeJSX(expected);
    });
});
</code></pre>

<p>What could be happening here?</p>
","Thanks for the suggestion. I think this is close, but there's still something missing. I tried using mocha-jsdom and called jsdom() inside the describe block, but I still got the same error. It's like the problem is happening with the importing of the component and the libraries that it uses, but I don't know how to make window available at that point..."
"35565777","Mocha: ReferenceError: window is not defined when testing react with shallow rendering?","3","<p>I'm new to the unit testing world with React, and was following along with an egghead video on the subject. In trying out shallow rendering, tests only work with some of my components. </p>

<p>A few of my components, however, contain charts made using react-chartist and the chartist library. When attempting to run tests on those components, I get this error:</p>

<pre><code>&gt; kindred-web-healthreader@0.0.1 test /Users/HilaryMBP/Kindred/kindred-web-healthreader
&gt; mocha './src/**/*.spec.js' --compilers js:babel/register

/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/chartist/dist/chartist.js:958
}(window, document, Chartist));
  ^

ReferenceError: window is not defined
    at /Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/chartist/dist/chartist.js:958:3
    at Chartist.version (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/chartist/dist/chartist.js:11:22)
    at Object.&lt;anonymous&gt; (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/chartist/dist/chartist.js:15:2)
    at Module._compile (module.js:425:26)
    at Module._extensions..js (module.js:432:10)
    at Object.require.extensions.(anonymous function) [as .js] (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:214:7)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:313:12)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at Object.&lt;anonymous&gt; (/Users/HilaryMBP/Kindred/kindred-web-healthreader/src/js/utils/ChartistUtils.js:13:17)
    at Module._compile (module.js:425:26)
    at normalLoader (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:199:5)
    at Object.require.extensions.(anonymous function) [as .js] (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/babel/node_modules/babel-core/lib/api/register/node.js:216:7)
   at Module.load (module.js:356:32)
    at Function.Module._load (module.js:313:12)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at /Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/mocha/lib/mocha.js:219:27
    at Array.forEach (native)
    at Mocha.loadFiles (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/mocha/lib/mocha.js:216:14)
    at Mocha.run (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/mocha/lib/mocha.js:468:10)
    at Object.&lt;anonymous&gt; (/Users/HilaryMBP/Kindred/kindred-web-healthreader/node_modules/mocha/bin/_mocha:403:18)
    at Module._compile (module.js:425:26)
    at Object.Module._extensions..js (module.js:432:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:313:12)
    at Function.Module.runMain (module.js:457:10)
    at startup (node.js:138:18)
    at node.js:974:3
</code></pre>

<p>This only happens with components whose children import Chartist or react-chartist. </p>

<p>Here's my test file that's not working, for reference:</p>

<pre><code>import React from 'react';
import TestUtils from 'react-addons-test-utils';
import expect from 'expect';
import expectJSX from 'expect-jsx';
import Pain from '../components/Pain/Pain.jsx';

expect.extend(expectJSX);

describe('Pain', () =&gt; {

    it('should render', () =&gt; {
        const renderer = TestUtils.createRenderer();
        renderer.render(&lt;Pain /&gt;);
        const actual = renderer.getRenderOutput();
        const expected = '';
        expect(actual).toIncludeJSX(expected);
    });
});
</code></pre>

<p>What could be happening here?</p>
","get anywhere with this?"
"36016939","connect method of react breaking my test case","0","<ul>
<li>I am trying to write the test case for my jsx file...</li>
<li>i took the sample test case from another jsx file...</li>
<li>that file doesnt have connect method...</li>
<li>but his file has connect method..</li>
<li>I think because of this its breaking my test case...</li>
<li>can you guys tell me how to fix it..</li>
<li>providing my code below...</li>
<li>clear code below
<strong><a href=""https://gist.github.com/js08/d590e78e8923e68b191a"" rel=""nofollow"">https://gist.github.com/js08/d590e78e8923e68b191a</a></strong></li>
</ul>

<hr>

<p>SyntaxError: C:/codebase/sports/test/sports-tests.js: Unexpected token (20:73)
  18 |
  19 |     it('should render correctly', () => {</p>

<blockquote>
  <p>20 |         shallowRenderer.render();
       |                                                                          ^
    21 |         /*let renderedElement = shallowRenderer.getRenderOutput();
    22 |   </p>
</blockquote>

<pre><code>test case
import {expect} from 'chai';
import React from 'react';
import TestUtils from 'react-addons-test-utils';
import sportsPageDefault from '../src/sports-Page-Default';
import initializeJsDom from './test-utils/dom.js';
import {getGridLayoutClasses} from 'sports-css-grids';
//import _difference from 'lodash/array/difference';


describe('shallow renderer tests for sports-Page-Default ', function() {
    let shallowRenderer = TestUtils.createRenderer();
    console.log(""shallowRenderer"" + JSON.stringify(shallowRenderer));


    it('should render correctly', () =&gt; {
        shallowRenderer.render(&lt;sportsPageDefault headerClass='8887' layout= {id: 100, text: 'hello world'} sidebar= {id: 100, text: 'hello world'} title=""Demo"" /&gt;);
        let renderedElement = shallowRenderer.getRenderOutput();
        console.log(renderedElement);

       /* let actualTitleEl = renderedElement.props.children[0].props.children[0];
        let expectedTitleEl = &lt;h1 className=""transactionalPageHeader-appName font-serif""&gt;Demo&lt;/h1&gt;;
        expect(actualTitleEl).to.deep.equal(expectedTitleEl);*/
    });



});

actual code

import './css/sports-bottom-layout.css';
import './css/sports-Page.css';
import './css/sports-leftCornerLayout.css';

import React from 'react';
import PageHeader from './components/page-header/page-header';
import MainContent from './components/main-content';
import sports-bottom-layout from './components/sports-bottom-layout/sports-bottom-layout';
import {getPanelLayoutState} from './util/PageLayout';
import {getGridLayoutClasses} from 'sports-css-grids/lib/js/gridLayout';
import PagePureRenderMixin from './util/PagePureRenderMixin';
import {connect} from 'react-redux';
import {setHeaderPanelState, setRightPanelState} from './redux/layout/layout-actions';

console.log(""inside"");
let customMixin = PagePureRenderMixin({
    state: {
        mainPanelGridClassList: function(classArray) {
            return classArray.length;
            console.log(""classArray.length"" + classArray.length);
        }
    }
});

let PT = React.PropTypes;

let sportsPageDefault = React.createClass({


    propTypes: {
        headerClass: React.PropTypes.string,
        layout: PT.object.isRequired,
        sports-leftCornerLayout: PT.oneOfType([
            PT.func,
            PT.object
        ]),
        title: PT.string.isRequired
    },


    //cpomponent m,ount code

});

function sportsShallow(itemA, itemB) {
    for (let i in itemA) {
        if (itemA[i] !== itemB[i]) {
            return false;
        }
    }
    return true;
}

export default connect(state =&gt; ({
    layout: state.Page.layout
}))(sportsPageDefault);
</code></pre>

<p>Error: 
    ts throwing an error since not sure how to pass in onof types for function....</p>

<pre><code>shallowRenderer.render(&lt;sportsPageDefault headerClass='8887' layout= {{id: 100, text: 'hello world'}} sidebar= {[{onAppExit},{id: 100, text: 'hello world'}]} title={""Demo""} /&gt;);

    propTypes: {
        headerClass: React.PropTypes.string,
        layout: PT.object.isRequired,
        sports-leftCornerLayout: PT.oneOfType([
            PT.func,
            PT.object
        ]),
        title: PT.string.isRequired
    },
TypeError: Cannot read property 'propTypes' of undefined
at [object Object].ReactCompositeComponentMixin._processProps (\node_modules\react\lib\ReactCompositeComponent.js:352:20)
at [object Object].ReactCompositeComponentMixin.mountComponent (\node_modules\react\lib\ReactCompositeComponent.js:129:28)
at [object Object].wrapper as mountComponent
at [object Object].ReactShallowRenderer._render (\node_modules\react\lib\ReactTestUtils.js:362:14)
at [object Object].ReactShallowRenderer.render (\node_modules\react\lib\ReactTestUtils.js:344:8)
at Context. (C:/codebase/usaa-template-standard/test/usaa-template-standard-tests.js:23:25)
</code></pre>
",""
"45047316","How to use react-test-renderer/shallow with typescript?","0","<p>I want to use <code>react-test-renderer/shallow</code> to test my react component.</p>

<p>But when I <code>import ShallowRenderer from 'react-test-renderer/shallow';</code></p>

<p><code>tsc</code> give me an error <code>'Module '""/Users/dulin/workspace/react-ts-webpack2/node_modules/@types/react-test-renderer/shallow/index""' has no default export.</code></p>

<p>So, How to <code>import</code> <code>ShallowRenderer</code> with <code>typescript</code></p>

<p>-- update --</p>

<p>finally, I change my test filename from <code>index.test.tsx</code> -> <code>index.test.jsx</code> to avoid the <code>tsc</code> error caused by <code>definition</code>.</p>

<pre><code>import * as React from 'react';
import * as TestUtils from 'react-dom/test-utils';
import * as ShallowRenderer from 'react-test-renderer/shallow';
import PanelHead from '../';

describe('PanelHead test suites', () =&gt; {

  it('t-1', () =&gt; {

    const renderer = new ShallowRenderer();
    renderer.render(&lt;PanelHead /&gt;)
    const result = renderer.getRenderOutput();

    expect(result.type).toBe('div');

  });

});
</code></pre>
",""
"45047861","react component shallow testing not passing with Compared values have no visual difference","1","<p>I use <code>jest</code> and <code>react-test-renderer/shallow</code> to testing my react component.</p>

<p><code>jest</code> give me <code>Compared values have no visual difference.</code> </p>

<p>I think the <code>received</code> is equal with <code>expected</code>. But <code>jest</code> not passing the unit test.</p>

<p>here is the test result: </p>

<pre><code>● PanelHead test suites › t-1

    expect(received).toEqual(expected)

    Expected value to equal:
      &lt;h3 className=""panelTitle""&gt;hot search&lt;/h3&gt;
    Received:
      &lt;h3 className=""panelTitle""&gt;hot search&lt;/h3&gt;

    Difference:

    Compared values have no visual difference.

      at Object.&lt;anonymous&gt; (src/components/PanelHead/__tests__/index.test.jsx:14:39)
      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)
      at process._tickCallback (internal/process/next_tick.js:109:7)

  PanelHead test suites
    ✕ t-1 (20ms)
</code></pre>

<p>Here is my component <code>jsx</code>:</p>

<pre><code>return (
    &lt;div className={style.panelHeading}&gt;
      &lt;h3 className={style.panelTitle}&gt;
        {props.title}
        {props.subTitle &amp;&amp; &lt;small className={style.panelSubTitle}&gt;{props.subTitle}&lt;/small&gt;}
      &lt;/h3&gt;
    &lt;/div&gt;
  );
</code></pre>

<p>and my test code:</p>

<pre><code>describe('PanelHead test suites', () =&gt; {

  it('t-1', () =&gt; {

    const renderer = new ShallowRenderer();
    renderer.render(&lt;PanelHead title=""hot search""/&gt;)
    const result = renderer.getRenderOutput();

    expect(result.type).toBe('div');
    expect(result.props.children.type).toBe('h3');
    expect(result.props.children.props.className).toBe('panelTitle');

    expect(result.props.children).toEqual(&lt;h3 className=""panelTitle""&gt;hot search&lt;/h3&gt;);

  });

});
</code></pre>
","I have the same issue:    Expected value to equal:
      <div id=""showme"" style={{}} />
    Received:
      <div id=""showme"" style={{}} />
    
    Difference:"
"45903469","How to assert the right value in reactjs unit test?","1","<p>I have written a reactjs component with an onClick event. This will change a text in the component, this is the component:</p>

<pre><code>import React, {Component} from 'react'

export default class SimpleComponent extends Component{

constructor(props){
        super(props);
        this.state ={tekst:'leeg'}
}

handleClick = () =&gt;{
        console.log('handleclick!!!');
        this.setState({tekst:'hallo'});
}

render() {
        return (
         &lt;div&gt;
            {this.state.tekst}
             simple comp
            &lt;button onClick={this.handleClick} /&gt;   

         &lt;/div&gt;
        )
      }
}
</code></pre>

<p>I wrote a unit test to test the onClick event:</p>

<pre><code>import React from 'react';
import TestUtils from 'react-dom/test-utils';
import SimpleComponent from './SimpleComponent'
import expect from 'expect'

var renderer = TestUtils.createRenderer();

renderer.render(&lt;SimpleComponent /&gt;);

var subject = renderer.getRenderOutput();

console.log(subject);

describe('Simple component',() =&gt; {
    it('should ...', () =&gt; {
        let btn = subject.props.children[2];
        btn.props.onClick();
        console.log('btn',btn)
        //let t = subject.props.children[0]
        //console.log('t',t)
        let tekst = subject.props.children[0]; 
        //console.log('tekst',tekst);
        expect(tekst).toEqual('hello');  // =&gt; true
    })
})
</code></pre>

<p>The test hits the handleClick event but the tekst is still the old one, it should be 'hallo'. How can I test this scenario where the state.tekst is changed by the handleClick?</p>
","What you are using enzyme or else?"