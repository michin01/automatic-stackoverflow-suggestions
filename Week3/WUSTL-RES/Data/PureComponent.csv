Id,Title,CommentCount,Body,Text
"34141207","react-router how to build app structure?","4","<p>I still search for a tutorial which explains how to build a structure for the following scenario</p>

<ul>
<li>on app boot <code>/</code> I have all listed items</li>
<li>click on specific item redirects to a new route /itemid and shows item details</li>
</ul>

<p>till now my structure</p>

<pre><code>app
-- dist
-- src
--- components
---- Layout.js
---- Items.js
---- Item.js
--- actions
--- stores
--- dispatchers
--- services
-- styles
Root.js
App.js
index.js
webpack.config.js
package.json
</code></pre>

<p>index.js</p>

<pre><code>import React from 'react';
import { createHistory, createHashHistory } from 'history';
import Root from './Root';

const rootEl = document.getElementById('workshop-booker');
// Use hash location for Workshop Pages
// but switch to HTML5 history locally.
const history = process.env.NODE_ENV === 'production' ?
    createHashHistory() :
    createHistory();

React.render(&lt;Root history={history} /&gt;, rootEl);
</code></pre>

<p>Root.js</p>

<pre><code>import React, { PropTypes, Component } from 'react';
import { Router, Route } from 'react-router';

import App from './App';
import Workshops from './components/Workshops';
import Workshop from './components/Workshop';

export default class Root extends Component {
    static propTypes = {
        history: PropTypes.object.isRequired
    }

    render() {
        const { history } = this.props;
        return (
            &lt;Router history={history}&gt;
                &lt;Route name='workshops' path='/' component={App}&gt;
                    &lt;Route name='workshop' path='/:slug' component={Workshop} /&gt;
                &lt;/Route&gt;
            &lt;/Router&gt;
        );
    }
}
</code></pre>

<p>App.js</p>

<pre><code>import React, { PropTypes } from 'react';
import Layout from './components/Layout';
import DocumentTitle from 'react-document-title';

export default class App {
    static propTypes = {
        children: PropTypes.object
    };

    render() {
        return (
            &lt;DocumentTitle title='Workshop Booker'&gt;
                &lt;div className='App'&gt;
                    &lt;Layout {...this.props} /&gt;
                    &lt;hr /&gt;
                    {this.props.children}
                &lt;/div&gt;
            &lt;/DocumentTitle&gt;
        );
    }
}
</code></pre>

<p>Layout component</p>

<pre><code>import React, { Component, PropTypes, findDOMNode } from 'react';
import shouldPureComponentUpdate from 'react-pure-render/function';
import Workshops from './Workshops';

export default class Layout extends Component {
    static propTypes = {
        params: PropTypes.shape({
            login: PropTypes.string,
            name: PropTypes.string
        })
    };

    static contextTypes = {
        history: PropTypes.object.isRequired
    };

    shouldComponentUpdate = shouldPureComponentUpdate;

    constructor(props) {
        super(props);
    }

    componentWillReceiveProps(nextProps) {
        this.setState({
            loginOrRepo: parseFullName(nextProps.params)
        });
    }

    render() {
        return (
            &lt;div className='Explore'&gt;
                    &lt;Workshops /&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>I have been following this e<a href=""http://gaearon.github.io/flux-react-router-example"" rel=""nofollow"">xample</a> and mainly my structure follows the idea behind but the thing is that all inherited components are warpped as child. How do I generate the structure to open a new view?</p>

<p>but</p>
","Where are all the items being rendered? It doesn't appear to be in the code you posted. Is that the complete listing?"
"34141207","react-router how to build app structure?","4","<p>I still search for a tutorial which explains how to build a structure for the following scenario</p>

<ul>
<li>on app boot <code>/</code> I have all listed items</li>
<li>click on specific item redirects to a new route /itemid and shows item details</li>
</ul>

<p>till now my structure</p>

<pre><code>app
-- dist
-- src
--- components
---- Layout.js
---- Items.js
---- Item.js
--- actions
--- stores
--- dispatchers
--- services
-- styles
Root.js
App.js
index.js
webpack.config.js
package.json
</code></pre>

<p>index.js</p>

<pre><code>import React from 'react';
import { createHistory, createHashHistory } from 'history';
import Root from './Root';

const rootEl = document.getElementById('workshop-booker');
// Use hash location for Workshop Pages
// but switch to HTML5 history locally.
const history = process.env.NODE_ENV === 'production' ?
    createHashHistory() :
    createHistory();

React.render(&lt;Root history={history} /&gt;, rootEl);
</code></pre>

<p>Root.js</p>

<pre><code>import React, { PropTypes, Component } from 'react';
import { Router, Route } from 'react-router';

import App from './App';
import Workshops from './components/Workshops';
import Workshop from './components/Workshop';

export default class Root extends Component {
    static propTypes = {
        history: PropTypes.object.isRequired
    }

    render() {
        const { history } = this.props;
        return (
            &lt;Router history={history}&gt;
                &lt;Route name='workshops' path='/' component={App}&gt;
                    &lt;Route name='workshop' path='/:slug' component={Workshop} /&gt;
                &lt;/Route&gt;
            &lt;/Router&gt;
        );
    }
}
</code></pre>

<p>App.js</p>

<pre><code>import React, { PropTypes } from 'react';
import Layout from './components/Layout';
import DocumentTitle from 'react-document-title';

export default class App {
    static propTypes = {
        children: PropTypes.object
    };

    render() {
        return (
            &lt;DocumentTitle title='Workshop Booker'&gt;
                &lt;div className='App'&gt;
                    &lt;Layout {...this.props} /&gt;
                    &lt;hr /&gt;
                    {this.props.children}
                &lt;/div&gt;
            &lt;/DocumentTitle&gt;
        );
    }
}
</code></pre>

<p>Layout component</p>

<pre><code>import React, { Component, PropTypes, findDOMNode } from 'react';
import shouldPureComponentUpdate from 'react-pure-render/function';
import Workshops from './Workshops';

export default class Layout extends Component {
    static propTypes = {
        params: PropTypes.shape({
            login: PropTypes.string,
            name: PropTypes.string
        })
    };

    static contextTypes = {
        history: PropTypes.object.isRequired
    };

    shouldComponentUpdate = shouldPureComponentUpdate;

    constructor(props) {
        super(props);
    }

    componentWillReceiveProps(nextProps) {
        this.setState({
            loginOrRepo: parseFullName(nextProps.params)
        });
    }

    render() {
        return (
            &lt;div className='Explore'&gt;
                    &lt;Workshops /&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>I have been following this e<a href=""http://gaearon.github.io/flux-react-router-example"" rel=""nofollow"">xample</a> and mainly my structure follows the idea behind but the thing is that all inherited components are warpped as child. How do I generate the structure to open a new view?</p>

<p>but</p>
","What precisely is being wrapped that you don't want wrapped?"
"34141207","react-router how to build app structure?","4","<p>I still search for a tutorial which explains how to build a structure for the following scenario</p>

<ul>
<li>on app boot <code>/</code> I have all listed items</li>
<li>click on specific item redirects to a new route /itemid and shows item details</li>
</ul>

<p>till now my structure</p>

<pre><code>app
-- dist
-- src
--- components
---- Layout.js
---- Items.js
---- Item.js
--- actions
--- stores
--- dispatchers
--- services
-- styles
Root.js
App.js
index.js
webpack.config.js
package.json
</code></pre>

<p>index.js</p>

<pre><code>import React from 'react';
import { createHistory, createHashHistory } from 'history';
import Root from './Root';

const rootEl = document.getElementById('workshop-booker');
// Use hash location for Workshop Pages
// but switch to HTML5 history locally.
const history = process.env.NODE_ENV === 'production' ?
    createHashHistory() :
    createHistory();

React.render(&lt;Root history={history} /&gt;, rootEl);
</code></pre>

<p>Root.js</p>

<pre><code>import React, { PropTypes, Component } from 'react';
import { Router, Route } from 'react-router';

import App from './App';
import Workshops from './components/Workshops';
import Workshop from './components/Workshop';

export default class Root extends Component {
    static propTypes = {
        history: PropTypes.object.isRequired
    }

    render() {
        const { history } = this.props;
        return (
            &lt;Router history={history}&gt;
                &lt;Route name='workshops' path='/' component={App}&gt;
                    &lt;Route name='workshop' path='/:slug' component={Workshop} /&gt;
                &lt;/Route&gt;
            &lt;/Router&gt;
        );
    }
}
</code></pre>

<p>App.js</p>

<pre><code>import React, { PropTypes } from 'react';
import Layout from './components/Layout';
import DocumentTitle from 'react-document-title';

export default class App {
    static propTypes = {
        children: PropTypes.object
    };

    render() {
        return (
            &lt;DocumentTitle title='Workshop Booker'&gt;
                &lt;div className='App'&gt;
                    &lt;Layout {...this.props} /&gt;
                    &lt;hr /&gt;
                    {this.props.children}
                &lt;/div&gt;
            &lt;/DocumentTitle&gt;
        );
    }
}
</code></pre>

<p>Layout component</p>

<pre><code>import React, { Component, PropTypes, findDOMNode } from 'react';
import shouldPureComponentUpdate from 'react-pure-render/function';
import Workshops from './Workshops';

export default class Layout extends Component {
    static propTypes = {
        params: PropTypes.shape({
            login: PropTypes.string,
            name: PropTypes.string
        })
    };

    static contextTypes = {
        history: PropTypes.object.isRequired
    };

    shouldComponentUpdate = shouldPureComponentUpdate;

    constructor(props) {
        super(props);
    }

    componentWillReceiveProps(nextProps) {
        this.setState({
            loginOrRepo: parseFullName(nextProps.params)
        });
    }

    render() {
        return (
            &lt;div className='Explore'&gt;
                    &lt;Workshops /&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>I have been following this e<a href=""http://gaearon.github.io/flux-react-router-example"" rel=""nofollow"">xample</a> and mainly my structure follows the idea behind but the thing is that all inherited components are warpped as child. How do I generate the structure to open a new view?</p>

<p>but</p>
","I have each time all the items wrapped under the list on slug  and under I have the clicked item. Desired have a new view without all items"
"34141207","react-router how to build app structure?","4","<p>I still search for a tutorial which explains how to build a structure for the following scenario</p>

<ul>
<li>on app boot <code>/</code> I have all listed items</li>
<li>click on specific item redirects to a new route /itemid and shows item details</li>
</ul>

<p>till now my structure</p>

<pre><code>app
-- dist
-- src
--- components
---- Layout.js
---- Items.js
---- Item.js
--- actions
--- stores
--- dispatchers
--- services
-- styles
Root.js
App.js
index.js
webpack.config.js
package.json
</code></pre>

<p>index.js</p>

<pre><code>import React from 'react';
import { createHistory, createHashHistory } from 'history';
import Root from './Root';

const rootEl = document.getElementById('workshop-booker');
// Use hash location for Workshop Pages
// but switch to HTML5 history locally.
const history = process.env.NODE_ENV === 'production' ?
    createHashHistory() :
    createHistory();

React.render(&lt;Root history={history} /&gt;, rootEl);
</code></pre>

<p>Root.js</p>

<pre><code>import React, { PropTypes, Component } from 'react';
import { Router, Route } from 'react-router';

import App from './App';
import Workshops from './components/Workshops';
import Workshop from './components/Workshop';

export default class Root extends Component {
    static propTypes = {
        history: PropTypes.object.isRequired
    }

    render() {
        const { history } = this.props;
        return (
            &lt;Router history={history}&gt;
                &lt;Route name='workshops' path='/' component={App}&gt;
                    &lt;Route name='workshop' path='/:slug' component={Workshop} /&gt;
                &lt;/Route&gt;
            &lt;/Router&gt;
        );
    }
}
</code></pre>

<p>App.js</p>

<pre><code>import React, { PropTypes } from 'react';
import Layout from './components/Layout';
import DocumentTitle from 'react-document-title';

export default class App {
    static propTypes = {
        children: PropTypes.object
    };

    render() {
        return (
            &lt;DocumentTitle title='Workshop Booker'&gt;
                &lt;div className='App'&gt;
                    &lt;Layout {...this.props} /&gt;
                    &lt;hr /&gt;
                    {this.props.children}
                &lt;/div&gt;
            &lt;/DocumentTitle&gt;
        );
    }
}
</code></pre>

<p>Layout component</p>

<pre><code>import React, { Component, PropTypes, findDOMNode } from 'react';
import shouldPureComponentUpdate from 'react-pure-render/function';
import Workshops from './Workshops';

export default class Layout extends Component {
    static propTypes = {
        params: PropTypes.shape({
            login: PropTypes.string,
            name: PropTypes.string
        })
    };

    static contextTypes = {
        history: PropTypes.object.isRequired
    };

    shouldComponentUpdate = shouldPureComponentUpdate;

    constructor(props) {
        super(props);
    }

    componentWillReceiveProps(nextProps) {
        this.setState({
            loginOrRepo: parseFullName(nextProps.params)
        });
    }

    render() {
        return (
            &lt;div className='Explore'&gt;
                    &lt;Workshops /&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>I have been following this e<a href=""http://gaearon.github.io/flux-react-router-example"" rel=""nofollow"">xample</a> and mainly my structure follows the idea behind but the thing is that all inherited components are warpped as child. How do I generate the structure to open a new view?</p>

<p>but</p>
","I added my Layout component, this component is getting called on boot"
"36588059","How to import google map in react project","0","<p>I a using webpack and reactjs in my project and now I want to integrate google map api. First I added ""react-google-maps"": ""^4.9.1"" on my package.json file. Below is my component class.</p>

<pre><code>import React, {PropTypes, Component} from 'react';

import { GoogleMap, Marker, SearchBox } from ""react-google-maps"";
import shouldPureComponentUpdate from 'react-pure-render/function';

const greatPlaceStyle = {
  // initially any map object has left top corner at lat lng coordinates
  // it's on you to set object origin to 0,0 coordinates
  position: 'absolute',
  width: 512,
  height: 512,
  left: 512 / 2,
  top: 512 / 2,

  border: '5px solid #f44336',
  borderRadius: 512,
  backgroundColor: 'white',
  textAlign: 'center',
  color: '#3f51b5',
  fontSize: 16,
  fontWeight: 'bold',
  padding: 4
};

export default class SimpleMapPage extends Component {
  static defaultProps = {
    center: {lat: 59.938043, lng: 30.337157},
    zoom: 1,
    greatPlaceCoords: {lat: 59.724465, lng: 30.080121}
  };

  shouldComponentUpdate = shouldPureComponentUpdate;

  constructor(props) {
    super(props);
  }

  render() {
    return (
       &lt;GoogleMap&gt;

        defaultCenter={this.props.center}
        defaultZoom={this.props.zoom}&gt;

        &lt;MyGreatPlace lat={59.955413} lng={30.337844} text={'A'} /&gt;
        &lt;MyGreatPlace {...this.props.greatPlaceCoords} text={'B'} /&gt;

      &lt;/GoogleMap&gt;
    );
  }
}

export default class MyGreatPlace extends Component {
  static propTypes = {
    text: PropTypes.string
  };

  static defaultProps = {};

  //shouldComponentUpdate = shouldPureComponentUpdate;

  constructor(props) {
    super(props);
  }

  render() {
    return (
       &lt;div style={greatPlaceStyle}&gt;
          {this.props.text}
       &lt;/div&gt;
    );
  }
}
</code></pre>

<p>In my index.html file, I added below javascripts. The first one is goold map api dependency. The second one is the bundle.js which is packaged by webpack. When I access my application, the google map didn't show up. I think the problem would be failed to import google map api on my component class. What is the correct way to import googleapis? </p>

<pre><code>&lt;script src=""https://maps.googleapis.com/maps/api/js?key=AIzaSyA2sDQZ-36NLlY4iMvoiuQ7mS1n-v8iq2M"" async defer&gt;&lt;/script&gt;
    &lt;script type=""text/javascript"" src=""bundle.js"" charset=""utf-8""&gt;&lt;/script&gt;
</code></pre>
",""
"41187292","Getting checksum invalid warning when using apollo client isomorphically with react starter kit","2","<p>I'm trying to use the Apollo client and I am running into a few issues with dropping it into the react starter kit with redux.  <a href=""https://github.com/kriasoft/react-starter-kit/tree/feature/redux"" rel=""nofollow noreferrer"">https://github.com/kriasoft/react-starter-kit/tree/feature/redux</a></p>

<p>Trying to use the techniques from here: <a href=""http://dev.apollodata.com/react/server-side-rendering.html"" rel=""nofollow noreferrer"">http://dev.apollodata.com/react/server-side-rendering.html</a></p>

<p>But I get the error </p>

<pre><code>warning.js:36Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:
 (client) &lt;/div&gt;&lt;/header&gt;&lt;div data-reactid=""19""&gt;Lo
 (server) &lt;/div&gt;&lt;/header&gt;&lt;div class=""Home-root-2IM
</code></pre>

<p>Here's my implementation</p>

<pre><code>// server.js
...
const component = (
  &lt;App context={context}&gt;
    &lt;ApolloProvider client={context.client} store={context.store}&gt;
      {route.component}
    &lt;/ApolloProvider&gt;
  &lt;/App&gt;
);


await getDataFromTree(component);

data.children = ReactDOM.renderToString(component);
data.style = [...css].join('');
data.scripts = [
  assets.vendor.js,
  assets.client.js,
];
data.state = context.store.getState();
if (assets[route.chunk]) {
  data.scripts.push(assets[route.chunk].js);
}

const html = ReactDOM.renderToStaticMarkup(&lt;Html {...data} /&gt;);
res.status(route.status || 200);
res.send(`&lt;!doctype html&gt;${html}`);
...
</code></pre>

<p>And client side</p>

<pre><code>// client.js
...
const component = (
  &lt;App context={context}&gt;
    &lt;ApolloProvider client={context.client} store={context.store}&gt;
      {route.component}
    &lt;/ApolloProvider&gt;
  &lt;/App&gt;
);

appInstance = ReactDOM.render(
 component,
  container,
  () =&gt; onRenderComplete(route, location),
);
...


// Home.js

class Home extends React.Component {
  static propTypes = {
    collections: PropTypes.arrayOf(PropTypes.shape({
      id: PropTypes.string.isRequired,
      title: PropTypes.string.isRequired,
      subtitle: PropTypes.string.isRequired,
      photo: PropTypes.string,
    })).isRequired,
  };

  render() {
    const props = this.props;
    const { loading, allCollections } = props.data;

    if (loading) {
      return &lt;div&gt;Loading&lt;/div&gt;;
    } else {
      return (
        &lt;div className={s.root}&gt;
          &lt;div className={s.container}&gt;
            &lt;h1 className={s.title}&gt;Collections&lt;/h1&gt;
            &lt;ul&gt;
              {allCollections.map((collection) =&gt;
                &lt;li key={collection.id}&gt;
                  &lt;h3&gt;{collection.title}&lt;/h3&gt;
                  &lt;img src={collection.photo} width=""200""/&gt;
                &lt;/li&gt;
              )}
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      );
    }

  }
}

Home.propTypes = {
  data: PropTypes.shape({
    loading: PropTypes.bool.isRequired,
    allCollections: PropTypes.array,
  }).isRequired,
};


const HomeWithStyles =  withStyles(s)(Home);
const HomeWithData = graphql(getQuery)(HomeWithStyles);
export default connect()(HomeWithData);



// App.js
import React, { Children, PropTypes } from 'react';

const ContextType = {
  // Enables critical path CSS rendering
  // https://github.com/kriasoft/isomorphic-style-loader
  insertCss: PropTypes.func.isRequired,
  // Integrate Redux
  // http://redux.js.org/docs/basics/UsageWithReact.html
  store: PropTypes.shape({
    subscribe: PropTypes.func.isRequired,
    dispatch: PropTypes.func.isRequired,
    getState: PropTypes.func.isRequired,
  }).isRequired,
  client: PropTypes.object.isRequired,
};

/**
 * The top-level React component setting context (global) variables
 * that can be accessed from all the child components.
 *
 * https://facebook.github.io/react/docs/context.html
 *
 * Usage example:
 *
 *   const context = {
 *     history: createBrowserHistory(),
 *     store: createStore(),
 *   };
 *
 *   ReactDOM.render(
 *     &lt;App context={context}&gt;
 *       &lt;Layout&gt;
 *         &lt;LandingPage /&gt;
 *       &lt;/Layout&gt;
 *     &lt;/App&gt;,
 *     container,
 *   );
 */
class App extends React.PureComponent {

  static propTypes = {
    context: PropTypes.shape(ContextType).isRequired,
    children: PropTypes.element.isRequired,
  };

  static childContextTypes = ContextType;

  getChildContext() {
    return this.props.context;
  }

  render() {
    // NOTE: If you need to add or modify header, footer etc. of the app,
    // please do that inside the Layout component.
    return Children.only(this.props.children);
  }

}

export default App;
</code></pre>
","have you have a look at [this gh thread](https://github.com/ReactTraining/react-router/issues/2704)? `<Router key={Math.random()} history={browserHistory} routes={routes} />` did the trick for me client side."
"41187292","Getting checksum invalid warning when using apollo client isomorphically with react starter kit","2","<p>I'm trying to use the Apollo client and I am running into a few issues with dropping it into the react starter kit with redux.  <a href=""https://github.com/kriasoft/react-starter-kit/tree/feature/redux"" rel=""nofollow noreferrer"">https://github.com/kriasoft/react-starter-kit/tree/feature/redux</a></p>

<p>Trying to use the techniques from here: <a href=""http://dev.apollodata.com/react/server-side-rendering.html"" rel=""nofollow noreferrer"">http://dev.apollodata.com/react/server-side-rendering.html</a></p>

<p>But I get the error </p>

<pre><code>warning.js:36Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:
 (client) &lt;/div&gt;&lt;/header&gt;&lt;div data-reactid=""19""&gt;Lo
 (server) &lt;/div&gt;&lt;/header&gt;&lt;div class=""Home-root-2IM
</code></pre>

<p>Here's my implementation</p>

<pre><code>// server.js
...
const component = (
  &lt;App context={context}&gt;
    &lt;ApolloProvider client={context.client} store={context.store}&gt;
      {route.component}
    &lt;/ApolloProvider&gt;
  &lt;/App&gt;
);


await getDataFromTree(component);

data.children = ReactDOM.renderToString(component);
data.style = [...css].join('');
data.scripts = [
  assets.vendor.js,
  assets.client.js,
];
data.state = context.store.getState();
if (assets[route.chunk]) {
  data.scripts.push(assets[route.chunk].js);
}

const html = ReactDOM.renderToStaticMarkup(&lt;Html {...data} /&gt;);
res.status(route.status || 200);
res.send(`&lt;!doctype html&gt;${html}`);
...
</code></pre>

<p>And client side</p>

<pre><code>// client.js
...
const component = (
  &lt;App context={context}&gt;
    &lt;ApolloProvider client={context.client} store={context.store}&gt;
      {route.component}
    &lt;/ApolloProvider&gt;
  &lt;/App&gt;
);

appInstance = ReactDOM.render(
 component,
  container,
  () =&gt; onRenderComplete(route, location),
);
...


// Home.js

class Home extends React.Component {
  static propTypes = {
    collections: PropTypes.arrayOf(PropTypes.shape({
      id: PropTypes.string.isRequired,
      title: PropTypes.string.isRequired,
      subtitle: PropTypes.string.isRequired,
      photo: PropTypes.string,
    })).isRequired,
  };

  render() {
    const props = this.props;
    const { loading, allCollections } = props.data;

    if (loading) {
      return &lt;div&gt;Loading&lt;/div&gt;;
    } else {
      return (
        &lt;div className={s.root}&gt;
          &lt;div className={s.container}&gt;
            &lt;h1 className={s.title}&gt;Collections&lt;/h1&gt;
            &lt;ul&gt;
              {allCollections.map((collection) =&gt;
                &lt;li key={collection.id}&gt;
                  &lt;h3&gt;{collection.title}&lt;/h3&gt;
                  &lt;img src={collection.photo} width=""200""/&gt;
                &lt;/li&gt;
              )}
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      );
    }

  }
}

Home.propTypes = {
  data: PropTypes.shape({
    loading: PropTypes.bool.isRequired,
    allCollections: PropTypes.array,
  }).isRequired,
};


const HomeWithStyles =  withStyles(s)(Home);
const HomeWithData = graphql(getQuery)(HomeWithStyles);
export default connect()(HomeWithData);



// App.js
import React, { Children, PropTypes } from 'react';

const ContextType = {
  // Enables critical path CSS rendering
  // https://github.com/kriasoft/isomorphic-style-loader
  insertCss: PropTypes.func.isRequired,
  // Integrate Redux
  // http://redux.js.org/docs/basics/UsageWithReact.html
  store: PropTypes.shape({
    subscribe: PropTypes.func.isRequired,
    dispatch: PropTypes.func.isRequired,
    getState: PropTypes.func.isRequired,
  }).isRequired,
  client: PropTypes.object.isRequired,
};

/**
 * The top-level React component setting context (global) variables
 * that can be accessed from all the child components.
 *
 * https://facebook.github.io/react/docs/context.html
 *
 * Usage example:
 *
 *   const context = {
 *     history: createBrowserHistory(),
 *     store: createStore(),
 *   };
 *
 *   ReactDOM.render(
 *     &lt;App context={context}&gt;
 *       &lt;Layout&gt;
 *         &lt;LandingPage /&gt;
 *       &lt;/Layout&gt;
 *     &lt;/App&gt;,
 *     container,
 *   );
 */
class App extends React.PureComponent {

  static propTypes = {
    context: PropTypes.shape(ContextType).isRequired,
    children: PropTypes.element.isRequired,
  };

  static childContextTypes = ContextType;

  getChildContext() {
    return this.props.context;
  }

  render() {
    // NOTE: If you need to add or modify header, footer etc. of the app,
    // please do that inside the Layout component.
    return Children.only(this.props.children);
  }

}

export default App;
</code></pre>
","turns out I have to explicitly set the apollo initial state clientside to rehydrate the store there to the same as the server - and that was causing the checksum errors"
"41288965","React and Semantic-ui-react, proxy event","1","<p>I'm new in React and I'm using Semantic-ui-react. I'm trying to use the Dropdown.</p>

<p>When I want to get my value from the dropdown and call my function. My event get some proxy object.</p>

<pre><code>  handleTagChange(e) {
    console.log(""handleTagChange"");
    console.log(e);
  }
</code></pre>

<p>But if I add something else like test in the function, the e.target.value works and test is the proxy object. Why is that?</p>

<pre><code>  handleTagChange(test, e) {
    console.log(""handleTagChange"");
    console.log(test);
    console.log(e);
  }
</code></pre>

<p>TagFilter.js</p>

<pre><code>import React, { PropTypes } from 'react';
import { Dropdown } from 'semantic-ui-react'

export default class TagFilter extends React.PureComponent {
  render() {
  console.log(this.props);
    const options = [
      { ""text"": ""Admin stuff"", ""value"": ""admin stuff"" },
      { ""text"": ""Frontend"", ""value"": ""frontend"" },
      { ""text"": ""JS"", ""value"": ""js"" },
      { ""text"": ""Mucking about"", ""value"": ""mucking about"" },
      { ""text"": ""React"", ""value"": ""react"" }
    ];

    return (
      &lt;Dropdown placeholder='Skills' fluid selection options={options} onChange={this.props.handleTagChange} /&gt;
    );

  }

}
</code></pre>

<p>Employee.js</p>

<pre><code>import React, { PropTypes } from 'react';
import { Image, List } from 'semantic-ui-react';

import TagFilter from './TagFilter';
import ProductFilter from './ProductFilter';
import MyModal from './Modal';

export default class Employees extends React.Component {
  //static defaultProps = {
  //}

  constructor() {
    super();
    this.closeModal = this.closeModal.bind(this);
    this.handleTagChange = this.handleTagChange.bind(this);
    this.handleProductChange = this.handleProductChange.bind(this);
  }

  state = {
    tagsFilterValue: null,
    productsFilterValue: null,
    employeeDetails: null,
    openModal: false
  }

  handleTagChange(e) {
    console.log(""handleTagChange"");
    console.log(e);
  }

  handleProductChange(e) {
    let productValue = e.target.value;
    this.setState({productsFilterValue: productValue});
  }

  handleEmployeeClick(name, e) {
    this.setState({employeeDetails: name});
    this.setState({openModal: true});
  }

  closeModal() {
    this.setState({openModal: false});
  }

  render() {
    let filteredEmployees = this.props.data.filter(
      (employee) =&gt; {
        // If state tagsFilterValue and productsFilterValue is not null
        if (this.state.tagsFilterValue &amp;&amp; this.state.productsFilterValue) {
          return employee.tags.indexOf(this.state.tagsFilterValue) !== -1 &amp;&amp; employee.products.indexOf(this.state.productsFilterValue) !== -1;
        }
        // If state tagsFilterValue is not null
        else if (this.state.tagsFilterValue) {
          return employee.tags.indexOf(this.state.tagsFilterValue) !== -1;
        }
        // If state productsFilterValue is not null
        else if (this.state.productsFilterValue) {
          return employee.products.indexOf(this.state.productsFilterValue) !== -1;
        }
        else {
          return employee;
        }
      }
    );


    let employeeDetails = this.props.data.filter(
      (employee) =&gt; {
          return employee.name.indexOf(this.state.employeeDetails) !== -1;
      }
    );


    return (
      &lt;div&gt;
        { employeeDetails.map((employee) =&gt; (
          &lt;MyModal employeeDetails={employee} closeModal={this.closeModal} openModal={this.state.openModal} /&gt;
        ))}

        &lt;div className=""ui grid""&gt;
          &lt;TagFilter handleTagChange={this.handleTagChange} tagsFilterValue={this.state.tagsFilterValue} /&gt;
          &lt;ProductFilter handleProductChange={this.handleProductChange} productsFilterValue={this.state.productsFilterValue} /&gt;
        &lt;/div&gt;

        &lt;List&gt;
        { filteredEmployees.map((employee) =&gt; (
          &lt;List.Item key={employee.name}&gt;
          &lt;div className=""ui card""&gt;
            &lt;div className=""image""&gt;
              &lt;img alt=""User avatar"" src={employee.image}/&gt;
            &lt;/div&gt;
            &lt;div className=""content""&gt;
              &lt;a className=""header"" onClick={this.handleEmployeeClick.bind(this, employee.name)}&gt;{employee.name}&lt;/a&gt;
              &lt;div className=""meta""&gt;{employee.title}&lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;/List.Item&gt;
        ))}
        &lt;/List&gt;

      &lt;/div&gt;
    );
  }
}
</code></pre>
","Bump .... .... ..."
"41810399","using react-md with meteor","1","<p>I am trying to use <a href=""https://react-md.mlaursen.com"" rel=""nofollow noreferrer"">https://react-md.mlaursen.com</a> in my meteor app. I got the functionality but not the style.</p>

<p>I create a simple example with a <code>drawer</code> component and all the items are present except </p>

<h2>the drawer looks ugly:</h2>

<p><a href=""https://i.stack.imgur.com/sES8T.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sES8T.png"" alt=""enter image description here""></a></p>

<h2>instead of pretty:</h2>

<p><a href=""https://i.stack.imgur.com/YDPjo.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/YDPjo.png"" alt=""enter image description here""></a></p>

<p>I suspect the CSS is missing but I don't know how to add it. react-md uses SASS and I added <a href=""https://atmospherejs.com/fourseven/scss"" rel=""nofollow noreferrer"">https://atmospherejs.com/fourseven/scss</a> for that. </p>

<h3>the code for the menu is:</h3>

<pre><code>import React, { PureComponent } from 'react';
import Drawer from 'react-md/lib/Drawers';
import Button from 'react-md/lib/Buttons/Button';
import Toolbar from 'react-md/lib/Toolbars';
import FontIcon from 'react-md/lib/FontIcons';

export default class SimpleExample extends PureComponent {

    constructor(props) {
        super(props);

        this.state = {
            visible: false,
            position: 'left',
        };

        this.inboxListItems = [{
            key: 'inbox',
            primaryText: 'Inbox',
            leftIcon: &lt;FontIcon&gt;inbox&lt;/FontIcon&gt;,
            active: true,
        }, {
            key: 'starred',
            primaryText: 'Starred',
            leftIcon: &lt;FontIcon&gt;star&lt;/FontIcon&gt;,
        }, {
            key: 'send-mail',
            primaryText: 'Send mail',
            leftIcon: &lt;FontIcon&gt;send&lt;/FontIcon&gt;,
        }, {
            key: 'drafts',
            primaryText: 'Drafts',
            leftIcon: &lt;FontIcon&gt;drafts&lt;/FontIcon&gt;,
        }, { key: 'divider', divider: true }, {
            key: 'all-mail',
            primaryText: 'All mail',
            leftIcon: &lt;FontIcon&gt;mail&lt;/FontIcon&gt;,
        }, {
            key: 'trash',
            primaryText: 'Trash',
            leftIcon: &lt;FontIcon&gt;delete&lt;/FontIcon&gt;,
        }, {
            key: 'spam',
            primaryText: 'Spam',
            leftIcon: &lt;FontIcon&gt;info&lt;/FontIcon&gt;,
        }];


        this._toggleLeft = this._toggleLeft.bind(this);
        this._toggleRight = this._toggleRight.bind(this);
        this._closeDrawer = this._closeDrawer.bind(this);
        this._handleToggle = this._handleToggle.bind(this);
    }

    _handleToggle(visible) {
        this.setState({ visible });
    }

    _closeDrawer() {
        this.setState({ visible: false });
    }

    _toggleLeft() {
        this.setState({ visible: !this.state.visible, position: 'left' });
    }

    _toggleRight() {
        this.setState({ visible: !this.state.visible, position: 'right' });
    }

    render() {
        const left = this.state.position === 'left';
        const close = &lt;Button icon onClick={this._closeDrawer}&gt;{left ? 'arrow_back' : 'close'}&lt;/Button&gt;;
        const header = (
            &lt;Toolbar
                nav={left ? null : close}
                actions={left ? close : null}
                className=""md-divider-border md-divider-border--bottom""
            /&gt;
        );
        return (
            &lt;div className=""md-grid""&gt;
                &lt;Button raised label=""Toggle Drawer Left"" onClick={this._toggleLeft} /&gt;
                &lt;Button raised label=""Toggle Drawer Right"" onClick={this._toggleRight} /&gt;
                &lt;Drawer
                    {...this.state}
                    navItems={this.inboxListItems}
                    onVisibilityToggle={this._handleToggle}
                    type={Drawer.DrawerTypes.TEMPORARY}
                    header={header}
                    style={{ zIndex: 100 }}
                /&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>
","Did you try to import the specific styles to your component? If you are using npm, use `require('node/module/path/to/style.css')`."
"42972362","Props are not passed down to the child component - redux-form/react","0","<p>My props are not passed down to the child component. I have the following parent component NewProject:</p>

<pre><code>...

export class NewProject extends React.PureComponent {

  constructor(props) {
    super(props);
    this.saveProject = this.saveProject.bind(this);
  }

  saveProject = (values) =&gt; {
    console.log(values);
  }

  render() {
    return (
      &lt;div&gt;
        &lt;div style={{fontSize: 14}} className=""container""&gt;
          &lt;NewProjectForm
            onSubmit={this.saveProject}
          /&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}
...
</code></pre>

<p>And the child component NewProjectForm</p>

<pre><code>...
const NewProjectForm = (props) =&gt; {
  const {
    handleSubmit,
    pristine,
    reset,
    submitting,
    locale
  } = props;

  console.log(props);

  return (
      &lt;form onSubmit={handleSubmit}&gt;
            &lt;RaisedButton labelColor='#ffffff' type=""submit"" backgroundColor='#86BFC4' label=""Save"" /&gt;
      &lt;/form&gt;
    &lt;/Form&gt;
  )
}

export default reduxForm({
  form: 'newProjectForm'
})(NewProjectForm);
</code></pre>

<p>When I press the submit button, i get the following error:</p>

<pre><code>Uncaught Error: You must either pass handleSubmit() an onSubmit function or pass onSubmit as a prop
    at checkSubmit (eval at ./node_modules/redux-form/lib/reduxForm.js (http://localhost:3000/main.js:5694:1), &lt;anonymous&gt;:133:11)
    at Form.submit (eval at ./node_modules/redux-form/lib/reduxForm.js (http://localhost:3000/main.js:5694:1), &lt;anonymous&gt;:540:74)
    at Object.ReactErrorUtils.invokeGuardedCallback (webpack:///./~/react-dom/lib/ReactErrorUtils.js?:70:16)
</code></pre>

<p>The error occur because the props are not passed down, but why is that - what am I missing?</p>

<p>Here is the output of the console.log...</p>

<p><a href=""https://i.stack.imgur.com/QrsE4.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/QrsE4.png"" alt=""enter image description here""></a></p>
",""
"43087031","react-virtualized getting error - TypeError: list.get is not a function","6","<p>Getting error - TypeError: list.get is not a function</p>

<p>My Parent component :</p>

<pre><code>import TableExample from './TableExample';

// Map Redux state to component props
function mapStateToProps(state) {
    return {
        dirList: state.filelistReducer.dirList,
        showFileViewer: state.sidenavReducer.showFileViewer,
    }
}
// Map Redux actions to component props
function mapDispatchToProps(dispatch) {

    return {
        onDirClick: (path) =&gt; { dispatch(actions.fetchFileListAction(path, dispatch)); },
    };
}
/**
 *
 *
 * @class FileViewerComponent
 * @extends {Component}
 */
class FileListViewComponent extends Component {
    constructor(props) {
        super(props);
        this.state = { width: 0 }

    }

    render() {
        return (
            &lt;div&gt;
                &lt;div className=""col-md-10""&gt;
                    &lt;div className=""contentviewdivider"" style={{ width: (this.state.width) + 'px' }}&gt;&lt;/div&gt;
                    &lt;div className=""mainContainer"" style={{ width: (this.state.width) + 'px' }}&gt;
                        &lt;div className=""tilerow""&gt;
                            {this.renderList()}
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

   renderList() { 
     return (
         &lt;div&gt;
            &lt;div className={this.props.showFileViewer}&gt;
                &lt;div className='row'&gt;
                    &lt;TableExample filelist={this.props.dirList} /&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
     );
}


}
export default connect(mapStateToProps, mapDispatchToProps)(FileListViewComponent);
</code></pre>

<p>Now in TableExample.jsx</p>

<pre><code>/** @flow */
import Immutable from 'immutable';
import { List } from 'immutable';
import React, { PropTypes, PureComponent } from 'react';
import ReactDom from 'react-dom';
import { ContentBox, ContentBoxHeader, ContentBoxParagraph } from '../demo/ContentBox'
import { LabeledInput, InputRow } from '../demo/LabeledInput'
import {AutoSizer,Column, Table, SortDirection, SortIndicator}  from 'react-virtualized'
import styles from '../../../styles/css/components/tableexample.css'
//import { generateRandomList } from './utils'

export default class TableExample extends PureComponent {
//  static contextTypes = {
//     list: PropTypes.instanceOf(Immutable.List).isRequired
//   };

  constructor (props) {
    super(props)

    this.state = {
      disableHeader: false,
      headerHeight: 30,
      height: 270,
      hideIndexRow: false,
      overscanRowCount: 10,
      rowHeight: 40,
      rowCount: 1000,
      scrollToIndex: undefined,
      sortBy: 'index',
      sortDirection: SortDirection.ASC,
      useDynamicRowHeight: false
    }

    this._getRowHeight = this._getRowHeight.bind(this)
    this._headerRenderer = this._headerRenderer.bind(this)
    this._noRowsRenderer = this._noRowsRenderer.bind(this)
    this._onRowCountChange = this._onRowCountChange.bind(this)
    this._onScrollToRowChange = this._onScrollToRowChange.bind(this)
    this._rowClassName = this._rowClassName.bind(this)
    this._sort = this._sort.bind(this)
  }

  render () {
    const {
      disableHeader,
      headerHeight,
      height,
      hideIndexRow,
      overscanRowCount,
      rowHeight,
      rowCount,
      scrollToIndex,
      sortBy,
      sortDirection,
      useDynamicRowHeight
    } = this.state



    console.log('render of tableexample');
    console.log(this.props);

     const list = this.props.filelist;

    const sortedList = this._isSortEnabled()
      ? list
        .sortBy(item =&gt; item[sortBy])
        .update(list =&gt;
          sortDirection === SortDirection.DESC
            ? list.reverse()
            : list
        )
      : list

    const rowGetter = ({ index }) =&gt; this._getDatum(sortedList, index)

    return (
      &lt;ContentBox&gt;
        &lt;div className=""table table-striped""&gt;
          &lt;AutoSizer disableHeight&gt;
            {({ width }) =&gt; (
              &lt;Table
                ref='Table'
                disableHeader={disableHeader}
                headerClassName={styles.headerColumn}
                headerHeight={headerHeight}
                height={height}
                noRowsRenderer={this._noRowsRenderer}
                overscanRowCount={overscanRowCount}
                rowClassName={this._rowClassName}
                rowHeight={useDynamicRowHeight ? this._getRowHeight : rowHeight}
                rowGetter={rowGetter}
                rowCount={rowCount}
                scrollToIndex={scrollToIndex}
                sort={this._sort}
                sortBy={sortBy}
                sortDirection={sortDirection}
                width={width}
              &gt;
                {!hideIndexRow &amp;&amp;
                  &lt;Column
                    label='Index'
                    cellDataGetter={
                      ({ columnData, dataKey, rowData }) =&gt; rowData.index
                    }
                    dataKey='index'
                    disableSort={!this._isSortEnabled()}
                    width={60}
                  /&gt;
                }
                &lt;Column
                  dataKey='name'
                  disableSort={!this._isSortEnabled()}
                  headerRenderer={this._headerRenderer}
                  width={90}
                /&gt;
                &lt;Column
                  width={210}
                  disableSort
                  label='The description label is really long so that it will be truncated'
                  dataKey='random'
                  className={styles.exampleColumn}
                  cellRenderer={
                    ({ cellData, columnData, dataKey, rowData, rowIndex }) =&gt; cellData
                  }
                  flexGrow={1}
                /&gt;
              &lt;/Table&gt;
            )}
          &lt;/AutoSizer&gt;
        &lt;/div&gt;
      &lt;/ContentBox&gt;
    )
  }

  _getDatum (list, index) {

    // Getting error here : TypeError: list.get is not a function[Learn More]

    return list.get(index % list.size)
  }

  _getRowHeight ({ index }) {
    const list = this.props.filelist;

    return this._getDatum(list, index).size
  }

  _headerRenderer ({
    columnData,
    dataKey,
    disableSort,
    label,
    sortBy,
    sortDirection
  }) {
    return (
      &lt;div&gt;
        Full Name
        {sortBy === dataKey &amp;&amp;
          &lt;SortIndicator sortDirection={sortDirection} /&gt;
        }
      &lt;/div&gt;
    )
  }

  _isSortEnabled () {
    const list= this.props.filelist;
    const { rowCount } = this.state

    return rowCount &lt;= list.size
  }

  _noRowsRenderer () {
    return (
      &lt;div className={styles.noRows}&gt;
        No rows
      &lt;/div&gt;
    )
  }

  _onRowCountChange (event) {
    const rowCount = parseInt(event.target.value, 10) || 0

    this.setState({ rowCount })
  }

  _onScrollToRowChange (event) {
    const { rowCount } = this.state
    let scrollToIndex = Math.min(rowCount - 1, parseInt(event.target.value, 10))

    if (isNaN(scrollToIndex)) {
      scrollToIndex = undefined
    }

    this.setState({ scrollToIndex })
  }

  _rowClassName ({ index }) {
    if (index &lt; 0) {
      return styles.headerRow
    } else {
      return index % 2 === 0 ? styles.evenRow : styles.oddRow
    }
  }

  _sort ({ sortBy, sortDirection }) {
    this.setState({ sortBy, sortDirection })
  }

  _updateUseDynamicRowHeight (value) {
    this.setState({
      useDynamicRowHeight: value
    })
  }
}
</code></pre>

<p>I am getting error inside -</p>

<pre><code> _getDatum (list, index) {

    // Getting error here : TypeError: list.get is not a function[Learn More]
    return list.get(index % list.size)
  }
</code></pre>

<p>I am not using immutable list, instead using my own object. If I do </p>

<pre><code>console.log(this.props.filelist) // Object { filelist: Array[12] }

0:Object 
absPath:""/home/testmaximumcharactersforfolders123""
created:1490586030000
filename:""testmaximumcharactersforfolders123""
hasChildren:true
isHidden:false
isReadable:true
isWritable:false
modified:1490586030000
owner:""root""
size:4096
type:""FILE_DIR""
</code></pre>

<p>I have one more question, as you can see my object structure above what should be my datakey ? As per my understanding using datakey we are referring key name in our object . so should it be datakey=""filename"" if I want to show filename data in the column ? And is it ok if my object contains other key value pair which I am not going to show in the table ?</p>

<p>Please help...</p>

<p>Screenshot of overlapping :</p>

<p><a href=""https://i.stack.imgur.com/slXKm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/slXKm.png"" alt=""enter image description here""></a></p>
","Looks like `get` is not a method on `this.props.filelist` (whatever `dirList` is). There isn't enough info in this SO question to provide an answer, but your problem seems unrelated to react-virtualized. Can't answer the question about what your `dataKey` should be since I don't know what your data is. Maybe ""filename"", sure, if there's an attribute of that name on the items in your collection/array."
"43087031","react-virtualized getting error - TypeError: list.get is not a function","6","<p>Getting error - TypeError: list.get is not a function</p>

<p>My Parent component :</p>

<pre><code>import TableExample from './TableExample';

// Map Redux state to component props
function mapStateToProps(state) {
    return {
        dirList: state.filelistReducer.dirList,
        showFileViewer: state.sidenavReducer.showFileViewer,
    }
}
// Map Redux actions to component props
function mapDispatchToProps(dispatch) {

    return {
        onDirClick: (path) =&gt; { dispatch(actions.fetchFileListAction(path, dispatch)); },
    };
}
/**
 *
 *
 * @class FileViewerComponent
 * @extends {Component}
 */
class FileListViewComponent extends Component {
    constructor(props) {
        super(props);
        this.state = { width: 0 }

    }

    render() {
        return (
            &lt;div&gt;
                &lt;div className=""col-md-10""&gt;
                    &lt;div className=""contentviewdivider"" style={{ width: (this.state.width) + 'px' }}&gt;&lt;/div&gt;
                    &lt;div className=""mainContainer"" style={{ width: (this.state.width) + 'px' }}&gt;
                        &lt;div className=""tilerow""&gt;
                            {this.renderList()}
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

   renderList() { 
     return (
         &lt;div&gt;
            &lt;div className={this.props.showFileViewer}&gt;
                &lt;div className='row'&gt;
                    &lt;TableExample filelist={this.props.dirList} /&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
     );
}


}
export default connect(mapStateToProps, mapDispatchToProps)(FileListViewComponent);
</code></pre>

<p>Now in TableExample.jsx</p>

<pre><code>/** @flow */
import Immutable from 'immutable';
import { List } from 'immutable';
import React, { PropTypes, PureComponent } from 'react';
import ReactDom from 'react-dom';
import { ContentBox, ContentBoxHeader, ContentBoxParagraph } from '../demo/ContentBox'
import { LabeledInput, InputRow } from '../demo/LabeledInput'
import {AutoSizer,Column, Table, SortDirection, SortIndicator}  from 'react-virtualized'
import styles from '../../../styles/css/components/tableexample.css'
//import { generateRandomList } from './utils'

export default class TableExample extends PureComponent {
//  static contextTypes = {
//     list: PropTypes.instanceOf(Immutable.List).isRequired
//   };

  constructor (props) {
    super(props)

    this.state = {
      disableHeader: false,
      headerHeight: 30,
      height: 270,
      hideIndexRow: false,
      overscanRowCount: 10,
      rowHeight: 40,
      rowCount: 1000,
      scrollToIndex: undefined,
      sortBy: 'index',
      sortDirection: SortDirection.ASC,
      useDynamicRowHeight: false
    }

    this._getRowHeight = this._getRowHeight.bind(this)
    this._headerRenderer = this._headerRenderer.bind(this)
    this._noRowsRenderer = this._noRowsRenderer.bind(this)
    this._onRowCountChange = this._onRowCountChange.bind(this)
    this._onScrollToRowChange = this._onScrollToRowChange.bind(this)
    this._rowClassName = this._rowClassName.bind(this)
    this._sort = this._sort.bind(this)
  }

  render () {
    const {
      disableHeader,
      headerHeight,
      height,
      hideIndexRow,
      overscanRowCount,
      rowHeight,
      rowCount,
      scrollToIndex,
      sortBy,
      sortDirection,
      useDynamicRowHeight
    } = this.state



    console.log('render of tableexample');
    console.log(this.props);

     const list = this.props.filelist;

    const sortedList = this._isSortEnabled()
      ? list
        .sortBy(item =&gt; item[sortBy])
        .update(list =&gt;
          sortDirection === SortDirection.DESC
            ? list.reverse()
            : list
        )
      : list

    const rowGetter = ({ index }) =&gt; this._getDatum(sortedList, index)

    return (
      &lt;ContentBox&gt;
        &lt;div className=""table table-striped""&gt;
          &lt;AutoSizer disableHeight&gt;
            {({ width }) =&gt; (
              &lt;Table
                ref='Table'
                disableHeader={disableHeader}
                headerClassName={styles.headerColumn}
                headerHeight={headerHeight}
                height={height}
                noRowsRenderer={this._noRowsRenderer}
                overscanRowCount={overscanRowCount}
                rowClassName={this._rowClassName}
                rowHeight={useDynamicRowHeight ? this._getRowHeight : rowHeight}
                rowGetter={rowGetter}
                rowCount={rowCount}
                scrollToIndex={scrollToIndex}
                sort={this._sort}
                sortBy={sortBy}
                sortDirection={sortDirection}
                width={width}
              &gt;
                {!hideIndexRow &amp;&amp;
                  &lt;Column
                    label='Index'
                    cellDataGetter={
                      ({ columnData, dataKey, rowData }) =&gt; rowData.index
                    }
                    dataKey='index'
                    disableSort={!this._isSortEnabled()}
                    width={60}
                  /&gt;
                }
                &lt;Column
                  dataKey='name'
                  disableSort={!this._isSortEnabled()}
                  headerRenderer={this._headerRenderer}
                  width={90}
                /&gt;
                &lt;Column
                  width={210}
                  disableSort
                  label='The description label is really long so that it will be truncated'
                  dataKey='random'
                  className={styles.exampleColumn}
                  cellRenderer={
                    ({ cellData, columnData, dataKey, rowData, rowIndex }) =&gt; cellData
                  }
                  flexGrow={1}
                /&gt;
              &lt;/Table&gt;
            )}
          &lt;/AutoSizer&gt;
        &lt;/div&gt;
      &lt;/ContentBox&gt;
    )
  }

  _getDatum (list, index) {

    // Getting error here : TypeError: list.get is not a function[Learn More]

    return list.get(index % list.size)
  }

  _getRowHeight ({ index }) {
    const list = this.props.filelist;

    return this._getDatum(list, index).size
  }

  _headerRenderer ({
    columnData,
    dataKey,
    disableSort,
    label,
    sortBy,
    sortDirection
  }) {
    return (
      &lt;div&gt;
        Full Name
        {sortBy === dataKey &amp;&amp;
          &lt;SortIndicator sortDirection={sortDirection} /&gt;
        }
      &lt;/div&gt;
    )
  }

  _isSortEnabled () {
    const list= this.props.filelist;
    const { rowCount } = this.state

    return rowCount &lt;= list.size
  }

  _noRowsRenderer () {
    return (
      &lt;div className={styles.noRows}&gt;
        No rows
      &lt;/div&gt;
    )
  }

  _onRowCountChange (event) {
    const rowCount = parseInt(event.target.value, 10) || 0

    this.setState({ rowCount })
  }

  _onScrollToRowChange (event) {
    const { rowCount } = this.state
    let scrollToIndex = Math.min(rowCount - 1, parseInt(event.target.value, 10))

    if (isNaN(scrollToIndex)) {
      scrollToIndex = undefined
    }

    this.setState({ scrollToIndex })
  }

  _rowClassName ({ index }) {
    if (index &lt; 0) {
      return styles.headerRow
    } else {
      return index % 2 === 0 ? styles.evenRow : styles.oddRow
    }
  }

  _sort ({ sortBy, sortDirection }) {
    this.setState({ sortBy, sortDirection })
  }

  _updateUseDynamicRowHeight (value) {
    this.setState({
      useDynamicRowHeight: value
    })
  }
}
</code></pre>

<p>I am getting error inside -</p>

<pre><code> _getDatum (list, index) {

    // Getting error here : TypeError: list.get is not a function[Learn More]
    return list.get(index % list.size)
  }
</code></pre>

<p>I am not using immutable list, instead using my own object. If I do </p>

<pre><code>console.log(this.props.filelist) // Object { filelist: Array[12] }

0:Object 
absPath:""/home/testmaximumcharactersforfolders123""
created:1490586030000
filename:""testmaximumcharactersforfolders123""
hasChildren:true
isHidden:false
isReadable:true
isWritable:false
modified:1490586030000
owner:""root""
size:4096
type:""FILE_DIR""
</code></pre>

<p>I have one more question, as you can see my object structure above what should be my datakey ? As per my understanding using datakey we are referring key name in our object . so should it be datakey=""filename"" if I want to show filename data in the column ? And is it ok if my object contains other key value pair which I am not going to show in the table ?</p>

<p>Please help...</p>

<p>Screenshot of overlapping :</p>

<p><a href=""https://i.stack.imgur.com/slXKm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/slXKm.png"" alt=""enter image description here""></a></p>
","HTML or React elements? I'm guessing the latter- either way, yes, that's possible, but you would also need to specify a custom `cellRenderer` for your `Column` that knows how to handle your data. By default each `Table` column casts its content to a string and renders that. (This is why you see `[Object Object]`.) The docs have info about this: https://github.com/bvaughn/react-virtualized/blob/master/docs/Column.md#cellrenderer"
"43087031","react-virtualized getting error - TypeError: list.get is not a function","6","<p>Getting error - TypeError: list.get is not a function</p>

<p>My Parent component :</p>

<pre><code>import TableExample from './TableExample';

// Map Redux state to component props
function mapStateToProps(state) {
    return {
        dirList: state.filelistReducer.dirList,
        showFileViewer: state.sidenavReducer.showFileViewer,
    }
}
// Map Redux actions to component props
function mapDispatchToProps(dispatch) {

    return {
        onDirClick: (path) =&gt; { dispatch(actions.fetchFileListAction(path, dispatch)); },
    };
}
/**
 *
 *
 * @class FileViewerComponent
 * @extends {Component}
 */
class FileListViewComponent extends Component {
    constructor(props) {
        super(props);
        this.state = { width: 0 }

    }

    render() {
        return (
            &lt;div&gt;
                &lt;div className=""col-md-10""&gt;
                    &lt;div className=""contentviewdivider"" style={{ width: (this.state.width) + 'px' }}&gt;&lt;/div&gt;
                    &lt;div className=""mainContainer"" style={{ width: (this.state.width) + 'px' }}&gt;
                        &lt;div className=""tilerow""&gt;
                            {this.renderList()}
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

   renderList() { 
     return (
         &lt;div&gt;
            &lt;div className={this.props.showFileViewer}&gt;
                &lt;div className='row'&gt;
                    &lt;TableExample filelist={this.props.dirList} /&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
     );
}


}
export default connect(mapStateToProps, mapDispatchToProps)(FileListViewComponent);
</code></pre>

<p>Now in TableExample.jsx</p>

<pre><code>/** @flow */
import Immutable from 'immutable';
import { List } from 'immutable';
import React, { PropTypes, PureComponent } from 'react';
import ReactDom from 'react-dom';
import { ContentBox, ContentBoxHeader, ContentBoxParagraph } from '../demo/ContentBox'
import { LabeledInput, InputRow } from '../demo/LabeledInput'
import {AutoSizer,Column, Table, SortDirection, SortIndicator}  from 'react-virtualized'
import styles from '../../../styles/css/components/tableexample.css'
//import { generateRandomList } from './utils'

export default class TableExample extends PureComponent {
//  static contextTypes = {
//     list: PropTypes.instanceOf(Immutable.List).isRequired
//   };

  constructor (props) {
    super(props)

    this.state = {
      disableHeader: false,
      headerHeight: 30,
      height: 270,
      hideIndexRow: false,
      overscanRowCount: 10,
      rowHeight: 40,
      rowCount: 1000,
      scrollToIndex: undefined,
      sortBy: 'index',
      sortDirection: SortDirection.ASC,
      useDynamicRowHeight: false
    }

    this._getRowHeight = this._getRowHeight.bind(this)
    this._headerRenderer = this._headerRenderer.bind(this)
    this._noRowsRenderer = this._noRowsRenderer.bind(this)
    this._onRowCountChange = this._onRowCountChange.bind(this)
    this._onScrollToRowChange = this._onScrollToRowChange.bind(this)
    this._rowClassName = this._rowClassName.bind(this)
    this._sort = this._sort.bind(this)
  }

  render () {
    const {
      disableHeader,
      headerHeight,
      height,
      hideIndexRow,
      overscanRowCount,
      rowHeight,
      rowCount,
      scrollToIndex,
      sortBy,
      sortDirection,
      useDynamicRowHeight
    } = this.state



    console.log('render of tableexample');
    console.log(this.props);

     const list = this.props.filelist;

    const sortedList = this._isSortEnabled()
      ? list
        .sortBy(item =&gt; item[sortBy])
        .update(list =&gt;
          sortDirection === SortDirection.DESC
            ? list.reverse()
            : list
        )
      : list

    const rowGetter = ({ index }) =&gt; this._getDatum(sortedList, index)

    return (
      &lt;ContentBox&gt;
        &lt;div className=""table table-striped""&gt;
          &lt;AutoSizer disableHeight&gt;
            {({ width }) =&gt; (
              &lt;Table
                ref='Table'
                disableHeader={disableHeader}
                headerClassName={styles.headerColumn}
                headerHeight={headerHeight}
                height={height}
                noRowsRenderer={this._noRowsRenderer}
                overscanRowCount={overscanRowCount}
                rowClassName={this._rowClassName}
                rowHeight={useDynamicRowHeight ? this._getRowHeight : rowHeight}
                rowGetter={rowGetter}
                rowCount={rowCount}
                scrollToIndex={scrollToIndex}
                sort={this._sort}
                sortBy={sortBy}
                sortDirection={sortDirection}
                width={width}
              &gt;
                {!hideIndexRow &amp;&amp;
                  &lt;Column
                    label='Index'
                    cellDataGetter={
                      ({ columnData, dataKey, rowData }) =&gt; rowData.index
                    }
                    dataKey='index'
                    disableSort={!this._isSortEnabled()}
                    width={60}
                  /&gt;
                }
                &lt;Column
                  dataKey='name'
                  disableSort={!this._isSortEnabled()}
                  headerRenderer={this._headerRenderer}
                  width={90}
                /&gt;
                &lt;Column
                  width={210}
                  disableSort
                  label='The description label is really long so that it will be truncated'
                  dataKey='random'
                  className={styles.exampleColumn}
                  cellRenderer={
                    ({ cellData, columnData, dataKey, rowData, rowIndex }) =&gt; cellData
                  }
                  flexGrow={1}
                /&gt;
              &lt;/Table&gt;
            )}
          &lt;/AutoSizer&gt;
        &lt;/div&gt;
      &lt;/ContentBox&gt;
    )
  }

  _getDatum (list, index) {

    // Getting error here : TypeError: list.get is not a function[Learn More]

    return list.get(index % list.size)
  }

  _getRowHeight ({ index }) {
    const list = this.props.filelist;

    return this._getDatum(list, index).size
  }

  _headerRenderer ({
    columnData,
    dataKey,
    disableSort,
    label,
    sortBy,
    sortDirection
  }) {
    return (
      &lt;div&gt;
        Full Name
        {sortBy === dataKey &amp;&amp;
          &lt;SortIndicator sortDirection={sortDirection} /&gt;
        }
      &lt;/div&gt;
    )
  }

  _isSortEnabled () {
    const list= this.props.filelist;
    const { rowCount } = this.state

    return rowCount &lt;= list.size
  }

  _noRowsRenderer () {
    return (
      &lt;div className={styles.noRows}&gt;
        No rows
      &lt;/div&gt;
    )
  }

  _onRowCountChange (event) {
    const rowCount = parseInt(event.target.value, 10) || 0

    this.setState({ rowCount })
  }

  _onScrollToRowChange (event) {
    const { rowCount } = this.state
    let scrollToIndex = Math.min(rowCount - 1, parseInt(event.target.value, 10))

    if (isNaN(scrollToIndex)) {
      scrollToIndex = undefined
    }

    this.setState({ scrollToIndex })
  }

  _rowClassName ({ index }) {
    if (index &lt; 0) {
      return styles.headerRow
    } else {
      return index % 2 === 0 ? styles.evenRow : styles.oddRow
    }
  }

  _sort ({ sortBy, sortDirection }) {
    this.setState({ sortBy, sortDirection })
  }

  _updateUseDynamicRowHeight (value) {
    this.setState({
      useDynamicRowHeight: value
    })
  }
}
</code></pre>

<p>I am getting error inside -</p>

<pre><code> _getDatum (list, index) {

    // Getting error here : TypeError: list.get is not a function[Learn More]
    return list.get(index % list.size)
  }
</code></pre>

<p>I am not using immutable list, instead using my own object. If I do </p>

<pre><code>console.log(this.props.filelist) // Object { filelist: Array[12] }

0:Object 
absPath:""/home/testmaximumcharactersforfolders123""
created:1490586030000
filename:""testmaximumcharactersforfolders123""
hasChildren:true
isHidden:false
isReadable:true
isWritable:false
modified:1490586030000
owner:""root""
size:4096
type:""FILE_DIR""
</code></pre>

<p>I have one more question, as you can see my object structure above what should be my datakey ? As per my understanding using datakey we are referring key name in our object . so should it be datakey=""filename"" if I want to show filename data in the column ? And is it ok if my object contains other key value pair which I am not going to show in the table ?</p>

<p>Please help...</p>

<p>Screenshot of overlapping :</p>

<p><a href=""https://i.stack.imgur.com/slXKm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/slXKm.png"" alt=""enter image description here""></a></p>
","@brianvaughn thanks for responding.. I would like to know is it possible to pass html as value of a column. For example -                          <Column
          width={100}
          label=''
          dataKey=""gridActionIcon""
        /> where gridActionIcon is - gridActionIcon: <div className=""gridicon""><img src={optionview} alt="""" /></div> . Getting [Object Object] as a result in the table . :-("
"43087031","react-virtualized getting error - TypeError: list.get is not a function","6","<p>Getting error - TypeError: list.get is not a function</p>

<p>My Parent component :</p>

<pre><code>import TableExample from './TableExample';

// Map Redux state to component props
function mapStateToProps(state) {
    return {
        dirList: state.filelistReducer.dirList,
        showFileViewer: state.sidenavReducer.showFileViewer,
    }
}
// Map Redux actions to component props
function mapDispatchToProps(dispatch) {

    return {
        onDirClick: (path) =&gt; { dispatch(actions.fetchFileListAction(path, dispatch)); },
    };
}
/**
 *
 *
 * @class FileViewerComponent
 * @extends {Component}
 */
class FileListViewComponent extends Component {
    constructor(props) {
        super(props);
        this.state = { width: 0 }

    }

    render() {
        return (
            &lt;div&gt;
                &lt;div className=""col-md-10""&gt;
                    &lt;div className=""contentviewdivider"" style={{ width: (this.state.width) + 'px' }}&gt;&lt;/div&gt;
                    &lt;div className=""mainContainer"" style={{ width: (this.state.width) + 'px' }}&gt;
                        &lt;div className=""tilerow""&gt;
                            {this.renderList()}
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

   renderList() { 
     return (
         &lt;div&gt;
            &lt;div className={this.props.showFileViewer}&gt;
                &lt;div className='row'&gt;
                    &lt;TableExample filelist={this.props.dirList} /&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
     );
}


}
export default connect(mapStateToProps, mapDispatchToProps)(FileListViewComponent);
</code></pre>

<p>Now in TableExample.jsx</p>

<pre><code>/** @flow */
import Immutable from 'immutable';
import { List } from 'immutable';
import React, { PropTypes, PureComponent } from 'react';
import ReactDom from 'react-dom';
import { ContentBox, ContentBoxHeader, ContentBoxParagraph } from '../demo/ContentBox'
import { LabeledInput, InputRow } from '../demo/LabeledInput'
import {AutoSizer,Column, Table, SortDirection, SortIndicator}  from 'react-virtualized'
import styles from '../../../styles/css/components/tableexample.css'
//import { generateRandomList } from './utils'

export default class TableExample extends PureComponent {
//  static contextTypes = {
//     list: PropTypes.instanceOf(Immutable.List).isRequired
//   };

  constructor (props) {
    super(props)

    this.state = {
      disableHeader: false,
      headerHeight: 30,
      height: 270,
      hideIndexRow: false,
      overscanRowCount: 10,
      rowHeight: 40,
      rowCount: 1000,
      scrollToIndex: undefined,
      sortBy: 'index',
      sortDirection: SortDirection.ASC,
      useDynamicRowHeight: false
    }

    this._getRowHeight = this._getRowHeight.bind(this)
    this._headerRenderer = this._headerRenderer.bind(this)
    this._noRowsRenderer = this._noRowsRenderer.bind(this)
    this._onRowCountChange = this._onRowCountChange.bind(this)
    this._onScrollToRowChange = this._onScrollToRowChange.bind(this)
    this._rowClassName = this._rowClassName.bind(this)
    this._sort = this._sort.bind(this)
  }

  render () {
    const {
      disableHeader,
      headerHeight,
      height,
      hideIndexRow,
      overscanRowCount,
      rowHeight,
      rowCount,
      scrollToIndex,
      sortBy,
      sortDirection,
      useDynamicRowHeight
    } = this.state



    console.log('render of tableexample');
    console.log(this.props);

     const list = this.props.filelist;

    const sortedList = this._isSortEnabled()
      ? list
        .sortBy(item =&gt; item[sortBy])
        .update(list =&gt;
          sortDirection === SortDirection.DESC
            ? list.reverse()
            : list
        )
      : list

    const rowGetter = ({ index }) =&gt; this._getDatum(sortedList, index)

    return (
      &lt;ContentBox&gt;
        &lt;div className=""table table-striped""&gt;
          &lt;AutoSizer disableHeight&gt;
            {({ width }) =&gt; (
              &lt;Table
                ref='Table'
                disableHeader={disableHeader}
                headerClassName={styles.headerColumn}
                headerHeight={headerHeight}
                height={height}
                noRowsRenderer={this._noRowsRenderer}
                overscanRowCount={overscanRowCount}
                rowClassName={this._rowClassName}
                rowHeight={useDynamicRowHeight ? this._getRowHeight : rowHeight}
                rowGetter={rowGetter}
                rowCount={rowCount}
                scrollToIndex={scrollToIndex}
                sort={this._sort}
                sortBy={sortBy}
                sortDirection={sortDirection}
                width={width}
              &gt;
                {!hideIndexRow &amp;&amp;
                  &lt;Column
                    label='Index'
                    cellDataGetter={
                      ({ columnData, dataKey, rowData }) =&gt; rowData.index
                    }
                    dataKey='index'
                    disableSort={!this._isSortEnabled()}
                    width={60}
                  /&gt;
                }
                &lt;Column
                  dataKey='name'
                  disableSort={!this._isSortEnabled()}
                  headerRenderer={this._headerRenderer}
                  width={90}
                /&gt;
                &lt;Column
                  width={210}
                  disableSort
                  label='The description label is really long so that it will be truncated'
                  dataKey='random'
                  className={styles.exampleColumn}
                  cellRenderer={
                    ({ cellData, columnData, dataKey, rowData, rowIndex }) =&gt; cellData
                  }
                  flexGrow={1}
                /&gt;
              &lt;/Table&gt;
            )}
          &lt;/AutoSizer&gt;
        &lt;/div&gt;
      &lt;/ContentBox&gt;
    )
  }

  _getDatum (list, index) {

    // Getting error here : TypeError: list.get is not a function[Learn More]

    return list.get(index % list.size)
  }

  _getRowHeight ({ index }) {
    const list = this.props.filelist;

    return this._getDatum(list, index).size
  }

  _headerRenderer ({
    columnData,
    dataKey,
    disableSort,
    label,
    sortBy,
    sortDirection
  }) {
    return (
      &lt;div&gt;
        Full Name
        {sortBy === dataKey &amp;&amp;
          &lt;SortIndicator sortDirection={sortDirection} /&gt;
        }
      &lt;/div&gt;
    )
  }

  _isSortEnabled () {
    const list= this.props.filelist;
    const { rowCount } = this.state

    return rowCount &lt;= list.size
  }

  _noRowsRenderer () {
    return (
      &lt;div className={styles.noRows}&gt;
        No rows
      &lt;/div&gt;
    )
  }

  _onRowCountChange (event) {
    const rowCount = parseInt(event.target.value, 10) || 0

    this.setState({ rowCount })
  }

  _onScrollToRowChange (event) {
    const { rowCount } = this.state
    let scrollToIndex = Math.min(rowCount - 1, parseInt(event.target.value, 10))

    if (isNaN(scrollToIndex)) {
      scrollToIndex = undefined
    }

    this.setState({ scrollToIndex })
  }

  _rowClassName ({ index }) {
    if (index &lt; 0) {
      return styles.headerRow
    } else {
      return index % 2 === 0 ? styles.evenRow : styles.oddRow
    }
  }

  _sort ({ sortBy, sortDirection }) {
    this.setState({ sortBy, sortDirection })
  }

  _updateUseDynamicRowHeight (value) {
    this.setState({
      useDynamicRowHeight: value
    })
  }
}
</code></pre>

<p>I am getting error inside -</p>

<pre><code> _getDatum (list, index) {

    // Getting error here : TypeError: list.get is not a function[Learn More]
    return list.get(index % list.size)
  }
</code></pre>

<p>I am not using immutable list, instead using my own object. If I do </p>

<pre><code>console.log(this.props.filelist) // Object { filelist: Array[12] }

0:Object 
absPath:""/home/testmaximumcharactersforfolders123""
created:1490586030000
filename:""testmaximumcharactersforfolders123""
hasChildren:true
isHidden:false
isReadable:true
isWritable:false
modified:1490586030000
owner:""root""
size:4096
type:""FILE_DIR""
</code></pre>

<p>I have one more question, as you can see my object structure above what should be my datakey ? As per my understanding using datakey we are referring key name in our object . so should it be datakey=""filename"" if I want to show filename data in the column ? And is it ok if my object contains other key value pair which I am not going to show in the table ?</p>

<p>Please help...</p>

<p>Screenshot of overlapping :</p>

<p><a href=""https://i.stack.imgur.com/slXKm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/slXKm.png"" alt=""enter image description here""></a></p>
","Thanks I figured it out. :-)"
"43087031","react-virtualized getting error - TypeError: list.get is not a function","6","<p>Getting error - TypeError: list.get is not a function</p>

<p>My Parent component :</p>

<pre><code>import TableExample from './TableExample';

// Map Redux state to component props
function mapStateToProps(state) {
    return {
        dirList: state.filelistReducer.dirList,
        showFileViewer: state.sidenavReducer.showFileViewer,
    }
}
// Map Redux actions to component props
function mapDispatchToProps(dispatch) {

    return {
        onDirClick: (path) =&gt; { dispatch(actions.fetchFileListAction(path, dispatch)); },
    };
}
/**
 *
 *
 * @class FileViewerComponent
 * @extends {Component}
 */
class FileListViewComponent extends Component {
    constructor(props) {
        super(props);
        this.state = { width: 0 }

    }

    render() {
        return (
            &lt;div&gt;
                &lt;div className=""col-md-10""&gt;
                    &lt;div className=""contentviewdivider"" style={{ width: (this.state.width) + 'px' }}&gt;&lt;/div&gt;
                    &lt;div className=""mainContainer"" style={{ width: (this.state.width) + 'px' }}&gt;
                        &lt;div className=""tilerow""&gt;
                            {this.renderList()}
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

   renderList() { 
     return (
         &lt;div&gt;
            &lt;div className={this.props.showFileViewer}&gt;
                &lt;div className='row'&gt;
                    &lt;TableExample filelist={this.props.dirList} /&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
     );
}


}
export default connect(mapStateToProps, mapDispatchToProps)(FileListViewComponent);
</code></pre>

<p>Now in TableExample.jsx</p>

<pre><code>/** @flow */
import Immutable from 'immutable';
import { List } from 'immutable';
import React, { PropTypes, PureComponent } from 'react';
import ReactDom from 'react-dom';
import { ContentBox, ContentBoxHeader, ContentBoxParagraph } from '../demo/ContentBox'
import { LabeledInput, InputRow } from '../demo/LabeledInput'
import {AutoSizer,Column, Table, SortDirection, SortIndicator}  from 'react-virtualized'
import styles from '../../../styles/css/components/tableexample.css'
//import { generateRandomList } from './utils'

export default class TableExample extends PureComponent {
//  static contextTypes = {
//     list: PropTypes.instanceOf(Immutable.List).isRequired
//   };

  constructor (props) {
    super(props)

    this.state = {
      disableHeader: false,
      headerHeight: 30,
      height: 270,
      hideIndexRow: false,
      overscanRowCount: 10,
      rowHeight: 40,
      rowCount: 1000,
      scrollToIndex: undefined,
      sortBy: 'index',
      sortDirection: SortDirection.ASC,
      useDynamicRowHeight: false
    }

    this._getRowHeight = this._getRowHeight.bind(this)
    this._headerRenderer = this._headerRenderer.bind(this)
    this._noRowsRenderer = this._noRowsRenderer.bind(this)
    this._onRowCountChange = this._onRowCountChange.bind(this)
    this._onScrollToRowChange = this._onScrollToRowChange.bind(this)
    this._rowClassName = this._rowClassName.bind(this)
    this._sort = this._sort.bind(this)
  }

  render () {
    const {
      disableHeader,
      headerHeight,
      height,
      hideIndexRow,
      overscanRowCount,
      rowHeight,
      rowCount,
      scrollToIndex,
      sortBy,
      sortDirection,
      useDynamicRowHeight
    } = this.state



    console.log('render of tableexample');
    console.log(this.props);

     const list = this.props.filelist;

    const sortedList = this._isSortEnabled()
      ? list
        .sortBy(item =&gt; item[sortBy])
        .update(list =&gt;
          sortDirection === SortDirection.DESC
            ? list.reverse()
            : list
        )
      : list

    const rowGetter = ({ index }) =&gt; this._getDatum(sortedList, index)

    return (
      &lt;ContentBox&gt;
        &lt;div className=""table table-striped""&gt;
          &lt;AutoSizer disableHeight&gt;
            {({ width }) =&gt; (
              &lt;Table
                ref='Table'
                disableHeader={disableHeader}
                headerClassName={styles.headerColumn}
                headerHeight={headerHeight}
                height={height}
                noRowsRenderer={this._noRowsRenderer}
                overscanRowCount={overscanRowCount}
                rowClassName={this._rowClassName}
                rowHeight={useDynamicRowHeight ? this._getRowHeight : rowHeight}
                rowGetter={rowGetter}
                rowCount={rowCount}
                scrollToIndex={scrollToIndex}
                sort={this._sort}
                sortBy={sortBy}
                sortDirection={sortDirection}
                width={width}
              &gt;
                {!hideIndexRow &amp;&amp;
                  &lt;Column
                    label='Index'
                    cellDataGetter={
                      ({ columnData, dataKey, rowData }) =&gt; rowData.index
                    }
                    dataKey='index'
                    disableSort={!this._isSortEnabled()}
                    width={60}
                  /&gt;
                }
                &lt;Column
                  dataKey='name'
                  disableSort={!this._isSortEnabled()}
                  headerRenderer={this._headerRenderer}
                  width={90}
                /&gt;
                &lt;Column
                  width={210}
                  disableSort
                  label='The description label is really long so that it will be truncated'
                  dataKey='random'
                  className={styles.exampleColumn}
                  cellRenderer={
                    ({ cellData, columnData, dataKey, rowData, rowIndex }) =&gt; cellData
                  }
                  flexGrow={1}
                /&gt;
              &lt;/Table&gt;
            )}
          &lt;/AutoSizer&gt;
        &lt;/div&gt;
      &lt;/ContentBox&gt;
    )
  }

  _getDatum (list, index) {

    // Getting error here : TypeError: list.get is not a function[Learn More]

    return list.get(index % list.size)
  }

  _getRowHeight ({ index }) {
    const list = this.props.filelist;

    return this._getDatum(list, index).size
  }

  _headerRenderer ({
    columnData,
    dataKey,
    disableSort,
    label,
    sortBy,
    sortDirection
  }) {
    return (
      &lt;div&gt;
        Full Name
        {sortBy === dataKey &amp;&amp;
          &lt;SortIndicator sortDirection={sortDirection} /&gt;
        }
      &lt;/div&gt;
    )
  }

  _isSortEnabled () {
    const list= this.props.filelist;
    const { rowCount } = this.state

    return rowCount &lt;= list.size
  }

  _noRowsRenderer () {
    return (
      &lt;div className={styles.noRows}&gt;
        No rows
      &lt;/div&gt;
    )
  }

  _onRowCountChange (event) {
    const rowCount = parseInt(event.target.value, 10) || 0

    this.setState({ rowCount })
  }

  _onScrollToRowChange (event) {
    const { rowCount } = this.state
    let scrollToIndex = Math.min(rowCount - 1, parseInt(event.target.value, 10))

    if (isNaN(scrollToIndex)) {
      scrollToIndex = undefined
    }

    this.setState({ scrollToIndex })
  }

  _rowClassName ({ index }) {
    if (index &lt; 0) {
      return styles.headerRow
    } else {
      return index % 2 === 0 ? styles.evenRow : styles.oddRow
    }
  }

  _sort ({ sortBy, sortDirection }) {
    this.setState({ sortBy, sortDirection })
  }

  _updateUseDynamicRowHeight (value) {
    this.setState({
      useDynamicRowHeight: value
    })
  }
}
</code></pre>

<p>I am getting error inside -</p>

<pre><code> _getDatum (list, index) {

    // Getting error here : TypeError: list.get is not a function[Learn More]
    return list.get(index % list.size)
  }
</code></pre>

<p>I am not using immutable list, instead using my own object. If I do </p>

<pre><code>console.log(this.props.filelist) // Object { filelist: Array[12] }

0:Object 
absPath:""/home/testmaximumcharactersforfolders123""
created:1490586030000
filename:""testmaximumcharactersforfolders123""
hasChildren:true
isHidden:false
isReadable:true
isWritable:false
modified:1490586030000
owner:""root""
size:4096
type:""FILE_DIR""
</code></pre>

<p>I have one more question, as you can see my object structure above what should be my datakey ? As per my understanding using datakey we are referring key name in our object . so should it be datakey=""filename"" if I want to show filename data in the column ? And is it ok if my object contains other key value pair which I am not going to show in the table ?</p>

<p>Please help...</p>

<p>Screenshot of overlapping :</p>

<p><a href=""https://i.stack.imgur.com/slXKm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/slXKm.png"" alt=""enter image description here""></a></p>
","Hey Arjita. Stack Overflow isn't meant to work this way. If you have multiple questions, you should file a new SO question for each - with example code, screenshots, Plnkrs, etc. This way the whole community sees and can potentially help out."
"43087031","react-virtualized getting error - TypeError: list.get is not a function","6","<p>Getting error - TypeError: list.get is not a function</p>

<p>My Parent component :</p>

<pre><code>import TableExample from './TableExample';

// Map Redux state to component props
function mapStateToProps(state) {
    return {
        dirList: state.filelistReducer.dirList,
        showFileViewer: state.sidenavReducer.showFileViewer,
    }
}
// Map Redux actions to component props
function mapDispatchToProps(dispatch) {

    return {
        onDirClick: (path) =&gt; { dispatch(actions.fetchFileListAction(path, dispatch)); },
    };
}
/**
 *
 *
 * @class FileViewerComponent
 * @extends {Component}
 */
class FileListViewComponent extends Component {
    constructor(props) {
        super(props);
        this.state = { width: 0 }

    }

    render() {
        return (
            &lt;div&gt;
                &lt;div className=""col-md-10""&gt;
                    &lt;div className=""contentviewdivider"" style={{ width: (this.state.width) + 'px' }}&gt;&lt;/div&gt;
                    &lt;div className=""mainContainer"" style={{ width: (this.state.width) + 'px' }}&gt;
                        &lt;div className=""tilerow""&gt;
                            {this.renderList()}
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        );
    }

   renderList() { 
     return (
         &lt;div&gt;
            &lt;div className={this.props.showFileViewer}&gt;
                &lt;div className='row'&gt;
                    &lt;TableExample filelist={this.props.dirList} /&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
     );
}


}
export default connect(mapStateToProps, mapDispatchToProps)(FileListViewComponent);
</code></pre>

<p>Now in TableExample.jsx</p>

<pre><code>/** @flow */
import Immutable from 'immutable';
import { List } from 'immutable';
import React, { PropTypes, PureComponent } from 'react';
import ReactDom from 'react-dom';
import { ContentBox, ContentBoxHeader, ContentBoxParagraph } from '../demo/ContentBox'
import { LabeledInput, InputRow } from '../demo/LabeledInput'
import {AutoSizer,Column, Table, SortDirection, SortIndicator}  from 'react-virtualized'
import styles from '../../../styles/css/components/tableexample.css'
//import { generateRandomList } from './utils'

export default class TableExample extends PureComponent {
//  static contextTypes = {
//     list: PropTypes.instanceOf(Immutable.List).isRequired
//   };

  constructor (props) {
    super(props)

    this.state = {
      disableHeader: false,
      headerHeight: 30,
      height: 270,
      hideIndexRow: false,
      overscanRowCount: 10,
      rowHeight: 40,
      rowCount: 1000,
      scrollToIndex: undefined,
      sortBy: 'index',
      sortDirection: SortDirection.ASC,
      useDynamicRowHeight: false
    }

    this._getRowHeight = this._getRowHeight.bind(this)
    this._headerRenderer = this._headerRenderer.bind(this)
    this._noRowsRenderer = this._noRowsRenderer.bind(this)
    this._onRowCountChange = this._onRowCountChange.bind(this)
    this._onScrollToRowChange = this._onScrollToRowChange.bind(this)
    this._rowClassName = this._rowClassName.bind(this)
    this._sort = this._sort.bind(this)
  }

  render () {
    const {
      disableHeader,
      headerHeight,
      height,
      hideIndexRow,
      overscanRowCount,
      rowHeight,
      rowCount,
      scrollToIndex,
      sortBy,
      sortDirection,
      useDynamicRowHeight
    } = this.state



    console.log('render of tableexample');
    console.log(this.props);

     const list = this.props.filelist;

    const sortedList = this._isSortEnabled()
      ? list
        .sortBy(item =&gt; item[sortBy])
        .update(list =&gt;
          sortDirection === SortDirection.DESC
            ? list.reverse()
            : list
        )
      : list

    const rowGetter = ({ index }) =&gt; this._getDatum(sortedList, index)

    return (
      &lt;ContentBox&gt;
        &lt;div className=""table table-striped""&gt;
          &lt;AutoSizer disableHeight&gt;
            {({ width }) =&gt; (
              &lt;Table
                ref='Table'
                disableHeader={disableHeader}
                headerClassName={styles.headerColumn}
                headerHeight={headerHeight}
                height={height}
                noRowsRenderer={this._noRowsRenderer}
                overscanRowCount={overscanRowCount}
                rowClassName={this._rowClassName}
                rowHeight={useDynamicRowHeight ? this._getRowHeight : rowHeight}
                rowGetter={rowGetter}
                rowCount={rowCount}
                scrollToIndex={scrollToIndex}
                sort={this._sort}
                sortBy={sortBy}
                sortDirection={sortDirection}
                width={width}
              &gt;
                {!hideIndexRow &amp;&amp;
                  &lt;Column
                    label='Index'
                    cellDataGetter={
                      ({ columnData, dataKey, rowData }) =&gt; rowData.index
                    }
                    dataKey='index'
                    disableSort={!this._isSortEnabled()}
                    width={60}
                  /&gt;
                }
                &lt;Column
                  dataKey='name'
                  disableSort={!this._isSortEnabled()}
                  headerRenderer={this._headerRenderer}
                  width={90}
                /&gt;
                &lt;Column
                  width={210}
                  disableSort
                  label='The description label is really long so that it will be truncated'
                  dataKey='random'
                  className={styles.exampleColumn}
                  cellRenderer={
                    ({ cellData, columnData, dataKey, rowData, rowIndex }) =&gt; cellData
                  }
                  flexGrow={1}
                /&gt;
              &lt;/Table&gt;
            )}
          &lt;/AutoSizer&gt;
        &lt;/div&gt;
      &lt;/ContentBox&gt;
    )
  }

  _getDatum (list, index) {

    // Getting error here : TypeError: list.get is not a function[Learn More]

    return list.get(index % list.size)
  }

  _getRowHeight ({ index }) {
    const list = this.props.filelist;

    return this._getDatum(list, index).size
  }

  _headerRenderer ({
    columnData,
    dataKey,
    disableSort,
    label,
    sortBy,
    sortDirection
  }) {
    return (
      &lt;div&gt;
        Full Name
        {sortBy === dataKey &amp;&amp;
          &lt;SortIndicator sortDirection={sortDirection} /&gt;
        }
      &lt;/div&gt;
    )
  }

  _isSortEnabled () {
    const list= this.props.filelist;
    const { rowCount } = this.state

    return rowCount &lt;= list.size
  }

  _noRowsRenderer () {
    return (
      &lt;div className={styles.noRows}&gt;
        No rows
      &lt;/div&gt;
    )
  }

  _onRowCountChange (event) {
    const rowCount = parseInt(event.target.value, 10) || 0

    this.setState({ rowCount })
  }

  _onScrollToRowChange (event) {
    const { rowCount } = this.state
    let scrollToIndex = Math.min(rowCount - 1, parseInt(event.target.value, 10))

    if (isNaN(scrollToIndex)) {
      scrollToIndex = undefined
    }

    this.setState({ scrollToIndex })
  }

  _rowClassName ({ index }) {
    if (index &lt; 0) {
      return styles.headerRow
    } else {
      return index % 2 === 0 ? styles.evenRow : styles.oddRow
    }
  }

  _sort ({ sortBy, sortDirection }) {
    this.setState({ sortBy, sortDirection })
  }

  _updateUseDynamicRowHeight (value) {
    this.setState({
      useDynamicRowHeight: value
    })
  }
}
</code></pre>

<p>I am getting error inside -</p>

<pre><code> _getDatum (list, index) {

    // Getting error here : TypeError: list.get is not a function[Learn More]
    return list.get(index % list.size)
  }
</code></pre>

<p>I am not using immutable list, instead using my own object. If I do </p>

<pre><code>console.log(this.props.filelist) // Object { filelist: Array[12] }

0:Object 
absPath:""/home/testmaximumcharactersforfolders123""
created:1490586030000
filename:""testmaximumcharactersforfolders123""
hasChildren:true
isHidden:false
isReadable:true
isWritable:false
modified:1490586030000
owner:""root""
size:4096
type:""FILE_DIR""
</code></pre>

<p>I have one more question, as you can see my object structure above what should be my datakey ? As per my understanding using datakey we are referring key name in our object . so should it be datakey=""filename"" if I want to show filename data in the column ? And is it ok if my object contains other key value pair which I am not going to show in the table ?</p>

<p>Please help...</p>

<p>Screenshot of overlapping :</p>

<p><a href=""https://i.stack.imgur.com/slXKm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/slXKm.png"" alt=""enter image description here""></a></p>
","@brianvaughn I am trying to show a dropdown menu on click of a cell button. I am using bootstrap dropdown menu, only a small part of dropdown is coming . I played with rowHeight and width of the column, if I increase rowHeight to 200 or something huge then more rows of the dropdown menu are coming. Is this is happening because of rowHeight or cell width ? Attached a screenshot in the question."
"44149916","Uncaught RangeError: Maximum call stack size exceeded[react router v4]","1","<p>I am using react router v4 in my application. I am developing a dashboard which has a layout of top navigation, side navigation and main body. Side navigation has a list of links which when clicked routes to their component and render their component in another component which is called main body. I have broken down my dashboard component to top, side and main. In the index i have created a list of routes and is send those routes as a props to main body so that their i can render the routed component. </p>

<p>This way i get an error of </p>

<blockquote>
  <p>Maximum call stack size exceeded</p>
</blockquote>

<p>Why is that so? How can i prevent from such issue? I will more than 10 links on the side bar.</p>

<p>Here is what i have done</p>

<p>index.js</p>

<pre><code>const routes = [
  {
    path: '/',
    exact: true,
    main: () =&gt; &lt;Dashboard /&gt;
  },
  {
    path: '/dashboard',
    main: () =&gt; &lt;h2&gt;dashboard&lt;/h2&gt;
  },
  {
    path: '/email_template',
    main: () =&gt; &lt;AdminEditor /&gt;
  }
];

class Dashboard extends React.PureComponent {
  render() {
    return (
      &lt;div&gt;
        &lt;nav
          className=""navbar navbar-default navbar-static-top""
          role=""navigation""
          style={{ marginBottom: 0 }}&gt;
          &lt;TopNavigation user={this.props.user} /&gt;
          &lt;SideNavigation /&gt;
        &lt;/nav&gt;
        &lt;BodyWrapper routes={routes} /&gt;
      &lt;/div&gt;
    );
  }
}


SideNavigation.js

&lt;ul className=""nav"" id=""side-menu""&gt;
  &lt;li&gt;
    &lt;Link to=""/""&gt;
      &lt;i className=""fa fa-dashboard fa-fw"" /&gt; Dashboard
    &lt;/Link&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;Link to=""/email_template""&gt;
      &lt;i className=""fa fa-dashboard fa-fw"" /&gt; Email Template
    &lt;/Link&gt;
  &lt;/li&gt;
&lt;/ul&gt;

BodyWrapper.js

&lt;div className=""col-lg-12""&gt;
  &lt;h1 className=""page-header""&gt;
    {routes.map((route, index) =&gt; (
      &lt;Route
        key={index}
        path={route.path}
        exact={route.exact}
        component={route.main}
      /&gt;
    ))}
  &lt;/h1&gt;
&lt;/div&gt;
</code></pre>

<p>Can anyone guide me the efficient way to handle such routes? </p>

<p>UPDATE</p>

<p>index.js </p>

<pre><code>ReactDOM.render(
  &lt;Provider store={store}&gt;
    &lt;Router&gt;
      &lt;App /&gt;
    &lt;/Router&gt;
  &lt;/Provider&gt;,
  document.getElementById('root')
);
</code></pre>

<p>app.js</p>

<pre><code>class App extends React.Component {
  render() {
    if (this.props.auth.isAuthenticated) {
      return &lt;Entity user={this.props.auth.user} /&gt;;
    } else {
      return (
        &lt;div&gt;
          &lt;Links /&gt;
          &lt;Switch&gt;
            &lt;Route path=""/login"" component={LoginPage} /&gt;
            &lt;Route path=""/register"" component={RegisterPage} /&gt;
            &lt;Route path=""/home"" component={HomePage} /&gt;
            &lt;Route
              strict
              path=""/about""
              render={() =&gt; &lt;div&gt;About us Page&lt;/div&gt;}
            /&gt;
          &lt;/Switch&gt;
        &lt;/div&gt;
      );
    }
  }
}

const userTypes = [
  { id: '4', val: Dashboard }, // Previous Above code is for this entity
  { id: '3', val: Dashboard3 },
  { id: '2', val: Dashboard2 },
  { id: '1', val: Dashboard1 }
];

const entity = props =&gt; {
  const redirectRoute = userTypes.filter(x =&gt; x.id === props.user.id);
  if (redirectRoute &amp;&amp; redirectRoute.length) {
    const ComponentToRender = redirectRoute[0].val;
    return &lt;ComponentToRender {...props} /&gt;;
  } else {
    return &lt;div&gt;can't get route. unknown issue.&lt;/div&gt;;
  }
};
</code></pre>
","There is two time i have used Route because there will be 4 different dashboard as per the role of user."
"44267381","Maximum call stack size exceeded, react-router 4 react-on-rails","1","<p>Hi I have the same issue but with react-router-dom::4.1.1.
when I try to run the root path I get this error which is show in the last section of this post.</p>

<p><strong>router.js</strong></p>

<pre><code>import React, { PureComponent } from 'react';
import {
    BrowserRouter as Router,
    Route,
} from 'react-router-dom';

import Polls from '../containers/pollsContainer';

class AppRouter extends PureComponent {
    render() {
        return (
            &lt;Router &gt;
                &lt;Route path=""/"" component={Polls} /&gt;
            &lt;/Router&gt;
        );
    }
}

export default AppRouter;
</code></pre>

<p><strong>pollsContainer.js</strong></p>

<pre><code>// Simple example of a React ""smart"" component
import React, { Component } from 'react';
import { connect } from 'react-redux';

import Polls from '../containers/pollsContainer';
import { getPolls } from '../actions';

// Which part of the Redux global state does our component want to receive as props?
const mapStateToProps = (state) =&gt; {
    const { polls } = state;
    return { polls };
};

const mapDispatchToProps = { getPolls };

class PollsContainer extends Component {
    componentWillMount() {
        this.props.getPolls();
        console.info('PollsContainer willMount');
    }

    render() {
        const { polls } = this.props;
        return &lt;Polls polls={polls} /&gt;;
    }
}

export default connect(mapStateToProps, mapDispatchToProps)(PollsContainer);
</code></pre>

<p><strong>SeamosApp.jsx</strong></p>

<pre><code>import React from 'react';
import { Provider } from 'react-redux';

import AppRouter from './router';
import configureStore from '../store';


// See documentation for https://github.com/reactjs/react-redux.
// This is how you get props from the Rails view into the redux store.
// This code here binds your smart component to the redux store.
// railsContext provides contextual information especially useful for server rendering, such as
// knowing the locale. See the React on Rails documentation for more info on the railsContext
const SeamosApp = (props) =&gt; (
  &lt;Provider store={configureStore(props)}&gt;
    &lt;AppRouter /&gt;
  &lt;/Provider&gt;
);

export default SeamosApp;
</code></pre>

<p>the browser Error I get is the next one:</p>

<pre><code>Uncaught RangeError: ReactOnRails encountered an error while rendering component: SeamosApp.
Original message: Maximum call stack size exceeded
    at getDependsOnOwnProps (eval at &lt;anonymous&gt; (webpack-bundle.self-51c4cc2….js?body=1:1872), &lt;anonymous&gt;:26:30)
    at Function.detectFactoryAndVerify (eval at &lt;anonymous&gt; (webpack-bundle.self-51c4cc2….js?body=1:1872), &lt;anonymous&gt;:55:33)
    at mapToPropsProxy (eval at &lt;anonymous&gt; (webpack-bundle.self-51c4cc2….js?body=1:1872), &lt;anonymous&gt;:47:46)
    at handleFirstCall (eval at &lt;anonymous&gt; (webpack-bundle.self-51c4cc2….js?body=1:4368), &lt;anonymous&gt;:30:18)
    at pureFinalPropsSelector (eval at &lt;anonymous&gt; (webpack-bundle.self-51c4cc2….js?body=1:4368), &lt;anonymous&gt;:78:81)
    at Object.runComponentSelector [as run] (eval at &lt;anonymous&gt; (webpack-bundle.self-51c4cc2….js?body=1:1865), &lt;anonymous&gt;:35:25)
    at Connect.initSelector (eval at &lt;anonymous&gt; (webpack-bundle.self-51c4cc2….js?body=1:1865), &lt;anonymous&gt;:187:23)
    at new Connect (eval at &lt;anonymous&gt; (webpack-bundle.self-51c4cc2….js?body=1:1865), &lt;anonymous&gt;:128:15)
    at eval (eval at &lt;anonymous&gt; (webpack-bundle.self-51c4cc2….js?body=1:3885), &lt;anonymous&gt;:295:18)
    at measureLifeCyclePerf (eval at &lt;anonymous&gt; (webpack-bundle.self-51c4cc2….js?body=1:3885), &lt;anonymous&gt;:75:12)
</code></pre>
","Just a quick cheap hint... The call stack exceeded is due to some runaway recursion. Usually one event endlessly retriggering itself."
"45239775","reactnative pass navigate to subView","5","<p>I am new to reactnative</p>

<p>I am using <code>FlatList</code> with <code>app.js</code> and using <code>StackNavigator</code> for navigation between scenes like this:</p>

<pre><code>class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Content',
  };


  render() {
    const { navigate } = this.props.navigation;
    return (
      &lt;View style={styles.container}&gt;
      &lt;FlatList
        data = {myData}
          renderItem={({item}) =&gt; 
                            &lt;Text style={styles.someStyle} 
                                  onPress={()=&gt;
                                            navigate(""Detail"", 
                                                     {item: item});}&gt;
                             {item.text}&lt;/Text&gt; 
                      }
      /&gt;        
      &lt;/View&gt;
    );
  }
}
</code></pre>

<p>Above code will work fine: when I pressed one of the listed item, will load another scene to show the detail of the item content.</p>

<p>But since I want a complex styling for the listed item, I think it will be convenient that I define the listed item in a subView like this:</p>

<pre><code>class MyHomeListItem extends React.PureComponent {
    render(){
        return (
          &lt;View style={styles.item}&gt;
              &lt;Image
                source={require('./assets/book.png')}
                style={styles.listImageIcon}
              /&gt;
              // as you can see the following `onPress` was intended for 
              // the same poperse which should load another secene to show the detail.
              &lt;Text onPress={()=&gt;
                              {this.props.ref(""Detail"", 
                                               {item: this.props.item});}} 
                    style={styles.listItemHomeText}&gt;

                    {this.props.chapterName}: {this.props.chapterTitle}
              &lt;/Text&gt;
          &lt;/View&gt;
        );
    }
}
</code></pre>

<p>And I want to pass the data in the <code>FlatList</code> as a property like:</p>

<pre><code> &lt;FlatList
    data = {myData}

      renderItem={({item}) =&gt; &lt;MyHomeListItem  chapterName={item.chapterName} chapterTitle={item.chapterTitle} ref={navigate} /&gt; }
  /&gt;
</code></pre>

<p>If I don't pass the <code>navigate</code> function to the subView, things will not work, which I think is fine so I pass it so far via <code>ref</code> which is a reference of the <code>navigate</code> function (I thought) or just via <code>ref={this}</code> and using <code>this.props.ref.navigate(...)</code> in the subView, but either wouldn't work.</p>

<p>It will showing:</p>

<pre><code>_this3.props.ref is not a function....'_this3.props.ref' is undefined
</code></pre>

<p><a href=""https://i.stack.imgur.com/yme8W.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yme8W.jpg"" alt=""enter image description here""></a></p>

<p>So How can I do that?</p>

<p>Furthur more, I actually want the whole subView to listen to the <code>onPress</code> but I didn't find an <code>onPress</code> attribute for <code>&lt;View&gt;</code></p>
","what's the prop values in subview?"
"45239775","reactnative pass navigate to subView","5","<p>I am new to reactnative</p>

<p>I am using <code>FlatList</code> with <code>app.js</code> and using <code>StackNavigator</code> for navigation between scenes like this:</p>

<pre><code>class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Content',
  };


  render() {
    const { navigate } = this.props.navigation;
    return (
      &lt;View style={styles.container}&gt;
      &lt;FlatList
        data = {myData}
          renderItem={({item}) =&gt; 
                            &lt;Text style={styles.someStyle} 
                                  onPress={()=&gt;
                                            navigate(""Detail"", 
                                                     {item: item});}&gt;
                             {item.text}&lt;/Text&gt; 
                      }
      /&gt;        
      &lt;/View&gt;
    );
  }
}
</code></pre>

<p>Above code will work fine: when I pressed one of the listed item, will load another scene to show the detail of the item content.</p>

<p>But since I want a complex styling for the listed item, I think it will be convenient that I define the listed item in a subView like this:</p>

<pre><code>class MyHomeListItem extends React.PureComponent {
    render(){
        return (
          &lt;View style={styles.item}&gt;
              &lt;Image
                source={require('./assets/book.png')}
                style={styles.listImageIcon}
              /&gt;
              // as you can see the following `onPress` was intended for 
              // the same poperse which should load another secene to show the detail.
              &lt;Text onPress={()=&gt;
                              {this.props.ref(""Detail"", 
                                               {item: this.props.item});}} 
                    style={styles.listItemHomeText}&gt;

                    {this.props.chapterName}: {this.props.chapterTitle}
              &lt;/Text&gt;
          &lt;/View&gt;
        );
    }
}
</code></pre>

<p>And I want to pass the data in the <code>FlatList</code> as a property like:</p>

<pre><code> &lt;FlatList
    data = {myData}

      renderItem={({item}) =&gt; &lt;MyHomeListItem  chapterName={item.chapterName} chapterTitle={item.chapterTitle} ref={navigate} /&gt; }
  /&gt;
</code></pre>

<p>If I don't pass the <code>navigate</code> function to the subView, things will not work, which I think is fine so I pass it so far via <code>ref</code> which is a reference of the <code>navigate</code> function (I thought) or just via <code>ref={this}</code> and using <code>this.props.ref.navigate(...)</code> in the subView, but either wouldn't work.</p>

<p>It will showing:</p>

<pre><code>_this3.props.ref is not a function....'_this3.props.ref' is undefined
</code></pre>

<p><a href=""https://i.stack.imgur.com/yme8W.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yme8W.jpg"" alt=""enter image description here""></a></p>

<p>So How can I do that?</p>

<p>Furthur more, I actually want the whole subView to listen to the <code>onPress</code> but I didn't find an <code>onPress</code> attribute for <code>&lt;View&gt;</code></p>
","` _this3.props.ref is not a function...._this3.props.ref is undefined`"
"45239775","reactnative pass navigate to subView","5","<p>I am new to reactnative</p>

<p>I am using <code>FlatList</code> with <code>app.js</code> and using <code>StackNavigator</code> for navigation between scenes like this:</p>

<pre><code>class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Content',
  };


  render() {
    const { navigate } = this.props.navigation;
    return (
      &lt;View style={styles.container}&gt;
      &lt;FlatList
        data = {myData}
          renderItem={({item}) =&gt; 
                            &lt;Text style={styles.someStyle} 
                                  onPress={()=&gt;
                                            navigate(""Detail"", 
                                                     {item: item});}&gt;
                             {item.text}&lt;/Text&gt; 
                      }
      /&gt;        
      &lt;/View&gt;
    );
  }
}
</code></pre>

<p>Above code will work fine: when I pressed one of the listed item, will load another scene to show the detail of the item content.</p>

<p>But since I want a complex styling for the listed item, I think it will be convenient that I define the listed item in a subView like this:</p>

<pre><code>class MyHomeListItem extends React.PureComponent {
    render(){
        return (
          &lt;View style={styles.item}&gt;
              &lt;Image
                source={require('./assets/book.png')}
                style={styles.listImageIcon}
              /&gt;
              // as you can see the following `onPress` was intended for 
              // the same poperse which should load another secene to show the detail.
              &lt;Text onPress={()=&gt;
                              {this.props.ref(""Detail"", 
                                               {item: this.props.item});}} 
                    style={styles.listItemHomeText}&gt;

                    {this.props.chapterName}: {this.props.chapterTitle}
              &lt;/Text&gt;
          &lt;/View&gt;
        );
    }
}
</code></pre>

<p>And I want to pass the data in the <code>FlatList</code> as a property like:</p>

<pre><code> &lt;FlatList
    data = {myData}

      renderItem={({item}) =&gt; &lt;MyHomeListItem  chapterName={item.chapterName} chapterTitle={item.chapterTitle} ref={navigate} /&gt; }
  /&gt;
</code></pre>

<p>If I don't pass the <code>navigate</code> function to the subView, things will not work, which I think is fine so I pass it so far via <code>ref</code> which is a reference of the <code>navigate</code> function (I thought) or just via <code>ref={this}</code> and using <code>this.props.ref.navigate(...)</code> in the subView, but either wouldn't work.</p>

<p>It will showing:</p>

<pre><code>_this3.props.ref is not a function....'_this3.props.ref' is undefined
</code></pre>

<p><a href=""https://i.stack.imgur.com/yme8W.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yme8W.jpg"" alt=""enter image description here""></a></p>

<p>So How can I do that?</p>

<p>Furthur more, I actually want the whole subView to listen to the <code>onPress</code> but I didn't find an <code>onPress</code> attribute for <code>&lt;View&gt;</code></p>
","i mean can you share the full log using console.log(this.props) in render method. Place that line before return statement and share the log."
"45239775","reactnative pass navigate to subView","5","<p>I am new to reactnative</p>

<p>I am using <code>FlatList</code> with <code>app.js</code> and using <code>StackNavigator</code> for navigation between scenes like this:</p>

<pre><code>class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Content',
  };


  render() {
    const { navigate } = this.props.navigation;
    return (
      &lt;View style={styles.container}&gt;
      &lt;FlatList
        data = {myData}
          renderItem={({item}) =&gt; 
                            &lt;Text style={styles.someStyle} 
                                  onPress={()=&gt;
                                            navigate(""Detail"", 
                                                     {item: item});}&gt;
                             {item.text}&lt;/Text&gt; 
                      }
      /&gt;        
      &lt;/View&gt;
    );
  }
}
</code></pre>

<p>Above code will work fine: when I pressed one of the listed item, will load another scene to show the detail of the item content.</p>

<p>But since I want a complex styling for the listed item, I think it will be convenient that I define the listed item in a subView like this:</p>

<pre><code>class MyHomeListItem extends React.PureComponent {
    render(){
        return (
          &lt;View style={styles.item}&gt;
              &lt;Image
                source={require('./assets/book.png')}
                style={styles.listImageIcon}
              /&gt;
              // as you can see the following `onPress` was intended for 
              // the same poperse which should load another secene to show the detail.
              &lt;Text onPress={()=&gt;
                              {this.props.ref(""Detail"", 
                                               {item: this.props.item});}} 
                    style={styles.listItemHomeText}&gt;

                    {this.props.chapterName}: {this.props.chapterTitle}
              &lt;/Text&gt;
          &lt;/View&gt;
        );
    }
}
</code></pre>

<p>And I want to pass the data in the <code>FlatList</code> as a property like:</p>

<pre><code> &lt;FlatList
    data = {myData}

      renderItem={({item}) =&gt; &lt;MyHomeListItem  chapterName={item.chapterName} chapterTitle={item.chapterTitle} ref={navigate} /&gt; }
  /&gt;
</code></pre>

<p>If I don't pass the <code>navigate</code> function to the subView, things will not work, which I think is fine so I pass it so far via <code>ref</code> which is a reference of the <code>navigate</code> function (I thought) or just via <code>ref={this}</code> and using <code>this.props.ref.navigate(...)</code> in the subView, but either wouldn't work.</p>

<p>It will showing:</p>

<pre><code>_this3.props.ref is not a function....'_this3.props.ref' is undefined
</code></pre>

<p><a href=""https://i.stack.imgur.com/yme8W.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yme8W.jpg"" alt=""enter image description here""></a></p>

<p>So How can I do that?</p>

<p>Furthur more, I actually want the whole subView to listen to the <code>onPress</code> but I didn't find an <code>onPress</code> attribute for <code>&lt;View&gt;</code></p>
","Also you are not using this.props.ref.navigate in your example code, you are using this.props.ref(""Detail""...)."
"45239775","reactnative pass navigate to subView","5","<p>I am new to reactnative</p>

<p>I am using <code>FlatList</code> with <code>app.js</code> and using <code>StackNavigator</code> for navigation between scenes like this:</p>

<pre><code>class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Content',
  };


  render() {
    const { navigate } = this.props.navigation;
    return (
      &lt;View style={styles.container}&gt;
      &lt;FlatList
        data = {myData}
          renderItem={({item}) =&gt; 
                            &lt;Text style={styles.someStyle} 
                                  onPress={()=&gt;
                                            navigate(""Detail"", 
                                                     {item: item});}&gt;
                             {item.text}&lt;/Text&gt; 
                      }
      /&gt;        
      &lt;/View&gt;
    );
  }
}
</code></pre>

<p>Above code will work fine: when I pressed one of the listed item, will load another scene to show the detail of the item content.</p>

<p>But since I want a complex styling for the listed item, I think it will be convenient that I define the listed item in a subView like this:</p>

<pre><code>class MyHomeListItem extends React.PureComponent {
    render(){
        return (
          &lt;View style={styles.item}&gt;
              &lt;Image
                source={require('./assets/book.png')}
                style={styles.listImageIcon}
              /&gt;
              // as you can see the following `onPress` was intended for 
              // the same poperse which should load another secene to show the detail.
              &lt;Text onPress={()=&gt;
                              {this.props.ref(""Detail"", 
                                               {item: this.props.item});}} 
                    style={styles.listItemHomeText}&gt;

                    {this.props.chapterName}: {this.props.chapterTitle}
              &lt;/Text&gt;
          &lt;/View&gt;
        );
    }
}
</code></pre>

<p>And I want to pass the data in the <code>FlatList</code> as a property like:</p>

<pre><code> &lt;FlatList
    data = {myData}

      renderItem={({item}) =&gt; &lt;MyHomeListItem  chapterName={item.chapterName} chapterTitle={item.chapterTitle} ref={navigate} /&gt; }
  /&gt;
</code></pre>

<p>If I don't pass the <code>navigate</code> function to the subView, things will not work, which I think is fine so I pass it so far via <code>ref</code> which is a reference of the <code>navigate</code> function (I thought) or just via <code>ref={this}</code> and using <code>this.props.ref.navigate(...)</code> in the subView, but either wouldn't work.</p>

<p>It will showing:</p>

<pre><code>_this3.props.ref is not a function....'_this3.props.ref' is undefined
</code></pre>

<p><a href=""https://i.stack.imgur.com/yme8W.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yme8W.jpg"" alt=""enter image description here""></a></p>

<p>So How can I do that?</p>

<p>Furthur more, I actually want the whole subView to listen to the <code>onPress</code> but I didn't find an <code>onPress</code> attribute for <code>&lt;View&gt;</code></p>
","@AnamulHasan I am using this.props.ref() in the sample code because I pass the navigate as the ref attribute in the FlatList, I also tried using this to pass as the attribute ref"
"45365247","NetInfo in react-native is returning isConnected as false even when network is connected","1","<p>We are using react-native NetInfo in following way.</p>

<pre class=""lang-js prettyprint-override""><code>export default class NetworkStatus extends React.PureComponent {
 constructor(props){
  super(props);

   NetInfo.addEventListener(
     'change',
     this.onConnectivityChange
  ); 
 }

 onConnectivityChange = (status) =&gt; {
   NetInfo.isConnected.fetch().then(isConnected =&gt; {
     console.log('*********Network status ' + (isConnected ? 'online' : 
    'offline'));
 });
}
</code></pre>

<p>Launched the app in Offline Mode. We got the following console.</p>

<blockquote>
  <p>*********Network status offline.</p>
</blockquote>

<p>Then we turned on wifi and it is connected. But we got offline console twice.</p>

<blockquote>
  <p>*********Network status offline.</p>
  
  <p>*********Network status offline.</p>
</blockquote>

<p>Is this a bug in NetInfo Library. Is there a way to fix it.</p>

<p>versions used :</p>

<p>""react"": ""16.0.0-alpha.6""</p>

<p>""react-native"": ""0.44.0"", </p>
","Are you getting this issue on iOS? Because it's a bug. https://github.com/facebook/react-native/issues/8615"
"45699477","Using react-virtualized InfiniteLoader","0","<p>Does react-virtualized's <code>InfiniteLoader</code> require seed data to function? The following is my component:</p>

<pre><code>class Bookmarks extends PureComponent {
    constructor(props) {
        super(props);

        this.loaded = {
            cursor: null,
            data: []
        };

        this._isRowLoaded = this._isRowLoaded.bind(this);
        this._loadMoreRows = this._loadMoreRows.bind(this);
        this._rowRenderer = this._rowRenderer.bind(this);
    }

    render() {
        const size = this.loaded.data.length;

        return (
            &lt;InfiniteLoader
                isRowLoaded={this._isRowLoaded}
                loadMoreRows={this._loadMoreRows}
                rowCount={size}&gt;
                {({onRowsRendered, registerChild}) =&gt;
                    &lt;AutoSizer&gt;
                        {({width, height}) =&gt;
                            &lt;List
                                ref={registerChild}
                                height={height}
                                onRowsRendered={onRowsRendered}
                                rowCount={size}
                                rowHeight={30}
                                rowRenderer={this._rowRenderer}
                                width={width}
                            /&gt;}
                    &lt;/AutoSizer&gt;}
            &lt;/InfiniteLoader&gt;
        );
    }

    _isRowLoaded({index}) {
        return !!this.loaded.data[index];
    }

    _loadMoreRows({startIndex, stopIndex}) {
        fetch('/api/bookmarks').then((response) =&gt; {
            return response.json();
        }).then((json) =&gt; {
            this.loaded = {
                cursor: json.cursor,
                data: this.loaded.data.push(...json.data),
            };
        });
    }

    _rowRenderer({index, key, style}) {
        return (
            &lt;div key={key} style={style}&gt;{this.loaded.data[index]}&lt;/div&gt;
        );
    }
}
</code></pre>

<p>In <code>render()</code>, <code>size</code> is initially zero as there's no data yet, and I assume the component would call <code>_loadMoreRows</code>—apparently not.</p>

<p>This is what I thought to be the flow of logic (which is incorrect):</p>

<ol>
<li>Component is created</li>
<li><code>_loadMoreRows</code> is called (1st time)</li>
<li>When the promise returned by <code>_loadMoreRows</code> is resolved, check each loaded rows with <code>_isRowLoaded</code></li>
<li>Render each row</li>
</ol>
",""
"45938314","use react-joyride in multiple child component","0","<p>I want to use <code>react-joyride</code> in my application but there is a problem. I have breakdown my component into <code>Navbar</code> and <code>SideNavigation</code>. They are separate child component. Now that I want to use <code>react-joyride</code> in both first in <code>SideNavigation</code> and then the last step be in <code>Navbar</code>. How can I do it so? </p>

<p>Here is my code </p>

<pre><code>class AgentDashboard extends React.Component {
  constructor() {
    super();
    this.state = {
      username: """",
      roles: [],
      joyrideOverlay: true,
      joyrideType: ""continuous"",
      isReady: false,
      isRunning: false,
      stepIndex: 0,
      steps: [],
      selector: """"
    };
  }
  componentDidMount() {
  this.setState({
      isReady: true,
      isRunning: true,
    });
  }


  addSteps(steps) {
    let newSteps = steps;
    if (!Array.isArray(newSteps)) {
      newSteps = [newSteps];
    }

    if (!newSteps.length) {
      return;
    }

    this.setState(currentState =&gt; {
      currentState.steps = currentState.steps.concat(newSteps);
      return currentState;
    });
  }

  callback(data) {
    this.setState({
      selector: data.type === ""tooltip:before"" ? data.step.selector : """"
    });
  }

  next() {
    this.joyride.next();
  }

  render() {
    const {
      isReady,
      isRunning,
      joyrideOverlay,
      joyrideType,
      selector,
      stepIndex,
      steps
    } = this.state;
    let html;
    if (isReady) {
      html = (
        &lt;div&gt;
          &lt;Joyride
            ref={c =&gt; (this.joyride = c)}
            callback={data =&gt; this.callback(data)}
            debug={false}
            disableOverlay={selector === "".card-tickets""}
            locale={{
              back: &lt;span&gt;Back&lt;/span&gt;,
              close: &lt;span&gt;Close&lt;/span&gt;,
              last: &lt;span&gt;Last&lt;/span&gt;,
              next: &lt;span&gt;Next&lt;/span&gt;,
              skip: &lt;span&gt;Skip&lt;/span&gt;
            }}
            run={isRunning}
            showOverlay={joyrideOverlay}
            showSkipButton={true}
            showStepsProgress={true}
            stepIndex={stepIndex}
            steps={steps}
            type={joyrideType}
          /&gt;
          &lt;TopNavigation
            username={this.state.username ? this.state.username : """"}
            }
            roles={this.state.roles}
          /&gt;
          &lt;main className=""imp""&gt;
            &lt;SideNavigation
              currentNav={this.props.location.pathname.substring(1)}
              addSteps={steps =&gt; this.addSteps(steps)}
              selector={selector}
              next={() =&gt; this.next()}
            /&gt;
          &lt;/main&gt;
        &lt;/div&gt;
      );
    }
    return (
      &lt;div&gt;
        {html}
      &lt;/div&gt;
    );
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(AgentDashboard);
</code></pre>

<p><strong>SideNavigation.js</strong></p>

<pre><code>const sideMenus = [
  {
    menu: ""My Property"",
    link: ""imp/dashboard/my-properties"",
    icon: ""icon-hotel"",
    class: ""hotel-selector""
  },
  {
    menu: ""My IMP"",
    link: ""imp/dashboard/my-imps"",
    icon: ""icon-people-outline"",
    class: ""imp-selector""
  },
];

class SideNavigation extends React.PureComponent {
  componentDidMount() {
    const steps = [
      {
        title: ""Trigger Action"",
        text: ""It can be click"",
        selector: "".imp-dashboard"",
        position: ""right"",
        type: ""hover"",
      },
      {
        title: ""Advance customization"",
        text:
          ""You can set individual styling options for beacons and tooltips."",
        selector: "".hotel-selector"",
        position: ""bottom"",
        allowClicksThruHole: true,
        style: {
          backgroundColor: ""#ccc"",
          mainColor: ""#000"",
          header: {
            color: ""#f04"",
            fontSize: ""3rem"",
            textAlign: ""center""
          },
          footer: {
            display: ""none""
          },
          beacon: {
            inner: ""#000"",
            outer: ""#000""
          }
        }
      }
    ];
    this.props.addSteps(steps);
  }

  handleClick = e =&gt; {
    e.preventDefault();
    const { next } = this.props;
    next();
  };

  render() {
    const { currentNav, selector } = this.props;
    const menuToShow = sideMenus.map(menuItem =&gt;
      &lt;Menu.Item key={menuItem.link} className={menuItem.class}&gt;
        &lt;NavLink
          activeClassName={currentNav.includes(menuItem.link) ? ""active"" : """"}
          to={`/${menuItem.link}`}
        &gt;
          &lt;i className={menuItem.icon} /&gt;
          &lt;span&gt;
            {menuItem.menu}
          &lt;/span&gt;
        &lt;/NavLink&gt;
      &lt;/Menu.Item&gt;
    );
    return (
      &lt;Sidebar.Pushable&gt;
        &lt;Sidebar
          as={Menu}
          width=""thin""
          visible
          icon=""labeled""
          vertical
          inverted
        &gt;
          &lt;Menu.Item name=""dashboard"" className=""imp-dashboard""&gt;
            &lt;NavLink
              activeClassName={currentNav === ""imp/dashboard"" ? ""active"" : """"}
              to=""/imp/dashboard""
            &gt;
              &lt;i className=""icon-activity"" /&gt;
              &lt;span&gt;Dashboard&lt;/span&gt;
            &lt;/NavLink&gt;
          &lt;/Menu.Item&gt;
          {menuToShow}
        &lt;/Sidebar&gt;
        &lt;Sidebar.Pusher&gt;
          &lt;Routes /&gt;
        &lt;/Sidebar.Pusher&gt;
      &lt;/Sidebar.Pushable&gt;
    );
  }
}
</code></pre>

<p>Do you think it is possible to use react-joyride with these kind of component breakdown/structure? I am totally blank on how can I use it. Can anyone guide me, please? I managed to write the above code where I don't get any error nor I see any intro part working when button is clicked. Have i missed anything?</p>

<p>Here is the code in gist for better readability </p>

<p><a href=""https://gist.github.com/anonymous/bc0121ab23652513c2639a0aa55c4390"" rel=""nofollow noreferrer"">https://gist.github.com/anonymous/bc0121ab23652513c2639a0aa55c4390</a></p>
",""
"45939252","Performance issue in react js","3","<p>I am currently using reactJS version ""15.0.1"" in my web application. In one of the feature we need to keep pooling some information continuously after each 2 seconds. So we receive the response which is List of some object(700/1000 items in list) which we update and show in the react web application. The Problem is after some time the application becomes unresponsive and takes too much time for any operation. On profiling I found its render, batch updates and dispatch event in react js that takes the longest time. Is there any recommended way to get away with the performance issue in react. The feature needs to be refreshed every 2 seconds and list size is more than 1000 items each time. </p>

<p>The performance issue is observed in IE and Chrome browser.</p>
","if you got some nested components that SHOULD NOT be re-rendered after polling and updating the state, that is you only need to make shallow compares,  you can try the PureComponent  https://facebook.github.io/react/docs/react-api.html#react.purecomponent"
"45973516","need the best easy to understand reactjs docs","3","<p>So first project with ReactJS, and I need a quick lesson on not the fundamentals (as I can use their docs for that), but specialized fields:</p>

<ol>
<li>Add and remove  items (stylesheets, javascript files).   </li>
<li>React templates (As most of the site will have the same header and footer).</li>
<li>Best way to route and handle urls.</li>
</ol>

<p>Any good links and documentation welcomed.</p>

<p>example of what I was trying to do.</p>

<p>I had the following in App.js i was trying to get the <code>&lt;Header /&gt;</code> to print before  however i ended up having to add a <code>&lt;div&gt;</code> around everything to get it to work and I am sure that is not the correct way to do it, I googled for 4 hours and no luck and the documentation I was looking at was very unhelpful to a noob.</p>

<p>Part of App.js (full code below)</p>

<pre><code> render() {
            const {checked, disabled, indeterminate, status, changeEventCount} = this.state;
            return (
            &lt;div&gt;
            &lt;Header /&gt;
               &lt;main&gt;
                &lt;h1&gt;MDC-Web Checkbox - React Example&lt;/h1&gt;
                &lt;FormField&gt;
                  &lt;Checkbox id=""my-checkbox""
                            labelId=""my-checkbox-label""
                            disabled={disabled}
                            indeterminate={indeterminate}
                            toggleChecked={this.toggleChecked.bind(this)}/&gt;
                  &lt;CheckboxLabel id=""my-checkbox-label"" for=""my-checkbox""&gt;
                    The checkbox is currently {this.status()}
                  &lt;/CheckboxLabel&gt;
                &lt;/FormField&gt;
                &lt;div style={{paddingTop: '12px'}}&gt;
                  &lt;button onClick={() =&gt; this.setState({indeterminate: true})}&gt;Make Indeterminate&lt;/button&gt;
                  &lt;button onClick={() =&gt; this.setState({disabled: !disabled})}&gt;Toggle Disabled&lt;/button&gt;
                &lt;/div&gt;
                &lt;p&gt;{changeEventCount} change events so far&lt;/p&gt;
              &lt;/main&gt;
              &lt;script src='material-components-web/dist/material-components-web.min.js'&gt;&lt;/script&gt;
              &lt;script&gt;window.mdc.autoInit();&lt;/script&gt;
                )
</code></pre>

<p>Header.js</p>

<pre><code>import React, { Component } from 'react';
import 'material-components-web/dist/material-components-web.css';


export default class Header extends Component {


  render() {
    return ( 
            &lt;header className='mdc-toolbar mdc-toolbar--fixed'&gt;
              &lt;div className='mdc-toolbar__row'&gt;
                &lt;section className='mdc-toolbar__section mdc-toolbar__section--align-start'&gt;
                  &lt;span className='mdc-toolbar__title'&gt;Title&lt;/span&gt;
                &lt;/section&gt;
              &lt;/div&gt;
            &lt;/header&gt;

            );
  }
}
</code></pre>

<p>app.js</p>

<pre><code>/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable */

import React, {PureComponent, PropTypes} from 'react';
import Header from './Header';
import Checkbox from './Checkbox';
import CheckboxLabel from './CheckboxLabel';
import FormField from './FormField';

export default class App extends PureComponent {
  state = {
    checked: false,
    disabled: false,
    indeterminate: false,
    changeEventCount: 0
  }

  toggleChecked(evt) {
    this.setState({
      changeEventCount: this.state.changeEventCount + 1,
      checked: evt.target.checked,
      indeterminate: false
    });
  }

  render() {
    const {checked, disabled, indeterminate, status, changeEventCount} = this.state;
    return (
    &lt;div&gt;
    &lt;Header /&gt;
       &lt;main&gt;
        &lt;h1&gt;MDC-Web Checkbox - React Example&lt;/h1&gt;
        &lt;FormField&gt;
          &lt;Checkbox id=""my-checkbox""
                    labelId=""my-checkbox-label""
                    disabled={disabled}
                    indeterminate={indeterminate}
                    toggleChecked={this.toggleChecked.bind(this)}/&gt;
          &lt;CheckboxLabel id=""my-checkbox-label"" for=""my-checkbox""&gt;
            The checkbox is currently {this.status()}
          &lt;/CheckboxLabel&gt;
        &lt;/FormField&gt;
        &lt;div style={{paddingTop: '12px'}}&gt;
          &lt;button onClick={() =&gt; this.setState({indeterminate: true})}&gt;Make Indeterminate&lt;/button&gt;
          &lt;button onClick={() =&gt; this.setState({disabled: !disabled})}&gt;Toggle Disabled&lt;/button&gt;
        &lt;/div&gt;
        &lt;p&gt;{changeEventCount} change events so far&lt;/p&gt;
      &lt;/main&gt;
      &lt;script src='material-components-web/dist/material-components-web.min.js'&gt;&lt;/script&gt;
      &lt;script&gt;window.mdc.autoInit();&lt;/script&gt;
        &lt;/div&gt;
    );
  }

  status() {
    if (this.state.indeterminate) {
      return 'indeterminate';
    }
    return this.state.checked ? 'checked' : 'unchecked';
  }
}
</code></pre>

<p>index.js</p>

<pre><code>/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable */
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));
</code></pre>
","2. For templates, you can search through the Yeoman collection. I have been using the react-static-boilerplate from kriasoft with great success. It also solves your 1. by imitation. For 3. see `react-router` docs."
"45973516","need the best easy to understand reactjs docs","3","<p>So first project with ReactJS, and I need a quick lesson on not the fundamentals (as I can use their docs for that), but specialized fields:</p>

<ol>
<li>Add and remove  items (stylesheets, javascript files).   </li>
<li>React templates (As most of the site will have the same header and footer).</li>
<li>Best way to route and handle urls.</li>
</ol>

<p>Any good links and documentation welcomed.</p>

<p>example of what I was trying to do.</p>

<p>I had the following in App.js i was trying to get the <code>&lt;Header /&gt;</code> to print before  however i ended up having to add a <code>&lt;div&gt;</code> around everything to get it to work and I am sure that is not the correct way to do it, I googled for 4 hours and no luck and the documentation I was looking at was very unhelpful to a noob.</p>

<p>Part of App.js (full code below)</p>

<pre><code> render() {
            const {checked, disabled, indeterminate, status, changeEventCount} = this.state;
            return (
            &lt;div&gt;
            &lt;Header /&gt;
               &lt;main&gt;
                &lt;h1&gt;MDC-Web Checkbox - React Example&lt;/h1&gt;
                &lt;FormField&gt;
                  &lt;Checkbox id=""my-checkbox""
                            labelId=""my-checkbox-label""
                            disabled={disabled}
                            indeterminate={indeterminate}
                            toggleChecked={this.toggleChecked.bind(this)}/&gt;
                  &lt;CheckboxLabel id=""my-checkbox-label"" for=""my-checkbox""&gt;
                    The checkbox is currently {this.status()}
                  &lt;/CheckboxLabel&gt;
                &lt;/FormField&gt;
                &lt;div style={{paddingTop: '12px'}}&gt;
                  &lt;button onClick={() =&gt; this.setState({indeterminate: true})}&gt;Make Indeterminate&lt;/button&gt;
                  &lt;button onClick={() =&gt; this.setState({disabled: !disabled})}&gt;Toggle Disabled&lt;/button&gt;
                &lt;/div&gt;
                &lt;p&gt;{changeEventCount} change events so far&lt;/p&gt;
              &lt;/main&gt;
              &lt;script src='material-components-web/dist/material-components-web.min.js'&gt;&lt;/script&gt;
              &lt;script&gt;window.mdc.autoInit();&lt;/script&gt;
                )
</code></pre>

<p>Header.js</p>

<pre><code>import React, { Component } from 'react';
import 'material-components-web/dist/material-components-web.css';


export default class Header extends Component {


  render() {
    return ( 
            &lt;header className='mdc-toolbar mdc-toolbar--fixed'&gt;
              &lt;div className='mdc-toolbar__row'&gt;
                &lt;section className='mdc-toolbar__section mdc-toolbar__section--align-start'&gt;
                  &lt;span className='mdc-toolbar__title'&gt;Title&lt;/span&gt;
                &lt;/section&gt;
              &lt;/div&gt;
            &lt;/header&gt;

            );
  }
}
</code></pre>

<p>app.js</p>

<pre><code>/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable */

import React, {PureComponent, PropTypes} from 'react';
import Header from './Header';
import Checkbox from './Checkbox';
import CheckboxLabel from './CheckboxLabel';
import FormField from './FormField';

export default class App extends PureComponent {
  state = {
    checked: false,
    disabled: false,
    indeterminate: false,
    changeEventCount: 0
  }

  toggleChecked(evt) {
    this.setState({
      changeEventCount: this.state.changeEventCount + 1,
      checked: evt.target.checked,
      indeterminate: false
    });
  }

  render() {
    const {checked, disabled, indeterminate, status, changeEventCount} = this.state;
    return (
    &lt;div&gt;
    &lt;Header /&gt;
       &lt;main&gt;
        &lt;h1&gt;MDC-Web Checkbox - React Example&lt;/h1&gt;
        &lt;FormField&gt;
          &lt;Checkbox id=""my-checkbox""
                    labelId=""my-checkbox-label""
                    disabled={disabled}
                    indeterminate={indeterminate}
                    toggleChecked={this.toggleChecked.bind(this)}/&gt;
          &lt;CheckboxLabel id=""my-checkbox-label"" for=""my-checkbox""&gt;
            The checkbox is currently {this.status()}
          &lt;/CheckboxLabel&gt;
        &lt;/FormField&gt;
        &lt;div style={{paddingTop: '12px'}}&gt;
          &lt;button onClick={() =&gt; this.setState({indeterminate: true})}&gt;Make Indeterminate&lt;/button&gt;
          &lt;button onClick={() =&gt; this.setState({disabled: !disabled})}&gt;Toggle Disabled&lt;/button&gt;
        &lt;/div&gt;
        &lt;p&gt;{changeEventCount} change events so far&lt;/p&gt;
      &lt;/main&gt;
      &lt;script src='material-components-web/dist/material-components-web.min.js'&gt;&lt;/script&gt;
      &lt;script&gt;window.mdc.autoInit();&lt;/script&gt;
        &lt;/div&gt;
    );
  }

  status() {
    if (this.state.indeterminate) {
      return 'indeterminate';
    }
    return this.state.checked ? 'checked' : 'unchecked';
  }
}
</code></pre>

<p>index.js</p>

<pre><code>/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable */
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));
</code></pre>
","You've got at least four distinct questions here, and your first three are probably off-topic for being too broad or opinion-based. The actual code seems to have a distinct problem, which is on-topic, so I would recommend cutting the question down to focus on that single point."
"45973516","need the best easy to understand reactjs docs","3","<p>So first project with ReactJS, and I need a quick lesson on not the fundamentals (as I can use their docs for that), but specialized fields:</p>

<ol>
<li>Add and remove  items (stylesheets, javascript files).   </li>
<li>React templates (As most of the site will have the same header and footer).</li>
<li>Best way to route and handle urls.</li>
</ol>

<p>Any good links and documentation welcomed.</p>

<p>example of what I was trying to do.</p>

<p>I had the following in App.js i was trying to get the <code>&lt;Header /&gt;</code> to print before  however i ended up having to add a <code>&lt;div&gt;</code> around everything to get it to work and I am sure that is not the correct way to do it, I googled for 4 hours and no luck and the documentation I was looking at was very unhelpful to a noob.</p>

<p>Part of App.js (full code below)</p>

<pre><code> render() {
            const {checked, disabled, indeterminate, status, changeEventCount} = this.state;
            return (
            &lt;div&gt;
            &lt;Header /&gt;
               &lt;main&gt;
                &lt;h1&gt;MDC-Web Checkbox - React Example&lt;/h1&gt;
                &lt;FormField&gt;
                  &lt;Checkbox id=""my-checkbox""
                            labelId=""my-checkbox-label""
                            disabled={disabled}
                            indeterminate={indeterminate}
                            toggleChecked={this.toggleChecked.bind(this)}/&gt;
                  &lt;CheckboxLabel id=""my-checkbox-label"" for=""my-checkbox""&gt;
                    The checkbox is currently {this.status()}
                  &lt;/CheckboxLabel&gt;
                &lt;/FormField&gt;
                &lt;div style={{paddingTop: '12px'}}&gt;
                  &lt;button onClick={() =&gt; this.setState({indeterminate: true})}&gt;Make Indeterminate&lt;/button&gt;
                  &lt;button onClick={() =&gt; this.setState({disabled: !disabled})}&gt;Toggle Disabled&lt;/button&gt;
                &lt;/div&gt;
                &lt;p&gt;{changeEventCount} change events so far&lt;/p&gt;
              &lt;/main&gt;
              &lt;script src='material-components-web/dist/material-components-web.min.js'&gt;&lt;/script&gt;
              &lt;script&gt;window.mdc.autoInit();&lt;/script&gt;
                )
</code></pre>

<p>Header.js</p>

<pre><code>import React, { Component } from 'react';
import 'material-components-web/dist/material-components-web.css';


export default class Header extends Component {


  render() {
    return ( 
            &lt;header className='mdc-toolbar mdc-toolbar--fixed'&gt;
              &lt;div className='mdc-toolbar__row'&gt;
                &lt;section className='mdc-toolbar__section mdc-toolbar__section--align-start'&gt;
                  &lt;span className='mdc-toolbar__title'&gt;Title&lt;/span&gt;
                &lt;/section&gt;
              &lt;/div&gt;
            &lt;/header&gt;

            );
  }
}
</code></pre>

<p>app.js</p>

<pre><code>/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable */

import React, {PureComponent, PropTypes} from 'react';
import Header from './Header';
import Checkbox from './Checkbox';
import CheckboxLabel from './CheckboxLabel';
import FormField from './FormField';

export default class App extends PureComponent {
  state = {
    checked: false,
    disabled: false,
    indeterminate: false,
    changeEventCount: 0
  }

  toggleChecked(evt) {
    this.setState({
      changeEventCount: this.state.changeEventCount + 1,
      checked: evt.target.checked,
      indeterminate: false
    });
  }

  render() {
    const {checked, disabled, indeterminate, status, changeEventCount} = this.state;
    return (
    &lt;div&gt;
    &lt;Header /&gt;
       &lt;main&gt;
        &lt;h1&gt;MDC-Web Checkbox - React Example&lt;/h1&gt;
        &lt;FormField&gt;
          &lt;Checkbox id=""my-checkbox""
                    labelId=""my-checkbox-label""
                    disabled={disabled}
                    indeterminate={indeterminate}
                    toggleChecked={this.toggleChecked.bind(this)}/&gt;
          &lt;CheckboxLabel id=""my-checkbox-label"" for=""my-checkbox""&gt;
            The checkbox is currently {this.status()}
          &lt;/CheckboxLabel&gt;
        &lt;/FormField&gt;
        &lt;div style={{paddingTop: '12px'}}&gt;
          &lt;button onClick={() =&gt; this.setState({indeterminate: true})}&gt;Make Indeterminate&lt;/button&gt;
          &lt;button onClick={() =&gt; this.setState({disabled: !disabled})}&gt;Toggle Disabled&lt;/button&gt;
        &lt;/div&gt;
        &lt;p&gt;{changeEventCount} change events so far&lt;/p&gt;
      &lt;/main&gt;
      &lt;script src='material-components-web/dist/material-components-web.min.js'&gt;&lt;/script&gt;
      &lt;script&gt;window.mdc.autoInit();&lt;/script&gt;
        &lt;/div&gt;
    );
  }

  status() {
    if (this.state.indeterminate) {
      return 'indeterminate';
    }
    return this.state.checked ? 'checked' : 'unchecked';
  }
}
</code></pre>

<p>index.js</p>

<pre><code>/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable */
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));
</code></pre>
","Why don't you just take some  courses online on React? Sometimes, videos are easier to understand than text. You should try watching some great courses for React on Youtube or get a trial for a e-learning website like Treehouse, Coursera, Pluralsight, etc."
"45995748","custom half star rating in reactjs","0","<p>Before describing my problem, I would like to announce the star rating which I am doing is just for learning and fun purpose so I am not using external library. I am also not re-inventing a new wheel. </p>

<p>I thought of practicing reactjs by developing a half star rating which would bring lot of fun in learning. It is fun still but I am getting trouble on developing half star rating. I could only rate non-decimal like 1 to 5 but i wanted the half part too. On hovering how do i decide if my mouse pointer is in the half of star or not or while clicking. </p>

<p>Can anyone please help me by giving an idea on how to do half star rating? I am using ionicons for the star. Here is my code </p>

<pre><code>class Rating extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      rating: this.props.rating || null,
      temp_rating: null
    };
  }

  handleMouseover(rating) {
    this.setState(prev =&gt; ({
      rating,
      temp_rating: prev.rating
    }));
  }

  handleMouseout() {

    this.setState(prev =&gt; ({
      rating: prev.temp_rating
    }));
  }

  rate(rating) {
    this.setState({
      rating,
      temp_rating: rating
    });
  }

  render() {
    const { rating } = this.state;
    let stars = [];
    for (let i = 0; i &lt; 5; i++) {
      console.log('i', i);
      let klass = ""ion-ios-star-outline"";
      if (this.state.rating &gt;= i &amp;&amp; this.state.rating !== null) {
        klass = ""ion-ios-star"";
      }
      stars.push(
        &lt;i
          className={klass}
          onMouseOver={() =&gt; this.handleMouseover(i)}
          onClick={() =&gt; this.rate(i)}
          onMouseOut={() =&gt; this.handleMouseout()}
        /&gt;
      );
    }
    return (
      &lt;div className=""rating""&gt;
        {stars}
      &lt;/div&gt;
    );
  }
}

export default Rating;
</code></pre>

<p>for demo you can see <a href=""https://codesandbox.io/s/ll9kpn5lvm"" rel=""nofollow noreferrer"">https://codesandbox.io/s/ll9kpn5lvm</a> .</p>
",""
"46038192","react native flow error when using FlatList","0","<p>Flow version : '0.53.1'
react native version : 0.47.2</p>

<p>FlatList Code: </p>

<pre><code>&lt;FlatList
      contentContainerStyle={styles.list}
      data={this.state.videoList}
      renderItem={this._renderRow}
      numColumns={2}
      horizontal={false}
      keyExtractor={item =&gt; item.id}
      showsVerticalScrollIndicator={false}
      onEndReachedThreshold={5}
      onEndReached={() =&gt; {}}
    /&gt;
</code></pre>

<p>Other related codes : </p>

<pre><code>type State = {
  videoList: Array&lt;VideoItem&gt;,
};

  constructor(props: Props) {
    super(props);
    this.state = {
      videoList: [],
    };
  }
</code></pre>

<p>The error is :</p>

<blockquote>
  <p>file:
  'file:///Users/rockvr/Documents/VRPlayer/react-native/js/recommend/RecommendMoreVideo.js'
  severity: 'Error' message: 'exact type: object type (This type is
  incompatible with union: undefined | null | boolean | number | string
  | type application of type <code>React$Element</code> | type application of
  identifier <code>Iterable</code> See also: React element <code>FlatList</code> Member 1:
  Error: inconsistent use of library definitions object type This type
  is incompatible with Member 2: Error: inconsistent use of library
  definitions object type This type is incompatible with Member 3:
  boolean Error: inconsistent use of library definitions object type
  This type is incompatible with boolean Member 4: number Error:
  inconsistent use of library definitions object type This type is
  incompatible with number Member 5: string Error: inconsistent use of
  library definitions object type This type is incompatible with string
  Member 6: type application of type <code>React$Element</code> Error: type
  application of property <code>PureComponent</code> Too many type arguments.
  Expected at most 2 See type parameters of definition here Member 7:
  type application of identifier <code>Iterable</code> Error: inconsistent use of
  library definitions property <code>@@iterator</code> of $Iterable Property not
  found in object type)' at: '41,9' source: 'flow'</p>
</blockquote>
",""
"46055386","react native error related to push data to two different component","0","<p>I am trying to push data to my view product component which is consist of two component one is its self and another is tab view which is came form different class and they both put in the render method of view product component and i am pushing data of single product by using this.props.navigator.push and i get access of data on view product class and i also want access of data on my tab view class. i had tried using push method for tab view also with view product, but due to that my app crashes and it is not useful.</p>

<p>Here is the class for view product is:-</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, { Component,PureComponent } from 'react';
import {
	View,
	Text,
	StatusBar,
	TouchableOpacity,
  StyleSheet,
  TouchableHighlight,
  Image,
	ScrollView,
	TextInput,
	ListView,
} from 'react-native';

import Entypo from 'react-native-vector-icons/Entypo';
import Ionicons from 'react-native-vector-icons/Ionicons';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import EvilIcons from 'react-native-vector-icons/EvilIcons';
import ImageSlider from 'react-native-image-slider';
import { responsiveHeight, responsiveWidth} from 'react-native-responsive-dimensions';
import Hr from '../modules/hr.dist';
import Api from '../WooCommerce/Api';
import Css from '../Css/viewproduct';
import { TabViewAnimated, TabBar, SceneMap } from 'react-native-tab-view';
import TabView from './tabView';

export default class ViewProduct extends Component {
  
  render(){

    return(
	      &lt;View style = {{height: responsiveHeight(36)}}&gt;
			&lt;TabView value ={this.props.userData.product}/&gt;
		  &lt;/View&gt;
    );
  }</code></pre>
</div>
</div>
</p>

<p>and script for tab view is:- </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, { PureComponent } from 'react';
import { View, StyleSheet,Text } from 'react-native';
import { TabViewAnimated, TabBar, SceneMap } from 'react-native-tab-view';
import { responsiveHeight, responsiveWidth} from 'react-native-responsive-dimensions';
import ViewProduct from './viewproduct';

const Description = () =&gt; &lt;View style={[ styles.container, { backgroundColor: '#fff' }]}&gt;
                            &lt;Text style={{paddingTop:10,paddingLeft:10,textAlign:'justify'}}&gt;{pro.description}&lt;/Text&gt;
                          &lt;/View&gt;;
const About = () =&gt; &lt;View style={[ styles.container, { backgroundColor: '#fff' } ]}&gt;
                      &lt;Text style={{paddingTop:10,paddingLeft:10,textAlign:'justify'}}&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/Text&gt;
                      &lt;/View&gt;;
const pro =[''];

export default class TabView extends PureComponent {
  state = {
    index: 0,
    pro:[''],
    routes: [
      { key: '1', title: 'Description' },
      { key: '2', title: 'About' },
    ],
  };

  componentWillReceiveProps(product){
        pro= product;
  }

  _handleIndexChange = index =&gt; this.setState({ index });

  _renderHeader = props =&gt; &lt;TabBar
                              {...props}
                              style = {{backgroundColor:""#fff""}}
                              labelStyle = {{color:""#000"",fontFamily:""Montserrat-Regular"",fontSize:12}}
                              tabStyle = {{width:responsiveWidth(33)}}
                              indicatorStyle = {{backgroundColor:""#36c3ff""}} /&gt;;

  _renderScene = SceneMap({
    '1': Description,
    '2': About,
  });

  render() {
    return (
      &lt;TabViewAnimated
        style={styles.container}
        navigationState={this.state}
        renderScene={this._renderScene}
        renderHeader={this._renderHeader}
        onIndexChange={this._handleIndexChange}
      /&gt;
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});</code></pre>
</div>
</div>
</p>

<p>and from my product list page i am using this method:-</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>pressButton(products){
		return this.props.navigator.push({id: 'viewproduct', userData: {product: products}});
	}</code></pre>
</div>
</div>
</p>

<p>and now i want to pass data from product list or from view product to tab view class and use that data to display description on <strong>Const Description</strong></p>

<p>If anyone Knows Please help.</p>
",""
"46084954","reactjs components communicating","0","<p>I have created two separate components and a parent component. I am trying to see how I can connect them so that I can have the dropdown for the children vanish when their checkbox is unchecked. I think I may have created this so the 2 components can't communicate, but I wanted to see if there was a way to get them to. Been trying different ways, but cannot seem to figure it out.</p>

<p>This is the parent component. It builds sections from some data and renders a checkbox treeview with the first (parent) checkbox having a dropdown. When the third option is selected in this dropdown, it renders in a dropdown for each child checkbox. I am trying to see if I can have the child dropdowns vanish when the checkbox is unchecked, but I can't seem to get the 2 components to communicate.
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>export default class CheckboxGroup extends PureComponent {

  static propTypes = {
    data: PropTypes.any.isRequired,
    onChange: PropTypes.func.isRequired,
    counter: PropTypes.number,
  };

  mapParents = (counter, child) =&gt; (
    &lt;li key={child.get('name')} className='field'&gt;
      &lt;SegmentHeader style={segmentStyle} title={child.get('label')} icon={child.get('icon')}&gt;
        &lt;div className='fields' style={zeroMargin}&gt;
          &lt;div className='four wide field'&gt;
            &lt;TreeCheckbox
              label={`Grant ${child.get('label')} Permissions`}
              counter={counter}
              onChange={this.props.onChange}
            /&gt;
            {child.get('items') &amp;&amp; this.buildTree(child.get('items'), counter + child.get('name'))}
          &lt;/div&gt;
          &lt;div className='twelve wide field'&gt;
            &lt;GrantDropdown label={child.get('label')} childItems={child.get('items')}/&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/SegmentHeader&gt;
    &lt;/li&gt;
  )

  mapDataArr = (counter) =&gt; (child) =&gt; (
    (counter === 0 || counter === 1000) ?
      this.mapParents(counter, child)
      :
      &lt;li key={child.get('name')}&gt;
        &lt;TreeCheckbox label={child.get('label')} onChange={this.props.onChange}/&gt;
        {child.get('items') &amp;&amp; this.buildTree(child.get('items'), counter + child.get('name'))}
      &lt;/li&gt;
  )

  buildTree = (dataArr, counter) =&gt; (
    &lt;ul key={counter} style={listStyle}&gt;
      {dataArr.map(this.mapDataArr(counter))}
    &lt;/ul&gt;
  )

  render() {
    return (
      &lt;div className='tree-view'&gt;
        {this.buildTree(this.props.data, this.props.counter)}
      &lt;/div&gt;
    );
  }
}</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';

const pointer = { cursor: 'pointer' };

class TreeCheckbox extends PureComponent {
  static propTypes = {
    onChange: PropTypes.func,
    label: PropTypes.string,
    currentPerson: PropTypes.any,
  };

  componentDidMount() {
    if (this.props.currentPerson.get('permissions').includes(this.props.label)) {
      this.checkInput.checked = true;
      this.changeInput(this.checkInput);
    }
  }

  getLiParents = (el, parentSelector) =&gt; {
    if (!parentSelector) parentSelector = document; // eslint-disable-line
    const parents = [];
    let parent = el.parentNode;
    let o;
    while (parent !== parentSelector) {
      o = parent;
      if (parent.tagName === 'LI') parents.push(o);
      parent = o.parentNode;
    }
    return parents;
  }

  traverseDOMUpwards = (startingEl, steps) =&gt; {
    let elem = startingEl;
    for (let i = 0; i &lt; steps; i++) {
      elem = elem.parentNode;
    }
    return elem;
  }

  markIt = (nodeElem, checkIt, indeter) =&gt; {
    const node = nodeElem;
    const up = this.traverseDOMUpwards(node, 1);
    node.checked = checkIt;
    node.indeterminate = indeter;
    this.props.onChange(up.children[1].innerText, checkIt);
  }

  changeInput = (event) =&gt; {
    const e = event === this.checkInput ? event : event.target;
    const selector = 'input[type=""checkbox""]';
    const querySelector = (el) =&gt; el.querySelectorAll(selector);
    const container = this.traverseDOMUpwards(e, 2);
    const markAllChildren = querySelector(container.parentNode);
    const checked = e.tagName === 'LABEL' ? !markAllChildren[0].checked : e.checked;
    const siblingsCheck = (element) =&gt; {
      let onesNotRight = false;
      const sibling = [].slice.call(element.parentNode.children);
      sibling.filter(child =&gt; child !== element).forEach(elem =&gt; {
        if (querySelector(elem)[0].checked !== querySelector(element)[0].checked) {
          onesNotRight = true;
        }
      });
      return !onesNotRight;
    };
    const checkRelatives = (ele) =&gt; {
      let el = ele;
      if (el.tagName === 'DIV') el = el.parentNode;
      if (el.tagName !== 'LI') return;
      const parentContainer = this.traverseDOMUpwards(el, 2);
      if (siblingsCheck(el) &amp;&amp; checked) {
        this.markIt(querySelector(parentContainer)[0], true, false);
        checkRelatives(parentContainer);
      } else if (siblingsCheck(el) &amp;&amp; !checked) {
        const parent = this.traverseDOMUpwards(el, 2);
        const indeter = parent.querySelectorAll(`${selector}:checked`).length &gt; 0;
        this.markIt(querySelector(parent)[0], false, indeter);
        checkRelatives(parent);
      } else {
        for (const child of this.getLiParents(el)) {
          this.markIt(querySelector(child)[0], false, true);
        }
      }
    };

    for (const children of markAllChildren) {
      this.markIt(children, checked, false);
    }

    checkRelatives(container);
  };

  getRef = (input) =&gt; { this.checkInput = input; }

  render() {
    const { label } = this.props;

    return (
      &lt;div className='permission-item'&gt;
        &lt;div className='ui checkbox'&gt;
          &lt;input type='checkbox' onChange={this.changeInput} ref={this.getRef}/&gt;
          &lt;label onClick={this.changeInput} style={pointer}&gt;
            {label}
          &lt;/label&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}

const mapStatetoProps = (state) =&gt; ({
  currentPerson: state.get('currentPerson'),
});
export default connect(mapStatetoProps)(TreeCheckbox);</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class GrantDropdown extends AbstractSettingsComponent {
  static propTypes = {
    label: PropTypes.string,
    currentPerson: PropTypes.any,
    counter: PropTypes.number,
    permissionOptions: PropTypes.any,
  };

  state = {
    items: new List(),
  }

  componentDidMount() {
    if (this.props.childItems) {
      this.getAllChildLabels(this.props.childItems);
    }
  }

  getAllChildLabels = (childItems) =&gt; {
    let list = new List();
    for (const item of childItems) {
      list = list.push(item.get('label'));
      if (item.get('items')) {
        for (const childItem of item.get('items')) {
          list = list.push(childItem.get('label'));
        }
      }
    }
    this.setState({ items: list });
  }

  handlePermissionChange = (label) =&gt; (e, { value }) =&gt; {
    this.updatePerson(['locationsPermissionsMap', label], value);
  }

  mapItems = (val, i) =&gt; { // eslint-disable-line
    const locationVal = this.props.currentPerson.getIn(['locationsPermissionsMap', val]);
    return (
      &lt;div className={locationVal === 2 ? 'two fields' : 'field'} style={zeroMarginBottom} key={i}&gt;
          &lt;OptionSelector
            options={this.firstThreePermissionOpt()}
            defaultValue={locationVal || 0}
            onChange={this.handlePermissionChange(val)}
          /&gt;
          {locationVal === 2 &amp;&amp;
            &lt;div className='field' style={zeroMarginBottom}&gt;
              &lt;LocationMultiSelect name={val} {...this.props}/&gt;
            &lt;/div&gt;
          }
      &lt;/div&gt;
    );
  }

  render() {
    const { label, currentPerson } = this.props;
    if (!currentPerson.get('permissions').includes(label)) {
      return null;
    }
    const locationLabel = currentPerson.getIn(['locationsPermissionsMap', label]);
    return (
      &lt;div className={ locationLabel === 2 ? 'two fields' : 'field'} style={zeroMarginBottom}&gt;
        &lt;div className='field'&gt;
          &lt;OptionSelector
            options={this.getPermissionOptions()}
            defaultValue={currentPerson.getIn(['locationsPermissionsMap', label]) || 0}
            onChange={this.handlePermissionChange(label)}
          /&gt;
          {locationLabel === 3 &amp;&amp; this.state.items.map(this.mapItems)}
        &lt;/div&gt;
        {locationLabel === 2 &amp;&amp;
          &lt;div className='field'&gt;
            &lt;LocationMultiSelect name={label} {...this.props}/&gt;
          &lt;/div&gt;
        }
      &lt;/div&gt;
    );
  }
}
const mapStatetoProps = (state) =&gt; ({
  currentPerson: state.get('currentPerson'),
  locations: state.get('locations'),
});
export default connect(mapStatetoProps)(GrantDropdown);</code></pre>
</div>
</div>
</p>
",""
"46092886","how to handle Onpress events in react native snap carousel","0","<p><strong>I have a class and in that class I am displaying carousel components like this</strong> </p>

<p><strong><em>sampleclass.js</em></strong>
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>.
.
. 
render{
return (
&lt;Image ..&gt; 
&lt;Text&gt;
text 
&lt;/Text&gt;
&lt;Image ..&gt;
&lt;js file tag where carousel is defined /&gt;
&lt;/Image&gt;

&lt;Text&gt;
text 
&lt;/Text&gt;
&lt;Image ..&gt;
&lt;js file tag where carousel is defined /&gt;
&lt;/Image&gt;
.
.
.
&lt;/Image&gt;
);
}

function fname(params..){
I also need to access carousel ref here 
}</code></pre>
</div>
</div>
</p>

<p><strong>and I have another class where I have defined the</strong> <em>carousel</em> </p>

<p><strong><em>carouselclass.js</em></strong>
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, { PureComponent } from 'react';
import { Dimensions, StyleSheet, View } from 'react-native';

import Carousel from 'react-native-snap-carousel';

export default class ExampleCarousel extends PureComponent {
    state = {
        data: [{}, {}, {}, {}, {}, {}]
    }

    renderItem = () =&gt; (
        &lt;View style={styles.tile} /&gt;
    );

    render () {
        return (
            &lt;View style={styles.container}&gt;
                &lt;Carousel
                  data={this.state.data}
                  renderItem={this.renderItem}
                  itemWidth={Dimensions.get('window').width * 0.85}
                  sliderWidth={Dimensions.get('window').width}
                  containerCustomStyle={styles.carousel}
                  slideStyle={{ flex: 1 }}
                /&gt;
            &lt;/View&gt;
        );
    }
}

const styles = StyleSheet.create({
    container: {
        height: 300
    },
    carousel: {
        flex: 1,
        backgroundColor: 'red'
    },
    tile: {
        flex: 1,
        width: Dimensions.get('window').width * 0.85,
        backgroundColor: 'yellow'
    }
});</code></pre>
</div>
</div>
</p>

<p><strong>I have to handle the onPress event of the carousel swipe components  in the function of sampleclass.js</strong></p>

<p>How can I do this I know how to handle onPress events on react native but couldnt do this with react-native-snap-carousel since I am using it for the first time I have read examples given in the  docs  but couldnt find something related to this </p>
",""
"46180291","Click link to scroll to specific section react.js","0","<p>I have implemented a side menu that has a link tag for each section but I am unsure how to implement the functionality when clicking on them the user is taken to the specific section. I understand how to do it if the it was in the same component and if I was generating the sections in a normal fashion but I am doing it in a different way and I am unsure how to implement something like react-scroll or scrollchor.</p>

<p>Here I am generating the sections with buildTree by mapping over some data I have in another file.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>export default class CheckboxGroup extends PureComponent {
  constructor(props) {
    super(props);
    this.checkboxState = new Map();
    this.state = {
      checkboxState: new Map(),
    };
  }

  static propTypes = {
    data: PropTypes.any.isRequired,
    onChange: PropTypes.func.isRequired,
    counter: PropTypes.number,
  };

  treeCheckboxOnChange = (parentLabel, id, checked) =&gt; {
    this.checkboxState = this.checkboxState.setIn([parentLabel, id], checked);
    this.setState({
      checkboxState: this.checkboxState,
    });
  };

  mapParents = (counter, child) =&gt; {
    const parentLabel = child.get('label');
    return (
      &lt;li key={child.get('name')} className='field'&gt;
      &lt;SegmentHeader style={segmentStyle} title={child.get('label')} icon={child.get('icon')}&gt;
        &lt;div className='fields' style={zeroMargin}&gt;
          &lt;div className='four wide field'&gt;
            &lt;TreeCheckbox
              label={`Grant ${child.get('label')} Permissions`}
              parentLabel={parentLabel}
              counter={counter}
              onChange={this.treeCheckboxOnChange}
            /&gt;
            {child.get('items') &amp;&amp; this.buildTree(child.get('items'), counter + child.get('name'), parentLabel)}
          &lt;/div&gt;
          &lt;div className='twelve wide field'&gt;
            &lt;GrantDropdown checkboxState={this.state.checkboxState.get(parentLabel, new Map())} label={child.get('label')} childItems={child.get('items')}/&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/SegmentHeader&gt;
    &lt;/li&gt;
    );
  };

  mapDataArr = (counter, parentLabel) =&gt; (child) =&gt; (
    (counter === 0) ?
      this.mapParents(counter, child)
      :
      &lt;li key={child.get('name')}&gt;
        &lt;TreeCheckbox label={child.get('label')} parentLabel={parentLabel} onChange={this.treeCheckboxOnChange}/&gt;
        {child.get('items') &amp;&amp; this.buildTree(child.get('items'), counter + child.get('name'), parentLabel)}
      &lt;/li&gt;
  )

  buildTree = (dataArr, counter, parentLabel) =&gt; (
    &lt;ul key={counter} style={listStyle}&gt;
      {dataArr.map(this.mapDataArr(counter, parentLabel))}
    &lt;/ul&gt;
  )

  render() {
    return (
      &lt;div className='tree-view'&gt;
        {this.buildTree(this.props.data, this.props.counter)}
      &lt;/div&gt;
    );
  }
}</code></pre>
</div>
</div>
</p>

<p>I have used the same technique to map over the data to create my sticky sideNav.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>export default class SideNav extends Component {

  static propTypes = {
    data: PropTypes.any.isRequired,
    counter: PropTypes.number,
  };

  mapPermissionNames = (counter, child) =&gt; (
    &lt;li key={child.get('name')}&gt;
      &lt;Link&gt;{child.get('label')}&lt;/Link&gt;
    &lt;/li&gt;
  )

  mapDataArr = (counter) =&gt; (child) =&gt; (
    (counter === 0) ?
      this.mapPermissionNames(counter, child)
      :
      &lt;li key={child.get('name')}&gt;
        &lt;Link&gt;{child.get('label')}&lt;/Link&gt;
      &lt;/li&gt;
  )

  buildTree = (dataArr, counter) =&gt; (
    &lt;ul key={counter} style={listStyle}&gt;
      {dataArr.map(this.mapDataArr(counter))}
    &lt;/ul&gt;
  )

  render() {
    return (
      &lt;div className='tree-view'&gt;
        {this.buildTree(this.props.data, this.props.counter)}
      &lt;/div&gt;
    );
  }
}</code></pre>
</div>
</div>
</p>

<p>and this is the parent where they both are rendered. </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>export default class LocationPermissions extends AbstractSettingsComponent {

  handlePermissionChange = (e, { value }) =&gt; {
    this.updatePerson('locationPermissions', value);
  }

  updateCheckmarks = (id, checked) =&gt; {
    const { currentPerson } = this.props;
    if (checked &amp;&amp; !currentPerson.get('permissions').includes(id)) {
      this.updatePerson('permissions', id, true);
    } else if (!checked &amp;&amp; currentPerson.get('permissions').includes(id)) {
      this.filterItem(['currentPerson', 'permissions'], id, 1);
    }
  }

  render() {
    const { currentPerson } = this.props;
    return (
      &lt;div&gt;
        &lt;SegmentHeader icon='building' title='Location Permissions'&gt;
          &lt;div className='two fields' style={zeroMarginBottom}&gt;
            &lt;div className='field'&gt;
              &lt;OptionSelector
                label={`Grant ${this.getPerson()} permissions for...`}
                options={this.getPermissionOptions()}
                value={currentPerson.get('locationPermissions') || 0}
                onChange={this.handlePermissionChange}
              /&gt;
            &lt;/div&gt;
            {currentPerson.get('locationPermissions') === 2 &amp;&amp;
              &lt;div className='field'&gt;
                &lt;label&gt;Grant Location Admin Permissions For&lt;/label&gt;
                &lt;LocationMultiSelect name='Every' {...this.props}/&gt;
              &lt;/div&gt;
            }
          &lt;/div&gt;
        &lt;/SegmentHeader&gt;
        &lt;StickyContainer&gt;
        {currentPerson.get('locationPermissions') === 3 &amp;&amp;
          &lt;div className='fields'&gt;
            &lt;div className='three wide field'&gt;
              &lt;Sticky style={{ paddingTop: '15px' }}&gt;
                &lt;SideNav
                  data={permissionSections}
                  counter={0}
                /&gt;
              &lt;/Sticky&gt;
            &lt;/div&gt;
            &lt;div className='twelve wide field'&gt;
            &lt;CheckboxGroup
              data={permissionSections}
              counter={0}
              onChange={this.updateCheckmarks}
            /&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        }
        &lt;/StickyContainer&gt;
      &lt;/div&gt;
    );
  }
}</code></pre>
</div>
</div>
</p>

<p>I am having trouble understanding how to implement something like react-scroll or scrollchor or react-router link tags to be able to click on the section and scroll to that section on the page. Any suggestions would be very welcome.</p>
",""
"46297883","listview loading image react native android","0","<p>I have a problem. I have a listview. I want to add loading image while wait show image in screen.
I've been tried react-native-fast-image, react-native-image-progress. But not.
You can help me. thankssss.</p>

<p>Index.js</p>

<pre><code>     &lt;ListView
      enableEmptySections
      style={styles.list}
      dataSource={this.state.dataSource}
      renderRow={rowData =&gt; &lt;ArtStreamRow artwork={rowData} /&gt;}
      scrollRenderAheadDistance={3000}
      initialListSize={30}
      onEndReached={this.onEndReached}
      onEndReachedThreshold={900}
      refreshControl={
        &lt;RefreshControl
          refreshing={this.props.isRefreshing}
          onRefresh={this.onRefresh}
        /&gt;
</code></pre>

<p>ArtStreamRow.js </p>

<pre><code>class ArtStreamRow extends PureComponent {
 render() {
const {
  artwork,
} = this.props;

 return (
  &lt;View style={styles.container}&gt;
    &lt;TouchableNativeFeedback
      onPress={viewArtworkDetail.bind(this, artwork)}
      background={Platform.OS === 'android' ? 
            TouchableNativeFeedback.SelectableBackground() : ''}
    &gt;
      &lt;Image
        source={{ uri: getUrl(artwork) }}
        style={styles.artworkImage}
        resizeMode={Image.resizeMode.cover}
      /&gt;
    &lt;/TouchableNativeFeedback&gt;
  &lt;/View&gt;
    )
  }
</code></pre>

<p>here, loading image, I want to add.
<a href=""https://i.stack.imgur.com/181Qp.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/181Qp.gif"" alt=""image loading""></a></p>
",""
"46563235","Are react stateless components equal to ReacDOM.PureComponents","1","<p>As per documentation(<a href=""https://reactjs.org/docs/react-api.html#react.purecomponent"" rel=""nofollow noreferrer"">https://reactjs.org/docs/react-api.html#react.purecomponent</a>)</p>

<blockquote>
  <p>""React.PureComponent is exactly like React.Component but implements
  shouldComponentUpdate() with a shallow prop and state comparison.""</p>
</blockquote>

<p>So if I define something like following,</p>

<pre><code>const MyView = () =&gt; {
  return (
    &lt;div&gt;Hello Stateless Component&lt;/div&gt;
  )
};
</code></pre>

<p>is it a React.PureComponent? Does it do a shallow prop and state comparison?</p>
","I don't think it is. A component that extends `React.PureComponent` is considered a pure component."
"46610634","Modal doesn't open in react native. Gives ""undefined is not an object"" error","8","<p>I am trying to use Modal from <a href=""https://github.com/maxs15/react-native-modalbox"" rel=""nofollow noreferrer"">https://github.com/maxs15/react-native-modalbox</a> to open item from FlatList. However, I receive an error 'undefined is not an object(evaluating 'this.refs.modal.open'), and can't figure out what I am doing wrong. Can someone help me out please?</p>

<p>Here is my code (FlatList and ModalBox):</p>

<pre><code>    export default class List extends React.PureComponent {
  constructor(props) {
    super(props);
    this.fetchMore = this._fetchMore.bind(this);
    this.fetchData = this._fetchData.bind(this);
    this.openModal =  this.openModal.bind(this);
    this.state = {
      isLoading: true,
      isLoadingMore: false,
      _data: null,
      _dataAfter: '',
      isOpen: false,
      isDisabled: false,
      swipeToClose: true,
    };
  }

  onClose() {
    console.log('Modal just closed');
  }

  onOpen() {
    console.log('Modal just openned');
  }

  onClosingState(state) {
    console.log('the open/close of the swipeToClose just changed');
  }
openModal(id) {
    this.modal.open();
  }

  render() {
    if (this.state.isLoading) {
      return (
        &lt;View style={styles.container}&gt;
          &lt;ActivityIndicator size=""large"" /&gt;
        &lt;/View&gt;
      );
    } else {
      return (

        &lt;FlatList
        numColumns={3}
          data={this.state._data}
          renderItem={({item: rowData}) =&gt; {
            return (
                &lt;View style={styles.container}&gt;
                &lt;View style={styles.imageWrapper}&gt;
                &lt;TouchableOpacity
                onPress={this.openModal}&gt;
                  &lt;Image
                    style={styles.image }
                    source={{
                      uri: rowData.data.icon_img === '' ||
                        rowData.data.icon_img === null
                        ? 'https://via.placeholder.com/70x70.jpg'
                        : rowData.data.icon_img,
                    }}
                  /&gt;
                &lt;/TouchableOpacity&gt;
              &lt;/View&gt;
 &lt;Modal
          style={styles.modal}
           ref={(modal) =&gt; this.modalOpen = modal}
          swipeToClose={this.state.swipeToClose}
          onClosed={this.onClose}
          onOpened={this.onOpen}
          onClosingState={this.onClosingState}&gt;
            &lt;Text style={styles.text}&gt;Basic modal&lt;/Text&gt;
        &lt;/Modal&gt;
           &lt;/View&gt;
            );
          }}
          keyExtractor={(item, index) =&gt; index}
        /&gt;

      );
    }
  }
}
</code></pre>
","I'm sorry my mistake. Didn't see it. Please take a look at the documents about [legacy string refs](https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs)"
"46610634","Modal doesn't open in react native. Gives ""undefined is not an object"" error","8","<p>I am trying to use Modal from <a href=""https://github.com/maxs15/react-native-modalbox"" rel=""nofollow noreferrer"">https://github.com/maxs15/react-native-modalbox</a> to open item from FlatList. However, I receive an error 'undefined is not an object(evaluating 'this.refs.modal.open'), and can't figure out what I am doing wrong. Can someone help me out please?</p>

<p>Here is my code (FlatList and ModalBox):</p>

<pre><code>    export default class List extends React.PureComponent {
  constructor(props) {
    super(props);
    this.fetchMore = this._fetchMore.bind(this);
    this.fetchData = this._fetchData.bind(this);
    this.openModal =  this.openModal.bind(this);
    this.state = {
      isLoading: true,
      isLoadingMore: false,
      _data: null,
      _dataAfter: '',
      isOpen: false,
      isDisabled: false,
      swipeToClose: true,
    };
  }

  onClose() {
    console.log('Modal just closed');
  }

  onOpen() {
    console.log('Modal just openned');
  }

  onClosingState(state) {
    console.log('the open/close of the swipeToClose just changed');
  }
openModal(id) {
    this.modal.open();
  }

  render() {
    if (this.state.isLoading) {
      return (
        &lt;View style={styles.container}&gt;
          &lt;ActivityIndicator size=""large"" /&gt;
        &lt;/View&gt;
      );
    } else {
      return (

        &lt;FlatList
        numColumns={3}
          data={this.state._data}
          renderItem={({item: rowData}) =&gt; {
            return (
                &lt;View style={styles.container}&gt;
                &lt;View style={styles.imageWrapper}&gt;
                &lt;TouchableOpacity
                onPress={this.openModal}&gt;
                  &lt;Image
                    style={styles.image }
                    source={{
                      uri: rowData.data.icon_img === '' ||
                        rowData.data.icon_img === null
                        ? 'https://via.placeholder.com/70x70.jpg'
                        : rowData.data.icon_img,
                    }}
                  /&gt;
                &lt;/TouchableOpacity&gt;
              &lt;/View&gt;
 &lt;Modal
          style={styles.modal}
           ref={(modal) =&gt; this.modalOpen = modal}
          swipeToClose={this.state.swipeToClose}
          onClosed={this.onClose}
          onOpened={this.onOpen}
          onClosingState={this.onClosingState}&gt;
            &lt;Text style={styles.text}&gt;Basic modal&lt;/Text&gt;
        &lt;/Modal&gt;
           &lt;/View&gt;
            );
          }}
          keyExtractor={(item, index) =&gt; index}
        /&gt;

      );
    }
  }
}
</code></pre>
","Please take a look at [handling events](https://reactjs.org/docs/handling-events.html) at react docs. You need to bind your function to use `this`"
"46618316","Proper navigation in react-native","0","<p>Having a bit of a struggle with understanding how to properly implement navigation in RN. The following code should be enough to see the current situation.</p>

<p><code>HeaderConnected</code> is a component with a menu button which has a custom navigate prop to be able to open the Drawer menu <em>(However, I believe this is not a proper way to pass <code>navigate</code>)</em>.</p>

<p><strong>– Problem</strong> <br />
<code>HeaderConnected</code> is in <code>Main.js</code>
<br><br><strong>– Expected</strong><br>
<code>HeaderConnected</code> to be above <code>Navigator</code></p>

<p><strong>App.js</strong></p>

<pre><code>// ...
import { DrawerNavigator } from ""react-navigation"";

export const Navigator = DrawerNavigator({
    Main: { screen: Main },
    Edit: { screen: EditScreen },
});
export default class App extends React.Component {
    render() {
        return (
            &lt;Provider store={createStore(reducer)}&gt;
                &lt;Navigator /&gt;
            &lt;/Provider&gt;
        );
    }
}
</code></pre>

<p><strong>Main.js</strong></p>

<pre><code>export class Main extends React.PureComponent {
    static navigationOptions = {
        drawerLabel: ""Main"",
    };
    render() {
        return (
            &lt;View style={styles.container}&gt;
                &lt;HeaderConnected
                    navigate={this.props.navigation.navigate}
                /&gt; // &lt;--- This should be moved above &lt;Navigator /&gt; in App.js
                &lt;PostsConnected /&gt;
            &lt;/View&gt;
        );
    }
}
</code></pre>

<p>Of course, you could create another wrapper to hold both Navigator and HeaderConnected which you would then pass to Provider. However, this didn't work for me.</p>

<p>After reading react-navigator docs it seems there are several ways to handle this, alas not sure what would be the best/optimal way.</p>
",""
"46655004","Update particular row of FlatList in react-native","2","<p>I'm using FlatList to load some records. Above the FlatList I have a button and when I tap this button with 11230 items loaded in the FlatList, the thing i want is to update particular row background color and image of flatlist item by using onpress </p>

<pre><code>   import React, { Component } from 'react';
   import {
     AppRegistry,
     StyleSheet,
     Text,
     View,
     FlatList,
     TouchableOpacity,
     TextInput,
     TouchableWithoutFeedback,
     Image 
   } from 'react-native'; // Impoert required components

   const GLOBAL_DATA = [];//To store json data
   const PER_PAGE = 10;
   const paginateArray = (array, pageSize, pageNumber) =&gt; {
     const _pageNumber = pageNumber - 1;
     return array.slice(_pageNumber * pageSize, (_pageNumber + 1) * pageSize);
   };

   for (let i = 0; i &lt;= 100000; i++) {
     GLOBAL_DATA.push({
       key: i,
       produto: {
         descricao: 'Item number ' + i,
       }
     });
   }

   export default class flatlistdemo extends Component {
     constructor(props) {
       super(props);          
       this.state = {
         type: 'default',
         data: [],
         page: 1,
       };
     }

     componentDidMount() {
       this.setState({
         data: paginateArray(GLOBAL_DATA, PER_PAGE, this.state.page),
       });
     }

     getPagedOffers = () =&gt; {
       this.setState((state) =&gt; ({
         data: state.data.concat( paginateArray(GLOBAL_DATA, PER_PAGE, this.state.page) ),
       }));
     }

     handleLoadMore = () =&gt; {
       this.setState({
        page: this.state.page + 1,
       },
       () =&gt; {
         this.getPagedOffers();
        }
       );
     }

     render() {
       return (
         &lt;View style={styles.container}&gt;
           &lt;FlatList
             data={this.state.data}
             onEndReached={this.handleLoadMore}
             onEndReachedThreshold={50}
             getItemLayout={(data, index) =&gt; (
               {length: 40, offset: 40 * index, index}
             )}
             renderItem={this._renderItem}
           /&gt;       
         &lt;/View&gt;
       );
     }

     _renderItem = ({item}) =&gt; (
       &lt;MyListItem
         produto={item.produto}
       /&gt;
     );
     }

     class MyListItem extends React.PureComponent {
       render() {
         return (
          &lt;View 
            style={{
              paddingVertical: 10,
              backgroundColor:""#321AFE""
          }}&gt;
            &lt;TouchableOpacity onPress={() =&gt; this.updateRow(this.props.produto)}&gt;
              &lt;Text 
                style={{
                  color: '#000', 
                  height: 40,
                  justifyContent: 'center'
              }}&gt;
                  {this.props.produto.descricao}
              &lt;/Text&gt;
              &lt;Image uri={{xyz}}
            &lt;/TouchableOpacity&gt;
          &lt;/View&gt;
         )
        }

       updateRow(item){
       //Here i want to update item of flatlist with new image and background color
       }
       }
       //Styles used for page
       const styles = StyleSheet.create({
          container: {
            marginTop: 30,
            alignItems: 'center',
          },
       });

       AppRegistry.registerComponent('flatlistdemo', () =&gt; flatlistdemo);
</code></pre>

<p>How can i update flatlist row by using mapping functionality and also how can i navigate to other screens using navigation 
Currently issue faced on navigation
Cannot read property 'navigate' of undefined for</p>

<pre><code>this.props.navigation.navigate(""Home"", UserID);
</code></pre>
","Is the below answer helped you?"
"46655004","Update particular row of FlatList in react-native","2","<p>I'm using FlatList to load some records. Above the FlatList I have a button and when I tap this button with 11230 items loaded in the FlatList, the thing i want is to update particular row background color and image of flatlist item by using onpress </p>

<pre><code>   import React, { Component } from 'react';
   import {
     AppRegistry,
     StyleSheet,
     Text,
     View,
     FlatList,
     TouchableOpacity,
     TextInput,
     TouchableWithoutFeedback,
     Image 
   } from 'react-native'; // Impoert required components

   const GLOBAL_DATA = [];//To store json data
   const PER_PAGE = 10;
   const paginateArray = (array, pageSize, pageNumber) =&gt; {
     const _pageNumber = pageNumber - 1;
     return array.slice(_pageNumber * pageSize, (_pageNumber + 1) * pageSize);
   };

   for (let i = 0; i &lt;= 100000; i++) {
     GLOBAL_DATA.push({
       key: i,
       produto: {
         descricao: 'Item number ' + i,
       }
     });
   }

   export default class flatlistdemo extends Component {
     constructor(props) {
       super(props);          
       this.state = {
         type: 'default',
         data: [],
         page: 1,
       };
     }

     componentDidMount() {
       this.setState({
         data: paginateArray(GLOBAL_DATA, PER_PAGE, this.state.page),
       });
     }

     getPagedOffers = () =&gt; {
       this.setState((state) =&gt; ({
         data: state.data.concat( paginateArray(GLOBAL_DATA, PER_PAGE, this.state.page) ),
       }));
     }

     handleLoadMore = () =&gt; {
       this.setState({
        page: this.state.page + 1,
       },
       () =&gt; {
         this.getPagedOffers();
        }
       );
     }

     render() {
       return (
         &lt;View style={styles.container}&gt;
           &lt;FlatList
             data={this.state.data}
             onEndReached={this.handleLoadMore}
             onEndReachedThreshold={50}
             getItemLayout={(data, index) =&gt; (
               {length: 40, offset: 40 * index, index}
             )}
             renderItem={this._renderItem}
           /&gt;       
         &lt;/View&gt;
       );
     }

     _renderItem = ({item}) =&gt; (
       &lt;MyListItem
         produto={item.produto}
       /&gt;
     );
     }

     class MyListItem extends React.PureComponent {
       render() {
         return (
          &lt;View 
            style={{
              paddingVertical: 10,
              backgroundColor:""#321AFE""
          }}&gt;
            &lt;TouchableOpacity onPress={() =&gt; this.updateRow(this.props.produto)}&gt;
              &lt;Text 
                style={{
                  color: '#000', 
                  height: 40,
                  justifyContent: 'center'
              }}&gt;
                  {this.props.produto.descricao}
              &lt;/Text&gt;
              &lt;Image uri={{xyz}}
            &lt;/TouchableOpacity&gt;
          &lt;/View&gt;
         )
        }

       updateRow(item){
       //Here i want to update item of flatlist with new image and background color
       }
       }
       //Styles used for page
       const styles = StyleSheet.create({
          container: {
            marginTop: 30,
            alignItems: 'center',
          },
       });

       AppRegistry.registerComponent('flatlistdemo', () =&gt; flatlistdemo);
</code></pre>

<p>How can i update flatlist row by using mapping functionality and also how can i navigate to other screens using navigation 
Currently issue faced on navigation
Cannot read property 'navigate' of undefined for</p>

<pre><code>this.props.navigation.navigate(""Home"", UserID);
</code></pre>
","Did you ever figure this out?"
"46701623","unit test a react component- jest, enzyme","0","<p>I am unit testing react component. One component imports other component and use its props. Here are jsx files :</p>

<pre><code>class First extends React.PureComponent {
    render() {
        const { name, isSelected, onClick } = this.props;
        const activeClass = isSelected ? styles.active : '';
        return (
            &lt;div
                className={`${styles.first} ${activeClass}`}
                role=""button""
                tabIndex={0}
                onClick={() =&gt; onClick(name)}
            &gt;
                {name}
            &lt;/div&gt;
        );
    }
}

First.propTypes = {
    name: PropTypes.string.isRequired,
    isSelected: PropTypes.bool,
    onClick: PropTypes.func,
};

export default First;
</code></pre>

<p>Here is my second class that imports this class :
i</p>

<pre><code>mport First from '../First/First';

const Second = ({ values, passedVal, onClick }) =&gt; {
    const second = values.map(vlaue =&gt;
        &lt;First
            key={value}
            name={value}
            isSelected={value === passedVal}
            onClick={onClick}
        /&gt;,
    );

    return (
        &lt;div &gt;
            {Second}
        &lt;/div&gt;
    );
};

Second.propTypes = {
    values: PropTypes.arrayOf(PropTypes.string),
    passedVal: PropTypes.string,
    onClick: PropTypes.func,
};

export default FilterList;
</code></pre>

<p>Here is my test. I want to test isSelected condition in my test :</p>

<pre><code>describe('Second - Unit test', () =&gt; {
    let props;
    let secondComponent;

    const second = () =&gt; {
        if (!secondComponent) {
            secondComponent = shallow(&lt;Second {...props} /&gt;);
        }
        return secondComponent;
    };
      beforeEach(() =&gt; {
        props = Second.defaultProps;
        secondComponent = undefined;
    });

   it('verify value of isSelected ', () =&gt; {
             props.passedVal='value01';
             props.value=['value01'];
            console.log(props.isSelected);
           });
</code></pre>

<p>It gives me undefined as this is prop of First class. How can i verify this logic here. Need to make instance of first and then check?</p>
",""
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","tried this but not working.I think a change/fix is needed in Tables component."
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","not sure it's directly related to your problem but i recommend that you should not do ajax requests (`getTables();`) in the `constructor` and instead do them in `componentDidMount`."
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","**Note:**  
https://github.com/Agontuk/schema-designer/issues/2     This Issue also relates to my question where updating localstorage isnt updating component."
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","are you sure the `render()` of Tables.js is being called each time i.e. are all console loggings showing up ?"
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","i have tried this too.actually schema component is re rendering Tables component.you can see in Tables.js data is updating everytime in Tables.js render function.but the return portion in render function in Tables.js isnt updating."
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","You must update props or state for a component to re-render. Use `this.setState({tables: JSON.parse(window.localStorage.getItem('test'))})` and `<Tables val={ this.state.tables } />`"
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","Also, PureComponent is a premature optimization. Extend Component."
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","yes all these consoles are logging correctly.its been week m trying on it.as far as i can guess its issue with redux."
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","because here <Tables val={ this.tables } /> value of this.tables is changing everytime."
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","Changed it to Component but no change in results."
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","How is your Tables and Schema component getting re-rendered?
There is no change in the props or state."
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","console.log is lying to you. It prints based on the reference of `this.tables` and its value changes after render has returned. Again, if you use and change state the component will re-render. By the way, you're not setting Redux state in this example so Redux has nothing to do with it."
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","yes m nt updating redux state here but it is showing the data stored in redux state.as if i refresh page the initialState stores data in redux state so it is shown in tables."
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","it is true that tables' value is changing after it is rendered and this is the issue.i want to re render it.how to achieve this?"
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","As noted 4 times - updating state or props will cause a re-render. Don't use instance variables: `this.tables`. Simplify your example or play around with React to understand how it works."
"46715424","Re-rendering react-redux component","16","<p>I am using react-redux code structure and this is my first try with react-redux.I have cloned a github repository <a href=""https://github.com/Agontuk/schema-designer"" rel=""nofollow noreferrer"">from Here</a> and started editing it.</p>

<p>My directory structure:</p>

<p><a href=""https://i.stack.imgur.com/1fKJP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1fKJP.png"" alt=""enter image description here""></a></p>

<p>Here schema is parent component and header and tables are 2 child components.Tables is showing data from localstorage through redux store.</p>

<p><strong>Initializing store:</strong></p>

<pre><code> const initialState = JSON.parse(window.localStorage.getItem('test'));
 const store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));
</code></pre>

<p>Now an event is triggered from Header and sent to schema and in the response of this event schema is updating localstorage by requesting to server and saving server's response in localstorage as follows:</p>

<p><strong>Schema.js:</strong></p>

<pre><code>class Schema extends PureComponent {
constructor(props) {
    super(props);
    this.table = ''; 
    getTables();       
}
myCallback = () =&gt; {//triggered by child(Header)
   getTables();       
}
getTables = () =&gt; {
  axios.get(url)
        .then((response) =&gt; {
            if(response.data.status==0){ 
 window.localStorage.setItem('test',JSON.stringify(response.data));
   this.tables=JSON.parse(window.localStorage.getItem('test'))
    });
}
render() {
 console.log(this.tables);//this is giving updated value at each updation
    return (
        &lt;div className='container-fluid'&gt;
            &lt;Header callbackFromParent={ this.myCallback } /&gt;
            &lt;br /&gt;
            &lt;br /&gt;
            &lt;Tables val={ this.tables } /&gt;
        &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Here is code for <strong>Tables.js:</strong></p>

<pre><code>   class Tables extends Component {
   props: Props
   render() {
   let {tables,val } = this.props;
   console.log(JSON.parse(window.localStorage.getItem('test')));//this is giving updated value at each updation in localstorage
   console.log(val);//this is also giving updated value at each updation in localstorage
   tables=val;
   console.log(tables);this is also updating in realtime.      
   return (
        &lt;div className='table-wrapper'&gt;
            { tables.map((table) =&gt; (
                &lt;Table
                    key={ table.id }
                    data={ table }
                /&gt;
            ))}
        &lt;/div&gt;
       );
     }
   }

   type Props = {
     tables: Array&lt;TableType&gt;
   };
</code></pre>

<p>The issue is whenever header triggers callback, schema updates value of localstorage, this updation also re render Tables component. Also an updated value can be seen in render of Tables component but the tables which are shown are from previous saved value. To get current value in tables, we need to refresh the page.</p>

<p>is it a mistake in code flow or i need something else for this?</p>
","Please use `this.state` as component re-rendering is based on that. Use `this.setState` to update  the state. If you follow this, you shouldn't face any issue. `this.tables` is not a good way."
"47145006","How do you register and render a react-formio custom component?","0","<p>If been trying to implement Custom Components using the <code>https://github.com/formio/react-formio</code> library. I'm able to render any builtin (default) component but am having issues registering external react component to formio (similar to the example here...<a href=""https://github.com/formio/react-example/blob/master/src/app.jsx"" rel=""nofollow noreferrer"">https://github.com/formio/react-example/blob/master/src/app.jsx</a> which no one seems to be able to get working(issue thread below)). I haven't seen any examples for custom components in react-formio online and am wondering if anyone was able to make it work? (Same question posted here however <a href=""https://github.com/formio/react-formio/issues/91"" rel=""nofollow noreferrer"">https://github.com/formio/react-formio/issues/91</a>)</p>

<p>The component I'm trying to test with is <a href=""http://cui.brightbytes.net/3.35.1/js/form/text.html"" rel=""nofollow noreferrer"">http://cui.brightbytes.net/3.35.1/js/form/text.html</a></p>

<pre><code>import React from 'react';
import PropTypes from 'prop-types';
import { last } from 'lodash';
import formiojs from 'formiojs';
import { Formio } from 'react-formio';
import CuiText from 'cui/src/components/Form/Text';

export default class FormioSandbox extends React.PureComponent {

  componentWillMount() {
    this.props.updateFormioData();
  }

  formSubmit(submission) {
    console.log('submit', submission.data);
  };

  formFirstDatum() {
    if (this.props.allFormioData &amp;&amp; this.props.allFormioData.length &gt; 1) { return last(this.props.allFormioData) };
    return null;
  }

  customForm() {
    return (
      &lt;Formio src=""https://customuriaddress.io/cuitest""
              onSubmit={this.formSubmits}
              submission={this.formFirstDatum()}
      /&gt;
    );
  }

  render() {
    return (
    &lt;div&gt;
      Logic form test
      {this.customForm()}
    &lt;/div&gt;
    );
  }
}
</code></pre>

<p>Within the formio portal the form I'm using contains a custom component with <code>type: CuiText</code>. Has someone been able to figure it out? Either using their interface or perhaps by forking the library and registering the values somewhere? Any example would be greatly appreciated, thanks in advance.  </p>
",""
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","Also, `getPair()` isn't bound to `this`. You might want to try calling it using an arrow function or binding it inside of your component's `constructor()` method."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","You can also pass `props` directly to route components like so: `<Route path=""/"" component={() => <Vote pair={pair}/>} />`. It might be cleaner to declare the routes from inside of your `<App/>` component's file for the sake of passing data."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","`<Switch/>` worked a treat, thank you. Unfortunately I'm still not getting any data in either page, even after binding the functions in the `constructor`."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","@ArmanCharan Sorry, it is `Vote` not `Voting`. I modified the code a little to make the question. I've updated the question with the correct information."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","@AbdennourTOUMI I am using React 15.6"
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","Next step might be to try nesting the routes within a [`<Switch/>`](https://reacttraining.com/react-router/web/api/Switch) statement, seeing as giving the `<App/>` component one child seems to work."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","@Joshua_M for future reference, anytime you see an `Element type is invalid` that means you are referencing a JSX element incorrectly. Either you have an error in your export/import statements (such as in this case) an issue with your casing (If it is not in pascal case react will throw an error) or a missing return statement in your render method"
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","Simple error in your first `<Route/>`'s `component` prop. Change `Vote` to `Voting`, or vice versa, to match your import statement."
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","are u using React 16 ?"
"47286553","react-router-dom Element Type Invalid","10","<p>I'm new to React and ES6, and am a bit stuck with <code>react-router-dom</code>. I'm currently either getting error messages or none of the information seems to be loading in. I'm using React 15.6.</p>

<p><strong>index.js</strong></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import App from './components/App';
import Vote from './components/Vote';
import Results from './components/Results';

ReactDOM.render(
  &lt;Router&gt;
    &lt;App&gt;
      &lt;Route path=""/"" component={Vote} /&gt;
      &lt;Route path=""/results"" component={Results} /&gt;
    &lt;/App&gt;
  &lt;/Router&gt;,
  document.getElementById('root')
);
</code></pre>

<p>If I have the two <code>Route</code> declarations in <strong>index.js</strong>, I am getting an error </p>

<pre><code>Element type is invalid: expected a string (for built-in components) or a 
class/function (for composite components) but got: undefined. 
You likely forgot to export your component from the file it's defined in.
</code></pre>

<p>I think this means that <code>this.props.children</code> doesn't have a value, so it can't clone the route with the pair list correctly?</p>

<p>If I remove the one of the <code>Route</code> declarations, the page does successfully compile, but it's just empty. I added a line of text to the <code>return()</code> in <strong>Vote.jsx</strong> and it does output that, so the route is working correctly, just nothing is being outputted for the <code>this.getPair()</code> function.</p>

<p><a href=""https://i.stack.imgur.com/yTiCl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yTiCl.png"" alt=""React Page Compiled""></a></p>

<p>It looks like <strong>App.jsx</strong> also loads correctly, as it I change the return in this file to output text, it does so.</p>

<p>As mentioned, I'm entirely green to this, so I'm hoping its something fairly simple, or just a misunderstanding of how everything stitches together.</p>

<p><strong>App.jsx</strong></p>

<pre><code>import React from 'react';
import {List, Map} from 'immutable';

const pair = List.of('Item One', 'Item Two');
const tally = Map({'Item One': 5, 'Item Two': 4});

export class App extends React.PureComponent {
  render() {
    return (
      React.cloneElement(this.props.children, {pair: pair})
    )
  }
};

export default App;
</code></pre>

<p><strong>Vote.jsx</strong></p>

<pre><code>import React from 'react';

export class Vote extends React.PureComponent {

  getPair() {
    return this.props.pair || [];
  }

  isDisabled() {
    return !!this.props.hasVoted;
  }

  hasVotedFor(entry) {
    return this.props.hasVoted === entry;
  }

  render() {
    return (
      &lt;div className=""voting""&gt;
        {this.getPair().map(entry =&gt;
          &lt;button key={entry} onClick={() =&gt; this.props.vote(entry)} disabled={this.isDisabled()}&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            {this.hasVotedFor(entry) ? &lt;div className=""label""&gt;Voted&lt;/div&gt; : null}
          &lt;/button&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Vote;
</code></pre>

<p><strong>Results.jsx</strong></p>

<pre><code>import React from 'react';

export class Results extends React.PureComponent {

  getPair() {
    return this.props.pair || [];

  }

  getVotes(entry) {
    if (this.props.tally &amp;&amp; this.props.tally.has(entry)) {
      return this.props.tally.get(entry);
    }

    return 0;
  }

  render() {
   return (
      &lt;div className=""results""&gt;
        {this.getPair().map(entry =&gt;
          &lt;div key={entry} className=""entry""&gt;
            &lt;h1&gt;{entry}&lt;/h1&gt;
            &lt;div className=""voteCount""&gt;
              {this.getVotes(entry)}
            &lt;/div&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    )
  }
};

export default Results;
</code></pre>
","Hey, I cracked it with the props directly in **App.jsx**, so App.jsx returns the `<Switch />` with the directly routed components. Thanks so much for your help."
"47368924","React, semantic-ui-react. Test suite failed to run: SyntaxError: Unexpected token import","0","<h3>Steps to reproduce</h3>

<p>New ""<code>create-react-app</code>"";
<code>yarn add semantic-ui-react</code>;
new component with simply this code:</p>

<pre><code>import React, { PureComponent } from ""react"";
import Dropdown from ""semantic-ui-react/dist/es/modules/Dropdown/Dropdown"";

class NavbarRightMenu extends PureComponent {
  render() {
    &lt;Dropdown item trigger={myTrigger}&gt;
      &lt;Dropdown.Menu&gt;Something! Booom!&lt;/Dropdown.Menu&gt;
    &lt;/Dropdown&gt;;
  }
}
</code></pre>

<h3>Expected Result</h3>

<p><code>yarn test</code> everything ok!</p>

<h3>Actual Result</h3>

<p>Instead now I got this:</p>

<pre><code>src\index.test.js
  ● Test suite failed to run

    C:\Project\node_modules\semantic-ui-react\dist\es\modules\Dropdown\Dropdown.js:1
    ({""Object.&lt;anonymous&gt;"":function(module,exports,require,__dirname,__filename,global,jest){import _defineProperty from 'babel-runtime/helpers/defineProperty';
                                                                                             ^^^^^^

    SyntaxError: Unexpected token import

      at ScriptTransformer._transformAndBuildScript (node_modules/jest-runtime/build/ScriptTransformer.js:289:17)
      at Object.&lt;anonymous&gt; (src/components/common/navbar_components/NavbarRightMenu.js:3:17)
      at Object.&lt;anonymous&gt; (src/components/common/NavbarCommon.js:6:24)

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        1.05s
Ran all test suites related to changed files.

Watch Usage: Press w to show more.
</code></pre>

<h3>Version</h3>

<p>0.76.0</p>

<h3>Testcase</h3>

<p><a href=""https://codesandbox.io/s/736j2w2ol6"" rel=""nofollow noreferrer"">https://codesandbox.io/s/736j2w2ol6</a></p>

<p>I don't know how to test on codesandbox.</p>
",""
"47378069","react-google-maps Marker Click Event","0","<p>I am using the stock code for the clustered map posted on the <code>react-google-maps</code> documentation. I am trying to extend the code by adding a click event for the marker that will take the marker URL from the API and then call <code>window.location</code> to change the page. </p>

<p>Here is an example of one of the markers that is returned from my API:</p>

<pre><code>{
  id: 1,
  name: ""Oxford"",
  slug: ""oxford"",
  lat: 51.752021,
  lng: -1.257726,
}
</code></pre>

<p>I have added an event <code>onMarkerClick</code> to the marker and the method is getting called properly. I hardcoded window.location and it gets called, I just don't know how to get the slug value. </p>

<p>I am assuming that I have to store the slug value differently from how I am doing it in the example below. I am new to React so I am probably missing something really obvious</p>

<pre><code>import React from 'react'

const fetch = require(""isomorphic-fetch"");
const { compose, withProps, withHandlers } = require(""recompose"");
const {
  withScriptjs,
  withGoogleMap,
  GoogleMap,
  Marker
} = require(""react-google-maps"");
const { MarkerClusterer } = require(""react-google-maps/lib/components/addons/MarkerClusterer"");

const MapWithAMarkerClusterer = compose(
  withProps({
    googleMapURL: ""https://maps.googleapis.com/maps/api/js?key=AIzaSyCvakAjEUpqfnucJu-CoClBD1CtTKZUGxQ&amp;v=3.exp&amp;libraries=geometry,drawing,places"",
    loadingElement: &lt;div style={{ height: 'calc(100vh - 56px)' }} /&gt;,
    containerElement: &lt;div style={{ height: 'calc(100vh - 56px)' }} /&gt;,
    mapElement: &lt;div style={{ height: 'calc(100vh - 56px)' }} /&gt;,
  }),
  withHandlers({
    onMarkerClustererClick: () =&gt; (markerClusterer) =&gt; {
      console.log('Clicked a cluster')
    },
    onMarkerClick: () =&gt; (marker) =&gt; {
      // link to post view page
      //
      //
      //
      //
      //
      console.log('Go to the marker post page')
      window.location = '/post/oxford';
    }
  }),
  withScriptjs,
  withGoogleMap
)(props =&gt;
  &lt;GoogleMap
    defaultZoom={3}
    defaultCenter={{ lat: 12.2637937, lng: 75.947508 }}
  &gt;
    &lt;MarkerClusterer
      onClick={props.onMarkerClustererClick}
      averageCenter
      enableRetinaIcons
      gridSize={60}
    &gt;
      {props.markers.map(marker =&gt; (
        &lt;Marker
          onClick={props.onMarkerClick}
          key={marker.id}
          position={{ lat: marker.lat, lng: marker.lng }}
          slug={marker.slug}
        /&gt;
      ))}
    &lt;/MarkerClusterer&gt;
  &lt;/GoogleMap&gt;
);

class TestMap extends React.PureComponent {
  componentWillMount() {
    this.setState({ markers: [] })
  }

  componentDidMount() {
    const url = '/api/posts';
    fetch(url)
      .then(res =&gt; res.json())
      .then(data =&gt; {
        this.setState({ markers: data });
      });
  }

  render() {
    return (
      &lt;MapWithAMarkerClusterer markers={this.state.markers} /&gt;
    )
  }
}

export default TestMap
</code></pre>
",""
"47507764","How to open and close an inline dialog in a react redux app","0","<p>I have a working inline dialog using react state. The working code is below. </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, { PureComponent } from 'react';
import { render } from 'react-dom';
import PropTypes from 'prop-types';
import Button from '@atlaskit/button';
import InlineDialog from '@atlaskit/inline-dialog';

const styles = {
  fontFamily: 'sans-serif',
  textAlign: 'center',
};

class ButtonActivatedDialog extends PureComponent {

 
  static propTypes = {
    content: PropTypes.node,
    position: PropTypes.string,
  }

  state = {
    isOpen: false,
  };

  handleClick = () =&gt; {
    this.setState({
      isOpen: !this.state.isOpen,
    });
  }

  handleOnClose = (data) =&gt; {
    this.setState({
      isOpen: data.isOpen,
    });
  }

  render() {
    return (
      &lt;InlineDialog
        content={this.props.content}
        position={this.props.position}
        isOpen={this.state.isOpen}
        onClose={this.handleOnClose}
      &gt;
        &lt;Button
          onClick={this.handleClick}
          isSelected
        &gt;
         The Button 
        &lt;/Button&gt;
      &lt;/InlineDialog&gt;
    );
  }
}

const App = () =&gt; (
    &lt;ButtonActivatedDialog 
      content={
        &lt;div&gt;
          &lt;h5&gt;
            Displaying...
          &lt;/h5&gt;
            &lt;p&gt;
            Here is the information I need to display.
            &lt;/p&gt;
        &lt;/div&gt;}
      position='bottom right'
    /&gt;
);

render(&lt;App /&gt;, document.getElementById('root'));</code></pre>
</div>
</div>
</p>

<p>I would like to have the same behavior with the button but using redux to maintain the state of the dialog. </p>

<p>After reading some material I believe I need to dispatch an action that will activate a  reducer witch in turn will help me update the state of the dialog. However, I don't believe I fully understand how this should be put together.</p>

<p>Here is my work in progress but for some reason my codeSanbox does not like the format in which I'm creating the store. </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>mport React, { PureComponent } from 'react';
import { render } from 'react-dom';
import PropTypes from 'prop-types';
import Button from '@atlaskit/button';
import InlineDialog from '@atlaskit/inline-dialog';

import { connect, createStore } from 'react-redux'

const styles = {
  fontFamily: 'sans-serif',
  textAlign: 'center',
};


const mapStateToProps = state  =&gt; {
  return {
    isDialogOpen: false,
  }
}

const mapDispatchToProps = dispatch =&gt; {
  return {
    toggleDialog: () =&gt; dispatch({
      type: 'TOGGLE_DIALOG'
    })
  }
}


// action:
const tottleDialog = 'TOGGLE_DIALOG';

//action creator 
const toggleDialog = (e) =&gt; ({
  type: 'TOGGLE_DIALOG',
   e,
})

class ButtonActivatedDialog extends PureComponent {

 
  static propTypes = {
    content: PropTypes.node,
    position: PropTypes.string,
  }

  state = {
    isOpen: false,
  };

  handleClick = () =&gt; {
    this.setState({
      isOpen: !this.state.isOpen,
    });
  }

  handleOnClose = (data) =&gt; {
    this.setState({
      isOpen: data.isOpen,
    });
  }

  render() {
    return (
      &lt;InlineDialog
        content={this.props.content}
        position={this.props.position}
        isOpen={this.state.isOpen}
        onClose={this.handleOnClose}
      &gt;
        &lt;Button
          onClick={this.handleClick}
          isSelected
        &gt;
         The Button 
        &lt;/Button&gt;
      &lt;/InlineDialog&gt;
    );
  }
}

const App = () =&gt; (
    &lt;ButtonActivatedDialog 
      content={
        &lt;div&gt;
          &lt;h5&gt;
            Displaying...
          &lt;/h5&gt;
            &lt;p&gt;
            Info here
            &lt;/p&gt;
        &lt;/div&gt;}
      position='bottom right'
    /&gt;
);

 const store = createStore(toggleDialog, {})



//need and action 
//need an action creator - a function that returns an action: 


//
// render(&lt;App /&gt;, document.getElementById('root'));

 render(
   &lt;Provider store={store}&gt;
     &lt;App /&gt;
   &lt;/Provider&gt;, document.getElementById('root')
);</code></pre>
</div>
</div>
</p>
",""
"47646522","Why React's PureComponent is recommended to have all its children ""pure""","0","<p>Having read the official <a href=""https://reactjs.org/docs"" rel=""nofollow noreferrer"">React documentation</a>, I've came across <a href=""https://reactjs.org/docs/react-api.html#reactpurecomponent"" rel=""nofollow noreferrer"">this</a> regarding <strong>PureComponent</strong>:</p>

<blockquote>
  <p>Furthermore, React.PureComponent’s shouldComponentUpdate() skips prop
  updates for the whole component subtree. Make sure all the children
  components are also “pure”.</p>
</blockquote>

<p>Why exactly does skipping props updates for the whole subtree means avoiding non-pure components? what would be the consequences of a non-pure component inside a PureComponent's component subtree (both in general and in the case when it's not designed/supposed to respond to props change).</p>
",""
"47894740","Getting errors with Google Maps API, using recompose and react-google-maps","0","<p>I'm using Google Maps API to show places on a map. However, every time I drag the location on my map, I get the following errors: </p>

<p><a href=""https://i.stack.imgur.com/IwI2K.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IwI2K.png"" alt=""errors on console""></a></p>

<p>Here is my Google map, using Google Maps API, <a href=""https://github.com/acdlite/recompose"" rel=""nofollow noreferrer"">recompose</a> and <a href=""https://github.com/tomchentw/react-google-maps"" rel=""nofollow noreferrer"">react-google-maps</a>. It works, but is giving errors.</p>

<pre><code>/*global google*/
import React from ""react""
import { compose, withProps, withHandlers, withState } from ""recompose""
import { withScriptjs, withGoogleMap, GoogleMap, Marker } from ""react-google-maps""

const MyMapComponent = compose(
    withProps({
        googleMapURL: ""https://maps.googleapis.com/maps/api/js?v=3.exp&amp;libraries=geometry,drawing,places"",
        loadingElement: &lt;div style={{ height: `100%` }} /&gt;,
        containerElement: &lt;div style={{ height: `400px` }} /&gt;,
        mapElement: &lt;div style={{ height: `100%` }} /&gt;,
    }),
    withScriptjs,
    withGoogleMap,
    withState('places', 'updatePlaces', ''),
    withHandlers(() =&gt; {
        const refs = {
            map: undefined,
        }

        return {
            onMapMounted: () =&gt; ref =&gt; {
                refs.map = ref
            },
            fetchPlaces: ({ updatePlaces }) =&gt; {
                let places;
                const bounds = refs.map.getBounds();
                const service = new google.maps.places.PlacesService(refs.map.context.__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);
                const request = {
                    bounds: bounds,
                    type: ['hotel']
                };
                service.nearbySearch(request, (results, status) =&gt; {
                    if (status == google.maps.places.PlacesServiceStatus.OK) {
                        console.log(results);
                        updatePlaces(results);
                    }
                })
            }
        }
    }),
)((props) =&gt; {
    return (
        &lt;GoogleMap
            onTilesLoaded={props.fetchPlaces}
            ref={props.onMapMounted}
            onBoundsChanged={props.fetchPlaces}
            defaultZoom={8}
            defaultCenter={{ lat: 51.508530, lng: -0.076132 }}
        &gt;
            {props.places &amp;&amp; props.places.map((place, i) =&gt;
                &lt;Marker key={i} position={{ lat: place.geometry.location.lat(), lng: place.geometry.location.lng() }} /&gt;
            )}
        &lt;/GoogleMap&gt;
    )
})

export default class MyFancyComponent extends React.PureComponent {
    render() {
        return (
            &lt;MyMapComponent /&gt;
        )
    }
}
</code></pre>

<p>I tried looking for a solution at Github issues, Google and here at StackOverflow, but couldn't find a solution yet. </p>

<p>How could I fix the errors, when changing (dragging) the location on the map?</p>

<p><a href=""https://i.stack.imgur.com/ET0WH.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ET0WH.png"" alt=""google map with markers""></a></p>
",""
"47924559","Immutable.js with React Pure Components","2","<p>I'm having some trouble using React <code>PureComponent</code>s with Immutable.js. Consider the following demo:</p>

<p><a href=""https://codepen.io/SandoCalrissian/pen/QaEmeX"" rel=""nofollow noreferrer"">https://codepen.io/SandoCalrissian/pen/QaEmeX</a></p>

<p>In it 2 components are rendered.  The first (<code>NoramlPure</code>) is a normal <code>PureComponent</code> while the second (<code>ImmutablePure</code>) is a normal <code>Component</code> with a custom <code>shouldComponentUpdate</code> that checks props for an <code>equals</code> method.  Both take a single Immutable <code>Map</code> as a prop which is re-formed on every render cycle.  Both also print a message to the console every time they re-render.</p>

<p>I then trigger two render cycles.</p>

<p>I'm expecting both to only render once.  <em>However</em>, the console shows the following:</p>

<pre><code>rendering
    rendering normal pure component
    rendering immutable pure component
rendering
    rendering normal pure component
</code></pre>

<p>My custom component works as expected, but the built in <code>PureComponent</code> renders both times (despite getting the same data).</p>

<p>Seeing as React links to Immutable.js <a href=""https://reactjs.org/docs/react-api.html#reactpurecomponent"" rel=""nofollow noreferrer"">in the documentation for <code>PureComponent</code></a> (and since they're both made by Facebook) I'd sort of expect the two to work together naturally, but as far as I can tell <code>PureComponent</code>s don't ever call any Immutable.js equality checkers.</p>

<p><strong>Is there any way to make <code>PureComponent</code>s work with Immutable.js objects?
  Or am I stuck using my <code>PureImmutable</code> component as a base-class across my entire project?</strong></p>
","@ShubhamKhatri It's in the CodePen I've linked above"
"47924559","Immutable.js with React Pure Components","2","<p>I'm having some trouble using React <code>PureComponent</code>s with Immutable.js. Consider the following demo:</p>

<p><a href=""https://codepen.io/SandoCalrissian/pen/QaEmeX"" rel=""nofollow noreferrer"">https://codepen.io/SandoCalrissian/pen/QaEmeX</a></p>

<p>In it 2 components are rendered.  The first (<code>NoramlPure</code>) is a normal <code>PureComponent</code> while the second (<code>ImmutablePure</code>) is a normal <code>Component</code> with a custom <code>shouldComponentUpdate</code> that checks props for an <code>equals</code> method.  Both take a single Immutable <code>Map</code> as a prop which is re-formed on every render cycle.  Both also print a message to the console every time they re-render.</p>

<p>I then trigger two render cycles.</p>

<p>I'm expecting both to only render once.  <em>However</em>, the console shows the following:</p>

<pre><code>rendering
    rendering normal pure component
    rendering immutable pure component
rendering
    rendering normal pure component
</code></pre>

<p>My custom component works as expected, but the built in <code>PureComponent</code> renders both times (despite getting the same data).</p>

<p>Seeing as React links to Immutable.js <a href=""https://reactjs.org/docs/react-api.html#reactpurecomponent"" rel=""nofollow noreferrer"">in the documentation for <code>PureComponent</code></a> (and since they're both made by Facebook) I'd sort of expect the two to work together naturally, but as far as I can tell <code>PureComponent</code>s don't ever call any Immutable.js equality checkers.</p>

<p><strong>Is there any way to make <code>PureComponent</code>s work with Immutable.js objects?
  Or am I stuck using my <code>PureImmutable</code> component as a base-class across my entire project?</strong></p>
","Pure component works with Immutable data, please add relevant code so that people can identify the problem"
"48018518","ERROR in ./~/react-native-vector-icons/lib/create-icon-set.js","0","<p>I am building a book library using React, Node ,MongoDB and Express. For executing the application I gave command ""npm run wp"" and I got the following error:</p>

<pre><code> ERROR in ./~/react-native-vector-icons/lib/create-icon-set.js
Module parse failed: C:\xampp\htdocs\U-Read\react-
frontend\node_modules\react-na
tive-vector-icons\lib\create-icon-set.js Unexpected token (35:21)
You may need an appropriate loader to handle this file type.
|
|   class Icon extends PureComponent {
|     static propTypes = {
|       name: IconNamePropType,
|       size: PropTypes.number,
@ ./~/react-native-vector-icons/MaterialIcons.js 6:0-50
@ ./assets/components/add-book/add-book.component.js
@ ./assets/components/index/index-container.js
@ ./assets/components/root.component.js
@ ./assets/app.js
@ multi react-hot-loader/patch webpack-dev-server/client?
http://localhost:8080
webpack/hot/only-dev-server ./assets/app.js
</code></pre>
",""
"48107900","React.Component and React.PureComponent show different behaviour","2","<p>I am adding runnable code snippets below. see the difference 
 First one is React.PureComponent version
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class App extends React.PureComponent {
 
  render() {
    console.log('re-render')
    return (
    &lt;div&gt;
     &lt;span&gt;I am parent&lt;/span&gt;
     {this.props.children}
    &lt;/div&gt;
    )
  }
}

  ReactDOM.render(
    &lt;App&gt;
      &lt;div&gt;
        I am the child
      &lt;/div&gt;
    &lt;/App&gt;,
    document.getElementById('app')
  )


//setTimeout(render, 1000)</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js""&gt;&lt;/script&gt;
&lt;div id=""app""&gt;&lt;/div&gt;</code></pre>
</div>
</div>

Second one is React.Component version</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class App extends React.Component {
  
  render() {
    console.log('re-render')
    return (
    &lt;div&gt;
     &lt;span&gt;I am parent&lt;/span&gt;
     {this.props.children}
    &lt;/div&gt;
    )
  }
}

  ReactDOM.render(
    &lt;App&gt;
      &lt;div&gt;
        I am the child
      &lt;/div&gt;
    &lt;/App&gt;,
    document.getElementById('app')
  )


//setTimeout(render, 1000)</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js""&gt;&lt;/script&gt;
&lt;div id=""app""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>

<p>Why the second one runs successfully, but not the first one?? I tried exploring for the reason, but didnot find any good reason</p>
","which  version of react ar you using , my fiddle has 15.1.0 version"
"48107900","React.Component and React.PureComponent show different behaviour","2","<p>I am adding runnable code snippets below. see the difference 
 First one is React.PureComponent version
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class App extends React.PureComponent {
 
  render() {
    console.log('re-render')
    return (
    &lt;div&gt;
     &lt;span&gt;I am parent&lt;/span&gt;
     {this.props.children}
    &lt;/div&gt;
    )
  }
}

  ReactDOM.render(
    &lt;App&gt;
      &lt;div&gt;
        I am the child
      &lt;/div&gt;
    &lt;/App&gt;,
    document.getElementById('app')
  )


//setTimeout(render, 1000)</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js""&gt;&lt;/script&gt;
&lt;div id=""app""&gt;&lt;/div&gt;</code></pre>
</div>
</div>

Second one is React.Component version</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class App extends React.Component {
  
  render() {
    console.log('re-render')
    return (
    &lt;div&gt;
     &lt;span&gt;I am parent&lt;/span&gt;
     {this.props.children}
    &lt;/div&gt;
    )
  }
}

  ReactDOM.render(
    &lt;App&gt;
      &lt;div&gt;
        I am the child
      &lt;/div&gt;
    &lt;/App&gt;,
    document.getElementById('app')
  )


//setTimeout(render, 1000)</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js""&gt;&lt;/script&gt;
&lt;div id=""app""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>

<p>Why the second one runs successfully, but not the first one?? I tried exploring for the reason, but didnot find any good reason</p>
","I just tried your first code in jsfiddle and it works :("
"48149432","export * and fat arrow functions not working in react-native","0","<p>I am using the <code>export * ...</code> and <code>someFunc = () =&gt; {}</code> in JS classes. However, for some reason they aren't working in react-native.</p>

<p>This is my action creator in <code>SomeActionFile.js</code>:</p>

<pre><code>export const userChangedSummary = (summaryText) =&gt; {
    return {
        type: 'SUMMARY_CHANGED',
        payload: summaryText
    };
};
</code></pre>

<p>Then in my <code>actions/index.js</code> I am doing this:</p>

<p><code>export * from './someDirectory/SomeActionFile';</code></p>

<p>In my Component I am simply calling the function in my action creator:</p>

<pre><code>    import { setUserCountry } from '../../actions';

    class SomeComponent extends PureComponent&lt;{}&gt; {
    summaryChanged = (summary) =&gt; {
            this.props.userChangedSummary(summary);
        };

renderYears = YearsFuture.map((item, i) =&gt; {
        return &lt;Picker.Item key={i} value={item} label={item}/&gt;
    });

     render() {
            return (

                                    &lt;Input
                                        placeholder={'About'}
                                        onChangeText={this.summaryChanged.bind(this)}
                                        value={this.props.userProfile.summary}
                                        maxLength={240}
                                        multiline={true}
                                    /&gt;

&lt;Picker style={{flex: 1,}}
                                        onValueChange={this.onValueToYearChange}
                                        selectedValue={this.props.educationToYear}&gt;
                                    {this.renderYears}
                                &lt;/Picker&gt;
            );
        }

    }

    export default connect(mapStateToProps, { setUserCountry})(SomeComponent);
</code></pre>

<p>this displays an error: <code>userChangedSummary is undefined</code></p>

<p>But when I import like this <code>import { setUserCountry } from '../../someDirectory/SomeActionFile';</code> It works. So I dont know whats wrong.</p>

<p>Also <code>renderYears also goes undefined</code></p>

<p>All this was working fine until yesterday. I dont know whats wrong now. :/</p>

<p>Any ideas???? Completely stuck here.</p>
",""
"48389324","Does it make a difference if you don't use a prop in your PureComponent render method?","1","<p>Say I have a PureComponent with a bunch of props. If I don't use every single prop in my render method, will it affect anything at all?</p>

<p>For instance, if I depend on <code>componentWillReceiveProps</code> being called for every single prop, even the ones that are not rendered...it will still be called, correct?</p>

<p>I can't imagine the React authors doing anything else... I can probably hunt down the code and take a peek myself and I will if I can't get a definitive answer here. Thanks.</p>

<p>NOTE: The reason I'm asking is because I'm wondering I see some code that is pulling unused variables from props <a href=""https://github.com/nkbt/react-debounce-input/blob/master/src/Component.js#L177"" rel=""nofollow noreferrer"">here</a>.</p>
","So, every prop key is being copied [here](https://github.com/nkbt/react-debounce-input/blob/master/src/Component.js#L185) anyway, so I don't see what the possible point could be."
"48565754","react-native prop type for text style","0","<p>i have component with a simple structure and a <code>&lt;Text&gt;</code> somewhere inside the tree for which i want to pass in a style. Which works perfectly but for the proptypes validation.</p>

<p>The basic setup is not much more than that</p>

<pre><code>export default class Component extends PureComponent {
    render() {
        return (&lt;View&gt;&lt;Text style={this.props.style}&gt;Some text&lt;/Text&gt;&lt;/view&gt;);
    }
}

Component.defaultProps = {
    style: null,
};

Component.propTypes = {
    style: ViewPropTypes.style,
};
</code></pre>

<p>The problem is that the ViewPropTypes.style does not contain i.e. <code>color</code> key. So providing a style with a color is invalid and produces a warning. I tried to import <code>TextStylePropTypes</code> as i found in <a href=""https://github.com/facebook/react-native/blob/master/Libraries/Text/TextStylePropTypes.js"" rel=""nofollow noreferrer"">https://github.com/facebook/react-native/blob/master/Libraries/Text/TextStylePropTypes.js</a> but it is undefined. </p>

<p>Any advice on what to do?</p>
",""
"48575511","eslint react PropTypes force shape in array map","0","<p>My index.jsx</p>

<pre><code>import { React } from 'react';
import PropTypes from 'prop-types';

class ListComponent extends React.PureComponent {
    render() {
        return (
            &lt;div&gt;
                {this.props.todos.map(({ id, randomProp }) =&gt; (
                    &lt;div key={id}&gt;{randomProp}&lt;/div&gt;
                ))}
            &lt;/div&gt;
        );
    }
}

ListComponent.propTypes = {
    todos: PropTypes.arrayOf(PropTypes.shape({
        id: PropTypes.number.isRequired,
        text: PropTypes.string.isRequired,
    }).isRequired).isRequired,
};
</code></pre>

<p>My .eslintrc</p>

<pre><code>{
  ""parser"": ""babel-eslint"",
  ""extends"": [
    ""eslint:recommended"",
    ""plugin:react/recommended""
  ]
}
</code></pre>

<p>I am newbie of propType</p>

<p>I have defined shape of array (<code>id</code> and <code>text</code>) in propTypes, but eslint does NOT give me error even I put <code>randomProp</code> when <code>.map</code> the <code>this.props.todos</code> array. </p>

<p>How do I force the <code>shape</code> in <code>arrayOf</code></p>

<p>PS: If I write <code>this.props.randomProp.map ...</code>, eslint will raise <code>randomProp is missing</code> error as I expected, so I am sure eslint with propType is at least working</p>
",""
"48810571","react-native, pass params to DrawerNavigator","0","<p>Actually i have this drawerNavigator</p>

<pre><code>const MyDrawerNavigator = DrawerNavigator(
  {...
    CreditsPage: { screen: CreditsPage },       
    TermsOfUsePage: { screen: TermsOfUsePage },
    LegalNoticePage: { screen: LegalNoticePage },        
  },
  {...}
);
</code></pre>

<p><code>CreditsPage</code>, <code>TermsOfUsePage</code>, <code>LegalNoticePage</code> components just displays a webView , so only the source url change. <code>StaticWebView</code> is a component i created to factorise the <code>webView</code> code but i have to copy past the following code inside multiples files, no clean. I change only the config in each file</p>

<pre><code>const config = {
  title: ""Credits"",
  icon: ""copyright"",
  url: ""https://mysite.fr/credits""
}
import React from ""react"";
import { View } from ""react-native"";
import IconFeather from ""react-native-vector-icons/Feather"";
import Icon from ""react-native-vector-icons/FontAwesome"";
import StaticWebView from ""project/src/page/StaticWebView.js""
import I18n from 'project/src/i18n/i18n';

export default class test extends React.PureComponent {
  static navigationOptions = ({ navigation }) =&gt; {
    return {
      title: I18n.t(config.title),
      headerLeft: &lt;View style={{ padding: 10, alignItems: ""center"" }}&gt;
        &lt;IconFeather name=""arrow-left"" size={25} color='black'
          onPress={() =&gt; { navigation.goBack(); navigation.navigate(""DrawerToggle""); }} /&gt;
      &lt;/View&gt;,
      drawerLabel: I18n.t(config.title),
      drawerIcon: ({ tintColor }) =&gt; &lt;Icon name={config.icon} size={20} color={tintColor} /&gt;
    };
  };
  render() {
    return (
      &lt;StaticWebView url={config.url} /&gt;
    )
  }
}
</code></pre>

<p>I cannot find any how to pass parameters to drawerNavigator. For example like this :</p>

<pre><code>const MyDrawerNavigator = DrawerNavigator(
  {...
    CreditsPage: { screen: staticWebView , config:{ url :""....""} },       
    TermsOfUsePage: { screen: staticWebView , config:{ url :""....""} }, 
    LegalNoticePage: { screen: staticWebView , config:{ url :""....""} },      
  },
  {...}
);
</code></pre>

<p>any tips ?</p>
",""
"48906259","How to forcefully unmount a component in react native?","4","<p>I'm using <a href=""https://reactnavigation.org/"" rel=""nofollow noreferrer""><strong><code>reactnavigation</code></strong></a> stackNavigtor as the root structure.</p>

<p>When my app loads, it initially mounts a component based on intialRouteName - which is good so far. However, when I open my slideMenu and navigate to another screen, the component that I was just in, is not unmounted and still renders at the back, even though I have successfully navigated.</p>

<p>Ofcourse I can use the <code>this.state({})</code> in my initial component to stop the render, but the issue is, I can't setup it in such a way that when I navigate to another screen, I'd prevent the render of the previous screen.</p>

<h1>AppNavigation.js</h1>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/*
 * LaunchScreen loads first
 * I then navigate to Profile via (this.props.navigate('OpenDrawer')).
 *  - This opens CustomComponent and inside that, I select Profile
 * When I navigate to Profile, The LaunchScreen is not unmounted
*/
export const SignedIn = StackNavigator({
  LaunchScreen: {
    screen: $LaunchScreen
  },
  Profile: {
    screen: $Profile
  },
  EditProfile: {
    screen: EditProfile
  },
  MyDoctors: {
    screen: $Doctors
  }
}, {
  headerMode: ""none"",
  mode: ""modal"",
  initialRouteName: 'LaunchScreen' // this is the component that loads
});

export const HomeNav = StackNavigator({
  Home: {
    screen: SignedIn,
    navigationOptions: {
      gesturesEnabled: false
    }
  }
}, {
  headerMode: ""none"",
  mode: ""modal"",
  initialRouteName: ""Home"", // we enter this route when the app loads.
});

const PrimaryNav = StackNavigator({
  SignedIn: {
    screen: HomeNav,
    navigationOptions: {
      gesturesEnabled: false
    }
  },
  SignedOut: {
    screen: SignedOut,
    navigationOptions: {
      gesturesEnabled: false
    }
  },
  Loading: {
    screen: Loading
  }
}, {
  headerMode: ""none"",
  mode: ""modal"",
  initialRouteName: ""Loading"",
});

export default PrimaryNav;</code></pre>
</div>
</div>
</p>

<h1>LaunchScreen.js</h1>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// ... Imports {}


export default class LaunchScreen extends PureComponent&lt;*, State&gt; {
  constructor(props) {
    super(props);
    this.state = {
      index: 0,
    };
  }

  componentDidMount() {
  };

_renderScene = ({ route }) =&gt; {
    return (
      &lt;SimplePage
        state           = {this.state}
        style           = {{ backgroundColor: 'white' }}
        type            = {this.state.type}
        updateIndex     = {this.updateIndex.bind(this)}

      /&gt;
    );
  };
  
  _renderHeader = props =&gt; {
  /*
   * ""this.props.navigation.navigate('DrawerOpen')"" opens the drawer from left side
   *
  */
    return (
      &lt;View&gt;
        &lt;View style={styles.headerContainer}&gt;
          &lt;TouchableHighlight onPress={() =&gt; this.props.navigation.navigate('DrawerOpen')} activeOpacity={1.0} underlayColor=""rgba(253,138,94,0)""&gt;
          &lt;/TouchableHighlight&gt;
        &lt;/View&gt;
      &lt;/View&gt;
    );
  };


  render() {
    return (
        &lt;TabViewAnimated
        style={[styles.container, this.props.style]}
        navigationState={this.state}
        renderScene={this._renderScene}
        renderHeader={this._renderHeader}
      /&gt;
    );
  }
}</code></pre>
</div>
</div>
</p>

<h1>What is the main question?</h1>

<p>I would like to know how I can unmount a component when I navigate to another screen.</p>
","In a stack navigation we keep pushing pages/views to the stack and those won't unmount until we move to another stack. So you can't unmount this way."
"48906259","How to forcefully unmount a component in react native?","4","<p>I'm using <a href=""https://reactnavigation.org/"" rel=""nofollow noreferrer""><strong><code>reactnavigation</code></strong></a> stackNavigtor as the root structure.</p>

<p>When my app loads, it initially mounts a component based on intialRouteName - which is good so far. However, when I open my slideMenu and navigate to another screen, the component that I was just in, is not unmounted and still renders at the back, even though I have successfully navigated.</p>

<p>Ofcourse I can use the <code>this.state({})</code> in my initial component to stop the render, but the issue is, I can't setup it in such a way that when I navigate to another screen, I'd prevent the render of the previous screen.</p>

<h1>AppNavigation.js</h1>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/*
 * LaunchScreen loads first
 * I then navigate to Profile via (this.props.navigate('OpenDrawer')).
 *  - This opens CustomComponent and inside that, I select Profile
 * When I navigate to Profile, The LaunchScreen is not unmounted
*/
export const SignedIn = StackNavigator({
  LaunchScreen: {
    screen: $LaunchScreen
  },
  Profile: {
    screen: $Profile
  },
  EditProfile: {
    screen: EditProfile
  },
  MyDoctors: {
    screen: $Doctors
  }
}, {
  headerMode: ""none"",
  mode: ""modal"",
  initialRouteName: 'LaunchScreen' // this is the component that loads
});

export const HomeNav = StackNavigator({
  Home: {
    screen: SignedIn,
    navigationOptions: {
      gesturesEnabled: false
    }
  }
}, {
  headerMode: ""none"",
  mode: ""modal"",
  initialRouteName: ""Home"", // we enter this route when the app loads.
});

const PrimaryNav = StackNavigator({
  SignedIn: {
    screen: HomeNav,
    navigationOptions: {
      gesturesEnabled: false
    }
  },
  SignedOut: {
    screen: SignedOut,
    navigationOptions: {
      gesturesEnabled: false
    }
  },
  Loading: {
    screen: Loading
  }
}, {
  headerMode: ""none"",
  mode: ""modal"",
  initialRouteName: ""Loading"",
});

export default PrimaryNav;</code></pre>
</div>
</div>
</p>

<h1>LaunchScreen.js</h1>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// ... Imports {}


export default class LaunchScreen extends PureComponent&lt;*, State&gt; {
  constructor(props) {
    super(props);
    this.state = {
      index: 0,
    };
  }

  componentDidMount() {
  };

_renderScene = ({ route }) =&gt; {
    return (
      &lt;SimplePage
        state           = {this.state}
        style           = {{ backgroundColor: 'white' }}
        type            = {this.state.type}
        updateIndex     = {this.updateIndex.bind(this)}

      /&gt;
    );
  };
  
  _renderHeader = props =&gt; {
  /*
   * ""this.props.navigation.navigate('DrawerOpen')"" opens the drawer from left side
   *
  */
    return (
      &lt;View&gt;
        &lt;View style={styles.headerContainer}&gt;
          &lt;TouchableHighlight onPress={() =&gt; this.props.navigation.navigate('DrawerOpen')} activeOpacity={1.0} underlayColor=""rgba(253,138,94,0)""&gt;
          &lt;/TouchableHighlight&gt;
        &lt;/View&gt;
      &lt;/View&gt;
    );
  };


  render() {
    return (
        &lt;TabViewAnimated
        style={[styles.container, this.props.style]}
        navigationState={this.state}
        renderScene={this._renderScene}
        renderHeader={this._renderHeader}
      /&gt;
    );
  }
}</code></pre>
</div>
</div>
</p>

<h1>What is the main question?</h1>

<p>I would like to know how I can unmount a component when I navigate to another screen.</p>
","Ah, I see, in that case, how can we create two different stacks? and link them? @Pavan"
"48906259","How to forcefully unmount a component in react native?","4","<p>I'm using <a href=""https://reactnavigation.org/"" rel=""nofollow noreferrer""><strong><code>reactnavigation</code></strong></a> stackNavigtor as the root structure.</p>

<p>When my app loads, it initially mounts a component based on intialRouteName - which is good so far. However, when I open my slideMenu and navigate to another screen, the component that I was just in, is not unmounted and still renders at the back, even though I have successfully navigated.</p>

<p>Ofcourse I can use the <code>this.state({})</code> in my initial component to stop the render, but the issue is, I can't setup it in such a way that when I navigate to another screen, I'd prevent the render of the previous screen.</p>

<h1>AppNavigation.js</h1>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/*
 * LaunchScreen loads first
 * I then navigate to Profile via (this.props.navigate('OpenDrawer')).
 *  - This opens CustomComponent and inside that, I select Profile
 * When I navigate to Profile, The LaunchScreen is not unmounted
*/
export const SignedIn = StackNavigator({
  LaunchScreen: {
    screen: $LaunchScreen
  },
  Profile: {
    screen: $Profile
  },
  EditProfile: {
    screen: EditProfile
  },
  MyDoctors: {
    screen: $Doctors
  }
}, {
  headerMode: ""none"",
  mode: ""modal"",
  initialRouteName: 'LaunchScreen' // this is the component that loads
});

export const HomeNav = StackNavigator({
  Home: {
    screen: SignedIn,
    navigationOptions: {
      gesturesEnabled: false
    }
  }
}, {
  headerMode: ""none"",
  mode: ""modal"",
  initialRouteName: ""Home"", // we enter this route when the app loads.
});

const PrimaryNav = StackNavigator({
  SignedIn: {
    screen: HomeNav,
    navigationOptions: {
      gesturesEnabled: false
    }
  },
  SignedOut: {
    screen: SignedOut,
    navigationOptions: {
      gesturesEnabled: false
    }
  },
  Loading: {
    screen: Loading
  }
}, {
  headerMode: ""none"",
  mode: ""modal"",
  initialRouteName: ""Loading"",
});

export default PrimaryNav;</code></pre>
</div>
</div>
</p>

<h1>LaunchScreen.js</h1>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// ... Imports {}


export default class LaunchScreen extends PureComponent&lt;*, State&gt; {
  constructor(props) {
    super(props);
    this.state = {
      index: 0,
    };
  }

  componentDidMount() {
  };

_renderScene = ({ route }) =&gt; {
    return (
      &lt;SimplePage
        state           = {this.state}
        style           = {{ backgroundColor: 'white' }}
        type            = {this.state.type}
        updateIndex     = {this.updateIndex.bind(this)}

      /&gt;
    );
  };
  
  _renderHeader = props =&gt; {
  /*
   * ""this.props.navigation.navigate('DrawerOpen')"" opens the drawer from left side
   *
  */
    return (
      &lt;View&gt;
        &lt;View style={styles.headerContainer}&gt;
          &lt;TouchableHighlight onPress={() =&gt; this.props.navigation.navigate('DrawerOpen')} activeOpacity={1.0} underlayColor=""rgba(253,138,94,0)""&gt;
          &lt;/TouchableHighlight&gt;
        &lt;/View&gt;
      &lt;/View&gt;
    );
  };


  render() {
    return (
        &lt;TabViewAnimated
        style={[styles.container, this.props.style]}
        navigationState={this.state}
        renderScene={this._renderScene}
        renderHeader={this._renderHeader}
      /&gt;
    );
  }
}</code></pre>
</div>
</div>
</p>

<h1>What is the main question?</h1>

<p>I would like to know how I can unmount a component when I navigate to another screen.</p>
","Because the initial component is rendering heavy content, and when I navigate to different screen, the rendered content from previous screen still exists and affects the performance heavily @Pavan"
"48906259","How to forcefully unmount a component in react native?","4","<p>I'm using <a href=""https://reactnavigation.org/"" rel=""nofollow noreferrer""><strong><code>reactnavigation</code></strong></a> stackNavigtor as the root structure.</p>

<p>When my app loads, it initially mounts a component based on intialRouteName - which is good so far. However, when I open my slideMenu and navigate to another screen, the component that I was just in, is not unmounted and still renders at the back, even though I have successfully navigated.</p>

<p>Ofcourse I can use the <code>this.state({})</code> in my initial component to stop the render, but the issue is, I can't setup it in such a way that when I navigate to another screen, I'd prevent the render of the previous screen.</p>

<h1>AppNavigation.js</h1>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/*
 * LaunchScreen loads first
 * I then navigate to Profile via (this.props.navigate('OpenDrawer')).
 *  - This opens CustomComponent and inside that, I select Profile
 * When I navigate to Profile, The LaunchScreen is not unmounted
*/
export const SignedIn = StackNavigator({
  LaunchScreen: {
    screen: $LaunchScreen
  },
  Profile: {
    screen: $Profile
  },
  EditProfile: {
    screen: EditProfile
  },
  MyDoctors: {
    screen: $Doctors
  }
}, {
  headerMode: ""none"",
  mode: ""modal"",
  initialRouteName: 'LaunchScreen' // this is the component that loads
});

export const HomeNav = StackNavigator({
  Home: {
    screen: SignedIn,
    navigationOptions: {
      gesturesEnabled: false
    }
  }
}, {
  headerMode: ""none"",
  mode: ""modal"",
  initialRouteName: ""Home"", // we enter this route when the app loads.
});

const PrimaryNav = StackNavigator({
  SignedIn: {
    screen: HomeNav,
    navigationOptions: {
      gesturesEnabled: false
    }
  },
  SignedOut: {
    screen: SignedOut,
    navigationOptions: {
      gesturesEnabled: false
    }
  },
  Loading: {
    screen: Loading
  }
}, {
  headerMode: ""none"",
  mode: ""modal"",
  initialRouteName: ""Loading"",
});

export default PrimaryNav;</code></pre>
</div>
</div>
</p>

<h1>LaunchScreen.js</h1>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// ... Imports {}


export default class LaunchScreen extends PureComponent&lt;*, State&gt; {
  constructor(props) {
    super(props);
    this.state = {
      index: 0,
    };
  }

  componentDidMount() {
  };

_renderScene = ({ route }) =&gt; {
    return (
      &lt;SimplePage
        state           = {this.state}
        style           = {{ backgroundColor: 'white' }}
        type            = {this.state.type}
        updateIndex     = {this.updateIndex.bind(this)}

      /&gt;
    );
  };
  
  _renderHeader = props =&gt; {
  /*
   * ""this.props.navigation.navigate('DrawerOpen')"" opens the drawer from left side
   *
  */
    return (
      &lt;View&gt;
        &lt;View style={styles.headerContainer}&gt;
          &lt;TouchableHighlight onPress={() =&gt; this.props.navigation.navigate('DrawerOpen')} activeOpacity={1.0} underlayColor=""rgba(253,138,94,0)""&gt;
          &lt;/TouchableHighlight&gt;
        &lt;/View&gt;
      &lt;/View&gt;
    );
  };


  render() {
    return (
        &lt;TabViewAnimated
        style={[styles.container, this.props.style]}
        navigationState={this.state}
        renderScene={this._renderScene}
        renderHeader={this._renderHeader}
      /&gt;
    );
  }
}</code></pre>
</div>
</div>
</p>

<h1>What is the main question?</h1>

<p>I would like to know how I can unmount a component when I navigate to another screen.</p>
","Your stack would contain the previous screen and it won't be unmounted. But why do you wanna unmount though?"
"49053136","Getting data from the react app.js into react chart.js","6","<p>I created the React application.</p>

<p>it <strong>index.js</strong> , it import data from result_data.json. </p>

<pre><code>import React from 'react';
import { render } from 'react-dom';
import anime from 'animejs';

import ReactApp from './App';
import Chart from './chart';
import obj from './result_data.json'

let getProperty = function (propertyName) {
    return obj[propertyName];
};

const data = obj;

const App = () =&gt; (
    &lt;ReactApp data={data} data2={obj} chart={(&lt;Chart/&gt;)}/&gt;
);

render(&lt;App /&gt;,document.getElementById('root'));    
</code></pre>

<p>it <strong>chart.js</strong> I connected this chart to my main project (App.js). 
but I can not get data from app.js for chart.js</p>

<pre><code>import { scaleOrdinal } from 'd3-scale';
import { arc, pie } from 'd3-shape';
import { shuffle } from 'd3-array';
import { easeExpOut } from 'd3-ease';
import sortBy from 'lodash/sortBy';
import Surface from 'docs/src/components/Surface';
import React, { PureComponent } from 'react';
import NodeGroup from 'react-move/NodeGroup';

const colors = scaleOrdinal()
  .range(['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c']);

const view = [1000, 550]; // [width, height]
const trbl = [10, 10, 10, 10]; // [top, right, bottom, left] margins

const dims = [ // Adjusted dimensions [width, height]
  view[0] - trbl[1] - trbl[3],
  view[1] - trbl[0] - trbl[2],
];

const mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];

const radius = (dims[1] / 2) * 0.70;

const pieLayout = pie()
  .value((d) =&gt; d.value)
  .sort(null);

const innerArcPath = arc()
  .innerRadius(radius * 0.4)
  .outerRadius(radius * 1.0);

const outerArcPath = arc()
  .innerRadius(radius * 1.2)
  .outerRadius(radius * 1.2);

function mid(d) {
  return Math.PI &gt; (d.startAngle + (d.endAngle - d.startAngle));
}

function getRandom(min, max) {
  return Math.floor(Math.random() * (max - (min + 1))) + min;
}

function getArcs() {
  const data = shuffle(mockData)
    .map(({ name }) =&gt; ({ name, value: getRandom(10, 100) }));

  return pieLayout(sortBy(data, (d) =&gt; d.name));
}

class Example extends PureComponent {
  state = {
    arcs: getArcs(),
  }

  update = (e) =&gt; {
    e.preventDefault();
    e.stopPropagation();

    this.setState(() =&gt; ({
      arcs: getArcs(),
    }));
  }

  render() {
    const { arcs } = this.state;

    return (
      &lt;div&gt;
        &lt;button onClick={this.update}&gt;
          Update
        &lt;/button&gt;
        &lt;Surface view={view} trbl={trbl}&gt;
          &lt;g transform={`translate(${dims[0] / 2}, ${dims[1] / 2})`}&gt;
            &lt;NodeGroup
              data={arcs}
              keyAccessor={(d) =&gt; d.data.name}

              start={({ startAngle }) =&gt; ({
                startAngle,
                endAngle: startAngle,
              })}

              enter={({ endAngle }) =&gt; ({
                endAngle: [endAngle],
                timing: { duration: 500, delay: 350, ease: easeExpOut },
              })}

              update={({ startAngle, endAngle }) =&gt; ({
                startAngle: [startAngle],
                endAngle: [endAngle],
                timing: { duration: 350, ease: easeExpOut },
              })}
            &gt;
              {(nodes) =&gt; {
                return (
                  &lt;g&gt;
                    {nodes.map(({ key, data, state }) =&gt; {
                      const p1 = outerArcPath.centroid(state);
                      const p2 = [
                        mid(state) ? p1[0] + (radius * 0.5) : p1[0] - (radius * 0.5),
                        p1[1],
                      ];
                      return (
                        &lt;g key={key}&gt;
                          &lt;path
                            d={innerArcPath(state)}
                            fill={colors(data.data.name)}
                            opacity={0.9}
                          /&gt;
                          &lt;text
                            dy=""4px""
                            fontSize=""12px""
                            transform={`translate(${p2.toString()})`}
                            textAnchor={mid(state) ? 'start' : 'end'}
                          &gt;{data.data.name}&lt;/text&gt;
                          &lt;polyline
                            fill=""none""
                            stroke=""rgba(127,127,127,0.5)""
                            points={`${innerArcPath.centroid(state)},${p1},${p2.toString()}`}
                          /&gt;
                        &lt;/g&gt;
                      );
                    })}
                  &lt;/g&gt;
                );
              }}
            &lt;/NodeGroup&gt;
          &lt;/g&gt;
        &lt;/Surface&gt;
      &lt;/div&gt;
    );
  }
}

export default Example;
</code></pre>

<p>Аnd it <strong>App.js</strong>. It my main project. It get data from index.js</p>

<pre><code>import React from 'react';
import {Group} from '@vx/group';
import {Tree} from '@vx/hierarchy';
import {LinearGradient} from '@vx/gradient';
import {hierarchy} from 'd3-hierarchy';
import {pointRadial} from 'd3-shape';
import NodeGroup from 'react-move/NodeGroup';
import Surface from './components/Surface';

const view = [1200, 750]; // [width, height]
const trbl = [10, 10, 30, 10]; // [top, right, bottom, left] margins

function findCollapsedParent(node) {
    if (!node.data.isExpanded) {
        return node;
    } else if (node.parent) {
        return findCollapsedParent(node.parent);
    } else {
        return null;
    }
}

function radialPoint(angle, radius) {
    const [x, y] = pointRadial(angle, radius);
    return {x, y};
}

export default class extends React.Component {

    render() {
        const {
            width = view[0],
            height = view[1] - 30,
            data,
            chart,
            margin = {
                top: 10,
                left: 10,
                right: 10,
                bottom: 30
            }
        } = this.props;

        const innerWidth = width - margin.left - margin.right;
        const innerHeight = height - margin.top - margin.bottom;

        let sizeWidth = 2 * Math.PI;
        let sizeHeight = Math.min(innerWidth, innerHeight) /2;
        let origin;

        origin = {
            x: innerWidth / 2,
            y: innerHeight / 2
        };

        if (width &lt; 10) return null;
        return (
            &lt;div&gt;                    

                &lt;div id={""chart""}&gt;
                    {this.getChart}
                &lt;/div&gt;

                &lt;Surface view={view} trbl={trbl}&gt;

                    &lt;LinearGradient id=""lg"" from=""#fd9b93"" to=""#fe6e9e""/&gt;
                    {/*&lt;rect width={width} height={height} rx={0} fill=""#232323""/&gt;*/}

                    &lt;Tree
                        top={margin.top}
                        left={margin.left}
                        root={hierarchy(data, d =&gt; (d.isExpanded ? d.children555 || d.children2 : null))}
                        size={[sizeWidth, sizeHeight]} 
                        separation={(a, b) =&gt; ((a.children === b.children) &amp;&amp; (a.parent === b.parent) ? 1 : 7) / a.depth }
                    &gt;

                        {({links, descendants}) =&gt; (
                            &lt;Group top={origin.y} left={origin.x}&gt;
                                &lt;NodeGroup
                                    data={links}
                                    keyAccessor={(d, i) =&gt;
                                        `${d.source.data}_${d.target.data.name}`}

                                    start={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            },
                                            target: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            }
                                        };
                                    }}

                                    enter={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            },

                                        };
                                    }}
                                    update={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            }
                                        };
                                    }}

                                    leave={({source, target}) =&gt; {
                                        const collapsedParent = findCollapsedParent(source);
                                        return {
                                            source: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            },
                                            target: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            }
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data, state}) =&gt; {
                                                return (
                                                    &lt;LinkRadialCurve
                                                        data={state}
                                                        stroke=""#2996D9""
                                                        strokeWidth=""1""
                                                        strokeDasharray=""4""
                                                        fill=""none""
                                                        key={key}
                                                    /&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;

                                &lt;NodeGroup
                                    data={descendants}
                                    keyAccessor={d =&gt; d.data.name}
                                    start={({parent}) =&gt; {
                                        const radialParent = radialPoint(parent ? parent.x : 0, parent ? parent.y : 0);
                                        return {
                                            x: radialParent.x,
                                            y: radialParent.y,
                                            opacity: 0
                                        };
                                    }}
                                    enter={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1],
                                            timing: {duration: 600, delay: 200}
                                        };
                                    }}
                                    update={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1]
                                        };
                                    }}
                                    leave={({parent}) =&gt; {
                                        const collapsedParent = findCollapsedParent(parent);
                                        const radialParent = radialPoint(collapsedParent.data.x0, collapsedParent.data.y0);
                                        return {
                                            x: [radialParent.x],
                                            y: [radialParent.y],
                                            opacity: [0]
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data: node, state}) =&gt; {
                                                const width = 50;
                                                const height = 30;
                                                const textLength = node.data.name;

                                                return (
                                                    &lt;Group
                                                        top={state.y}
                                                        left={state.x}
                                                        key={key}
                                                        opacity={state.opacity}
                                                    &gt;
                                                        {node.data.isExpanded &amp;&amp; node.depth !== 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={'28'}
                                                                fill={'transparent'}
                                                                stroke={'#2996D9'}
                                                                strokeWidth={2.5}
                                                                strokeOpacity={0.9}
                                                            /&gt;
                                                        )}

                                                        {node.depth === 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={(textLength &gt; 15) ? ('32') : ('39')}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT ****
                                                                x={-width / 2}
                                                                fill={'#2996D9'}
                                                                stroke='#03c0dc'
                                                                strokeDasharray={""3""}
                                                                strokeWidth={3}

                                                                onClick={() =&gt; {
                                                                    console.log('node.onClick', node);
                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;
                                                                    this.forceUpdate();
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {node.data.children2 &amp;&amp; (
                                                            &lt;circle
                                                                r={'22'}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT
                                                                x={-width / 2}  //--FOR RECT
                                                                fill={
                                                                    node.data.name === 'Skills' ? ('#DA244D') : node.data.name === 'Experience' ?
                                                                        ('#F3B63C') : node.data.name === 'Education' ? ('#64B86C') : ('#F3B63C')
                                                                }
                                                                strokeOpacity={!node.data.children2 ? 0.6 : 1}
                                                                rx={!node.data.children2 ? 10 : 0} //--FOR RECT
                                                                onClick={() =&gt; {

                                                                    if (node.data.name === 'Experience') {

                                                                        this.getChart = !chart;
                                                                    }

                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;

                                                                    this.forceUpdate();
                                                                    console.log(node);
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {!node.data.children2 &amp;&amp; !node.data.children555 &amp;&amp; (
                                                            &lt;a&gt;
                                                                &lt;rect
                                                                    height={height}
                                                                    width={width}
                                                                    y={-height / 2} //--FOR RECT
                                                                    x={-width / 2}  //--FOR RECT
                                                                    fill={node.data.children ? '#232323' : '#232323'}
                                                                    stroke={'#2996D9'}
                                                                    strokeWidth={2}
                                                                    strokeDasharray={!node.data.children555 ? '2,2' : '0'}
                                                                    // strokeOpacity={!node.data.children ? 0.6 : 1}
                                                                    rx={!node.data.children555 ? 8 : 0}

                                                                    onClick={() =&gt; {

                                                                        this.getChart = chart;
                                                                        this.forceUpdate();
                                                                        console.log(node);
                                                                        console.log(this.mockData);
                                                                    }}
                                                                    &gt;

                                                                &lt;/rect&gt;
                                                            &lt;/a&gt;
                                                        )}

                                                        &lt;title&gt; {node.data.name} &lt;/title&gt;

                                                        {node.data.isExpanded || !node.data.children2 || (
                                                            &lt;text
                                                                dy={
                                                                    (textLength.length &gt; 5) ? ('-5') : ('.33em')
                                                                }
                                                                x={
                                                                    (textLength.length &lt; 5) ? ('0') : (textLength.length &lt; 30) ? ('30') : ('-33')
                                                                }

                                                                fontSize={11}
                                                                fontFamily=""Arial""
                                                                textAnchor={(textLength.length &lt; 5) ? ('middle') : (textLength.length &lt; 30) ? ('start') : ('end')}
                                                                style={{pointerEvents: 'none'}}
                                                                fill={
                                                                    node.depth === 0 ? ('white') : node.children555 ? ('white') : ('white')
                                                                }
                                                            &gt;
                                                                &lt;tspan&gt; {node.data.name}&lt;/tspan&gt;
                                                            &lt;/text&gt;

                                                        )}

                                                    &lt;/Group&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;
                            &lt;/Group&gt;
                        )}
                    &lt;/Tree&gt;
                &lt;/Surface&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>In <strong>chart.js</strong> </p>

<pre><code>mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];
</code></pre>

<p>But I need to get data from <strong>App.js</strong></p>

<p>How to solve this problem?
Thanks.</p>
","can you put clear description of problem."
"49053136","Getting data from the react app.js into react chart.js","6","<p>I created the React application.</p>

<p>it <strong>index.js</strong> , it import data from result_data.json. </p>

<pre><code>import React from 'react';
import { render } from 'react-dom';
import anime from 'animejs';

import ReactApp from './App';
import Chart from './chart';
import obj from './result_data.json'

let getProperty = function (propertyName) {
    return obj[propertyName];
};

const data = obj;

const App = () =&gt; (
    &lt;ReactApp data={data} data2={obj} chart={(&lt;Chart/&gt;)}/&gt;
);

render(&lt;App /&gt;,document.getElementById('root'));    
</code></pre>

<p>it <strong>chart.js</strong> I connected this chart to my main project (App.js). 
but I can not get data from app.js for chart.js</p>

<pre><code>import { scaleOrdinal } from 'd3-scale';
import { arc, pie } from 'd3-shape';
import { shuffle } from 'd3-array';
import { easeExpOut } from 'd3-ease';
import sortBy from 'lodash/sortBy';
import Surface from 'docs/src/components/Surface';
import React, { PureComponent } from 'react';
import NodeGroup from 'react-move/NodeGroup';

const colors = scaleOrdinal()
  .range(['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c']);

const view = [1000, 550]; // [width, height]
const trbl = [10, 10, 10, 10]; // [top, right, bottom, left] margins

const dims = [ // Adjusted dimensions [width, height]
  view[0] - trbl[1] - trbl[3],
  view[1] - trbl[0] - trbl[2],
];

const mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];

const radius = (dims[1] / 2) * 0.70;

const pieLayout = pie()
  .value((d) =&gt; d.value)
  .sort(null);

const innerArcPath = arc()
  .innerRadius(radius * 0.4)
  .outerRadius(radius * 1.0);

const outerArcPath = arc()
  .innerRadius(radius * 1.2)
  .outerRadius(radius * 1.2);

function mid(d) {
  return Math.PI &gt; (d.startAngle + (d.endAngle - d.startAngle));
}

function getRandom(min, max) {
  return Math.floor(Math.random() * (max - (min + 1))) + min;
}

function getArcs() {
  const data = shuffle(mockData)
    .map(({ name }) =&gt; ({ name, value: getRandom(10, 100) }));

  return pieLayout(sortBy(data, (d) =&gt; d.name));
}

class Example extends PureComponent {
  state = {
    arcs: getArcs(),
  }

  update = (e) =&gt; {
    e.preventDefault();
    e.stopPropagation();

    this.setState(() =&gt; ({
      arcs: getArcs(),
    }));
  }

  render() {
    const { arcs } = this.state;

    return (
      &lt;div&gt;
        &lt;button onClick={this.update}&gt;
          Update
        &lt;/button&gt;
        &lt;Surface view={view} trbl={trbl}&gt;
          &lt;g transform={`translate(${dims[0] / 2}, ${dims[1] / 2})`}&gt;
            &lt;NodeGroup
              data={arcs}
              keyAccessor={(d) =&gt; d.data.name}

              start={({ startAngle }) =&gt; ({
                startAngle,
                endAngle: startAngle,
              })}

              enter={({ endAngle }) =&gt; ({
                endAngle: [endAngle],
                timing: { duration: 500, delay: 350, ease: easeExpOut },
              })}

              update={({ startAngle, endAngle }) =&gt; ({
                startAngle: [startAngle],
                endAngle: [endAngle],
                timing: { duration: 350, ease: easeExpOut },
              })}
            &gt;
              {(nodes) =&gt; {
                return (
                  &lt;g&gt;
                    {nodes.map(({ key, data, state }) =&gt; {
                      const p1 = outerArcPath.centroid(state);
                      const p2 = [
                        mid(state) ? p1[0] + (radius * 0.5) : p1[0] - (radius * 0.5),
                        p1[1],
                      ];
                      return (
                        &lt;g key={key}&gt;
                          &lt;path
                            d={innerArcPath(state)}
                            fill={colors(data.data.name)}
                            opacity={0.9}
                          /&gt;
                          &lt;text
                            dy=""4px""
                            fontSize=""12px""
                            transform={`translate(${p2.toString()})`}
                            textAnchor={mid(state) ? 'start' : 'end'}
                          &gt;{data.data.name}&lt;/text&gt;
                          &lt;polyline
                            fill=""none""
                            stroke=""rgba(127,127,127,0.5)""
                            points={`${innerArcPath.centroid(state)},${p1},${p2.toString()}`}
                          /&gt;
                        &lt;/g&gt;
                      );
                    })}
                  &lt;/g&gt;
                );
              }}
            &lt;/NodeGroup&gt;
          &lt;/g&gt;
        &lt;/Surface&gt;
      &lt;/div&gt;
    );
  }
}

export default Example;
</code></pre>

<p>Аnd it <strong>App.js</strong>. It my main project. It get data from index.js</p>

<pre><code>import React from 'react';
import {Group} from '@vx/group';
import {Tree} from '@vx/hierarchy';
import {LinearGradient} from '@vx/gradient';
import {hierarchy} from 'd3-hierarchy';
import {pointRadial} from 'd3-shape';
import NodeGroup from 'react-move/NodeGroup';
import Surface from './components/Surface';

const view = [1200, 750]; // [width, height]
const trbl = [10, 10, 30, 10]; // [top, right, bottom, left] margins

function findCollapsedParent(node) {
    if (!node.data.isExpanded) {
        return node;
    } else if (node.parent) {
        return findCollapsedParent(node.parent);
    } else {
        return null;
    }
}

function radialPoint(angle, radius) {
    const [x, y] = pointRadial(angle, radius);
    return {x, y};
}

export default class extends React.Component {

    render() {
        const {
            width = view[0],
            height = view[1] - 30,
            data,
            chart,
            margin = {
                top: 10,
                left: 10,
                right: 10,
                bottom: 30
            }
        } = this.props;

        const innerWidth = width - margin.left - margin.right;
        const innerHeight = height - margin.top - margin.bottom;

        let sizeWidth = 2 * Math.PI;
        let sizeHeight = Math.min(innerWidth, innerHeight) /2;
        let origin;

        origin = {
            x: innerWidth / 2,
            y: innerHeight / 2
        };

        if (width &lt; 10) return null;
        return (
            &lt;div&gt;                    

                &lt;div id={""chart""}&gt;
                    {this.getChart}
                &lt;/div&gt;

                &lt;Surface view={view} trbl={trbl}&gt;

                    &lt;LinearGradient id=""lg"" from=""#fd9b93"" to=""#fe6e9e""/&gt;
                    {/*&lt;rect width={width} height={height} rx={0} fill=""#232323""/&gt;*/}

                    &lt;Tree
                        top={margin.top}
                        left={margin.left}
                        root={hierarchy(data, d =&gt; (d.isExpanded ? d.children555 || d.children2 : null))}
                        size={[sizeWidth, sizeHeight]} 
                        separation={(a, b) =&gt; ((a.children === b.children) &amp;&amp; (a.parent === b.parent) ? 1 : 7) / a.depth }
                    &gt;

                        {({links, descendants}) =&gt; (
                            &lt;Group top={origin.y} left={origin.x}&gt;
                                &lt;NodeGroup
                                    data={links}
                                    keyAccessor={(d, i) =&gt;
                                        `${d.source.data}_${d.target.data.name}`}

                                    start={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            },
                                            target: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            }
                                        };
                                    }}

                                    enter={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            },

                                        };
                                    }}
                                    update={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            }
                                        };
                                    }}

                                    leave={({source, target}) =&gt; {
                                        const collapsedParent = findCollapsedParent(source);
                                        return {
                                            source: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            },
                                            target: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            }
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data, state}) =&gt; {
                                                return (
                                                    &lt;LinkRadialCurve
                                                        data={state}
                                                        stroke=""#2996D9""
                                                        strokeWidth=""1""
                                                        strokeDasharray=""4""
                                                        fill=""none""
                                                        key={key}
                                                    /&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;

                                &lt;NodeGroup
                                    data={descendants}
                                    keyAccessor={d =&gt; d.data.name}
                                    start={({parent}) =&gt; {
                                        const radialParent = radialPoint(parent ? parent.x : 0, parent ? parent.y : 0);
                                        return {
                                            x: radialParent.x,
                                            y: radialParent.y,
                                            opacity: 0
                                        };
                                    }}
                                    enter={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1],
                                            timing: {duration: 600, delay: 200}
                                        };
                                    }}
                                    update={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1]
                                        };
                                    }}
                                    leave={({parent}) =&gt; {
                                        const collapsedParent = findCollapsedParent(parent);
                                        const radialParent = radialPoint(collapsedParent.data.x0, collapsedParent.data.y0);
                                        return {
                                            x: [radialParent.x],
                                            y: [radialParent.y],
                                            opacity: [0]
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data: node, state}) =&gt; {
                                                const width = 50;
                                                const height = 30;
                                                const textLength = node.data.name;

                                                return (
                                                    &lt;Group
                                                        top={state.y}
                                                        left={state.x}
                                                        key={key}
                                                        opacity={state.opacity}
                                                    &gt;
                                                        {node.data.isExpanded &amp;&amp; node.depth !== 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={'28'}
                                                                fill={'transparent'}
                                                                stroke={'#2996D9'}
                                                                strokeWidth={2.5}
                                                                strokeOpacity={0.9}
                                                            /&gt;
                                                        )}

                                                        {node.depth === 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={(textLength &gt; 15) ? ('32') : ('39')}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT ****
                                                                x={-width / 2}
                                                                fill={'#2996D9'}
                                                                stroke='#03c0dc'
                                                                strokeDasharray={""3""}
                                                                strokeWidth={3}

                                                                onClick={() =&gt; {
                                                                    console.log('node.onClick', node);
                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;
                                                                    this.forceUpdate();
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {node.data.children2 &amp;&amp; (
                                                            &lt;circle
                                                                r={'22'}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT
                                                                x={-width / 2}  //--FOR RECT
                                                                fill={
                                                                    node.data.name === 'Skills' ? ('#DA244D') : node.data.name === 'Experience' ?
                                                                        ('#F3B63C') : node.data.name === 'Education' ? ('#64B86C') : ('#F3B63C')
                                                                }
                                                                strokeOpacity={!node.data.children2 ? 0.6 : 1}
                                                                rx={!node.data.children2 ? 10 : 0} //--FOR RECT
                                                                onClick={() =&gt; {

                                                                    if (node.data.name === 'Experience') {

                                                                        this.getChart = !chart;
                                                                    }

                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;

                                                                    this.forceUpdate();
                                                                    console.log(node);
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {!node.data.children2 &amp;&amp; !node.data.children555 &amp;&amp; (
                                                            &lt;a&gt;
                                                                &lt;rect
                                                                    height={height}
                                                                    width={width}
                                                                    y={-height / 2} //--FOR RECT
                                                                    x={-width / 2}  //--FOR RECT
                                                                    fill={node.data.children ? '#232323' : '#232323'}
                                                                    stroke={'#2996D9'}
                                                                    strokeWidth={2}
                                                                    strokeDasharray={!node.data.children555 ? '2,2' : '0'}
                                                                    // strokeOpacity={!node.data.children ? 0.6 : 1}
                                                                    rx={!node.data.children555 ? 8 : 0}

                                                                    onClick={() =&gt; {

                                                                        this.getChart = chart;
                                                                        this.forceUpdate();
                                                                        console.log(node);
                                                                        console.log(this.mockData);
                                                                    }}
                                                                    &gt;

                                                                &lt;/rect&gt;
                                                            &lt;/a&gt;
                                                        )}

                                                        &lt;title&gt; {node.data.name} &lt;/title&gt;

                                                        {node.data.isExpanded || !node.data.children2 || (
                                                            &lt;text
                                                                dy={
                                                                    (textLength.length &gt; 5) ? ('-5') : ('.33em')
                                                                }
                                                                x={
                                                                    (textLength.length &lt; 5) ? ('0') : (textLength.length &lt; 30) ? ('30') : ('-33')
                                                                }

                                                                fontSize={11}
                                                                fontFamily=""Arial""
                                                                textAnchor={(textLength.length &lt; 5) ? ('middle') : (textLength.length &lt; 30) ? ('start') : ('end')}
                                                                style={{pointerEvents: 'none'}}
                                                                fill={
                                                                    node.depth === 0 ? ('white') : node.children555 ? ('white') : ('white')
                                                                }
                                                            &gt;
                                                                &lt;tspan&gt; {node.data.name}&lt;/tspan&gt;
                                                            &lt;/text&gt;

                                                        )}

                                                    &lt;/Group&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;
                            &lt;/Group&gt;
                        )}
                    &lt;/Tree&gt;
                &lt;/Surface&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>In <strong>chart.js</strong> </p>

<pre><code>mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];
</code></pre>

<p>But I need to get data from <strong>App.js</strong></p>

<p>How to solve this problem?
Thanks.</p>
","@javed thanks, good idea I’ll go to work and try. thanks."
"49053136","Getting data from the react app.js into react chart.js","6","<p>I created the React application.</p>

<p>it <strong>index.js</strong> , it import data from result_data.json. </p>

<pre><code>import React from 'react';
import { render } from 'react-dom';
import anime from 'animejs';

import ReactApp from './App';
import Chart from './chart';
import obj from './result_data.json'

let getProperty = function (propertyName) {
    return obj[propertyName];
};

const data = obj;

const App = () =&gt; (
    &lt;ReactApp data={data} data2={obj} chart={(&lt;Chart/&gt;)}/&gt;
);

render(&lt;App /&gt;,document.getElementById('root'));    
</code></pre>

<p>it <strong>chart.js</strong> I connected this chart to my main project (App.js). 
but I can not get data from app.js for chart.js</p>

<pre><code>import { scaleOrdinal } from 'd3-scale';
import { arc, pie } from 'd3-shape';
import { shuffle } from 'd3-array';
import { easeExpOut } from 'd3-ease';
import sortBy from 'lodash/sortBy';
import Surface from 'docs/src/components/Surface';
import React, { PureComponent } from 'react';
import NodeGroup from 'react-move/NodeGroup';

const colors = scaleOrdinal()
  .range(['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c']);

const view = [1000, 550]; // [width, height]
const trbl = [10, 10, 10, 10]; // [top, right, bottom, left] margins

const dims = [ // Adjusted dimensions [width, height]
  view[0] - trbl[1] - trbl[3],
  view[1] - trbl[0] - trbl[2],
];

const mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];

const radius = (dims[1] / 2) * 0.70;

const pieLayout = pie()
  .value((d) =&gt; d.value)
  .sort(null);

const innerArcPath = arc()
  .innerRadius(radius * 0.4)
  .outerRadius(radius * 1.0);

const outerArcPath = arc()
  .innerRadius(radius * 1.2)
  .outerRadius(radius * 1.2);

function mid(d) {
  return Math.PI &gt; (d.startAngle + (d.endAngle - d.startAngle));
}

function getRandom(min, max) {
  return Math.floor(Math.random() * (max - (min + 1))) + min;
}

function getArcs() {
  const data = shuffle(mockData)
    .map(({ name }) =&gt; ({ name, value: getRandom(10, 100) }));

  return pieLayout(sortBy(data, (d) =&gt; d.name));
}

class Example extends PureComponent {
  state = {
    arcs: getArcs(),
  }

  update = (e) =&gt; {
    e.preventDefault();
    e.stopPropagation();

    this.setState(() =&gt; ({
      arcs: getArcs(),
    }));
  }

  render() {
    const { arcs } = this.state;

    return (
      &lt;div&gt;
        &lt;button onClick={this.update}&gt;
          Update
        &lt;/button&gt;
        &lt;Surface view={view} trbl={trbl}&gt;
          &lt;g transform={`translate(${dims[0] / 2}, ${dims[1] / 2})`}&gt;
            &lt;NodeGroup
              data={arcs}
              keyAccessor={(d) =&gt; d.data.name}

              start={({ startAngle }) =&gt; ({
                startAngle,
                endAngle: startAngle,
              })}

              enter={({ endAngle }) =&gt; ({
                endAngle: [endAngle],
                timing: { duration: 500, delay: 350, ease: easeExpOut },
              })}

              update={({ startAngle, endAngle }) =&gt; ({
                startAngle: [startAngle],
                endAngle: [endAngle],
                timing: { duration: 350, ease: easeExpOut },
              })}
            &gt;
              {(nodes) =&gt; {
                return (
                  &lt;g&gt;
                    {nodes.map(({ key, data, state }) =&gt; {
                      const p1 = outerArcPath.centroid(state);
                      const p2 = [
                        mid(state) ? p1[0] + (radius * 0.5) : p1[0] - (radius * 0.5),
                        p1[1],
                      ];
                      return (
                        &lt;g key={key}&gt;
                          &lt;path
                            d={innerArcPath(state)}
                            fill={colors(data.data.name)}
                            opacity={0.9}
                          /&gt;
                          &lt;text
                            dy=""4px""
                            fontSize=""12px""
                            transform={`translate(${p2.toString()})`}
                            textAnchor={mid(state) ? 'start' : 'end'}
                          &gt;{data.data.name}&lt;/text&gt;
                          &lt;polyline
                            fill=""none""
                            stroke=""rgba(127,127,127,0.5)""
                            points={`${innerArcPath.centroid(state)},${p1},${p2.toString()}`}
                          /&gt;
                        &lt;/g&gt;
                      );
                    })}
                  &lt;/g&gt;
                );
              }}
            &lt;/NodeGroup&gt;
          &lt;/g&gt;
        &lt;/Surface&gt;
      &lt;/div&gt;
    );
  }
}

export default Example;
</code></pre>

<p>Аnd it <strong>App.js</strong>. It my main project. It get data from index.js</p>

<pre><code>import React from 'react';
import {Group} from '@vx/group';
import {Tree} from '@vx/hierarchy';
import {LinearGradient} from '@vx/gradient';
import {hierarchy} from 'd3-hierarchy';
import {pointRadial} from 'd3-shape';
import NodeGroup from 'react-move/NodeGroup';
import Surface from './components/Surface';

const view = [1200, 750]; // [width, height]
const trbl = [10, 10, 30, 10]; // [top, right, bottom, left] margins

function findCollapsedParent(node) {
    if (!node.data.isExpanded) {
        return node;
    } else if (node.parent) {
        return findCollapsedParent(node.parent);
    } else {
        return null;
    }
}

function radialPoint(angle, radius) {
    const [x, y] = pointRadial(angle, radius);
    return {x, y};
}

export default class extends React.Component {

    render() {
        const {
            width = view[0],
            height = view[1] - 30,
            data,
            chart,
            margin = {
                top: 10,
                left: 10,
                right: 10,
                bottom: 30
            }
        } = this.props;

        const innerWidth = width - margin.left - margin.right;
        const innerHeight = height - margin.top - margin.bottom;

        let sizeWidth = 2 * Math.PI;
        let sizeHeight = Math.min(innerWidth, innerHeight) /2;
        let origin;

        origin = {
            x: innerWidth / 2,
            y: innerHeight / 2
        };

        if (width &lt; 10) return null;
        return (
            &lt;div&gt;                    

                &lt;div id={""chart""}&gt;
                    {this.getChart}
                &lt;/div&gt;

                &lt;Surface view={view} trbl={trbl}&gt;

                    &lt;LinearGradient id=""lg"" from=""#fd9b93"" to=""#fe6e9e""/&gt;
                    {/*&lt;rect width={width} height={height} rx={0} fill=""#232323""/&gt;*/}

                    &lt;Tree
                        top={margin.top}
                        left={margin.left}
                        root={hierarchy(data, d =&gt; (d.isExpanded ? d.children555 || d.children2 : null))}
                        size={[sizeWidth, sizeHeight]} 
                        separation={(a, b) =&gt; ((a.children === b.children) &amp;&amp; (a.parent === b.parent) ? 1 : 7) / a.depth }
                    &gt;

                        {({links, descendants}) =&gt; (
                            &lt;Group top={origin.y} left={origin.x}&gt;
                                &lt;NodeGroup
                                    data={links}
                                    keyAccessor={(d, i) =&gt;
                                        `${d.source.data}_${d.target.data.name}`}

                                    start={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            },
                                            target: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            }
                                        };
                                    }}

                                    enter={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            },

                                        };
                                    }}
                                    update={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            }
                                        };
                                    }}

                                    leave={({source, target}) =&gt; {
                                        const collapsedParent = findCollapsedParent(source);
                                        return {
                                            source: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            },
                                            target: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            }
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data, state}) =&gt; {
                                                return (
                                                    &lt;LinkRadialCurve
                                                        data={state}
                                                        stroke=""#2996D9""
                                                        strokeWidth=""1""
                                                        strokeDasharray=""4""
                                                        fill=""none""
                                                        key={key}
                                                    /&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;

                                &lt;NodeGroup
                                    data={descendants}
                                    keyAccessor={d =&gt; d.data.name}
                                    start={({parent}) =&gt; {
                                        const radialParent = radialPoint(parent ? parent.x : 0, parent ? parent.y : 0);
                                        return {
                                            x: radialParent.x,
                                            y: radialParent.y,
                                            opacity: 0
                                        };
                                    }}
                                    enter={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1],
                                            timing: {duration: 600, delay: 200}
                                        };
                                    }}
                                    update={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1]
                                        };
                                    }}
                                    leave={({parent}) =&gt; {
                                        const collapsedParent = findCollapsedParent(parent);
                                        const radialParent = radialPoint(collapsedParent.data.x0, collapsedParent.data.y0);
                                        return {
                                            x: [radialParent.x],
                                            y: [radialParent.y],
                                            opacity: [0]
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data: node, state}) =&gt; {
                                                const width = 50;
                                                const height = 30;
                                                const textLength = node.data.name;

                                                return (
                                                    &lt;Group
                                                        top={state.y}
                                                        left={state.x}
                                                        key={key}
                                                        opacity={state.opacity}
                                                    &gt;
                                                        {node.data.isExpanded &amp;&amp; node.depth !== 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={'28'}
                                                                fill={'transparent'}
                                                                stroke={'#2996D9'}
                                                                strokeWidth={2.5}
                                                                strokeOpacity={0.9}
                                                            /&gt;
                                                        )}

                                                        {node.depth === 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={(textLength &gt; 15) ? ('32') : ('39')}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT ****
                                                                x={-width / 2}
                                                                fill={'#2996D9'}
                                                                stroke='#03c0dc'
                                                                strokeDasharray={""3""}
                                                                strokeWidth={3}

                                                                onClick={() =&gt; {
                                                                    console.log('node.onClick', node);
                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;
                                                                    this.forceUpdate();
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {node.data.children2 &amp;&amp; (
                                                            &lt;circle
                                                                r={'22'}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT
                                                                x={-width / 2}  //--FOR RECT
                                                                fill={
                                                                    node.data.name === 'Skills' ? ('#DA244D') : node.data.name === 'Experience' ?
                                                                        ('#F3B63C') : node.data.name === 'Education' ? ('#64B86C') : ('#F3B63C')
                                                                }
                                                                strokeOpacity={!node.data.children2 ? 0.6 : 1}
                                                                rx={!node.data.children2 ? 10 : 0} //--FOR RECT
                                                                onClick={() =&gt; {

                                                                    if (node.data.name === 'Experience') {

                                                                        this.getChart = !chart;
                                                                    }

                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;

                                                                    this.forceUpdate();
                                                                    console.log(node);
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {!node.data.children2 &amp;&amp; !node.data.children555 &amp;&amp; (
                                                            &lt;a&gt;
                                                                &lt;rect
                                                                    height={height}
                                                                    width={width}
                                                                    y={-height / 2} //--FOR RECT
                                                                    x={-width / 2}  //--FOR RECT
                                                                    fill={node.data.children ? '#232323' : '#232323'}
                                                                    stroke={'#2996D9'}
                                                                    strokeWidth={2}
                                                                    strokeDasharray={!node.data.children555 ? '2,2' : '0'}
                                                                    // strokeOpacity={!node.data.children ? 0.6 : 1}
                                                                    rx={!node.data.children555 ? 8 : 0}

                                                                    onClick={() =&gt; {

                                                                        this.getChart = chart;
                                                                        this.forceUpdate();
                                                                        console.log(node);
                                                                        console.log(this.mockData);
                                                                    }}
                                                                    &gt;

                                                                &lt;/rect&gt;
                                                            &lt;/a&gt;
                                                        )}

                                                        &lt;title&gt; {node.data.name} &lt;/title&gt;

                                                        {node.data.isExpanded || !node.data.children2 || (
                                                            &lt;text
                                                                dy={
                                                                    (textLength.length &gt; 5) ? ('-5') : ('.33em')
                                                                }
                                                                x={
                                                                    (textLength.length &lt; 5) ? ('0') : (textLength.length &lt; 30) ? ('30') : ('-33')
                                                                }

                                                                fontSize={11}
                                                                fontFamily=""Arial""
                                                                textAnchor={(textLength.length &lt; 5) ? ('middle') : (textLength.length &lt; 30) ? ('start') : ('end')}
                                                                style={{pointerEvents: 'none'}}
                                                                fill={
                                                                    node.depth === 0 ? ('white') : node.children555 ? ('white') : ('white')
                                                                }
                                                            &gt;
                                                                &lt;tspan&gt; {node.data.name}&lt;/tspan&gt;
                                                            &lt;/text&gt;

                                                        )}

                                                    &lt;/Group&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;
                            &lt;/Group&gt;
                        )}
                    &lt;/Tree&gt;
                &lt;/Surface&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>In <strong>chart.js</strong> </p>

<pre><code>mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];
</code></pre>

<p>But I need to get data from <strong>App.js</strong></p>

<p>How to solve this problem?
Thanks.</p>
","Thanks. I changed my question. please see it clearly?"
"49053136","Getting data from the react app.js into react chart.js","6","<p>I created the React application.</p>

<p>it <strong>index.js</strong> , it import data from result_data.json. </p>

<pre><code>import React from 'react';
import { render } from 'react-dom';
import anime from 'animejs';

import ReactApp from './App';
import Chart from './chart';
import obj from './result_data.json'

let getProperty = function (propertyName) {
    return obj[propertyName];
};

const data = obj;

const App = () =&gt; (
    &lt;ReactApp data={data} data2={obj} chart={(&lt;Chart/&gt;)}/&gt;
);

render(&lt;App /&gt;,document.getElementById('root'));    
</code></pre>

<p>it <strong>chart.js</strong> I connected this chart to my main project (App.js). 
but I can not get data from app.js for chart.js</p>

<pre><code>import { scaleOrdinal } from 'd3-scale';
import { arc, pie } from 'd3-shape';
import { shuffle } from 'd3-array';
import { easeExpOut } from 'd3-ease';
import sortBy from 'lodash/sortBy';
import Surface from 'docs/src/components/Surface';
import React, { PureComponent } from 'react';
import NodeGroup from 'react-move/NodeGroup';

const colors = scaleOrdinal()
  .range(['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c']);

const view = [1000, 550]; // [width, height]
const trbl = [10, 10, 10, 10]; // [top, right, bottom, left] margins

const dims = [ // Adjusted dimensions [width, height]
  view[0] - trbl[1] - trbl[3],
  view[1] - trbl[0] - trbl[2],
];

const mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];

const radius = (dims[1] / 2) * 0.70;

const pieLayout = pie()
  .value((d) =&gt; d.value)
  .sort(null);

const innerArcPath = arc()
  .innerRadius(radius * 0.4)
  .outerRadius(radius * 1.0);

const outerArcPath = arc()
  .innerRadius(radius * 1.2)
  .outerRadius(radius * 1.2);

function mid(d) {
  return Math.PI &gt; (d.startAngle + (d.endAngle - d.startAngle));
}

function getRandom(min, max) {
  return Math.floor(Math.random() * (max - (min + 1))) + min;
}

function getArcs() {
  const data = shuffle(mockData)
    .map(({ name }) =&gt; ({ name, value: getRandom(10, 100) }));

  return pieLayout(sortBy(data, (d) =&gt; d.name));
}

class Example extends PureComponent {
  state = {
    arcs: getArcs(),
  }

  update = (e) =&gt; {
    e.preventDefault();
    e.stopPropagation();

    this.setState(() =&gt; ({
      arcs: getArcs(),
    }));
  }

  render() {
    const { arcs } = this.state;

    return (
      &lt;div&gt;
        &lt;button onClick={this.update}&gt;
          Update
        &lt;/button&gt;
        &lt;Surface view={view} trbl={trbl}&gt;
          &lt;g transform={`translate(${dims[0] / 2}, ${dims[1] / 2})`}&gt;
            &lt;NodeGroup
              data={arcs}
              keyAccessor={(d) =&gt; d.data.name}

              start={({ startAngle }) =&gt; ({
                startAngle,
                endAngle: startAngle,
              })}

              enter={({ endAngle }) =&gt; ({
                endAngle: [endAngle],
                timing: { duration: 500, delay: 350, ease: easeExpOut },
              })}

              update={({ startAngle, endAngle }) =&gt; ({
                startAngle: [startAngle],
                endAngle: [endAngle],
                timing: { duration: 350, ease: easeExpOut },
              })}
            &gt;
              {(nodes) =&gt; {
                return (
                  &lt;g&gt;
                    {nodes.map(({ key, data, state }) =&gt; {
                      const p1 = outerArcPath.centroid(state);
                      const p2 = [
                        mid(state) ? p1[0] + (radius * 0.5) : p1[0] - (radius * 0.5),
                        p1[1],
                      ];
                      return (
                        &lt;g key={key}&gt;
                          &lt;path
                            d={innerArcPath(state)}
                            fill={colors(data.data.name)}
                            opacity={0.9}
                          /&gt;
                          &lt;text
                            dy=""4px""
                            fontSize=""12px""
                            transform={`translate(${p2.toString()})`}
                            textAnchor={mid(state) ? 'start' : 'end'}
                          &gt;{data.data.name}&lt;/text&gt;
                          &lt;polyline
                            fill=""none""
                            stroke=""rgba(127,127,127,0.5)""
                            points={`${innerArcPath.centroid(state)},${p1},${p2.toString()}`}
                          /&gt;
                        &lt;/g&gt;
                      );
                    })}
                  &lt;/g&gt;
                );
              }}
            &lt;/NodeGroup&gt;
          &lt;/g&gt;
        &lt;/Surface&gt;
      &lt;/div&gt;
    );
  }
}

export default Example;
</code></pre>

<p>Аnd it <strong>App.js</strong>. It my main project. It get data from index.js</p>

<pre><code>import React from 'react';
import {Group} from '@vx/group';
import {Tree} from '@vx/hierarchy';
import {LinearGradient} from '@vx/gradient';
import {hierarchy} from 'd3-hierarchy';
import {pointRadial} from 'd3-shape';
import NodeGroup from 'react-move/NodeGroup';
import Surface from './components/Surface';

const view = [1200, 750]; // [width, height]
const trbl = [10, 10, 30, 10]; // [top, right, bottom, left] margins

function findCollapsedParent(node) {
    if (!node.data.isExpanded) {
        return node;
    } else if (node.parent) {
        return findCollapsedParent(node.parent);
    } else {
        return null;
    }
}

function radialPoint(angle, radius) {
    const [x, y] = pointRadial(angle, radius);
    return {x, y};
}

export default class extends React.Component {

    render() {
        const {
            width = view[0],
            height = view[1] - 30,
            data,
            chart,
            margin = {
                top: 10,
                left: 10,
                right: 10,
                bottom: 30
            }
        } = this.props;

        const innerWidth = width - margin.left - margin.right;
        const innerHeight = height - margin.top - margin.bottom;

        let sizeWidth = 2 * Math.PI;
        let sizeHeight = Math.min(innerWidth, innerHeight) /2;
        let origin;

        origin = {
            x: innerWidth / 2,
            y: innerHeight / 2
        };

        if (width &lt; 10) return null;
        return (
            &lt;div&gt;                    

                &lt;div id={""chart""}&gt;
                    {this.getChart}
                &lt;/div&gt;

                &lt;Surface view={view} trbl={trbl}&gt;

                    &lt;LinearGradient id=""lg"" from=""#fd9b93"" to=""#fe6e9e""/&gt;
                    {/*&lt;rect width={width} height={height} rx={0} fill=""#232323""/&gt;*/}

                    &lt;Tree
                        top={margin.top}
                        left={margin.left}
                        root={hierarchy(data, d =&gt; (d.isExpanded ? d.children555 || d.children2 : null))}
                        size={[sizeWidth, sizeHeight]} 
                        separation={(a, b) =&gt; ((a.children === b.children) &amp;&amp; (a.parent === b.parent) ? 1 : 7) / a.depth }
                    &gt;

                        {({links, descendants}) =&gt; (
                            &lt;Group top={origin.y} left={origin.x}&gt;
                                &lt;NodeGroup
                                    data={links}
                                    keyAccessor={(d, i) =&gt;
                                        `${d.source.data}_${d.target.data.name}`}

                                    start={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            },
                                            target: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            }
                                        };
                                    }}

                                    enter={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            },

                                        };
                                    }}
                                    update={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            }
                                        };
                                    }}

                                    leave={({source, target}) =&gt; {
                                        const collapsedParent = findCollapsedParent(source);
                                        return {
                                            source: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            },
                                            target: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            }
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data, state}) =&gt; {
                                                return (
                                                    &lt;LinkRadialCurve
                                                        data={state}
                                                        stroke=""#2996D9""
                                                        strokeWidth=""1""
                                                        strokeDasharray=""4""
                                                        fill=""none""
                                                        key={key}
                                                    /&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;

                                &lt;NodeGroup
                                    data={descendants}
                                    keyAccessor={d =&gt; d.data.name}
                                    start={({parent}) =&gt; {
                                        const radialParent = radialPoint(parent ? parent.x : 0, parent ? parent.y : 0);
                                        return {
                                            x: radialParent.x,
                                            y: radialParent.y,
                                            opacity: 0
                                        };
                                    }}
                                    enter={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1],
                                            timing: {duration: 600, delay: 200}
                                        };
                                    }}
                                    update={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1]
                                        };
                                    }}
                                    leave={({parent}) =&gt; {
                                        const collapsedParent = findCollapsedParent(parent);
                                        const radialParent = radialPoint(collapsedParent.data.x0, collapsedParent.data.y0);
                                        return {
                                            x: [radialParent.x],
                                            y: [radialParent.y],
                                            opacity: [0]
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data: node, state}) =&gt; {
                                                const width = 50;
                                                const height = 30;
                                                const textLength = node.data.name;

                                                return (
                                                    &lt;Group
                                                        top={state.y}
                                                        left={state.x}
                                                        key={key}
                                                        opacity={state.opacity}
                                                    &gt;
                                                        {node.data.isExpanded &amp;&amp; node.depth !== 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={'28'}
                                                                fill={'transparent'}
                                                                stroke={'#2996D9'}
                                                                strokeWidth={2.5}
                                                                strokeOpacity={0.9}
                                                            /&gt;
                                                        )}

                                                        {node.depth === 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={(textLength &gt; 15) ? ('32') : ('39')}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT ****
                                                                x={-width / 2}
                                                                fill={'#2996D9'}
                                                                stroke='#03c0dc'
                                                                strokeDasharray={""3""}
                                                                strokeWidth={3}

                                                                onClick={() =&gt; {
                                                                    console.log('node.onClick', node);
                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;
                                                                    this.forceUpdate();
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {node.data.children2 &amp;&amp; (
                                                            &lt;circle
                                                                r={'22'}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT
                                                                x={-width / 2}  //--FOR RECT
                                                                fill={
                                                                    node.data.name === 'Skills' ? ('#DA244D') : node.data.name === 'Experience' ?
                                                                        ('#F3B63C') : node.data.name === 'Education' ? ('#64B86C') : ('#F3B63C')
                                                                }
                                                                strokeOpacity={!node.data.children2 ? 0.6 : 1}
                                                                rx={!node.data.children2 ? 10 : 0} //--FOR RECT
                                                                onClick={() =&gt; {

                                                                    if (node.data.name === 'Experience') {

                                                                        this.getChart = !chart;
                                                                    }

                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;

                                                                    this.forceUpdate();
                                                                    console.log(node);
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {!node.data.children2 &amp;&amp; !node.data.children555 &amp;&amp; (
                                                            &lt;a&gt;
                                                                &lt;rect
                                                                    height={height}
                                                                    width={width}
                                                                    y={-height / 2} //--FOR RECT
                                                                    x={-width / 2}  //--FOR RECT
                                                                    fill={node.data.children ? '#232323' : '#232323'}
                                                                    stroke={'#2996D9'}
                                                                    strokeWidth={2}
                                                                    strokeDasharray={!node.data.children555 ? '2,2' : '0'}
                                                                    // strokeOpacity={!node.data.children ? 0.6 : 1}
                                                                    rx={!node.data.children555 ? 8 : 0}

                                                                    onClick={() =&gt; {

                                                                        this.getChart = chart;
                                                                        this.forceUpdate();
                                                                        console.log(node);
                                                                        console.log(this.mockData);
                                                                    }}
                                                                    &gt;

                                                                &lt;/rect&gt;
                                                            &lt;/a&gt;
                                                        )}

                                                        &lt;title&gt; {node.data.name} &lt;/title&gt;

                                                        {node.data.isExpanded || !node.data.children2 || (
                                                            &lt;text
                                                                dy={
                                                                    (textLength.length &gt; 5) ? ('-5') : ('.33em')
                                                                }
                                                                x={
                                                                    (textLength.length &lt; 5) ? ('0') : (textLength.length &lt; 30) ? ('30') : ('-33')
                                                                }

                                                                fontSize={11}
                                                                fontFamily=""Arial""
                                                                textAnchor={(textLength.length &lt; 5) ? ('middle') : (textLength.length &lt; 30) ? ('start') : ('end')}
                                                                style={{pointerEvents: 'none'}}
                                                                fill={
                                                                    node.depth === 0 ? ('white') : node.children555 ? ('white') : ('white')
                                                                }
                                                            &gt;
                                                                &lt;tspan&gt; {node.data.name}&lt;/tspan&gt;
                                                            &lt;/text&gt;

                                                        )}

                                                    &lt;/Group&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;
                            &lt;/Group&gt;
                        )}
                    &lt;/Tree&gt;
                &lt;/Surface&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>In <strong>chart.js</strong> </p>

<pre><code>mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];
</code></pre>

<p>But I need to get data from <strong>App.js</strong></p>

<p>How to solve this problem?
Thanks.</p>
","@javed Yes, I’m trying that mockData took the data from App.js."
"49053136","Getting data from the react app.js into react chart.js","6","<p>I created the React application.</p>

<p>it <strong>index.js</strong> , it import data from result_data.json. </p>

<pre><code>import React from 'react';
import { render } from 'react-dom';
import anime from 'animejs';

import ReactApp from './App';
import Chart from './chart';
import obj from './result_data.json'

let getProperty = function (propertyName) {
    return obj[propertyName];
};

const data = obj;

const App = () =&gt; (
    &lt;ReactApp data={data} data2={obj} chart={(&lt;Chart/&gt;)}/&gt;
);

render(&lt;App /&gt;,document.getElementById('root'));    
</code></pre>

<p>it <strong>chart.js</strong> I connected this chart to my main project (App.js). 
but I can not get data from app.js for chart.js</p>

<pre><code>import { scaleOrdinal } from 'd3-scale';
import { arc, pie } from 'd3-shape';
import { shuffle } from 'd3-array';
import { easeExpOut } from 'd3-ease';
import sortBy from 'lodash/sortBy';
import Surface from 'docs/src/components/Surface';
import React, { PureComponent } from 'react';
import NodeGroup from 'react-move/NodeGroup';

const colors = scaleOrdinal()
  .range(['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c']);

const view = [1000, 550]; // [width, height]
const trbl = [10, 10, 10, 10]; // [top, right, bottom, left] margins

const dims = [ // Adjusted dimensions [width, height]
  view[0] - trbl[1] - trbl[3],
  view[1] - trbl[0] - trbl[2],
];

const mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];

const radius = (dims[1] / 2) * 0.70;

const pieLayout = pie()
  .value((d) =&gt; d.value)
  .sort(null);

const innerArcPath = arc()
  .innerRadius(radius * 0.4)
  .outerRadius(radius * 1.0);

const outerArcPath = arc()
  .innerRadius(radius * 1.2)
  .outerRadius(radius * 1.2);

function mid(d) {
  return Math.PI &gt; (d.startAngle + (d.endAngle - d.startAngle));
}

function getRandom(min, max) {
  return Math.floor(Math.random() * (max - (min + 1))) + min;
}

function getArcs() {
  const data = shuffle(mockData)
    .map(({ name }) =&gt; ({ name, value: getRandom(10, 100) }));

  return pieLayout(sortBy(data, (d) =&gt; d.name));
}

class Example extends PureComponent {
  state = {
    arcs: getArcs(),
  }

  update = (e) =&gt; {
    e.preventDefault();
    e.stopPropagation();

    this.setState(() =&gt; ({
      arcs: getArcs(),
    }));
  }

  render() {
    const { arcs } = this.state;

    return (
      &lt;div&gt;
        &lt;button onClick={this.update}&gt;
          Update
        &lt;/button&gt;
        &lt;Surface view={view} trbl={trbl}&gt;
          &lt;g transform={`translate(${dims[0] / 2}, ${dims[1] / 2})`}&gt;
            &lt;NodeGroup
              data={arcs}
              keyAccessor={(d) =&gt; d.data.name}

              start={({ startAngle }) =&gt; ({
                startAngle,
                endAngle: startAngle,
              })}

              enter={({ endAngle }) =&gt; ({
                endAngle: [endAngle],
                timing: { duration: 500, delay: 350, ease: easeExpOut },
              })}

              update={({ startAngle, endAngle }) =&gt; ({
                startAngle: [startAngle],
                endAngle: [endAngle],
                timing: { duration: 350, ease: easeExpOut },
              })}
            &gt;
              {(nodes) =&gt; {
                return (
                  &lt;g&gt;
                    {nodes.map(({ key, data, state }) =&gt; {
                      const p1 = outerArcPath.centroid(state);
                      const p2 = [
                        mid(state) ? p1[0] + (radius * 0.5) : p1[0] - (radius * 0.5),
                        p1[1],
                      ];
                      return (
                        &lt;g key={key}&gt;
                          &lt;path
                            d={innerArcPath(state)}
                            fill={colors(data.data.name)}
                            opacity={0.9}
                          /&gt;
                          &lt;text
                            dy=""4px""
                            fontSize=""12px""
                            transform={`translate(${p2.toString()})`}
                            textAnchor={mid(state) ? 'start' : 'end'}
                          &gt;{data.data.name}&lt;/text&gt;
                          &lt;polyline
                            fill=""none""
                            stroke=""rgba(127,127,127,0.5)""
                            points={`${innerArcPath.centroid(state)},${p1},${p2.toString()}`}
                          /&gt;
                        &lt;/g&gt;
                      );
                    })}
                  &lt;/g&gt;
                );
              }}
            &lt;/NodeGroup&gt;
          &lt;/g&gt;
        &lt;/Surface&gt;
      &lt;/div&gt;
    );
  }
}

export default Example;
</code></pre>

<p>Аnd it <strong>App.js</strong>. It my main project. It get data from index.js</p>

<pre><code>import React from 'react';
import {Group} from '@vx/group';
import {Tree} from '@vx/hierarchy';
import {LinearGradient} from '@vx/gradient';
import {hierarchy} from 'd3-hierarchy';
import {pointRadial} from 'd3-shape';
import NodeGroup from 'react-move/NodeGroup';
import Surface from './components/Surface';

const view = [1200, 750]; // [width, height]
const trbl = [10, 10, 30, 10]; // [top, right, bottom, left] margins

function findCollapsedParent(node) {
    if (!node.data.isExpanded) {
        return node;
    } else if (node.parent) {
        return findCollapsedParent(node.parent);
    } else {
        return null;
    }
}

function radialPoint(angle, radius) {
    const [x, y] = pointRadial(angle, radius);
    return {x, y};
}

export default class extends React.Component {

    render() {
        const {
            width = view[0],
            height = view[1] - 30,
            data,
            chart,
            margin = {
                top: 10,
                left: 10,
                right: 10,
                bottom: 30
            }
        } = this.props;

        const innerWidth = width - margin.left - margin.right;
        const innerHeight = height - margin.top - margin.bottom;

        let sizeWidth = 2 * Math.PI;
        let sizeHeight = Math.min(innerWidth, innerHeight) /2;
        let origin;

        origin = {
            x: innerWidth / 2,
            y: innerHeight / 2
        };

        if (width &lt; 10) return null;
        return (
            &lt;div&gt;                    

                &lt;div id={""chart""}&gt;
                    {this.getChart}
                &lt;/div&gt;

                &lt;Surface view={view} trbl={trbl}&gt;

                    &lt;LinearGradient id=""lg"" from=""#fd9b93"" to=""#fe6e9e""/&gt;
                    {/*&lt;rect width={width} height={height} rx={0} fill=""#232323""/&gt;*/}

                    &lt;Tree
                        top={margin.top}
                        left={margin.left}
                        root={hierarchy(data, d =&gt; (d.isExpanded ? d.children555 || d.children2 : null))}
                        size={[sizeWidth, sizeHeight]} 
                        separation={(a, b) =&gt; ((a.children === b.children) &amp;&amp; (a.parent === b.parent) ? 1 : 7) / a.depth }
                    &gt;

                        {({links, descendants}) =&gt; (
                            &lt;Group top={origin.y} left={origin.x}&gt;
                                &lt;NodeGroup
                                    data={links}
                                    keyAccessor={(d, i) =&gt;
                                        `${d.source.data}_${d.target.data.name}`}

                                    start={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            },
                                            target: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            }
                                        };
                                    }}

                                    enter={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            },

                                        };
                                    }}
                                    update={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            }
                                        };
                                    }}

                                    leave={({source, target}) =&gt; {
                                        const collapsedParent = findCollapsedParent(source);
                                        return {
                                            source: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            },
                                            target: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            }
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data, state}) =&gt; {
                                                return (
                                                    &lt;LinkRadialCurve
                                                        data={state}
                                                        stroke=""#2996D9""
                                                        strokeWidth=""1""
                                                        strokeDasharray=""4""
                                                        fill=""none""
                                                        key={key}
                                                    /&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;

                                &lt;NodeGroup
                                    data={descendants}
                                    keyAccessor={d =&gt; d.data.name}
                                    start={({parent}) =&gt; {
                                        const radialParent = radialPoint(parent ? parent.x : 0, parent ? parent.y : 0);
                                        return {
                                            x: radialParent.x,
                                            y: radialParent.y,
                                            opacity: 0
                                        };
                                    }}
                                    enter={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1],
                                            timing: {duration: 600, delay: 200}
                                        };
                                    }}
                                    update={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1]
                                        };
                                    }}
                                    leave={({parent}) =&gt; {
                                        const collapsedParent = findCollapsedParent(parent);
                                        const radialParent = radialPoint(collapsedParent.data.x0, collapsedParent.data.y0);
                                        return {
                                            x: [radialParent.x],
                                            y: [radialParent.y],
                                            opacity: [0]
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data: node, state}) =&gt; {
                                                const width = 50;
                                                const height = 30;
                                                const textLength = node.data.name;

                                                return (
                                                    &lt;Group
                                                        top={state.y}
                                                        left={state.x}
                                                        key={key}
                                                        opacity={state.opacity}
                                                    &gt;
                                                        {node.data.isExpanded &amp;&amp; node.depth !== 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={'28'}
                                                                fill={'transparent'}
                                                                stroke={'#2996D9'}
                                                                strokeWidth={2.5}
                                                                strokeOpacity={0.9}
                                                            /&gt;
                                                        )}

                                                        {node.depth === 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={(textLength &gt; 15) ? ('32') : ('39')}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT ****
                                                                x={-width / 2}
                                                                fill={'#2996D9'}
                                                                stroke='#03c0dc'
                                                                strokeDasharray={""3""}
                                                                strokeWidth={3}

                                                                onClick={() =&gt; {
                                                                    console.log('node.onClick', node);
                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;
                                                                    this.forceUpdate();
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {node.data.children2 &amp;&amp; (
                                                            &lt;circle
                                                                r={'22'}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT
                                                                x={-width / 2}  //--FOR RECT
                                                                fill={
                                                                    node.data.name === 'Skills' ? ('#DA244D') : node.data.name === 'Experience' ?
                                                                        ('#F3B63C') : node.data.name === 'Education' ? ('#64B86C') : ('#F3B63C')
                                                                }
                                                                strokeOpacity={!node.data.children2 ? 0.6 : 1}
                                                                rx={!node.data.children2 ? 10 : 0} //--FOR RECT
                                                                onClick={() =&gt; {

                                                                    if (node.data.name === 'Experience') {

                                                                        this.getChart = !chart;
                                                                    }

                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;

                                                                    this.forceUpdate();
                                                                    console.log(node);
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {!node.data.children2 &amp;&amp; !node.data.children555 &amp;&amp; (
                                                            &lt;a&gt;
                                                                &lt;rect
                                                                    height={height}
                                                                    width={width}
                                                                    y={-height / 2} //--FOR RECT
                                                                    x={-width / 2}  //--FOR RECT
                                                                    fill={node.data.children ? '#232323' : '#232323'}
                                                                    stroke={'#2996D9'}
                                                                    strokeWidth={2}
                                                                    strokeDasharray={!node.data.children555 ? '2,2' : '0'}
                                                                    // strokeOpacity={!node.data.children ? 0.6 : 1}
                                                                    rx={!node.data.children555 ? 8 : 0}

                                                                    onClick={() =&gt; {

                                                                        this.getChart = chart;
                                                                        this.forceUpdate();
                                                                        console.log(node);
                                                                        console.log(this.mockData);
                                                                    }}
                                                                    &gt;

                                                                &lt;/rect&gt;
                                                            &lt;/a&gt;
                                                        )}

                                                        &lt;title&gt; {node.data.name} &lt;/title&gt;

                                                        {node.data.isExpanded || !node.data.children2 || (
                                                            &lt;text
                                                                dy={
                                                                    (textLength.length &gt; 5) ? ('-5') : ('.33em')
                                                                }
                                                                x={
                                                                    (textLength.length &lt; 5) ? ('0') : (textLength.length &lt; 30) ? ('30') : ('-33')
                                                                }

                                                                fontSize={11}
                                                                fontFamily=""Arial""
                                                                textAnchor={(textLength.length &lt; 5) ? ('middle') : (textLength.length &lt; 30) ? ('start') : ('end')}
                                                                style={{pointerEvents: 'none'}}
                                                                fill={
                                                                    node.depth === 0 ? ('white') : node.children555 ? ('white') : ('white')
                                                                }
                                                            &gt;
                                                                &lt;tspan&gt; {node.data.name}&lt;/tspan&gt;
                                                            &lt;/text&gt;

                                                        )}

                                                    &lt;/Group&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;
                            &lt;/Group&gt;
                        )}
                    &lt;/Tree&gt;
                &lt;/Surface&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>In <strong>chart.js</strong> </p>

<pre><code>mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];
</code></pre>

<p>But I need to get data from <strong>App.js</strong></p>

<p>How to solve this problem?
Thanks.</p>
","export mockData = [yourData] in App.js, and in Chart.js import {mockData} from './App.js' check example https://stackblitz.com/edit/react-6l7kyq"
"49053136","Getting data from the react app.js into react chart.js","6","<p>I created the React application.</p>

<p>it <strong>index.js</strong> , it import data from result_data.json. </p>

<pre><code>import React from 'react';
import { render } from 'react-dom';
import anime from 'animejs';

import ReactApp from './App';
import Chart from './chart';
import obj from './result_data.json'

let getProperty = function (propertyName) {
    return obj[propertyName];
};

const data = obj;

const App = () =&gt; (
    &lt;ReactApp data={data} data2={obj} chart={(&lt;Chart/&gt;)}/&gt;
);

render(&lt;App /&gt;,document.getElementById('root'));    
</code></pre>

<p>it <strong>chart.js</strong> I connected this chart to my main project (App.js). 
but I can not get data from app.js for chart.js</p>

<pre><code>import { scaleOrdinal } from 'd3-scale';
import { arc, pie } from 'd3-shape';
import { shuffle } from 'd3-array';
import { easeExpOut } from 'd3-ease';
import sortBy from 'lodash/sortBy';
import Surface from 'docs/src/components/Surface';
import React, { PureComponent } from 'react';
import NodeGroup from 'react-move/NodeGroup';

const colors = scaleOrdinal()
  .range(['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c']);

const view = [1000, 550]; // [width, height]
const trbl = [10, 10, 10, 10]; // [top, right, bottom, left] margins

const dims = [ // Adjusted dimensions [width, height]
  view[0] - trbl[1] - trbl[3],
  view[1] - trbl[0] - trbl[2],
];

const mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];

const radius = (dims[1] / 2) * 0.70;

const pieLayout = pie()
  .value((d) =&gt; d.value)
  .sort(null);

const innerArcPath = arc()
  .innerRadius(radius * 0.4)
  .outerRadius(radius * 1.0);

const outerArcPath = arc()
  .innerRadius(radius * 1.2)
  .outerRadius(radius * 1.2);

function mid(d) {
  return Math.PI &gt; (d.startAngle + (d.endAngle - d.startAngle));
}

function getRandom(min, max) {
  return Math.floor(Math.random() * (max - (min + 1))) + min;
}

function getArcs() {
  const data = shuffle(mockData)
    .map(({ name }) =&gt; ({ name, value: getRandom(10, 100) }));

  return pieLayout(sortBy(data, (d) =&gt; d.name));
}

class Example extends PureComponent {
  state = {
    arcs: getArcs(),
  }

  update = (e) =&gt; {
    e.preventDefault();
    e.stopPropagation();

    this.setState(() =&gt; ({
      arcs: getArcs(),
    }));
  }

  render() {
    const { arcs } = this.state;

    return (
      &lt;div&gt;
        &lt;button onClick={this.update}&gt;
          Update
        &lt;/button&gt;
        &lt;Surface view={view} trbl={trbl}&gt;
          &lt;g transform={`translate(${dims[0] / 2}, ${dims[1] / 2})`}&gt;
            &lt;NodeGroup
              data={arcs}
              keyAccessor={(d) =&gt; d.data.name}

              start={({ startAngle }) =&gt; ({
                startAngle,
                endAngle: startAngle,
              })}

              enter={({ endAngle }) =&gt; ({
                endAngle: [endAngle],
                timing: { duration: 500, delay: 350, ease: easeExpOut },
              })}

              update={({ startAngle, endAngle }) =&gt; ({
                startAngle: [startAngle],
                endAngle: [endAngle],
                timing: { duration: 350, ease: easeExpOut },
              })}
            &gt;
              {(nodes) =&gt; {
                return (
                  &lt;g&gt;
                    {nodes.map(({ key, data, state }) =&gt; {
                      const p1 = outerArcPath.centroid(state);
                      const p2 = [
                        mid(state) ? p1[0] + (radius * 0.5) : p1[0] - (radius * 0.5),
                        p1[1],
                      ];
                      return (
                        &lt;g key={key}&gt;
                          &lt;path
                            d={innerArcPath(state)}
                            fill={colors(data.data.name)}
                            opacity={0.9}
                          /&gt;
                          &lt;text
                            dy=""4px""
                            fontSize=""12px""
                            transform={`translate(${p2.toString()})`}
                            textAnchor={mid(state) ? 'start' : 'end'}
                          &gt;{data.data.name}&lt;/text&gt;
                          &lt;polyline
                            fill=""none""
                            stroke=""rgba(127,127,127,0.5)""
                            points={`${innerArcPath.centroid(state)},${p1},${p2.toString()}`}
                          /&gt;
                        &lt;/g&gt;
                      );
                    })}
                  &lt;/g&gt;
                );
              }}
            &lt;/NodeGroup&gt;
          &lt;/g&gt;
        &lt;/Surface&gt;
      &lt;/div&gt;
    );
  }
}

export default Example;
</code></pre>

<p>Аnd it <strong>App.js</strong>. It my main project. It get data from index.js</p>

<pre><code>import React from 'react';
import {Group} from '@vx/group';
import {Tree} from '@vx/hierarchy';
import {LinearGradient} from '@vx/gradient';
import {hierarchy} from 'd3-hierarchy';
import {pointRadial} from 'd3-shape';
import NodeGroup from 'react-move/NodeGroup';
import Surface from './components/Surface';

const view = [1200, 750]; // [width, height]
const trbl = [10, 10, 30, 10]; // [top, right, bottom, left] margins

function findCollapsedParent(node) {
    if (!node.data.isExpanded) {
        return node;
    } else if (node.parent) {
        return findCollapsedParent(node.parent);
    } else {
        return null;
    }
}

function radialPoint(angle, radius) {
    const [x, y] = pointRadial(angle, radius);
    return {x, y};
}

export default class extends React.Component {

    render() {
        const {
            width = view[0],
            height = view[1] - 30,
            data,
            chart,
            margin = {
                top: 10,
                left: 10,
                right: 10,
                bottom: 30
            }
        } = this.props;

        const innerWidth = width - margin.left - margin.right;
        const innerHeight = height - margin.top - margin.bottom;

        let sizeWidth = 2 * Math.PI;
        let sizeHeight = Math.min(innerWidth, innerHeight) /2;
        let origin;

        origin = {
            x: innerWidth / 2,
            y: innerHeight / 2
        };

        if (width &lt; 10) return null;
        return (
            &lt;div&gt;                    

                &lt;div id={""chart""}&gt;
                    {this.getChart}
                &lt;/div&gt;

                &lt;Surface view={view} trbl={trbl}&gt;

                    &lt;LinearGradient id=""lg"" from=""#fd9b93"" to=""#fe6e9e""/&gt;
                    {/*&lt;rect width={width} height={height} rx={0} fill=""#232323""/&gt;*/}

                    &lt;Tree
                        top={margin.top}
                        left={margin.left}
                        root={hierarchy(data, d =&gt; (d.isExpanded ? d.children555 || d.children2 : null))}
                        size={[sizeWidth, sizeHeight]} 
                        separation={(a, b) =&gt; ((a.children === b.children) &amp;&amp; (a.parent === b.parent) ? 1 : 7) / a.depth }
                    &gt;

                        {({links, descendants}) =&gt; (
                            &lt;Group top={origin.y} left={origin.x}&gt;
                                &lt;NodeGroup
                                    data={links}
                                    keyAccessor={(d, i) =&gt;
                                        `${d.source.data}_${d.target.data.name}`}

                                    start={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            },
                                            target: {
                                                x: source.data.x0,
                                                y: source.data.y0
                                            }
                                        };
                                    }}

                                    enter={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            },

                                        };
                                    }}
                                    update={({source, target}) =&gt; {
                                        return {
                                            source: {
                                                x: [source.x],
                                                y: [source.y]
                                            },
                                            target: {
                                                x: [target.x],
                                                y: [target.y]
                                            }
                                        };
                                    }}

                                    leave={({source, target}) =&gt; {
                                        const collapsedParent = findCollapsedParent(source);
                                        return {
                                            source: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            },
                                            target: {
                                                x: [collapsedParent.data.x0],
                                                y: [collapsedParent.data.y0]
                                            }
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data, state}) =&gt; {
                                                return (
                                                    &lt;LinkRadialCurve
                                                        data={state}
                                                        stroke=""#2996D9""
                                                        strokeWidth=""1""
                                                        strokeDasharray=""4""
                                                        fill=""none""
                                                        key={key}
                                                    /&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;

                                &lt;NodeGroup
                                    data={descendants}
                                    keyAccessor={d =&gt; d.data.name}
                                    start={({parent}) =&gt; {
                                        const radialParent = radialPoint(parent ? parent.x : 0, parent ? parent.y : 0);
                                        return {
                                            x: radialParent.x,
                                            y: radialParent.y,
                                            opacity: 0
                                        };
                                    }}
                                    enter={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1],
                                            timing: {duration: 600, delay: 200}
                                        };
                                    }}
                                    update={({x, y}) =&gt; {
                                        const point = radialPoint(x, y);
                                        return {
                                            x: [point.x],
                                            y: [point.y],
                                            opacity: [1]
                                        };
                                    }}
                                    leave={({parent}) =&gt; {
                                        const collapsedParent = findCollapsedParent(parent);
                                        const radialParent = radialPoint(collapsedParent.data.x0, collapsedParent.data.y0);
                                        return {
                                            x: [radialParent.x],
                                            y: [radialParent.y],
                                            opacity: [0]
                                        };
                                    }}
                                &gt;
                                    {nodes =&gt; (
                                        &lt;Group&gt;
                                            {nodes.map(({key, data: node, state}) =&gt; {
                                                const width = 50;
                                                const height = 30;
                                                const textLength = node.data.name;

                                                return (
                                                    &lt;Group
                                                        top={state.y}
                                                        left={state.x}
                                                        key={key}
                                                        opacity={state.opacity}
                                                    &gt;
                                                        {node.data.isExpanded &amp;&amp; node.depth !== 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={'28'}
                                                                fill={'transparent'}
                                                                stroke={'#2996D9'}
                                                                strokeWidth={2.5}
                                                                strokeOpacity={0.9}
                                                            /&gt;
                                                        )}

                                                        {node.depth === 0 &amp;&amp; (
                                                            &lt;circle
                                                                r={(textLength &gt; 15) ? ('32') : ('39')}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT ****
                                                                x={-width / 2}
                                                                fill={'#2996D9'}
                                                                stroke='#03c0dc'
                                                                strokeDasharray={""3""}
                                                                strokeWidth={3}

                                                                onClick={() =&gt; {
                                                                    console.log('node.onClick', node);
                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;
                                                                    this.forceUpdate();
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {node.data.children2 &amp;&amp; (
                                                            &lt;circle
                                                                r={'22'}
                                                                height={height}
                                                                width={width}
                                                                y={-height / 2} //--FOR RECT
                                                                x={-width / 2}  //--FOR RECT
                                                                fill={
                                                                    node.data.name === 'Skills' ? ('#DA244D') : node.data.name === 'Experience' ?
                                                                        ('#F3B63C') : node.data.name === 'Education' ? ('#64B86C') : ('#F3B63C')
                                                                }
                                                                strokeOpacity={!node.data.children2 ? 0.6 : 1}
                                                                rx={!node.data.children2 ? 10 : 0} //--FOR RECT
                                                                onClick={() =&gt; {

                                                                    if (node.data.name === 'Experience') {

                                                                        this.getChart = !chart;
                                                                    }

                                                                    if (!node.data.isExpanded) {
                                                                        node.data.x0 = node.x;
                                                                        node.data.y0 = node.y;
                                                                    }
                                                                    node.data.isExpanded = !node.data.isExpanded;

                                                                    this.forceUpdate();
                                                                    console.log(node);
                                                                }}
                                                            /&gt;
                                                        )}

                                                        {!node.data.children2 &amp;&amp; !node.data.children555 &amp;&amp; (
                                                            &lt;a&gt;
                                                                &lt;rect
                                                                    height={height}
                                                                    width={width}
                                                                    y={-height / 2} //--FOR RECT
                                                                    x={-width / 2}  //--FOR RECT
                                                                    fill={node.data.children ? '#232323' : '#232323'}
                                                                    stroke={'#2996D9'}
                                                                    strokeWidth={2}
                                                                    strokeDasharray={!node.data.children555 ? '2,2' : '0'}
                                                                    // strokeOpacity={!node.data.children ? 0.6 : 1}
                                                                    rx={!node.data.children555 ? 8 : 0}

                                                                    onClick={() =&gt; {

                                                                        this.getChart = chart;
                                                                        this.forceUpdate();
                                                                        console.log(node);
                                                                        console.log(this.mockData);
                                                                    }}
                                                                    &gt;

                                                                &lt;/rect&gt;
                                                            &lt;/a&gt;
                                                        )}

                                                        &lt;title&gt; {node.data.name} &lt;/title&gt;

                                                        {node.data.isExpanded || !node.data.children2 || (
                                                            &lt;text
                                                                dy={
                                                                    (textLength.length &gt; 5) ? ('-5') : ('.33em')
                                                                }
                                                                x={
                                                                    (textLength.length &lt; 5) ? ('0') : (textLength.length &lt; 30) ? ('30') : ('-33')
                                                                }

                                                                fontSize={11}
                                                                fontFamily=""Arial""
                                                                textAnchor={(textLength.length &lt; 5) ? ('middle') : (textLength.length &lt; 30) ? ('start') : ('end')}
                                                                style={{pointerEvents: 'none'}}
                                                                fill={
                                                                    node.depth === 0 ? ('white') : node.children555 ? ('white') : ('white')
                                                                }
                                                            &gt;
                                                                &lt;tspan&gt; {node.data.name}&lt;/tspan&gt;
                                                            &lt;/text&gt;

                                                        )}

                                                    &lt;/Group&gt;
                                                );
                                            })}
                                        &lt;/Group&gt;
                                    )}
                                &lt;/NodeGroup&gt;
                            &lt;/Group&gt;
                        )}
                    &lt;/Tree&gt;
                &lt;/Surface&gt;
            &lt;/div&gt;
        );
    }
}
</code></pre>

<p>In <strong>chart.js</strong> </p>

<pre><code>mockData = [
  {
    name: 'Linktype',
  }, {
    name: 'Quaxo',
  }, {
    name: 'Skynoodle',
  }, {
    name: 'Realmix',
  }, {
    name: 'Jetpulse',
  }
];
</code></pre>

<p>But I need to get data from <strong>App.js</strong></p>

<p>How to solve this problem?
Thanks.</p>
","are you tring to move mockData to App.js then you will access this data in Chart.js, If am not wrong?"
"49060982","How to avoid rerendering element in the array in react?","11","<p>I have a array and I want to render the this array into a few redux forms. I found out that all the forms are rerendered. the code looks like the following:</p>

<p>Form.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link, Events, scrollSpy } from 'react-scroll';
import styles from './Form.css';
import MultipleForm from './MultipleForm';

class Form extends Component {
  constructor(props) {
    super(props);
    const {
      workflows,
    } = this.props;
    this.state = {
      curTab: workflows.length &gt; 0 ? workflows[0] : '',
      curForm: '',
    };
  }

  componentDidMount() {
    Events.scrollEvent.register('begin');
    Events.scrollEvent.register('end');
    scrollSpy.update();
  }
  componentWillReceiveProps(nextProps) {
    const {
      workflows,
    } = nextProps;
    if (workflows &amp;&amp; workflows.length &gt; this.props.workflows) {
      this.setState({
        curTab: workflows[0],
      });
    }
  }
  componentWillUnmount() {
    Events.scrollEvent.remove('begin');
    Events.scrollEvent.remove('end');
  }
  handleChangeTab = (value) =&gt; {
    this.setState({
      curTab: value,
    });
  }

  handleActiveTab = (workflow) =&gt; {
    console.log(workflow);
  }


  render() {
    const {
      workflows,
      schemaNames,
      ...rest
    } = this.props;
    return (
      &lt;div className={styles.container}&gt;
        &lt;header&gt;
          &lt;PerspectiveBar
            value={this.state.curTab}
            onChange={this.handleChangeTab}
            style={{
              position: 'fixed',
              left: '0',
              top: '48px',
              width: '100vw',
              zIndex: '1380',
            }}
          &gt;
            {workflows.map(wf =&gt; (
              &lt;PerspectiveTab
                key={wf}
                label={wf}
                value={wf}
                onActive={() =&gt; this.handleActiveTab(wf)}
              /&gt;
          ))}
          &lt;/PerspectiveBar&gt;
        &lt;/header&gt;
        &lt;div className={styles.formContainer}&gt;
          &lt;Paper className={styles.paperContainer}&gt;
            &lt;MultipleForm
              workflow={this.state.curTab}
              schemaNames={schemaNames}
              {...rest}
            /&gt;
          &lt;/Paper&gt;
        &lt;/div&gt;
        &lt;Drawer className={styles.drawer} containerStyle={{ height: 'calc(100% - 104px)', top: '104px' }}&gt;
          &lt;div className={styles.drawerContainer}&gt;
            {schemaNames.map(schemaName =&gt; (
              &lt;Link
                onSetActive={(to) =&gt; {
                  this.setState({
                    curForm: to,
                  });
                }}
                to={schemaName}
                duration={500}
                offset={-104}
                spy
                smooth
              &gt;
                &lt;MenuItem
                  checked={this.state.curForm === schemaName}
                &gt;
                  {schemaName}
                &lt;/MenuItem&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        &lt;/Drawer&gt;
      &lt;/div&gt;

    );
  }
}

Form.propTypes = {
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  workflows: PropTypes.arrayOf(PropTypes.string),
  fetchSchemaNames: PropTypes.func.isRequired,
};

Form.defaultProps = {
  schemaNames: [],
  workflows: [],
};

export default Form;
</code></pre>

<p>MultipleForm.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FlatButton from 'material-ui/FlatButton';
import { Element } from 'react-scroll';
import SchemaForm from './SchemaForm';

class MultipleForm extends Component {
  componentDidMount() {
    console.log('MultipleForm Mounted');
    const {
      workflow,
      fetchSchemaNames,
    } = this.props;
    if (workflow) fetchSchemaNames(workflow);
  }

  componentWillReceiveProps(nextProps) {
    const {
      workflow,
      fetchSchemaNames,
    } = nextProps;
    if (workflow &amp;&amp; this.props.workflow !== workflow) fetchSchemaNames(workflow);
  }

  componentDidUpdate() {
    const {
      schemaNames,
      schemas,
      initialValues,
      fetchSchemas,
      fetchInitialValues,
    } = this.props;
    const schemasNeedToFetch = this.remainingSchemas(schemaNames, schemas);
    if (schemasNeedToFetch.length !== 0) fetchSchemas(schemasNeedToFetch);
    const initialValuesNeedToFetch = this.remainingInitialValues(schemaNames, initialValues);
    if (initialValuesNeedToFetch.lenght !== 0) fetchInitialValues(initialValuesNeedToFetch, 1);
  }

  remainingSchemas = (schemaNames, schemas) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in schemas === false).sort();

  remainingInitialValues = (schemaNames, initialValues) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in initialValues === false).sort();

  handleSubmitAll = (event) =&gt; {
    event.preventDefault();
    const {
      submit,
      schemas,
      schemaNames,
    } = this.props;
    schemaNames
      .map(schemaName =&gt; schemas[schemaName].title)
      .forEach((title) =&gt; {
        submit(title);
      });
  }

  render() {
    const {
      schemaNames,
      schemas,
      initialValues,
      postForm,
    } = this.props;
    schemaNames.sort((a, b) =&gt; a.localeCompare(b));
    return (
      &lt;div&gt;
        {schemaNames.map(schemaName =&gt; (
          &lt;Element name={schemaName}&gt;
            &lt;SchemaForm
              key={schemaName}
              schema={schemas[schemaName]}
              initialValue={initialValues[schemaName]}
              schemaName={schemaName}
              postForm={postForm}
            /&gt;
          &lt;/Element&gt;
        ))}
        &lt;div&gt;
          &lt;FlatButton
            label=""Submit""
          /&gt;
          &lt;FlatButton label=""Deploy"" /&gt;
        &lt;/div&gt;
      &lt;/div&gt;);
  }
}

MultipleForm.propTypes = {
  workflow: PropTypes.string.isRequired,
  submit: PropTypes.func.isRequired,
  fetchSchemaNames: PropTypes.func.isRequired,
  schemas: PropTypes.object,
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  initialValues: PropTypes.object,
  fetchSchemas: PropTypes.func.isRequired,
  fetchInitialValues: PropTypes.func.isRequired,
  postForm: PropTypes.func.isRequired,
};

MultipleForm.defaultProps = {
  schemaNames: [],
};

export default MultipleForm;
</code></pre>

<p>SchemaForm</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Liform from 'liform-react';
import theme from './NokiaTheme';
import styles from './Form.css';

class SchemaForm extends Component {
  componentDidMount() {
    console.log('schema mounted');
  }

  shouldComponentUpdate() {
    return false;
  }
  handleSubmit = (value) =&gt; {
    const {
      postForm,
      schemaName,
    } = this.props;
    postForm(value, schemaName, 1);
  }


  render() {
    const {
      schema,
      initialValue,
    } = this.props;
    console.log('props', this.props);
    return (
      &lt;div&gt;
        &lt;h3 id={schema.$id} className={styles.formTitle}&gt;
          {schema.title}
        &lt;/h3&gt;
        &lt;Liform
          schema={schema}
          onSubmit={value =&gt; this.handleSubmit(value)}
          destroyOnUnmount={false}
          theme={theme}
          initialValues={initialValue}
        /&gt;
      &lt;/div&gt;
    );
  }
}

SchemaForm.propTypes = {
  schema: PropTypes.shape({
    $id: PropTypes.string,
  }),
  initialValue: PropTypes.object,
  schemaName: PropTypes.string,
  postForm: PropTypes.func.isRequired,
};

SchemaForm.defaultProps = {
  schema: {},
  initialValue: null,
  schemaName: '',
};

export default SchemaForm;
</code></pre>

<p>the schemaNames will be changed only by adding or deleting some element. for example: the schemaNames will change from <code>['A', 'B', 'C']</code> to <code>['A', 'B', 'D']</code>.  I get the schemaNames from the redux. which I fetch online.</p>

<p>But when I check the ConnectedReduxForm, when I change the schemaNames, the SchemaForm will be unmounted and the react will mount the form again. I have tried with setting the ConnectedReduxForm to be PureComponent. It is not helpful.</p>

<p>Could someone help me with that? I have spent a lot of time of this and nothing helps.</p>

<p><strong>Update</strong>: I have found the problem, the reason of it is that for each time that I for each time I update the workflow, I need to fetch the schemaNames from the server. But I still do not know why this happended. Could someone explain that?</p>
","@Sidney Unfortunately, I have tried with that and it doesn't work."
"49060982","How to avoid rerendering element in the array in react?","11","<p>I have a array and I want to render the this array into a few redux forms. I found out that all the forms are rerendered. the code looks like the following:</p>

<p>Form.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link, Events, scrollSpy } from 'react-scroll';
import styles from './Form.css';
import MultipleForm from './MultipleForm';

class Form extends Component {
  constructor(props) {
    super(props);
    const {
      workflows,
    } = this.props;
    this.state = {
      curTab: workflows.length &gt; 0 ? workflows[0] : '',
      curForm: '',
    };
  }

  componentDidMount() {
    Events.scrollEvent.register('begin');
    Events.scrollEvent.register('end');
    scrollSpy.update();
  }
  componentWillReceiveProps(nextProps) {
    const {
      workflows,
    } = nextProps;
    if (workflows &amp;&amp; workflows.length &gt; this.props.workflows) {
      this.setState({
        curTab: workflows[0],
      });
    }
  }
  componentWillUnmount() {
    Events.scrollEvent.remove('begin');
    Events.scrollEvent.remove('end');
  }
  handleChangeTab = (value) =&gt; {
    this.setState({
      curTab: value,
    });
  }

  handleActiveTab = (workflow) =&gt; {
    console.log(workflow);
  }


  render() {
    const {
      workflows,
      schemaNames,
      ...rest
    } = this.props;
    return (
      &lt;div className={styles.container}&gt;
        &lt;header&gt;
          &lt;PerspectiveBar
            value={this.state.curTab}
            onChange={this.handleChangeTab}
            style={{
              position: 'fixed',
              left: '0',
              top: '48px',
              width: '100vw',
              zIndex: '1380',
            }}
          &gt;
            {workflows.map(wf =&gt; (
              &lt;PerspectiveTab
                key={wf}
                label={wf}
                value={wf}
                onActive={() =&gt; this.handleActiveTab(wf)}
              /&gt;
          ))}
          &lt;/PerspectiveBar&gt;
        &lt;/header&gt;
        &lt;div className={styles.formContainer}&gt;
          &lt;Paper className={styles.paperContainer}&gt;
            &lt;MultipleForm
              workflow={this.state.curTab}
              schemaNames={schemaNames}
              {...rest}
            /&gt;
          &lt;/Paper&gt;
        &lt;/div&gt;
        &lt;Drawer className={styles.drawer} containerStyle={{ height: 'calc(100% - 104px)', top: '104px' }}&gt;
          &lt;div className={styles.drawerContainer}&gt;
            {schemaNames.map(schemaName =&gt; (
              &lt;Link
                onSetActive={(to) =&gt; {
                  this.setState({
                    curForm: to,
                  });
                }}
                to={schemaName}
                duration={500}
                offset={-104}
                spy
                smooth
              &gt;
                &lt;MenuItem
                  checked={this.state.curForm === schemaName}
                &gt;
                  {schemaName}
                &lt;/MenuItem&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        &lt;/Drawer&gt;
      &lt;/div&gt;

    );
  }
}

Form.propTypes = {
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  workflows: PropTypes.arrayOf(PropTypes.string),
  fetchSchemaNames: PropTypes.func.isRequired,
};

Form.defaultProps = {
  schemaNames: [],
  workflows: [],
};

export default Form;
</code></pre>

<p>MultipleForm.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FlatButton from 'material-ui/FlatButton';
import { Element } from 'react-scroll';
import SchemaForm from './SchemaForm';

class MultipleForm extends Component {
  componentDidMount() {
    console.log('MultipleForm Mounted');
    const {
      workflow,
      fetchSchemaNames,
    } = this.props;
    if (workflow) fetchSchemaNames(workflow);
  }

  componentWillReceiveProps(nextProps) {
    const {
      workflow,
      fetchSchemaNames,
    } = nextProps;
    if (workflow &amp;&amp; this.props.workflow !== workflow) fetchSchemaNames(workflow);
  }

  componentDidUpdate() {
    const {
      schemaNames,
      schemas,
      initialValues,
      fetchSchemas,
      fetchInitialValues,
    } = this.props;
    const schemasNeedToFetch = this.remainingSchemas(schemaNames, schemas);
    if (schemasNeedToFetch.length !== 0) fetchSchemas(schemasNeedToFetch);
    const initialValuesNeedToFetch = this.remainingInitialValues(schemaNames, initialValues);
    if (initialValuesNeedToFetch.lenght !== 0) fetchInitialValues(initialValuesNeedToFetch, 1);
  }

  remainingSchemas = (schemaNames, schemas) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in schemas === false).sort();

  remainingInitialValues = (schemaNames, initialValues) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in initialValues === false).sort();

  handleSubmitAll = (event) =&gt; {
    event.preventDefault();
    const {
      submit,
      schemas,
      schemaNames,
    } = this.props;
    schemaNames
      .map(schemaName =&gt; schemas[schemaName].title)
      .forEach((title) =&gt; {
        submit(title);
      });
  }

  render() {
    const {
      schemaNames,
      schemas,
      initialValues,
      postForm,
    } = this.props;
    schemaNames.sort((a, b) =&gt; a.localeCompare(b));
    return (
      &lt;div&gt;
        {schemaNames.map(schemaName =&gt; (
          &lt;Element name={schemaName}&gt;
            &lt;SchemaForm
              key={schemaName}
              schema={schemas[schemaName]}
              initialValue={initialValues[schemaName]}
              schemaName={schemaName}
              postForm={postForm}
            /&gt;
          &lt;/Element&gt;
        ))}
        &lt;div&gt;
          &lt;FlatButton
            label=""Submit""
          /&gt;
          &lt;FlatButton label=""Deploy"" /&gt;
        &lt;/div&gt;
      &lt;/div&gt;);
  }
}

MultipleForm.propTypes = {
  workflow: PropTypes.string.isRequired,
  submit: PropTypes.func.isRequired,
  fetchSchemaNames: PropTypes.func.isRequired,
  schemas: PropTypes.object,
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  initialValues: PropTypes.object,
  fetchSchemas: PropTypes.func.isRequired,
  fetchInitialValues: PropTypes.func.isRequired,
  postForm: PropTypes.func.isRequired,
};

MultipleForm.defaultProps = {
  schemaNames: [],
};

export default MultipleForm;
</code></pre>

<p>SchemaForm</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Liform from 'liform-react';
import theme from './NokiaTheme';
import styles from './Form.css';

class SchemaForm extends Component {
  componentDidMount() {
    console.log('schema mounted');
  }

  shouldComponentUpdate() {
    return false;
  }
  handleSubmit = (value) =&gt; {
    const {
      postForm,
      schemaName,
    } = this.props;
    postForm(value, schemaName, 1);
  }


  render() {
    const {
      schema,
      initialValue,
    } = this.props;
    console.log('props', this.props);
    return (
      &lt;div&gt;
        &lt;h3 id={schema.$id} className={styles.formTitle}&gt;
          {schema.title}
        &lt;/h3&gt;
        &lt;Liform
          schema={schema}
          onSubmit={value =&gt; this.handleSubmit(value)}
          destroyOnUnmount={false}
          theme={theme}
          initialValues={initialValue}
        /&gt;
      &lt;/div&gt;
    );
  }
}

SchemaForm.propTypes = {
  schema: PropTypes.shape({
    $id: PropTypes.string,
  }),
  initialValue: PropTypes.object,
  schemaName: PropTypes.string,
  postForm: PropTypes.func.isRequired,
};

SchemaForm.defaultProps = {
  schema: {},
  initialValue: null,
  schemaName: '',
};

export default SchemaForm;
</code></pre>

<p>the schemaNames will be changed only by adding or deleting some element. for example: the schemaNames will change from <code>['A', 'B', 'C']</code> to <code>['A', 'B', 'D']</code>.  I get the schemaNames from the redux. which I fetch online.</p>

<p>But when I check the ConnectedReduxForm, when I change the schemaNames, the SchemaForm will be unmounted and the react will mount the form again. I have tried with setting the ConnectedReduxForm to be PureComponent. It is not helpful.</p>

<p>Could someone help me with that? I have spent a lot of time of this and nothing helps.</p>

<p><strong>Update</strong>: I have found the problem, the reason of it is that for each time that I for each time I update the workflow, I need to fetch the schemaNames from the server. But I still do not know why this happended. Could someone explain that?</p>
","sounds like `ConnectedReduxForm` just needs to implement [`shouldComponentUpdate`](https://reactjs.org/docs/react-component.html#shouldcomponentupdate)"
"49060982","How to avoid rerendering element in the array in react?","11","<p>I have a array and I want to render the this array into a few redux forms. I found out that all the forms are rerendered. the code looks like the following:</p>

<p>Form.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link, Events, scrollSpy } from 'react-scroll';
import styles from './Form.css';
import MultipleForm from './MultipleForm';

class Form extends Component {
  constructor(props) {
    super(props);
    const {
      workflows,
    } = this.props;
    this.state = {
      curTab: workflows.length &gt; 0 ? workflows[0] : '',
      curForm: '',
    };
  }

  componentDidMount() {
    Events.scrollEvent.register('begin');
    Events.scrollEvent.register('end');
    scrollSpy.update();
  }
  componentWillReceiveProps(nextProps) {
    const {
      workflows,
    } = nextProps;
    if (workflows &amp;&amp; workflows.length &gt; this.props.workflows) {
      this.setState({
        curTab: workflows[0],
      });
    }
  }
  componentWillUnmount() {
    Events.scrollEvent.remove('begin');
    Events.scrollEvent.remove('end');
  }
  handleChangeTab = (value) =&gt; {
    this.setState({
      curTab: value,
    });
  }

  handleActiveTab = (workflow) =&gt; {
    console.log(workflow);
  }


  render() {
    const {
      workflows,
      schemaNames,
      ...rest
    } = this.props;
    return (
      &lt;div className={styles.container}&gt;
        &lt;header&gt;
          &lt;PerspectiveBar
            value={this.state.curTab}
            onChange={this.handleChangeTab}
            style={{
              position: 'fixed',
              left: '0',
              top: '48px',
              width: '100vw',
              zIndex: '1380',
            }}
          &gt;
            {workflows.map(wf =&gt; (
              &lt;PerspectiveTab
                key={wf}
                label={wf}
                value={wf}
                onActive={() =&gt; this.handleActiveTab(wf)}
              /&gt;
          ))}
          &lt;/PerspectiveBar&gt;
        &lt;/header&gt;
        &lt;div className={styles.formContainer}&gt;
          &lt;Paper className={styles.paperContainer}&gt;
            &lt;MultipleForm
              workflow={this.state.curTab}
              schemaNames={schemaNames}
              {...rest}
            /&gt;
          &lt;/Paper&gt;
        &lt;/div&gt;
        &lt;Drawer className={styles.drawer} containerStyle={{ height: 'calc(100% - 104px)', top: '104px' }}&gt;
          &lt;div className={styles.drawerContainer}&gt;
            {schemaNames.map(schemaName =&gt; (
              &lt;Link
                onSetActive={(to) =&gt; {
                  this.setState({
                    curForm: to,
                  });
                }}
                to={schemaName}
                duration={500}
                offset={-104}
                spy
                smooth
              &gt;
                &lt;MenuItem
                  checked={this.state.curForm === schemaName}
                &gt;
                  {schemaName}
                &lt;/MenuItem&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        &lt;/Drawer&gt;
      &lt;/div&gt;

    );
  }
}

Form.propTypes = {
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  workflows: PropTypes.arrayOf(PropTypes.string),
  fetchSchemaNames: PropTypes.func.isRequired,
};

Form.defaultProps = {
  schemaNames: [],
  workflows: [],
};

export default Form;
</code></pre>

<p>MultipleForm.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FlatButton from 'material-ui/FlatButton';
import { Element } from 'react-scroll';
import SchemaForm from './SchemaForm';

class MultipleForm extends Component {
  componentDidMount() {
    console.log('MultipleForm Mounted');
    const {
      workflow,
      fetchSchemaNames,
    } = this.props;
    if (workflow) fetchSchemaNames(workflow);
  }

  componentWillReceiveProps(nextProps) {
    const {
      workflow,
      fetchSchemaNames,
    } = nextProps;
    if (workflow &amp;&amp; this.props.workflow !== workflow) fetchSchemaNames(workflow);
  }

  componentDidUpdate() {
    const {
      schemaNames,
      schemas,
      initialValues,
      fetchSchemas,
      fetchInitialValues,
    } = this.props;
    const schemasNeedToFetch = this.remainingSchemas(schemaNames, schemas);
    if (schemasNeedToFetch.length !== 0) fetchSchemas(schemasNeedToFetch);
    const initialValuesNeedToFetch = this.remainingInitialValues(schemaNames, initialValues);
    if (initialValuesNeedToFetch.lenght !== 0) fetchInitialValues(initialValuesNeedToFetch, 1);
  }

  remainingSchemas = (schemaNames, schemas) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in schemas === false).sort();

  remainingInitialValues = (schemaNames, initialValues) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in initialValues === false).sort();

  handleSubmitAll = (event) =&gt; {
    event.preventDefault();
    const {
      submit,
      schemas,
      schemaNames,
    } = this.props;
    schemaNames
      .map(schemaName =&gt; schemas[schemaName].title)
      .forEach((title) =&gt; {
        submit(title);
      });
  }

  render() {
    const {
      schemaNames,
      schemas,
      initialValues,
      postForm,
    } = this.props;
    schemaNames.sort((a, b) =&gt; a.localeCompare(b));
    return (
      &lt;div&gt;
        {schemaNames.map(schemaName =&gt; (
          &lt;Element name={schemaName}&gt;
            &lt;SchemaForm
              key={schemaName}
              schema={schemas[schemaName]}
              initialValue={initialValues[schemaName]}
              schemaName={schemaName}
              postForm={postForm}
            /&gt;
          &lt;/Element&gt;
        ))}
        &lt;div&gt;
          &lt;FlatButton
            label=""Submit""
          /&gt;
          &lt;FlatButton label=""Deploy"" /&gt;
        &lt;/div&gt;
      &lt;/div&gt;);
  }
}

MultipleForm.propTypes = {
  workflow: PropTypes.string.isRequired,
  submit: PropTypes.func.isRequired,
  fetchSchemaNames: PropTypes.func.isRequired,
  schemas: PropTypes.object,
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  initialValues: PropTypes.object,
  fetchSchemas: PropTypes.func.isRequired,
  fetchInitialValues: PropTypes.func.isRequired,
  postForm: PropTypes.func.isRequired,
};

MultipleForm.defaultProps = {
  schemaNames: [],
};

export default MultipleForm;
</code></pre>

<p>SchemaForm</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Liform from 'liform-react';
import theme from './NokiaTheme';
import styles from './Form.css';

class SchemaForm extends Component {
  componentDidMount() {
    console.log('schema mounted');
  }

  shouldComponentUpdate() {
    return false;
  }
  handleSubmit = (value) =&gt; {
    const {
      postForm,
      schemaName,
    } = this.props;
    postForm(value, schemaName, 1);
  }


  render() {
    const {
      schema,
      initialValue,
    } = this.props;
    console.log('props', this.props);
    return (
      &lt;div&gt;
        &lt;h3 id={schema.$id} className={styles.formTitle}&gt;
          {schema.title}
        &lt;/h3&gt;
        &lt;Liform
          schema={schema}
          onSubmit={value =&gt; this.handleSubmit(value)}
          destroyOnUnmount={false}
          theme={theme}
          initialValues={initialValue}
        /&gt;
      &lt;/div&gt;
    );
  }
}

SchemaForm.propTypes = {
  schema: PropTypes.shape({
    $id: PropTypes.string,
  }),
  initialValue: PropTypes.object,
  schemaName: PropTypes.string,
  postForm: PropTypes.func.isRequired,
};

SchemaForm.defaultProps = {
  schema: {},
  initialValue: null,
  schemaName: '',
};

export default SchemaForm;
</code></pre>

<p>the schemaNames will be changed only by adding or deleting some element. for example: the schemaNames will change from <code>['A', 'B', 'C']</code> to <code>['A', 'B', 'D']</code>.  I get the schemaNames from the redux. which I fetch online.</p>

<p>But when I check the ConnectedReduxForm, when I change the schemaNames, the SchemaForm will be unmounted and the react will mount the form again. I have tried with setting the ConnectedReduxForm to be PureComponent. It is not helpful.</p>

<p>Could someone help me with that? I have spent a lot of time of this and nothing helps.</p>

<p><strong>Update</strong>: I have found the problem, the reason of it is that for each time that I for each time I update the workflow, I need to fetch the schemaNames from the server. But I still do not know why this happended. Could someone explain that?</p>
","Prehaps you need to apply the `key` to the DOM element that `ConnectedReduxForm` returns?"
"49060982","How to avoid rerendering element in the array in react?","11","<p>I have a array and I want to render the this array into a few redux forms. I found out that all the forms are rerendered. the code looks like the following:</p>

<p>Form.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link, Events, scrollSpy } from 'react-scroll';
import styles from './Form.css';
import MultipleForm from './MultipleForm';

class Form extends Component {
  constructor(props) {
    super(props);
    const {
      workflows,
    } = this.props;
    this.state = {
      curTab: workflows.length &gt; 0 ? workflows[0] : '',
      curForm: '',
    };
  }

  componentDidMount() {
    Events.scrollEvent.register('begin');
    Events.scrollEvent.register('end');
    scrollSpy.update();
  }
  componentWillReceiveProps(nextProps) {
    const {
      workflows,
    } = nextProps;
    if (workflows &amp;&amp; workflows.length &gt; this.props.workflows) {
      this.setState({
        curTab: workflows[0],
      });
    }
  }
  componentWillUnmount() {
    Events.scrollEvent.remove('begin');
    Events.scrollEvent.remove('end');
  }
  handleChangeTab = (value) =&gt; {
    this.setState({
      curTab: value,
    });
  }

  handleActiveTab = (workflow) =&gt; {
    console.log(workflow);
  }


  render() {
    const {
      workflows,
      schemaNames,
      ...rest
    } = this.props;
    return (
      &lt;div className={styles.container}&gt;
        &lt;header&gt;
          &lt;PerspectiveBar
            value={this.state.curTab}
            onChange={this.handleChangeTab}
            style={{
              position: 'fixed',
              left: '0',
              top: '48px',
              width: '100vw',
              zIndex: '1380',
            }}
          &gt;
            {workflows.map(wf =&gt; (
              &lt;PerspectiveTab
                key={wf}
                label={wf}
                value={wf}
                onActive={() =&gt; this.handleActiveTab(wf)}
              /&gt;
          ))}
          &lt;/PerspectiveBar&gt;
        &lt;/header&gt;
        &lt;div className={styles.formContainer}&gt;
          &lt;Paper className={styles.paperContainer}&gt;
            &lt;MultipleForm
              workflow={this.state.curTab}
              schemaNames={schemaNames}
              {...rest}
            /&gt;
          &lt;/Paper&gt;
        &lt;/div&gt;
        &lt;Drawer className={styles.drawer} containerStyle={{ height: 'calc(100% - 104px)', top: '104px' }}&gt;
          &lt;div className={styles.drawerContainer}&gt;
            {schemaNames.map(schemaName =&gt; (
              &lt;Link
                onSetActive={(to) =&gt; {
                  this.setState({
                    curForm: to,
                  });
                }}
                to={schemaName}
                duration={500}
                offset={-104}
                spy
                smooth
              &gt;
                &lt;MenuItem
                  checked={this.state.curForm === schemaName}
                &gt;
                  {schemaName}
                &lt;/MenuItem&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        &lt;/Drawer&gt;
      &lt;/div&gt;

    );
  }
}

Form.propTypes = {
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  workflows: PropTypes.arrayOf(PropTypes.string),
  fetchSchemaNames: PropTypes.func.isRequired,
};

Form.defaultProps = {
  schemaNames: [],
  workflows: [],
};

export default Form;
</code></pre>

<p>MultipleForm.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FlatButton from 'material-ui/FlatButton';
import { Element } from 'react-scroll';
import SchemaForm from './SchemaForm';

class MultipleForm extends Component {
  componentDidMount() {
    console.log('MultipleForm Mounted');
    const {
      workflow,
      fetchSchemaNames,
    } = this.props;
    if (workflow) fetchSchemaNames(workflow);
  }

  componentWillReceiveProps(nextProps) {
    const {
      workflow,
      fetchSchemaNames,
    } = nextProps;
    if (workflow &amp;&amp; this.props.workflow !== workflow) fetchSchemaNames(workflow);
  }

  componentDidUpdate() {
    const {
      schemaNames,
      schemas,
      initialValues,
      fetchSchemas,
      fetchInitialValues,
    } = this.props;
    const schemasNeedToFetch = this.remainingSchemas(schemaNames, schemas);
    if (schemasNeedToFetch.length !== 0) fetchSchemas(schemasNeedToFetch);
    const initialValuesNeedToFetch = this.remainingInitialValues(schemaNames, initialValues);
    if (initialValuesNeedToFetch.lenght !== 0) fetchInitialValues(initialValuesNeedToFetch, 1);
  }

  remainingSchemas = (schemaNames, schemas) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in schemas === false).sort();

  remainingInitialValues = (schemaNames, initialValues) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in initialValues === false).sort();

  handleSubmitAll = (event) =&gt; {
    event.preventDefault();
    const {
      submit,
      schemas,
      schemaNames,
    } = this.props;
    schemaNames
      .map(schemaName =&gt; schemas[schemaName].title)
      .forEach((title) =&gt; {
        submit(title);
      });
  }

  render() {
    const {
      schemaNames,
      schemas,
      initialValues,
      postForm,
    } = this.props;
    schemaNames.sort((a, b) =&gt; a.localeCompare(b));
    return (
      &lt;div&gt;
        {schemaNames.map(schemaName =&gt; (
          &lt;Element name={schemaName}&gt;
            &lt;SchemaForm
              key={schemaName}
              schema={schemas[schemaName]}
              initialValue={initialValues[schemaName]}
              schemaName={schemaName}
              postForm={postForm}
            /&gt;
          &lt;/Element&gt;
        ))}
        &lt;div&gt;
          &lt;FlatButton
            label=""Submit""
          /&gt;
          &lt;FlatButton label=""Deploy"" /&gt;
        &lt;/div&gt;
      &lt;/div&gt;);
  }
}

MultipleForm.propTypes = {
  workflow: PropTypes.string.isRequired,
  submit: PropTypes.func.isRequired,
  fetchSchemaNames: PropTypes.func.isRequired,
  schemas: PropTypes.object,
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  initialValues: PropTypes.object,
  fetchSchemas: PropTypes.func.isRequired,
  fetchInitialValues: PropTypes.func.isRequired,
  postForm: PropTypes.func.isRequired,
};

MultipleForm.defaultProps = {
  schemaNames: [],
};

export default MultipleForm;
</code></pre>

<p>SchemaForm</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Liform from 'liform-react';
import theme from './NokiaTheme';
import styles from './Form.css';

class SchemaForm extends Component {
  componentDidMount() {
    console.log('schema mounted');
  }

  shouldComponentUpdate() {
    return false;
  }
  handleSubmit = (value) =&gt; {
    const {
      postForm,
      schemaName,
    } = this.props;
    postForm(value, schemaName, 1);
  }


  render() {
    const {
      schema,
      initialValue,
    } = this.props;
    console.log('props', this.props);
    return (
      &lt;div&gt;
        &lt;h3 id={schema.$id} className={styles.formTitle}&gt;
          {schema.title}
        &lt;/h3&gt;
        &lt;Liform
          schema={schema}
          onSubmit={value =&gt; this.handleSubmit(value)}
          destroyOnUnmount={false}
          theme={theme}
          initialValues={initialValue}
        /&gt;
      &lt;/div&gt;
    );
  }
}

SchemaForm.propTypes = {
  schema: PropTypes.shape({
    $id: PropTypes.string,
  }),
  initialValue: PropTypes.object,
  schemaName: PropTypes.string,
  postForm: PropTypes.func.isRequired,
};

SchemaForm.defaultProps = {
  schema: {},
  initialValue: null,
  schemaName: '',
};

export default SchemaForm;
</code></pre>

<p>the schemaNames will be changed only by adding or deleting some element. for example: the schemaNames will change from <code>['A', 'B', 'C']</code> to <code>['A', 'B', 'D']</code>.  I get the schemaNames from the redux. which I fetch online.</p>

<p>But when I check the ConnectedReduxForm, when I change the schemaNames, the SchemaForm will be unmounted and the react will mount the form again. I have tried with setting the ConnectedReduxForm to be PureComponent. It is not helpful.</p>

<p>Could someone help me with that? I have spent a lot of time of this and nothing helps.</p>

<p><strong>Update</strong>: I have found the problem, the reason of it is that for each time that I for each time I update the workflow, I need to fetch the schemaNames from the server. But I still do not know why this happended. Could someone explain that?</p>
","@leuction If returning `false` from `shouldComponentUpdate` doesn't work, the re-render is likely being caused by a class decorator (probably Redux's `connect` decorator). You should post the source for `ConnectedReduxForm`."
"49060982","How to avoid rerendering element in the array in react?","11","<p>I have a array and I want to render the this array into a few redux forms. I found out that all the forms are rerendered. the code looks like the following:</p>

<p>Form.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link, Events, scrollSpy } from 'react-scroll';
import styles from './Form.css';
import MultipleForm from './MultipleForm';

class Form extends Component {
  constructor(props) {
    super(props);
    const {
      workflows,
    } = this.props;
    this.state = {
      curTab: workflows.length &gt; 0 ? workflows[0] : '',
      curForm: '',
    };
  }

  componentDidMount() {
    Events.scrollEvent.register('begin');
    Events.scrollEvent.register('end');
    scrollSpy.update();
  }
  componentWillReceiveProps(nextProps) {
    const {
      workflows,
    } = nextProps;
    if (workflows &amp;&amp; workflows.length &gt; this.props.workflows) {
      this.setState({
        curTab: workflows[0],
      });
    }
  }
  componentWillUnmount() {
    Events.scrollEvent.remove('begin');
    Events.scrollEvent.remove('end');
  }
  handleChangeTab = (value) =&gt; {
    this.setState({
      curTab: value,
    });
  }

  handleActiveTab = (workflow) =&gt; {
    console.log(workflow);
  }


  render() {
    const {
      workflows,
      schemaNames,
      ...rest
    } = this.props;
    return (
      &lt;div className={styles.container}&gt;
        &lt;header&gt;
          &lt;PerspectiveBar
            value={this.state.curTab}
            onChange={this.handleChangeTab}
            style={{
              position: 'fixed',
              left: '0',
              top: '48px',
              width: '100vw',
              zIndex: '1380',
            }}
          &gt;
            {workflows.map(wf =&gt; (
              &lt;PerspectiveTab
                key={wf}
                label={wf}
                value={wf}
                onActive={() =&gt; this.handleActiveTab(wf)}
              /&gt;
          ))}
          &lt;/PerspectiveBar&gt;
        &lt;/header&gt;
        &lt;div className={styles.formContainer}&gt;
          &lt;Paper className={styles.paperContainer}&gt;
            &lt;MultipleForm
              workflow={this.state.curTab}
              schemaNames={schemaNames}
              {...rest}
            /&gt;
          &lt;/Paper&gt;
        &lt;/div&gt;
        &lt;Drawer className={styles.drawer} containerStyle={{ height: 'calc(100% - 104px)', top: '104px' }}&gt;
          &lt;div className={styles.drawerContainer}&gt;
            {schemaNames.map(schemaName =&gt; (
              &lt;Link
                onSetActive={(to) =&gt; {
                  this.setState({
                    curForm: to,
                  });
                }}
                to={schemaName}
                duration={500}
                offset={-104}
                spy
                smooth
              &gt;
                &lt;MenuItem
                  checked={this.state.curForm === schemaName}
                &gt;
                  {schemaName}
                &lt;/MenuItem&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        &lt;/Drawer&gt;
      &lt;/div&gt;

    );
  }
}

Form.propTypes = {
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  workflows: PropTypes.arrayOf(PropTypes.string),
  fetchSchemaNames: PropTypes.func.isRequired,
};

Form.defaultProps = {
  schemaNames: [],
  workflows: [],
};

export default Form;
</code></pre>

<p>MultipleForm.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FlatButton from 'material-ui/FlatButton';
import { Element } from 'react-scroll';
import SchemaForm from './SchemaForm';

class MultipleForm extends Component {
  componentDidMount() {
    console.log('MultipleForm Mounted');
    const {
      workflow,
      fetchSchemaNames,
    } = this.props;
    if (workflow) fetchSchemaNames(workflow);
  }

  componentWillReceiveProps(nextProps) {
    const {
      workflow,
      fetchSchemaNames,
    } = nextProps;
    if (workflow &amp;&amp; this.props.workflow !== workflow) fetchSchemaNames(workflow);
  }

  componentDidUpdate() {
    const {
      schemaNames,
      schemas,
      initialValues,
      fetchSchemas,
      fetchInitialValues,
    } = this.props;
    const schemasNeedToFetch = this.remainingSchemas(schemaNames, schemas);
    if (schemasNeedToFetch.length !== 0) fetchSchemas(schemasNeedToFetch);
    const initialValuesNeedToFetch = this.remainingInitialValues(schemaNames, initialValues);
    if (initialValuesNeedToFetch.lenght !== 0) fetchInitialValues(initialValuesNeedToFetch, 1);
  }

  remainingSchemas = (schemaNames, schemas) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in schemas === false).sort();

  remainingInitialValues = (schemaNames, initialValues) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in initialValues === false).sort();

  handleSubmitAll = (event) =&gt; {
    event.preventDefault();
    const {
      submit,
      schemas,
      schemaNames,
    } = this.props;
    schemaNames
      .map(schemaName =&gt; schemas[schemaName].title)
      .forEach((title) =&gt; {
        submit(title);
      });
  }

  render() {
    const {
      schemaNames,
      schemas,
      initialValues,
      postForm,
    } = this.props;
    schemaNames.sort((a, b) =&gt; a.localeCompare(b));
    return (
      &lt;div&gt;
        {schemaNames.map(schemaName =&gt; (
          &lt;Element name={schemaName}&gt;
            &lt;SchemaForm
              key={schemaName}
              schema={schemas[schemaName]}
              initialValue={initialValues[schemaName]}
              schemaName={schemaName}
              postForm={postForm}
            /&gt;
          &lt;/Element&gt;
        ))}
        &lt;div&gt;
          &lt;FlatButton
            label=""Submit""
          /&gt;
          &lt;FlatButton label=""Deploy"" /&gt;
        &lt;/div&gt;
      &lt;/div&gt;);
  }
}

MultipleForm.propTypes = {
  workflow: PropTypes.string.isRequired,
  submit: PropTypes.func.isRequired,
  fetchSchemaNames: PropTypes.func.isRequired,
  schemas: PropTypes.object,
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  initialValues: PropTypes.object,
  fetchSchemas: PropTypes.func.isRequired,
  fetchInitialValues: PropTypes.func.isRequired,
  postForm: PropTypes.func.isRequired,
};

MultipleForm.defaultProps = {
  schemaNames: [],
};

export default MultipleForm;
</code></pre>

<p>SchemaForm</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Liform from 'liform-react';
import theme from './NokiaTheme';
import styles from './Form.css';

class SchemaForm extends Component {
  componentDidMount() {
    console.log('schema mounted');
  }

  shouldComponentUpdate() {
    return false;
  }
  handleSubmit = (value) =&gt; {
    const {
      postForm,
      schemaName,
    } = this.props;
    postForm(value, schemaName, 1);
  }


  render() {
    const {
      schema,
      initialValue,
    } = this.props;
    console.log('props', this.props);
    return (
      &lt;div&gt;
        &lt;h3 id={schema.$id} className={styles.formTitle}&gt;
          {schema.title}
        &lt;/h3&gt;
        &lt;Liform
          schema={schema}
          onSubmit={value =&gt; this.handleSubmit(value)}
          destroyOnUnmount={false}
          theme={theme}
          initialValues={initialValue}
        /&gt;
      &lt;/div&gt;
    );
  }
}

SchemaForm.propTypes = {
  schema: PropTypes.shape({
    $id: PropTypes.string,
  }),
  initialValue: PropTypes.object,
  schemaName: PropTypes.string,
  postForm: PropTypes.func.isRequired,
};

SchemaForm.defaultProps = {
  schema: {},
  initialValue: null,
  schemaName: '',
};

export default SchemaForm;
</code></pre>

<p>the schemaNames will be changed only by adding or deleting some element. for example: the schemaNames will change from <code>['A', 'B', 'C']</code> to <code>['A', 'B', 'D']</code>.  I get the schemaNames from the redux. which I fetch online.</p>

<p>But when I check the ConnectedReduxForm, when I change the schemaNames, the SchemaForm will be unmounted and the react will mount the form again. I have tried with setting the ConnectedReduxForm to be PureComponent. It is not helpful.</p>

<p>Could someone help me with that? I have spent a lot of time of this and nothing helps.</p>

<p><strong>Update</strong>: I have found the problem, the reason of it is that for each time that I for each time I update the workflow, I need to fetch the schemaNames from the server. But I still do not know why this happended. Could someone explain that?</p>
","@SimpleJ I just tried to directly import MyReduxForm instead connect the redux. shouldComponentUpdate doesn't work. it is quite wired."
"49060982","How to avoid rerendering element in the array in react?","11","<p>I have a array and I want to render the this array into a few redux forms. I found out that all the forms are rerendered. the code looks like the following:</p>

<p>Form.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link, Events, scrollSpy } from 'react-scroll';
import styles from './Form.css';
import MultipleForm from './MultipleForm';

class Form extends Component {
  constructor(props) {
    super(props);
    const {
      workflows,
    } = this.props;
    this.state = {
      curTab: workflows.length &gt; 0 ? workflows[0] : '',
      curForm: '',
    };
  }

  componentDidMount() {
    Events.scrollEvent.register('begin');
    Events.scrollEvent.register('end');
    scrollSpy.update();
  }
  componentWillReceiveProps(nextProps) {
    const {
      workflows,
    } = nextProps;
    if (workflows &amp;&amp; workflows.length &gt; this.props.workflows) {
      this.setState({
        curTab: workflows[0],
      });
    }
  }
  componentWillUnmount() {
    Events.scrollEvent.remove('begin');
    Events.scrollEvent.remove('end');
  }
  handleChangeTab = (value) =&gt; {
    this.setState({
      curTab: value,
    });
  }

  handleActiveTab = (workflow) =&gt; {
    console.log(workflow);
  }


  render() {
    const {
      workflows,
      schemaNames,
      ...rest
    } = this.props;
    return (
      &lt;div className={styles.container}&gt;
        &lt;header&gt;
          &lt;PerspectiveBar
            value={this.state.curTab}
            onChange={this.handleChangeTab}
            style={{
              position: 'fixed',
              left: '0',
              top: '48px',
              width: '100vw',
              zIndex: '1380',
            }}
          &gt;
            {workflows.map(wf =&gt; (
              &lt;PerspectiveTab
                key={wf}
                label={wf}
                value={wf}
                onActive={() =&gt; this.handleActiveTab(wf)}
              /&gt;
          ))}
          &lt;/PerspectiveBar&gt;
        &lt;/header&gt;
        &lt;div className={styles.formContainer}&gt;
          &lt;Paper className={styles.paperContainer}&gt;
            &lt;MultipleForm
              workflow={this.state.curTab}
              schemaNames={schemaNames}
              {...rest}
            /&gt;
          &lt;/Paper&gt;
        &lt;/div&gt;
        &lt;Drawer className={styles.drawer} containerStyle={{ height: 'calc(100% - 104px)', top: '104px' }}&gt;
          &lt;div className={styles.drawerContainer}&gt;
            {schemaNames.map(schemaName =&gt; (
              &lt;Link
                onSetActive={(to) =&gt; {
                  this.setState({
                    curForm: to,
                  });
                }}
                to={schemaName}
                duration={500}
                offset={-104}
                spy
                smooth
              &gt;
                &lt;MenuItem
                  checked={this.state.curForm === schemaName}
                &gt;
                  {schemaName}
                &lt;/MenuItem&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        &lt;/Drawer&gt;
      &lt;/div&gt;

    );
  }
}

Form.propTypes = {
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  workflows: PropTypes.arrayOf(PropTypes.string),
  fetchSchemaNames: PropTypes.func.isRequired,
};

Form.defaultProps = {
  schemaNames: [],
  workflows: [],
};

export default Form;
</code></pre>

<p>MultipleForm.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FlatButton from 'material-ui/FlatButton';
import { Element } from 'react-scroll';
import SchemaForm from './SchemaForm';

class MultipleForm extends Component {
  componentDidMount() {
    console.log('MultipleForm Mounted');
    const {
      workflow,
      fetchSchemaNames,
    } = this.props;
    if (workflow) fetchSchemaNames(workflow);
  }

  componentWillReceiveProps(nextProps) {
    const {
      workflow,
      fetchSchemaNames,
    } = nextProps;
    if (workflow &amp;&amp; this.props.workflow !== workflow) fetchSchemaNames(workflow);
  }

  componentDidUpdate() {
    const {
      schemaNames,
      schemas,
      initialValues,
      fetchSchemas,
      fetchInitialValues,
    } = this.props;
    const schemasNeedToFetch = this.remainingSchemas(schemaNames, schemas);
    if (schemasNeedToFetch.length !== 0) fetchSchemas(schemasNeedToFetch);
    const initialValuesNeedToFetch = this.remainingInitialValues(schemaNames, initialValues);
    if (initialValuesNeedToFetch.lenght !== 0) fetchInitialValues(initialValuesNeedToFetch, 1);
  }

  remainingSchemas = (schemaNames, schemas) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in schemas === false).sort();

  remainingInitialValues = (schemaNames, initialValues) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in initialValues === false).sort();

  handleSubmitAll = (event) =&gt; {
    event.preventDefault();
    const {
      submit,
      schemas,
      schemaNames,
    } = this.props;
    schemaNames
      .map(schemaName =&gt; schemas[schemaName].title)
      .forEach((title) =&gt; {
        submit(title);
      });
  }

  render() {
    const {
      schemaNames,
      schemas,
      initialValues,
      postForm,
    } = this.props;
    schemaNames.sort((a, b) =&gt; a.localeCompare(b));
    return (
      &lt;div&gt;
        {schemaNames.map(schemaName =&gt; (
          &lt;Element name={schemaName}&gt;
            &lt;SchemaForm
              key={schemaName}
              schema={schemas[schemaName]}
              initialValue={initialValues[schemaName]}
              schemaName={schemaName}
              postForm={postForm}
            /&gt;
          &lt;/Element&gt;
        ))}
        &lt;div&gt;
          &lt;FlatButton
            label=""Submit""
          /&gt;
          &lt;FlatButton label=""Deploy"" /&gt;
        &lt;/div&gt;
      &lt;/div&gt;);
  }
}

MultipleForm.propTypes = {
  workflow: PropTypes.string.isRequired,
  submit: PropTypes.func.isRequired,
  fetchSchemaNames: PropTypes.func.isRequired,
  schemas: PropTypes.object,
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  initialValues: PropTypes.object,
  fetchSchemas: PropTypes.func.isRequired,
  fetchInitialValues: PropTypes.func.isRequired,
  postForm: PropTypes.func.isRequired,
};

MultipleForm.defaultProps = {
  schemaNames: [],
};

export default MultipleForm;
</code></pre>

<p>SchemaForm</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Liform from 'liform-react';
import theme from './NokiaTheme';
import styles from './Form.css';

class SchemaForm extends Component {
  componentDidMount() {
    console.log('schema mounted');
  }

  shouldComponentUpdate() {
    return false;
  }
  handleSubmit = (value) =&gt; {
    const {
      postForm,
      schemaName,
    } = this.props;
    postForm(value, schemaName, 1);
  }


  render() {
    const {
      schema,
      initialValue,
    } = this.props;
    console.log('props', this.props);
    return (
      &lt;div&gt;
        &lt;h3 id={schema.$id} className={styles.formTitle}&gt;
          {schema.title}
        &lt;/h3&gt;
        &lt;Liform
          schema={schema}
          onSubmit={value =&gt; this.handleSubmit(value)}
          destroyOnUnmount={false}
          theme={theme}
          initialValues={initialValue}
        /&gt;
      &lt;/div&gt;
    );
  }
}

SchemaForm.propTypes = {
  schema: PropTypes.shape({
    $id: PropTypes.string,
  }),
  initialValue: PropTypes.object,
  schemaName: PropTypes.string,
  postForm: PropTypes.func.isRequired,
};

SchemaForm.defaultProps = {
  schema: {},
  initialValue: null,
  schemaName: '',
};

export default SchemaForm;
</code></pre>

<p>the schemaNames will be changed only by adding or deleting some element. for example: the schemaNames will change from <code>['A', 'B', 'C']</code> to <code>['A', 'B', 'D']</code>.  I get the schemaNames from the redux. which I fetch online.</p>

<p>But when I check the ConnectedReduxForm, when I change the schemaNames, the SchemaForm will be unmounted and the react will mount the form again. I have tried with setting the ConnectedReduxForm to be PureComponent. It is not helpful.</p>

<p>Could someone help me with that? I have spent a lot of time of this and nothing helps.</p>

<p><strong>Update</strong>: I have found the problem, the reason of it is that for each time that I for each time I update the workflow, I need to fetch the schemaNames from the server. But I still do not know why this happended. Could someone explain that?</p>
","@Hamms I have tried with set the shouldComponentUpdate function return false, and it doesn't work. Furthermore, the ConntectedReduxForm have been unmounted, I think there is nothing to do with the update."
"49060982","How to avoid rerendering element in the array in react?","11","<p>I have a array and I want to render the this array into a few redux forms. I found out that all the forms are rerendered. the code looks like the following:</p>

<p>Form.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link, Events, scrollSpy } from 'react-scroll';
import styles from './Form.css';
import MultipleForm from './MultipleForm';

class Form extends Component {
  constructor(props) {
    super(props);
    const {
      workflows,
    } = this.props;
    this.state = {
      curTab: workflows.length &gt; 0 ? workflows[0] : '',
      curForm: '',
    };
  }

  componentDidMount() {
    Events.scrollEvent.register('begin');
    Events.scrollEvent.register('end');
    scrollSpy.update();
  }
  componentWillReceiveProps(nextProps) {
    const {
      workflows,
    } = nextProps;
    if (workflows &amp;&amp; workflows.length &gt; this.props.workflows) {
      this.setState({
        curTab: workflows[0],
      });
    }
  }
  componentWillUnmount() {
    Events.scrollEvent.remove('begin');
    Events.scrollEvent.remove('end');
  }
  handleChangeTab = (value) =&gt; {
    this.setState({
      curTab: value,
    });
  }

  handleActiveTab = (workflow) =&gt; {
    console.log(workflow);
  }


  render() {
    const {
      workflows,
      schemaNames,
      ...rest
    } = this.props;
    return (
      &lt;div className={styles.container}&gt;
        &lt;header&gt;
          &lt;PerspectiveBar
            value={this.state.curTab}
            onChange={this.handleChangeTab}
            style={{
              position: 'fixed',
              left: '0',
              top: '48px',
              width: '100vw',
              zIndex: '1380',
            }}
          &gt;
            {workflows.map(wf =&gt; (
              &lt;PerspectiveTab
                key={wf}
                label={wf}
                value={wf}
                onActive={() =&gt; this.handleActiveTab(wf)}
              /&gt;
          ))}
          &lt;/PerspectiveBar&gt;
        &lt;/header&gt;
        &lt;div className={styles.formContainer}&gt;
          &lt;Paper className={styles.paperContainer}&gt;
            &lt;MultipleForm
              workflow={this.state.curTab}
              schemaNames={schemaNames}
              {...rest}
            /&gt;
          &lt;/Paper&gt;
        &lt;/div&gt;
        &lt;Drawer className={styles.drawer} containerStyle={{ height: 'calc(100% - 104px)', top: '104px' }}&gt;
          &lt;div className={styles.drawerContainer}&gt;
            {schemaNames.map(schemaName =&gt; (
              &lt;Link
                onSetActive={(to) =&gt; {
                  this.setState({
                    curForm: to,
                  });
                }}
                to={schemaName}
                duration={500}
                offset={-104}
                spy
                smooth
              &gt;
                &lt;MenuItem
                  checked={this.state.curForm === schemaName}
                &gt;
                  {schemaName}
                &lt;/MenuItem&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        &lt;/Drawer&gt;
      &lt;/div&gt;

    );
  }
}

Form.propTypes = {
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  workflows: PropTypes.arrayOf(PropTypes.string),
  fetchSchemaNames: PropTypes.func.isRequired,
};

Form.defaultProps = {
  schemaNames: [],
  workflows: [],
};

export default Form;
</code></pre>

<p>MultipleForm.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FlatButton from 'material-ui/FlatButton';
import { Element } from 'react-scroll';
import SchemaForm from './SchemaForm';

class MultipleForm extends Component {
  componentDidMount() {
    console.log('MultipleForm Mounted');
    const {
      workflow,
      fetchSchemaNames,
    } = this.props;
    if (workflow) fetchSchemaNames(workflow);
  }

  componentWillReceiveProps(nextProps) {
    const {
      workflow,
      fetchSchemaNames,
    } = nextProps;
    if (workflow &amp;&amp; this.props.workflow !== workflow) fetchSchemaNames(workflow);
  }

  componentDidUpdate() {
    const {
      schemaNames,
      schemas,
      initialValues,
      fetchSchemas,
      fetchInitialValues,
    } = this.props;
    const schemasNeedToFetch = this.remainingSchemas(schemaNames, schemas);
    if (schemasNeedToFetch.length !== 0) fetchSchemas(schemasNeedToFetch);
    const initialValuesNeedToFetch = this.remainingInitialValues(schemaNames, initialValues);
    if (initialValuesNeedToFetch.lenght !== 0) fetchInitialValues(initialValuesNeedToFetch, 1);
  }

  remainingSchemas = (schemaNames, schemas) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in schemas === false).sort();

  remainingInitialValues = (schemaNames, initialValues) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in initialValues === false).sort();

  handleSubmitAll = (event) =&gt; {
    event.preventDefault();
    const {
      submit,
      schemas,
      schemaNames,
    } = this.props;
    schemaNames
      .map(schemaName =&gt; schemas[schemaName].title)
      .forEach((title) =&gt; {
        submit(title);
      });
  }

  render() {
    const {
      schemaNames,
      schemas,
      initialValues,
      postForm,
    } = this.props;
    schemaNames.sort((a, b) =&gt; a.localeCompare(b));
    return (
      &lt;div&gt;
        {schemaNames.map(schemaName =&gt; (
          &lt;Element name={schemaName}&gt;
            &lt;SchemaForm
              key={schemaName}
              schema={schemas[schemaName]}
              initialValue={initialValues[schemaName]}
              schemaName={schemaName}
              postForm={postForm}
            /&gt;
          &lt;/Element&gt;
        ))}
        &lt;div&gt;
          &lt;FlatButton
            label=""Submit""
          /&gt;
          &lt;FlatButton label=""Deploy"" /&gt;
        &lt;/div&gt;
      &lt;/div&gt;);
  }
}

MultipleForm.propTypes = {
  workflow: PropTypes.string.isRequired,
  submit: PropTypes.func.isRequired,
  fetchSchemaNames: PropTypes.func.isRequired,
  schemas: PropTypes.object,
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  initialValues: PropTypes.object,
  fetchSchemas: PropTypes.func.isRequired,
  fetchInitialValues: PropTypes.func.isRequired,
  postForm: PropTypes.func.isRequired,
};

MultipleForm.defaultProps = {
  schemaNames: [],
};

export default MultipleForm;
</code></pre>

<p>SchemaForm</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Liform from 'liform-react';
import theme from './NokiaTheme';
import styles from './Form.css';

class SchemaForm extends Component {
  componentDidMount() {
    console.log('schema mounted');
  }

  shouldComponentUpdate() {
    return false;
  }
  handleSubmit = (value) =&gt; {
    const {
      postForm,
      schemaName,
    } = this.props;
    postForm(value, schemaName, 1);
  }


  render() {
    const {
      schema,
      initialValue,
    } = this.props;
    console.log('props', this.props);
    return (
      &lt;div&gt;
        &lt;h3 id={schema.$id} className={styles.formTitle}&gt;
          {schema.title}
        &lt;/h3&gt;
        &lt;Liform
          schema={schema}
          onSubmit={value =&gt; this.handleSubmit(value)}
          destroyOnUnmount={false}
          theme={theme}
          initialValues={initialValue}
        /&gt;
      &lt;/div&gt;
    );
  }
}

SchemaForm.propTypes = {
  schema: PropTypes.shape({
    $id: PropTypes.string,
  }),
  initialValue: PropTypes.object,
  schemaName: PropTypes.string,
  postForm: PropTypes.func.isRequired,
};

SchemaForm.defaultProps = {
  schema: {},
  initialValue: null,
  schemaName: '',
};

export default SchemaForm;
</code></pre>

<p>the schemaNames will be changed only by adding or deleting some element. for example: the schemaNames will change from <code>['A', 'B', 'C']</code> to <code>['A', 'B', 'D']</code>.  I get the schemaNames from the redux. which I fetch online.</p>

<p>But when I check the ConnectedReduxForm, when I change the schemaNames, the SchemaForm will be unmounted and the react will mount the form again. I have tried with setting the ConnectedReduxForm to be PureComponent. It is not helpful.</p>

<p>Could someone help me with that? I have spent a lot of time of this and nothing helps.</p>

<p><strong>Update</strong>: I have found the problem, the reason of it is that for each time that I for each time I update the workflow, I need to fetch the schemaNames from the server. But I still do not know why this happended. Could someone explain that?</p>
","Can you post your complete code somewhere? My feeling is that the parent component was unmounted and mounted again, but I can't be sure without trying the code myself."
"49060982","How to avoid rerendering element in the array in react?","11","<p>I have a array and I want to render the this array into a few redux forms. I found out that all the forms are rerendered. the code looks like the following:</p>

<p>Form.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link, Events, scrollSpy } from 'react-scroll';
import styles from './Form.css';
import MultipleForm from './MultipleForm';

class Form extends Component {
  constructor(props) {
    super(props);
    const {
      workflows,
    } = this.props;
    this.state = {
      curTab: workflows.length &gt; 0 ? workflows[0] : '',
      curForm: '',
    };
  }

  componentDidMount() {
    Events.scrollEvent.register('begin');
    Events.scrollEvent.register('end');
    scrollSpy.update();
  }
  componentWillReceiveProps(nextProps) {
    const {
      workflows,
    } = nextProps;
    if (workflows &amp;&amp; workflows.length &gt; this.props.workflows) {
      this.setState({
        curTab: workflows[0],
      });
    }
  }
  componentWillUnmount() {
    Events.scrollEvent.remove('begin');
    Events.scrollEvent.remove('end');
  }
  handleChangeTab = (value) =&gt; {
    this.setState({
      curTab: value,
    });
  }

  handleActiveTab = (workflow) =&gt; {
    console.log(workflow);
  }


  render() {
    const {
      workflows,
      schemaNames,
      ...rest
    } = this.props;
    return (
      &lt;div className={styles.container}&gt;
        &lt;header&gt;
          &lt;PerspectiveBar
            value={this.state.curTab}
            onChange={this.handleChangeTab}
            style={{
              position: 'fixed',
              left: '0',
              top: '48px',
              width: '100vw',
              zIndex: '1380',
            }}
          &gt;
            {workflows.map(wf =&gt; (
              &lt;PerspectiveTab
                key={wf}
                label={wf}
                value={wf}
                onActive={() =&gt; this.handleActiveTab(wf)}
              /&gt;
          ))}
          &lt;/PerspectiveBar&gt;
        &lt;/header&gt;
        &lt;div className={styles.formContainer}&gt;
          &lt;Paper className={styles.paperContainer}&gt;
            &lt;MultipleForm
              workflow={this.state.curTab}
              schemaNames={schemaNames}
              {...rest}
            /&gt;
          &lt;/Paper&gt;
        &lt;/div&gt;
        &lt;Drawer className={styles.drawer} containerStyle={{ height: 'calc(100% - 104px)', top: '104px' }}&gt;
          &lt;div className={styles.drawerContainer}&gt;
            {schemaNames.map(schemaName =&gt; (
              &lt;Link
                onSetActive={(to) =&gt; {
                  this.setState({
                    curForm: to,
                  });
                }}
                to={schemaName}
                duration={500}
                offset={-104}
                spy
                smooth
              &gt;
                &lt;MenuItem
                  checked={this.state.curForm === schemaName}
                &gt;
                  {schemaName}
                &lt;/MenuItem&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        &lt;/Drawer&gt;
      &lt;/div&gt;

    );
  }
}

Form.propTypes = {
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  workflows: PropTypes.arrayOf(PropTypes.string),
  fetchSchemaNames: PropTypes.func.isRequired,
};

Form.defaultProps = {
  schemaNames: [],
  workflows: [],
};

export default Form;
</code></pre>

<p>MultipleForm.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FlatButton from 'material-ui/FlatButton';
import { Element } from 'react-scroll';
import SchemaForm from './SchemaForm';

class MultipleForm extends Component {
  componentDidMount() {
    console.log('MultipleForm Mounted');
    const {
      workflow,
      fetchSchemaNames,
    } = this.props;
    if (workflow) fetchSchemaNames(workflow);
  }

  componentWillReceiveProps(nextProps) {
    const {
      workflow,
      fetchSchemaNames,
    } = nextProps;
    if (workflow &amp;&amp; this.props.workflow !== workflow) fetchSchemaNames(workflow);
  }

  componentDidUpdate() {
    const {
      schemaNames,
      schemas,
      initialValues,
      fetchSchemas,
      fetchInitialValues,
    } = this.props;
    const schemasNeedToFetch = this.remainingSchemas(schemaNames, schemas);
    if (schemasNeedToFetch.length !== 0) fetchSchemas(schemasNeedToFetch);
    const initialValuesNeedToFetch = this.remainingInitialValues(schemaNames, initialValues);
    if (initialValuesNeedToFetch.lenght !== 0) fetchInitialValues(initialValuesNeedToFetch, 1);
  }

  remainingSchemas = (schemaNames, schemas) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in schemas === false).sort();

  remainingInitialValues = (schemaNames, initialValues) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in initialValues === false).sort();

  handleSubmitAll = (event) =&gt; {
    event.preventDefault();
    const {
      submit,
      schemas,
      schemaNames,
    } = this.props;
    schemaNames
      .map(schemaName =&gt; schemas[schemaName].title)
      .forEach((title) =&gt; {
        submit(title);
      });
  }

  render() {
    const {
      schemaNames,
      schemas,
      initialValues,
      postForm,
    } = this.props;
    schemaNames.sort((a, b) =&gt; a.localeCompare(b));
    return (
      &lt;div&gt;
        {schemaNames.map(schemaName =&gt; (
          &lt;Element name={schemaName}&gt;
            &lt;SchemaForm
              key={schemaName}
              schema={schemas[schemaName]}
              initialValue={initialValues[schemaName]}
              schemaName={schemaName}
              postForm={postForm}
            /&gt;
          &lt;/Element&gt;
        ))}
        &lt;div&gt;
          &lt;FlatButton
            label=""Submit""
          /&gt;
          &lt;FlatButton label=""Deploy"" /&gt;
        &lt;/div&gt;
      &lt;/div&gt;);
  }
}

MultipleForm.propTypes = {
  workflow: PropTypes.string.isRequired,
  submit: PropTypes.func.isRequired,
  fetchSchemaNames: PropTypes.func.isRequired,
  schemas: PropTypes.object,
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  initialValues: PropTypes.object,
  fetchSchemas: PropTypes.func.isRequired,
  fetchInitialValues: PropTypes.func.isRequired,
  postForm: PropTypes.func.isRequired,
};

MultipleForm.defaultProps = {
  schemaNames: [],
};

export default MultipleForm;
</code></pre>

<p>SchemaForm</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Liform from 'liform-react';
import theme from './NokiaTheme';
import styles from './Form.css';

class SchemaForm extends Component {
  componentDidMount() {
    console.log('schema mounted');
  }

  shouldComponentUpdate() {
    return false;
  }
  handleSubmit = (value) =&gt; {
    const {
      postForm,
      schemaName,
    } = this.props;
    postForm(value, schemaName, 1);
  }


  render() {
    const {
      schema,
      initialValue,
    } = this.props;
    console.log('props', this.props);
    return (
      &lt;div&gt;
        &lt;h3 id={schema.$id} className={styles.formTitle}&gt;
          {schema.title}
        &lt;/h3&gt;
        &lt;Liform
          schema={schema}
          onSubmit={value =&gt; this.handleSubmit(value)}
          destroyOnUnmount={false}
          theme={theme}
          initialValues={initialValue}
        /&gt;
      &lt;/div&gt;
    );
  }
}

SchemaForm.propTypes = {
  schema: PropTypes.shape({
    $id: PropTypes.string,
  }),
  initialValue: PropTypes.object,
  schemaName: PropTypes.string,
  postForm: PropTypes.func.isRequired,
};

SchemaForm.defaultProps = {
  schema: {},
  initialValue: null,
  schemaName: '',
};

export default SchemaForm;
</code></pre>

<p>the schemaNames will be changed only by adding or deleting some element. for example: the schemaNames will change from <code>['A', 'B', 'C']</code> to <code>['A', 'B', 'D']</code>.  I get the schemaNames from the redux. which I fetch online.</p>

<p>But when I check the ConnectedReduxForm, when I change the schemaNames, the SchemaForm will be unmounted and the react will mount the form again. I have tried with setting the ConnectedReduxForm to be PureComponent. It is not helpful.</p>

<p>Could someone help me with that? I have spent a lot of time of this and nothing helps.</p>

<p><strong>Update</strong>: I have found the problem, the reason of it is that for each time that I for each time I update the workflow, I need to fetch the schemaNames from the server. But I still do not know why this happended. Could someone explain that?</p>
","`shouldComponentUpdate` should only return false if the component shouldn't update. It seems like you want the component to update only when its schemaName changes, so your `shouldComponentUpdate` method should reflect that"
"49060982","How to avoid rerendering element in the array in react?","11","<p>I have a array and I want to render the this array into a few redux forms. I found out that all the forms are rerendered. the code looks like the following:</p>

<p>Form.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link, Events, scrollSpy } from 'react-scroll';
import styles from './Form.css';
import MultipleForm from './MultipleForm';

class Form extends Component {
  constructor(props) {
    super(props);
    const {
      workflows,
    } = this.props;
    this.state = {
      curTab: workflows.length &gt; 0 ? workflows[0] : '',
      curForm: '',
    };
  }

  componentDidMount() {
    Events.scrollEvent.register('begin');
    Events.scrollEvent.register('end');
    scrollSpy.update();
  }
  componentWillReceiveProps(nextProps) {
    const {
      workflows,
    } = nextProps;
    if (workflows &amp;&amp; workflows.length &gt; this.props.workflows) {
      this.setState({
        curTab: workflows[0],
      });
    }
  }
  componentWillUnmount() {
    Events.scrollEvent.remove('begin');
    Events.scrollEvent.remove('end');
  }
  handleChangeTab = (value) =&gt; {
    this.setState({
      curTab: value,
    });
  }

  handleActiveTab = (workflow) =&gt; {
    console.log(workflow);
  }


  render() {
    const {
      workflows,
      schemaNames,
      ...rest
    } = this.props;
    return (
      &lt;div className={styles.container}&gt;
        &lt;header&gt;
          &lt;PerspectiveBar
            value={this.state.curTab}
            onChange={this.handleChangeTab}
            style={{
              position: 'fixed',
              left: '0',
              top: '48px',
              width: '100vw',
              zIndex: '1380',
            }}
          &gt;
            {workflows.map(wf =&gt; (
              &lt;PerspectiveTab
                key={wf}
                label={wf}
                value={wf}
                onActive={() =&gt; this.handleActiveTab(wf)}
              /&gt;
          ))}
          &lt;/PerspectiveBar&gt;
        &lt;/header&gt;
        &lt;div className={styles.formContainer}&gt;
          &lt;Paper className={styles.paperContainer}&gt;
            &lt;MultipleForm
              workflow={this.state.curTab}
              schemaNames={schemaNames}
              {...rest}
            /&gt;
          &lt;/Paper&gt;
        &lt;/div&gt;
        &lt;Drawer className={styles.drawer} containerStyle={{ height: 'calc(100% - 104px)', top: '104px' }}&gt;
          &lt;div className={styles.drawerContainer}&gt;
            {schemaNames.map(schemaName =&gt; (
              &lt;Link
                onSetActive={(to) =&gt; {
                  this.setState({
                    curForm: to,
                  });
                }}
                to={schemaName}
                duration={500}
                offset={-104}
                spy
                smooth
              &gt;
                &lt;MenuItem
                  checked={this.state.curForm === schemaName}
                &gt;
                  {schemaName}
                &lt;/MenuItem&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        &lt;/Drawer&gt;
      &lt;/div&gt;

    );
  }
}

Form.propTypes = {
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  workflows: PropTypes.arrayOf(PropTypes.string),
  fetchSchemaNames: PropTypes.func.isRequired,
};

Form.defaultProps = {
  schemaNames: [],
  workflows: [],
};

export default Form;
</code></pre>

<p>MultipleForm.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FlatButton from 'material-ui/FlatButton';
import { Element } from 'react-scroll';
import SchemaForm from './SchemaForm';

class MultipleForm extends Component {
  componentDidMount() {
    console.log('MultipleForm Mounted');
    const {
      workflow,
      fetchSchemaNames,
    } = this.props;
    if (workflow) fetchSchemaNames(workflow);
  }

  componentWillReceiveProps(nextProps) {
    const {
      workflow,
      fetchSchemaNames,
    } = nextProps;
    if (workflow &amp;&amp; this.props.workflow !== workflow) fetchSchemaNames(workflow);
  }

  componentDidUpdate() {
    const {
      schemaNames,
      schemas,
      initialValues,
      fetchSchemas,
      fetchInitialValues,
    } = this.props;
    const schemasNeedToFetch = this.remainingSchemas(schemaNames, schemas);
    if (schemasNeedToFetch.length !== 0) fetchSchemas(schemasNeedToFetch);
    const initialValuesNeedToFetch = this.remainingInitialValues(schemaNames, initialValues);
    if (initialValuesNeedToFetch.lenght !== 0) fetchInitialValues(initialValuesNeedToFetch, 1);
  }

  remainingSchemas = (schemaNames, schemas) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in schemas === false).sort();

  remainingInitialValues = (schemaNames, initialValues) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in initialValues === false).sort();

  handleSubmitAll = (event) =&gt; {
    event.preventDefault();
    const {
      submit,
      schemas,
      schemaNames,
    } = this.props;
    schemaNames
      .map(schemaName =&gt; schemas[schemaName].title)
      .forEach((title) =&gt; {
        submit(title);
      });
  }

  render() {
    const {
      schemaNames,
      schemas,
      initialValues,
      postForm,
    } = this.props;
    schemaNames.sort((a, b) =&gt; a.localeCompare(b));
    return (
      &lt;div&gt;
        {schemaNames.map(schemaName =&gt; (
          &lt;Element name={schemaName}&gt;
            &lt;SchemaForm
              key={schemaName}
              schema={schemas[schemaName]}
              initialValue={initialValues[schemaName]}
              schemaName={schemaName}
              postForm={postForm}
            /&gt;
          &lt;/Element&gt;
        ))}
        &lt;div&gt;
          &lt;FlatButton
            label=""Submit""
          /&gt;
          &lt;FlatButton label=""Deploy"" /&gt;
        &lt;/div&gt;
      &lt;/div&gt;);
  }
}

MultipleForm.propTypes = {
  workflow: PropTypes.string.isRequired,
  submit: PropTypes.func.isRequired,
  fetchSchemaNames: PropTypes.func.isRequired,
  schemas: PropTypes.object,
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  initialValues: PropTypes.object,
  fetchSchemas: PropTypes.func.isRequired,
  fetchInitialValues: PropTypes.func.isRequired,
  postForm: PropTypes.func.isRequired,
};

MultipleForm.defaultProps = {
  schemaNames: [],
};

export default MultipleForm;
</code></pre>

<p>SchemaForm</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Liform from 'liform-react';
import theme from './NokiaTheme';
import styles from './Form.css';

class SchemaForm extends Component {
  componentDidMount() {
    console.log('schema mounted');
  }

  shouldComponentUpdate() {
    return false;
  }
  handleSubmit = (value) =&gt; {
    const {
      postForm,
      schemaName,
    } = this.props;
    postForm(value, schemaName, 1);
  }


  render() {
    const {
      schema,
      initialValue,
    } = this.props;
    console.log('props', this.props);
    return (
      &lt;div&gt;
        &lt;h3 id={schema.$id} className={styles.formTitle}&gt;
          {schema.title}
        &lt;/h3&gt;
        &lt;Liform
          schema={schema}
          onSubmit={value =&gt; this.handleSubmit(value)}
          destroyOnUnmount={false}
          theme={theme}
          initialValues={initialValue}
        /&gt;
      &lt;/div&gt;
    );
  }
}

SchemaForm.propTypes = {
  schema: PropTypes.shape({
    $id: PropTypes.string,
  }),
  initialValue: PropTypes.object,
  schemaName: PropTypes.string,
  postForm: PropTypes.func.isRequired,
};

SchemaForm.defaultProps = {
  schema: {},
  initialValue: null,
  schemaName: '',
};

export default SchemaForm;
</code></pre>

<p>the schemaNames will be changed only by adding or deleting some element. for example: the schemaNames will change from <code>['A', 'B', 'C']</code> to <code>['A', 'B', 'D']</code>.  I get the schemaNames from the redux. which I fetch online.</p>

<p>But when I check the ConnectedReduxForm, when I change the schemaNames, the SchemaForm will be unmounted and the react will mount the form again. I have tried with setting the ConnectedReduxForm to be PureComponent. It is not helpful.</p>

<p>Could someone help me with that? I have spent a lot of time of this and nothing helps.</p>

<p><strong>Update</strong>: I have found the problem, the reason of it is that for each time that I for each time I update the workflow, I need to fetch the schemaNames from the server. But I still do not know why this happended. Could someone explain that?</p>
","@brickingup Hello, I have just uploaded all the code. But I think that the parent component has not been re-mounted."
"49060982","How to avoid rerendering element in the array in react?","11","<p>I have a array and I want to render the this array into a few redux forms. I found out that all the forms are rerendered. the code looks like the following:</p>

<p>Form.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link, Events, scrollSpy } from 'react-scroll';
import styles from './Form.css';
import MultipleForm from './MultipleForm';

class Form extends Component {
  constructor(props) {
    super(props);
    const {
      workflows,
    } = this.props;
    this.state = {
      curTab: workflows.length &gt; 0 ? workflows[0] : '',
      curForm: '',
    };
  }

  componentDidMount() {
    Events.scrollEvent.register('begin');
    Events.scrollEvent.register('end');
    scrollSpy.update();
  }
  componentWillReceiveProps(nextProps) {
    const {
      workflows,
    } = nextProps;
    if (workflows &amp;&amp; workflows.length &gt; this.props.workflows) {
      this.setState({
        curTab: workflows[0],
      });
    }
  }
  componentWillUnmount() {
    Events.scrollEvent.remove('begin');
    Events.scrollEvent.remove('end');
  }
  handleChangeTab = (value) =&gt; {
    this.setState({
      curTab: value,
    });
  }

  handleActiveTab = (workflow) =&gt; {
    console.log(workflow);
  }


  render() {
    const {
      workflows,
      schemaNames,
      ...rest
    } = this.props;
    return (
      &lt;div className={styles.container}&gt;
        &lt;header&gt;
          &lt;PerspectiveBar
            value={this.state.curTab}
            onChange={this.handleChangeTab}
            style={{
              position: 'fixed',
              left: '0',
              top: '48px',
              width: '100vw',
              zIndex: '1380',
            }}
          &gt;
            {workflows.map(wf =&gt; (
              &lt;PerspectiveTab
                key={wf}
                label={wf}
                value={wf}
                onActive={() =&gt; this.handleActiveTab(wf)}
              /&gt;
          ))}
          &lt;/PerspectiveBar&gt;
        &lt;/header&gt;
        &lt;div className={styles.formContainer}&gt;
          &lt;Paper className={styles.paperContainer}&gt;
            &lt;MultipleForm
              workflow={this.state.curTab}
              schemaNames={schemaNames}
              {...rest}
            /&gt;
          &lt;/Paper&gt;
        &lt;/div&gt;
        &lt;Drawer className={styles.drawer} containerStyle={{ height: 'calc(100% - 104px)', top: '104px' }}&gt;
          &lt;div className={styles.drawerContainer}&gt;
            {schemaNames.map(schemaName =&gt; (
              &lt;Link
                onSetActive={(to) =&gt; {
                  this.setState({
                    curForm: to,
                  });
                }}
                to={schemaName}
                duration={500}
                offset={-104}
                spy
                smooth
              &gt;
                &lt;MenuItem
                  checked={this.state.curForm === schemaName}
                &gt;
                  {schemaName}
                &lt;/MenuItem&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        &lt;/Drawer&gt;
      &lt;/div&gt;

    );
  }
}

Form.propTypes = {
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  workflows: PropTypes.arrayOf(PropTypes.string),
  fetchSchemaNames: PropTypes.func.isRequired,
};

Form.defaultProps = {
  schemaNames: [],
  workflows: [],
};

export default Form;
</code></pre>

<p>MultipleForm.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FlatButton from 'material-ui/FlatButton';
import { Element } from 'react-scroll';
import SchemaForm from './SchemaForm';

class MultipleForm extends Component {
  componentDidMount() {
    console.log('MultipleForm Mounted');
    const {
      workflow,
      fetchSchemaNames,
    } = this.props;
    if (workflow) fetchSchemaNames(workflow);
  }

  componentWillReceiveProps(nextProps) {
    const {
      workflow,
      fetchSchemaNames,
    } = nextProps;
    if (workflow &amp;&amp; this.props.workflow !== workflow) fetchSchemaNames(workflow);
  }

  componentDidUpdate() {
    const {
      schemaNames,
      schemas,
      initialValues,
      fetchSchemas,
      fetchInitialValues,
    } = this.props;
    const schemasNeedToFetch = this.remainingSchemas(schemaNames, schemas);
    if (schemasNeedToFetch.length !== 0) fetchSchemas(schemasNeedToFetch);
    const initialValuesNeedToFetch = this.remainingInitialValues(schemaNames, initialValues);
    if (initialValuesNeedToFetch.lenght !== 0) fetchInitialValues(initialValuesNeedToFetch, 1);
  }

  remainingSchemas = (schemaNames, schemas) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in schemas === false).sort();

  remainingInitialValues = (schemaNames, initialValues) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in initialValues === false).sort();

  handleSubmitAll = (event) =&gt; {
    event.preventDefault();
    const {
      submit,
      schemas,
      schemaNames,
    } = this.props;
    schemaNames
      .map(schemaName =&gt; schemas[schemaName].title)
      .forEach((title) =&gt; {
        submit(title);
      });
  }

  render() {
    const {
      schemaNames,
      schemas,
      initialValues,
      postForm,
    } = this.props;
    schemaNames.sort((a, b) =&gt; a.localeCompare(b));
    return (
      &lt;div&gt;
        {schemaNames.map(schemaName =&gt; (
          &lt;Element name={schemaName}&gt;
            &lt;SchemaForm
              key={schemaName}
              schema={schemas[schemaName]}
              initialValue={initialValues[schemaName]}
              schemaName={schemaName}
              postForm={postForm}
            /&gt;
          &lt;/Element&gt;
        ))}
        &lt;div&gt;
          &lt;FlatButton
            label=""Submit""
          /&gt;
          &lt;FlatButton label=""Deploy"" /&gt;
        &lt;/div&gt;
      &lt;/div&gt;);
  }
}

MultipleForm.propTypes = {
  workflow: PropTypes.string.isRequired,
  submit: PropTypes.func.isRequired,
  fetchSchemaNames: PropTypes.func.isRequired,
  schemas: PropTypes.object,
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  initialValues: PropTypes.object,
  fetchSchemas: PropTypes.func.isRequired,
  fetchInitialValues: PropTypes.func.isRequired,
  postForm: PropTypes.func.isRequired,
};

MultipleForm.defaultProps = {
  schemaNames: [],
};

export default MultipleForm;
</code></pre>

<p>SchemaForm</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Liform from 'liform-react';
import theme from './NokiaTheme';
import styles from './Form.css';

class SchemaForm extends Component {
  componentDidMount() {
    console.log('schema mounted');
  }

  shouldComponentUpdate() {
    return false;
  }
  handleSubmit = (value) =&gt; {
    const {
      postForm,
      schemaName,
    } = this.props;
    postForm(value, schemaName, 1);
  }


  render() {
    const {
      schema,
      initialValue,
    } = this.props;
    console.log('props', this.props);
    return (
      &lt;div&gt;
        &lt;h3 id={schema.$id} className={styles.formTitle}&gt;
          {schema.title}
        &lt;/h3&gt;
        &lt;Liform
          schema={schema}
          onSubmit={value =&gt; this.handleSubmit(value)}
          destroyOnUnmount={false}
          theme={theme}
          initialValues={initialValue}
        /&gt;
      &lt;/div&gt;
    );
  }
}

SchemaForm.propTypes = {
  schema: PropTypes.shape({
    $id: PropTypes.string,
  }),
  initialValue: PropTypes.object,
  schemaName: PropTypes.string,
  postForm: PropTypes.func.isRequired,
};

SchemaForm.defaultProps = {
  schema: {},
  initialValue: null,
  schemaName: '',
};

export default SchemaForm;
</code></pre>

<p>the schemaNames will be changed only by adding or deleting some element. for example: the schemaNames will change from <code>['A', 'B', 'C']</code> to <code>['A', 'B', 'D']</code>.  I get the schemaNames from the redux. which I fetch online.</p>

<p>But when I check the ConnectedReduxForm, when I change the schemaNames, the SchemaForm will be unmounted and the react will mount the form again. I have tried with setting the ConnectedReduxForm to be PureComponent. It is not helpful.</p>

<p>Could someone help me with that? I have spent a lot of time of this and nothing helps.</p>

<p><strong>Update</strong>: I have found the problem, the reason of it is that for each time that I for each time I update the workflow, I need to fetch the schemaNames from the server. But I still do not know why this happended. Could someone explain that?</p>
","@Hamms I just return false for the test. The problem is I have no way to prevent the schemaForm to re-mount. All of three schemaForm are re-mounted. the multipleForm is not."
"49060982","How to avoid rerendering element in the array in react?","11","<p>I have a array and I want to render the this array into a few redux forms. I found out that all the forms are rerendered. the code looks like the following:</p>

<p>Form.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link, Events, scrollSpy } from 'react-scroll';
import styles from './Form.css';
import MultipleForm from './MultipleForm';

class Form extends Component {
  constructor(props) {
    super(props);
    const {
      workflows,
    } = this.props;
    this.state = {
      curTab: workflows.length &gt; 0 ? workflows[0] : '',
      curForm: '',
    };
  }

  componentDidMount() {
    Events.scrollEvent.register('begin');
    Events.scrollEvent.register('end');
    scrollSpy.update();
  }
  componentWillReceiveProps(nextProps) {
    const {
      workflows,
    } = nextProps;
    if (workflows &amp;&amp; workflows.length &gt; this.props.workflows) {
      this.setState({
        curTab: workflows[0],
      });
    }
  }
  componentWillUnmount() {
    Events.scrollEvent.remove('begin');
    Events.scrollEvent.remove('end');
  }
  handleChangeTab = (value) =&gt; {
    this.setState({
      curTab: value,
    });
  }

  handleActiveTab = (workflow) =&gt; {
    console.log(workflow);
  }


  render() {
    const {
      workflows,
      schemaNames,
      ...rest
    } = this.props;
    return (
      &lt;div className={styles.container}&gt;
        &lt;header&gt;
          &lt;PerspectiveBar
            value={this.state.curTab}
            onChange={this.handleChangeTab}
            style={{
              position: 'fixed',
              left: '0',
              top: '48px',
              width: '100vw',
              zIndex: '1380',
            }}
          &gt;
            {workflows.map(wf =&gt; (
              &lt;PerspectiveTab
                key={wf}
                label={wf}
                value={wf}
                onActive={() =&gt; this.handleActiveTab(wf)}
              /&gt;
          ))}
          &lt;/PerspectiveBar&gt;
        &lt;/header&gt;
        &lt;div className={styles.formContainer}&gt;
          &lt;Paper className={styles.paperContainer}&gt;
            &lt;MultipleForm
              workflow={this.state.curTab}
              schemaNames={schemaNames}
              {...rest}
            /&gt;
          &lt;/Paper&gt;
        &lt;/div&gt;
        &lt;Drawer className={styles.drawer} containerStyle={{ height: 'calc(100% - 104px)', top: '104px' }}&gt;
          &lt;div className={styles.drawerContainer}&gt;
            {schemaNames.map(schemaName =&gt; (
              &lt;Link
                onSetActive={(to) =&gt; {
                  this.setState({
                    curForm: to,
                  });
                }}
                to={schemaName}
                duration={500}
                offset={-104}
                spy
                smooth
              &gt;
                &lt;MenuItem
                  checked={this.state.curForm === schemaName}
                &gt;
                  {schemaName}
                &lt;/MenuItem&gt;
              &lt;/Link&gt;
            ))}
          &lt;/div&gt;
        &lt;/Drawer&gt;
      &lt;/div&gt;

    );
  }
}

Form.propTypes = {
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  workflows: PropTypes.arrayOf(PropTypes.string),
  fetchSchemaNames: PropTypes.func.isRequired,
};

Form.defaultProps = {
  schemaNames: [],
  workflows: [],
};

export default Form;
</code></pre>

<p>MultipleForm.jsx</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FlatButton from 'material-ui/FlatButton';
import { Element } from 'react-scroll';
import SchemaForm from './SchemaForm';

class MultipleForm extends Component {
  componentDidMount() {
    console.log('MultipleForm Mounted');
    const {
      workflow,
      fetchSchemaNames,
    } = this.props;
    if (workflow) fetchSchemaNames(workflow);
  }

  componentWillReceiveProps(nextProps) {
    const {
      workflow,
      fetchSchemaNames,
    } = nextProps;
    if (workflow &amp;&amp; this.props.workflow !== workflow) fetchSchemaNames(workflow);
  }

  componentDidUpdate() {
    const {
      schemaNames,
      schemas,
      initialValues,
      fetchSchemas,
      fetchInitialValues,
    } = this.props;
    const schemasNeedToFetch = this.remainingSchemas(schemaNames, schemas);
    if (schemasNeedToFetch.length !== 0) fetchSchemas(schemasNeedToFetch);
    const initialValuesNeedToFetch = this.remainingInitialValues(schemaNames, initialValues);
    if (initialValuesNeedToFetch.lenght !== 0) fetchInitialValues(initialValuesNeedToFetch, 1);
  }

  remainingSchemas = (schemaNames, schemas) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in schemas === false).sort();

  remainingInitialValues = (schemaNames, initialValues) =&gt;
    schemaNames.filter(schemaName =&gt; schemaName in initialValues === false).sort();

  handleSubmitAll = (event) =&gt; {
    event.preventDefault();
    const {
      submit,
      schemas,
      schemaNames,
    } = this.props;
    schemaNames
      .map(schemaName =&gt; schemas[schemaName].title)
      .forEach((title) =&gt; {
        submit(title);
      });
  }

  render() {
    const {
      schemaNames,
      schemas,
      initialValues,
      postForm,
    } = this.props;
    schemaNames.sort((a, b) =&gt; a.localeCompare(b));
    return (
      &lt;div&gt;
        {schemaNames.map(schemaName =&gt; (
          &lt;Element name={schemaName}&gt;
            &lt;SchemaForm
              key={schemaName}
              schema={schemas[schemaName]}
              initialValue={initialValues[schemaName]}
              schemaName={schemaName}
              postForm={postForm}
            /&gt;
          &lt;/Element&gt;
        ))}
        &lt;div&gt;
          &lt;FlatButton
            label=""Submit""
          /&gt;
          &lt;FlatButton label=""Deploy"" /&gt;
        &lt;/div&gt;
      &lt;/div&gt;);
  }
}

MultipleForm.propTypes = {
  workflow: PropTypes.string.isRequired,
  submit: PropTypes.func.isRequired,
  fetchSchemaNames: PropTypes.func.isRequired,
  schemas: PropTypes.object,
  schemaNames: PropTypes.arrayOf(PropTypes.string),
  initialValues: PropTypes.object,
  fetchSchemas: PropTypes.func.isRequired,
  fetchInitialValues: PropTypes.func.isRequired,
  postForm: PropTypes.func.isRequired,
};

MultipleForm.defaultProps = {
  schemaNames: [],
};

export default MultipleForm;
</code></pre>

<p>SchemaForm</p>

<pre><code>import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Liform from 'liform-react';
import theme from './NokiaTheme';
import styles from './Form.css';

class SchemaForm extends Component {
  componentDidMount() {
    console.log('schema mounted');
  }

  shouldComponentUpdate() {
    return false;
  }
  handleSubmit = (value) =&gt; {
    const {
      postForm,
      schemaName,
    } = this.props;
    postForm(value, schemaName, 1);
  }


  render() {
    const {
      schema,
      initialValue,
    } = this.props;
    console.log('props', this.props);
    return (
      &lt;div&gt;
        &lt;h3 id={schema.$id} className={styles.formTitle}&gt;
          {schema.title}
        &lt;/h3&gt;
        &lt;Liform
          schema={schema}
          onSubmit={value =&gt; this.handleSubmit(value)}
          destroyOnUnmount={false}
          theme={theme}
          initialValues={initialValue}
        /&gt;
      &lt;/div&gt;
    );
  }
}

SchemaForm.propTypes = {
  schema: PropTypes.shape({
    $id: PropTypes.string,
  }),
  initialValue: PropTypes.object,
  schemaName: PropTypes.string,
  postForm: PropTypes.func.isRequired,
};

SchemaForm.defaultProps = {
  schema: {},
  initialValue: null,
  schemaName: '',
};

export default SchemaForm;
</code></pre>

<p>the schemaNames will be changed only by adding or deleting some element. for example: the schemaNames will change from <code>['A', 'B', 'C']</code> to <code>['A', 'B', 'D']</code>.  I get the schemaNames from the redux. which I fetch online.</p>

<p>But when I check the ConnectedReduxForm, when I change the schemaNames, the SchemaForm will be unmounted and the react will mount the form again. I have tried with setting the ConnectedReduxForm to be PureComponent. It is not helpful.</p>

<p>Could someone help me with that? I have spent a lot of time of this and nothing helps.</p>

<p><strong>Update</strong>: I have found the problem, the reason of it is that for each time that I for each time I update the workflow, I need to fetch the schemaNames from the server. But I still do not know why this happended. Could someone explain that?</p>
","One thing I noticed is that in MultipleForm you put 'key' in SchemaForm while you should put it in Element. This may be the issue because each time MultipleForm re-renders Element will be re-mounted. So SchemaForm will also be re-mounted regardless of it's key."
"49275563","react native call action from provider App.js","0","<p>I use react native and redux as following (working): </p>

<p><strong>App.js</strong> </p>

<pre><code>export default class App extends React.PureComponent {
  constructor (props) {
    super(props);

    this.state = { ...store.getState()};
    store.subscribe(() =&gt; {
      // i can read the state but no write it
      const storestate = store.getState();       
    });
  }

  handleConnectivityChange = isConnected =&gt; {
    this.setState({ isConnected });
  };

  render() {
    return (
      &lt;Provider store={store}&gt;
        &lt;PersistGate
          loading={&lt;ActivityIndicator /&gt;}
          persistor={persistor}&gt;

          &lt;View style={{ flex: 1, marginTop: Config.marginTop }}&gt;
            &lt;StackView /&gt;

          &lt;/View&gt;
        &lt;/PersistGate&gt;
      &lt;/Provider&gt;
    );
  }
}
</code></pre>

<hr>

<p>ScreenX.js</p>

<pre><code>import * as actions from ""./redux/actions"";
import { connect } from ""react-redux"";

class ScreenX extends React.Component {
    ...
    // i can do in any fonction 
    this.props.action_saveNetInfo(isConnected);
    ...
}

function mapToStateProps(data) {
  return {
    isConnected: data[""isConnected""] 
  };
}
export default connect(mapToStateProps, actions)(ScreenX);
</code></pre>

<p>The redux store work nice when i call actions from other component than App.js</p>

<p><strong>Problem :</strong> </p>

<p>I want to call action from APP.js but this don't work </p>

<pre><code>  handleConnectivityChange = isConnected =&gt; {
    this.props.action_saveNetInfo(isConnected);
  };
</code></pre>

<p>error : <code>TypeError: this.props.action_saveNetInfo is not a function</code></p>

<p>I cannot do this too </p>

<pre><code>  class App extends React.PureComponent { ...   }

  export default connect(null, null)(App)
</code></pre>

<p>because it throw an error :</p>

<pre><code>    Invariant Violation: Could not find ""store"" in either the context or props of ""Connect(App)"". Either wrap the root component in a &lt;Provider&gt;, or explicitly pass ""store"" as a prop to ""Connect(App)"".
</code></pre>

<p>Any idea ? 
thanks</p>
",""
"49547523","Text-based and bounds-based searching with react-google-maps","2","<p>I'm using <a href=""http://tomchentw.github.io/react-google-maps"" rel=""nofollow noreferrer"">react-google-maps</a> to add a map with search functionality that shows nearby, fetched POI's as markers and renders a list of those places below it (a-la Airbnb). <a href=""https://stackoverflow.com/questions/47114169/how-to-use-react-with-google-places-api-to-display-place-markers-on-a-google-ma"">This related question</a> covered the majority of what I was aiming for, but I can't seem to get the <code>SearchBox</code> to re-center the map after choosing from the autocomplete drop-down.</p>

<p>This is what I have so far:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/*global google*/
import React from ""react""
import './Locator.css';
import _ from 'lodash';
import { compose, withProps, withHandlers, withState } from ""recompose""
import { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from ""react-google-maps""
import {SearchBox} from ""react-google-maps/lib/components/places/SearchBox""
import Header from './Header';


const MyMapComponent = compose(
    withProps({
        googleMapURL: ""https://maps.googleapis.com/maps/api/js?key=AIzaSyA5eCcxmxACztRIVrfTXxr28d_uegRmMks&amp;v=3.exp&amp;libraries=geometry,drawing,places"",
        loadingElement: &lt;div className='map' style={{ height: `100%` }} /&gt;,
        containerElement: &lt;div className='map' style={{ height: `400px` }} /&gt;,
        mapElement: &lt;div className='map' style={{ height: `100%` }} /&gt;,
    }),
    withScriptjs,
    withGoogleMap,
    withState('places', 'updatePlaces', ''),
    withState('selectedPlace', 'updateSelectedPlace', null),
    withHandlers(() =&gt; {
        const refs = {
            map: undefined,
        }

        return {
            onMapMounted: () =&gt; ref =&gt; {
                refs.map = ref
            },
            onSearchBoxMounted: () =&gt; ref =&gt; {
                refs.searchBox = ref
            },
            onPlacesChanged: () =&gt; ref =&gt; {
                const places = refs.searchBox.getPlaces();
                const bounds = new google.maps.LatLngBounds();
      
                places.forEach(place =&gt; {
                  if (place.geometry.viewport) {
                    bounds.union(place.geometry.viewport)
                  } else {
                    bounds.extend(place.geometry.location)
                  }
                });
                },
            fetchPlaces: ({ updatePlaces }) =&gt; () =&gt; {
                const bounds = refs.map.getBounds();
                const service = new google.maps.places.PlacesService(refs.map.context.__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);
                const request = {
                    bounds: bounds,
                    type: ['points_of_interest'],
                    name: 'paintball'
                };
                service.nearbySearch(request, (results, status) =&gt; {
                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                        console.log(results);
                        updatePlaces(results);
                    }
                })
            },
            onToggleOpen: ({ updateSelectedPlace}) =&gt; key =&gt; {
                updateSelectedPlace(key);
            }
        }
    }),
)((props) =&gt; {
    return (&lt;div&gt;
        &lt;GoogleMap
            onTilesLoaded={props.fetchPlaces}
            ref={props.onMapMounted}
            onBoundsChanged={props.fetchPlaces}
            defaultZoom={10}
            defaultCenter={{ lat: 40.2574448, lng: -111.7089488 }}
        &gt;
        &lt;SearchBox
        ref={props.onSearchBoxMounted}
        bounds={props.bounds}
        controlPosition={google.maps.ControlPosition.TOP_LEFT}
        onPlacesChanged={props.onPlacesChanged}&gt;
            &lt;input
            type='text'
            placeholder='ghost of text past'
            style={{
                boxSizing: 'border-box',
                border: '1px solid transparent',
                width: '140px',
                height: '32px',
                marginTop: '27px',
                padding: `0 12px`,
                borderRadius: `3px`,
                boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3`,
                fontSize: `14px`,
                outline: `none`,
                textOverflow: `ellipses`
            }}
            /&gt;
            &lt;/SearchBox&gt;
            {props.places &amp;&amp; props.places.map((place, i) =&gt;
                &lt;Marker 
                onClick={() =&gt; props.onToggleOpen(i)} 
                key={i} position={{ lat: place.geometry.location.lat(), lng: place.geometry.location.lng() }}&gt;
                {props.selectedPlace === i &amp;&amp; &lt;InfoWindow onCloseClick={props.onToggleOpen}&gt;
            
                    &lt;div&gt;
                        {props.places[props.selectedPlace].name} &lt;br/&gt;
                        {props.places[props.selectedPlace].rating}
                        
                    &lt;/div&gt;
                &lt;/InfoWindow&gt;}
                &lt;/Marker&gt;
            )}
       &lt;/GoogleMap&gt;
        
            &lt;ol&gt;
            {props.places&amp;&amp; props.places.map(({ place_id, formatted_address, geometry: { location } }) =&gt;
              &lt;li key={place_id}&gt;
                {formatted_address}
                {"" at ""}
                ({location.lat()}, {location.lng()})
              &lt;/li&gt;
            )}
          &lt;/ol&gt;
          &lt;/div&gt;
          
    )
})

export default class Locator extends React.PureComponent {
    constructor(props){
        super(props);

        this.state={
            slide:true
        }
    }
    render() {
        return (
            &lt;div&gt;
&lt;               Header/&gt;
                    &lt;MyMapComponent /&gt;
            &lt;/div&gt;
            
        )
    }
}</code></pre>
</div>
</div>
</p>

<p>I'm fairly new to React, but it seems that every other resource for implementing this kind of app was outdated/deprecated. Thanks in advance!</p>
","what specifically isn't working? what are the errors?"
"49547523","Text-based and bounds-based searching with react-google-maps","2","<p>I'm using <a href=""http://tomchentw.github.io/react-google-maps"" rel=""nofollow noreferrer"">react-google-maps</a> to add a map with search functionality that shows nearby, fetched POI's as markers and renders a list of those places below it (a-la Airbnb). <a href=""https://stackoverflow.com/questions/47114169/how-to-use-react-with-google-places-api-to-display-place-markers-on-a-google-ma"">This related question</a> covered the majority of what I was aiming for, but I can't seem to get the <code>SearchBox</code> to re-center the map after choosing from the autocomplete drop-down.</p>

<p>This is what I have so far:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/*global google*/
import React from ""react""
import './Locator.css';
import _ from 'lodash';
import { compose, withProps, withHandlers, withState } from ""recompose""
import { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from ""react-google-maps""
import {SearchBox} from ""react-google-maps/lib/components/places/SearchBox""
import Header from './Header';


const MyMapComponent = compose(
    withProps({
        googleMapURL: ""https://maps.googleapis.com/maps/api/js?key=AIzaSyA5eCcxmxACztRIVrfTXxr28d_uegRmMks&amp;v=3.exp&amp;libraries=geometry,drawing,places"",
        loadingElement: &lt;div className='map' style={{ height: `100%` }} /&gt;,
        containerElement: &lt;div className='map' style={{ height: `400px` }} /&gt;,
        mapElement: &lt;div className='map' style={{ height: `100%` }} /&gt;,
    }),
    withScriptjs,
    withGoogleMap,
    withState('places', 'updatePlaces', ''),
    withState('selectedPlace', 'updateSelectedPlace', null),
    withHandlers(() =&gt; {
        const refs = {
            map: undefined,
        }

        return {
            onMapMounted: () =&gt; ref =&gt; {
                refs.map = ref
            },
            onSearchBoxMounted: () =&gt; ref =&gt; {
                refs.searchBox = ref
            },
            onPlacesChanged: () =&gt; ref =&gt; {
                const places = refs.searchBox.getPlaces();
                const bounds = new google.maps.LatLngBounds();
      
                places.forEach(place =&gt; {
                  if (place.geometry.viewport) {
                    bounds.union(place.geometry.viewport)
                  } else {
                    bounds.extend(place.geometry.location)
                  }
                });
                },
            fetchPlaces: ({ updatePlaces }) =&gt; () =&gt; {
                const bounds = refs.map.getBounds();
                const service = new google.maps.places.PlacesService(refs.map.context.__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);
                const request = {
                    bounds: bounds,
                    type: ['points_of_interest'],
                    name: 'paintball'
                };
                service.nearbySearch(request, (results, status) =&gt; {
                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                        console.log(results);
                        updatePlaces(results);
                    }
                })
            },
            onToggleOpen: ({ updateSelectedPlace}) =&gt; key =&gt; {
                updateSelectedPlace(key);
            }
        }
    }),
)((props) =&gt; {
    return (&lt;div&gt;
        &lt;GoogleMap
            onTilesLoaded={props.fetchPlaces}
            ref={props.onMapMounted}
            onBoundsChanged={props.fetchPlaces}
            defaultZoom={10}
            defaultCenter={{ lat: 40.2574448, lng: -111.7089488 }}
        &gt;
        &lt;SearchBox
        ref={props.onSearchBoxMounted}
        bounds={props.bounds}
        controlPosition={google.maps.ControlPosition.TOP_LEFT}
        onPlacesChanged={props.onPlacesChanged}&gt;
            &lt;input
            type='text'
            placeholder='ghost of text past'
            style={{
                boxSizing: 'border-box',
                border: '1px solid transparent',
                width: '140px',
                height: '32px',
                marginTop: '27px',
                padding: `0 12px`,
                borderRadius: `3px`,
                boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3`,
                fontSize: `14px`,
                outline: `none`,
                textOverflow: `ellipses`
            }}
            /&gt;
            &lt;/SearchBox&gt;
            {props.places &amp;&amp; props.places.map((place, i) =&gt;
                &lt;Marker 
                onClick={() =&gt; props.onToggleOpen(i)} 
                key={i} position={{ lat: place.geometry.location.lat(), lng: place.geometry.location.lng() }}&gt;
                {props.selectedPlace === i &amp;&amp; &lt;InfoWindow onCloseClick={props.onToggleOpen}&gt;
            
                    &lt;div&gt;
                        {props.places[props.selectedPlace].name} &lt;br/&gt;
                        {props.places[props.selectedPlace].rating}
                        
                    &lt;/div&gt;
                &lt;/InfoWindow&gt;}
                &lt;/Marker&gt;
            )}
       &lt;/GoogleMap&gt;
        
            &lt;ol&gt;
            {props.places&amp;&amp; props.places.map(({ place_id, formatted_address, geometry: { location } }) =&gt;
              &lt;li key={place_id}&gt;
                {formatted_address}
                {"" at ""}
                ({location.lat()}, {location.lng()})
              &lt;/li&gt;
            )}
          &lt;/ol&gt;
          &lt;/div&gt;
          
    )
})

export default class Locator extends React.PureComponent {
    constructor(props){
        super(props);

        this.state={
            slide:true
        }
    }
    render() {
        return (
            &lt;div&gt;
&lt;               Header/&gt;
                    &lt;MyMapComponent /&gt;
            &lt;/div&gt;
            
        )
    }
}</code></pre>
</div>
</div>
</p>

<p>I'm fairly new to React, but it seems that every other resource for implementing this kind of app was outdated/deprecated. Thanks in advance!</p>
","The attached code does not work."
"49611833","upload and post a file from client (react js) to nodejs express server","5","<p>From my client side I have this code, in react js componet I create this:</p>

<pre><code>class PopinForm extends PureComponent {
  constructor() {
    super();
    this.state = {
      file : {},
      isError : {
        file : false,
      }
    };
  }


  //upload here
  _handleUploadFile = () =&gt; {
    uploadFile(this.state.file)
  };

  render() {
    &lt;Root&gt;
      &lt;Input width=""45%"" type=""file"" onChange={ (e) =&gt; this.setState({file: e.target.files[0]}) } /&gt;
      &lt;ButtonPopin width=""20%"" onClick={this._handleUploadFile}&gt;
        Upload
      &lt;/ButtonPopin&gt;
    &lt;/Root&gt;
}
export default translate('translations')(PopinForm);
</code></pre>

<p>Then in my export module, this the function <code>uploadFile</code>:</p>

<pre><code>export function uploadFile(file) {
  fetch(`${apiUrl}/upload`, {
    method: 'post',
    headers: headers,
    mode: 'cors',
    cache: 'default',
    resolveWithFullResponse: true,
    body: file,
  })
    .then(request =&gt; request.post())
    .catch((err) =&gt; {
      console.error(`&gt;&gt;&gt;&gt;&gt;&gt;&gt; an internal error occurred: ${JSON.stringify(err, null, 3)}`)
    })
}
</code></pre>

<p>Using reactjs, I recover my file data from an input type file. This is my file when I made a <code>console.log(file)</code> :</p>

<blockquote>
  <p>File<br>
  lastModified: 1522422082000   ​
  lastModifiedDate: Date
  2018-03-30T15:01:22.000Z<br>
  ​name: ""test.xls""   ​
  size: 7105   ​
  type: ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"" ​ 
  webkitRelativePath: """"</p>
</blockquote>

<p>So it matches well with the right file I upload from the input type file.</p>

<p>But, on my server side I'am using multer and this is the method I use to recover the file, here the code in <code>index.js</code>:</p>

<pre><code>// instantiate multer storage to define the tmp folder path to store file
const storage = multer.diskStorage({
  destination: (req, file, cb) =&gt; {
    cb(null, 'tmp/')
  },
  // register the file with his original name and extension
  filename: (req, file, cb) =&gt; {
    cb(null, file.originalname)
  },
})
// declare the upload method with storage path and filename registration
const upload = multer({storage: storage})

//  upload XLSX massive request import
app.post('/upload', upload.single('uploadRequests'), require(path.join(__dirname, 'some', 'path', 'to', 'uploadRequest.js')))
</code></pre>

<p>WHen I submit the upload file I have this error: <strong>UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 12): TypeError: Cannot read property 'originalname' of undefined</strong> due to the request I made in the file uploadRequests.js here: <code>const fileName = req.file.originalname</code></p>

<p>This is the code for <code>uploadRequests.js</code>:</p>

<pre><code>const uploadRequests = async (req, res) =&gt; {
  // get filename by req
  const fileName = req.file.originalname
  // instantiate excel class
  const workbook = new Excel.Workbook()

  workbook.xlsx.readFile(req.file.path)
    .then(async () =&gt; {
      // treatment on xlsx file test with postman exmaple and files, nothing went wrong here
      // fetch on database request and CRUD method to update or create data
      return res.json({message: 'massive import request success !', data: data})
    })
    .catch((err) =&gt; {
      throw new Error(`workbook readFile method return an ${err}`)
    })
}
module.exports = uploadRequests
</code></pre>

<p>I am new to nodejs, and I would like to know how properly recover my file from the client side on my nodejs server.</p>
","No pro here but I know Multer expects a multipart/form-data and name in the FormData must be the same as what multer upload route expects. `const data = new FormData()` and `data.append(""uploadRequests"", e.target.files[ 0 ]` or how you handle the file in the state. Right now can you see files in tmp directory when you try to upload anything?"
"49611833","upload and post a file from client (react js) to nodejs express server","5","<p>From my client side I have this code, in react js componet I create this:</p>

<pre><code>class PopinForm extends PureComponent {
  constructor() {
    super();
    this.state = {
      file : {},
      isError : {
        file : false,
      }
    };
  }


  //upload here
  _handleUploadFile = () =&gt; {
    uploadFile(this.state.file)
  };

  render() {
    &lt;Root&gt;
      &lt;Input width=""45%"" type=""file"" onChange={ (e) =&gt; this.setState({file: e.target.files[0]}) } /&gt;
      &lt;ButtonPopin width=""20%"" onClick={this._handleUploadFile}&gt;
        Upload
      &lt;/ButtonPopin&gt;
    &lt;/Root&gt;
}
export default translate('translations')(PopinForm);
</code></pre>

<p>Then in my export module, this the function <code>uploadFile</code>:</p>

<pre><code>export function uploadFile(file) {
  fetch(`${apiUrl}/upload`, {
    method: 'post',
    headers: headers,
    mode: 'cors',
    cache: 'default',
    resolveWithFullResponse: true,
    body: file,
  })
    .then(request =&gt; request.post())
    .catch((err) =&gt; {
      console.error(`&gt;&gt;&gt;&gt;&gt;&gt;&gt; an internal error occurred: ${JSON.stringify(err, null, 3)}`)
    })
}
</code></pre>

<p>Using reactjs, I recover my file data from an input type file. This is my file when I made a <code>console.log(file)</code> :</p>

<blockquote>
  <p>File<br>
  lastModified: 1522422082000   ​
  lastModifiedDate: Date
  2018-03-30T15:01:22.000Z<br>
  ​name: ""test.xls""   ​
  size: 7105   ​
  type: ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"" ​ 
  webkitRelativePath: """"</p>
</blockquote>

<p>So it matches well with the right file I upload from the input type file.</p>

<p>But, on my server side I'am using multer and this is the method I use to recover the file, here the code in <code>index.js</code>:</p>

<pre><code>// instantiate multer storage to define the tmp folder path to store file
const storage = multer.diskStorage({
  destination: (req, file, cb) =&gt; {
    cb(null, 'tmp/')
  },
  // register the file with his original name and extension
  filename: (req, file, cb) =&gt; {
    cb(null, file.originalname)
  },
})
// declare the upload method with storage path and filename registration
const upload = multer({storage: storage})

//  upload XLSX massive request import
app.post('/upload', upload.single('uploadRequests'), require(path.join(__dirname, 'some', 'path', 'to', 'uploadRequest.js')))
</code></pre>

<p>WHen I submit the upload file I have this error: <strong>UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 12): TypeError: Cannot read property 'originalname' of undefined</strong> due to the request I made in the file uploadRequests.js here: <code>const fileName = req.file.originalname</code></p>

<p>This is the code for <code>uploadRequests.js</code>:</p>

<pre><code>const uploadRequests = async (req, res) =&gt; {
  // get filename by req
  const fileName = req.file.originalname
  // instantiate excel class
  const workbook = new Excel.Workbook()

  workbook.xlsx.readFile(req.file.path)
    .then(async () =&gt; {
      // treatment on xlsx file test with postman exmaple and files, nothing went wrong here
      // fetch on database request and CRUD method to update or create data
      return res.json({message: 'massive import request success !', data: data})
    })
    .catch((err) =&gt; {
      throw new Error(`workbook readFile method return an ${err}`)
    })
}
module.exports = uploadRequests
</code></pre>

<p>I am new to nodejs, and I would like to know how properly recover my file from the client side on my nodejs server.</p>
","please can you update the question with your code from uploadRequests.js?"
"49611833","upload and post a file from client (react js) to nodejs express server","5","<p>From my client side I have this code, in react js componet I create this:</p>

<pre><code>class PopinForm extends PureComponent {
  constructor() {
    super();
    this.state = {
      file : {},
      isError : {
        file : false,
      }
    };
  }


  //upload here
  _handleUploadFile = () =&gt; {
    uploadFile(this.state.file)
  };

  render() {
    &lt;Root&gt;
      &lt;Input width=""45%"" type=""file"" onChange={ (e) =&gt; this.setState({file: e.target.files[0]}) } /&gt;
      &lt;ButtonPopin width=""20%"" onClick={this._handleUploadFile}&gt;
        Upload
      &lt;/ButtonPopin&gt;
    &lt;/Root&gt;
}
export default translate('translations')(PopinForm);
</code></pre>

<p>Then in my export module, this the function <code>uploadFile</code>:</p>

<pre><code>export function uploadFile(file) {
  fetch(`${apiUrl}/upload`, {
    method: 'post',
    headers: headers,
    mode: 'cors',
    cache: 'default',
    resolveWithFullResponse: true,
    body: file,
  })
    .then(request =&gt; request.post())
    .catch((err) =&gt; {
      console.error(`&gt;&gt;&gt;&gt;&gt;&gt;&gt; an internal error occurred: ${JSON.stringify(err, null, 3)}`)
    })
}
</code></pre>

<p>Using reactjs, I recover my file data from an input type file. This is my file when I made a <code>console.log(file)</code> :</p>

<blockquote>
  <p>File<br>
  lastModified: 1522422082000   ​
  lastModifiedDate: Date
  2018-03-30T15:01:22.000Z<br>
  ​name: ""test.xls""   ​
  size: 7105   ​
  type: ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"" ​ 
  webkitRelativePath: """"</p>
</blockquote>

<p>So it matches well with the right file I upload from the input type file.</p>

<p>But, on my server side I'am using multer and this is the method I use to recover the file, here the code in <code>index.js</code>:</p>

<pre><code>// instantiate multer storage to define the tmp folder path to store file
const storage = multer.diskStorage({
  destination: (req, file, cb) =&gt; {
    cb(null, 'tmp/')
  },
  // register the file with his original name and extension
  filename: (req, file, cb) =&gt; {
    cb(null, file.originalname)
  },
})
// declare the upload method with storage path and filename registration
const upload = multer({storage: storage})

//  upload XLSX massive request import
app.post('/upload', upload.single('uploadRequests'), require(path.join(__dirname, 'some', 'path', 'to', 'uploadRequest.js')))
</code></pre>

<p>WHen I submit the upload file I have this error: <strong>UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 12): TypeError: Cannot read property 'originalname' of undefined</strong> due to the request I made in the file uploadRequests.js here: <code>const fileName = req.file.originalname</code></p>

<p>This is the code for <code>uploadRequests.js</code>:</p>

<pre><code>const uploadRequests = async (req, res) =&gt; {
  // get filename by req
  const fileName = req.file.originalname
  // instantiate excel class
  const workbook = new Excel.Workbook()

  workbook.xlsx.readFile(req.file.path)
    .then(async () =&gt; {
      // treatment on xlsx file test with postman exmaple and files, nothing went wrong here
      // fetch on database request and CRUD method to update or create data
      return res.json({message: 'massive import request success !', data: data})
    })
    .catch((err) =&gt; {
      throw new Error(`workbook readFile method return an ${err}`)
    })
}
module.exports = uploadRequests
</code></pre>

<p>I am new to nodejs, and I would like to know how properly recover my file from the client side on my nodejs server.</p>
","@Olivier Wilkinson I have updated my post, but just you to know, my uploadRequest method is just a treatment to read file, the problem I have for the moment is only to recover my file send from my client side.
Thank you for your answer by the way."
"49611833","upload and post a file from client (react js) to nodejs express server","5","<p>From my client side I have this code, in react js componet I create this:</p>

<pre><code>class PopinForm extends PureComponent {
  constructor() {
    super();
    this.state = {
      file : {},
      isError : {
        file : false,
      }
    };
  }


  //upload here
  _handleUploadFile = () =&gt; {
    uploadFile(this.state.file)
  };

  render() {
    &lt;Root&gt;
      &lt;Input width=""45%"" type=""file"" onChange={ (e) =&gt; this.setState({file: e.target.files[0]}) } /&gt;
      &lt;ButtonPopin width=""20%"" onClick={this._handleUploadFile}&gt;
        Upload
      &lt;/ButtonPopin&gt;
    &lt;/Root&gt;
}
export default translate('translations')(PopinForm);
</code></pre>

<p>Then in my export module, this the function <code>uploadFile</code>:</p>

<pre><code>export function uploadFile(file) {
  fetch(`${apiUrl}/upload`, {
    method: 'post',
    headers: headers,
    mode: 'cors',
    cache: 'default',
    resolveWithFullResponse: true,
    body: file,
  })
    .then(request =&gt; request.post())
    .catch((err) =&gt; {
      console.error(`&gt;&gt;&gt;&gt;&gt;&gt;&gt; an internal error occurred: ${JSON.stringify(err, null, 3)}`)
    })
}
</code></pre>

<p>Using reactjs, I recover my file data from an input type file. This is my file when I made a <code>console.log(file)</code> :</p>

<blockquote>
  <p>File<br>
  lastModified: 1522422082000   ​
  lastModifiedDate: Date
  2018-03-30T15:01:22.000Z<br>
  ​name: ""test.xls""   ​
  size: 7105   ​
  type: ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"" ​ 
  webkitRelativePath: """"</p>
</blockquote>

<p>So it matches well with the right file I upload from the input type file.</p>

<p>But, on my server side I'am using multer and this is the method I use to recover the file, here the code in <code>index.js</code>:</p>

<pre><code>// instantiate multer storage to define the tmp folder path to store file
const storage = multer.diskStorage({
  destination: (req, file, cb) =&gt; {
    cb(null, 'tmp/')
  },
  // register the file with his original name and extension
  filename: (req, file, cb) =&gt; {
    cb(null, file.originalname)
  },
})
// declare the upload method with storage path and filename registration
const upload = multer({storage: storage})

//  upload XLSX massive request import
app.post('/upload', upload.single('uploadRequests'), require(path.join(__dirname, 'some', 'path', 'to', 'uploadRequest.js')))
</code></pre>

<p>WHen I submit the upload file I have this error: <strong>UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 12): TypeError: Cannot read property 'originalname' of undefined</strong> due to the request I made in the file uploadRequests.js here: <code>const fileName = req.file.originalname</code></p>

<p>This is the code for <code>uploadRequests.js</code>:</p>

<pre><code>const uploadRequests = async (req, res) =&gt; {
  // get filename by req
  const fileName = req.file.originalname
  // instantiate excel class
  const workbook = new Excel.Workbook()

  workbook.xlsx.readFile(req.file.path)
    .then(async () =&gt; {
      // treatment on xlsx file test with postman exmaple and files, nothing went wrong here
      // fetch on database request and CRUD method to update or create data
      return res.json({message: 'massive import request success !', data: data})
    })
    .catch((err) =&gt; {
      throw new Error(`workbook readFile method return an ${err}`)
    })
}
module.exports = uploadRequests
</code></pre>

<p>I am new to nodejs, and I would like to know how properly recover my file from the client side on my nodejs server.</p>
","@devserkan check my update, I write the code from react component to better unerstand how I get my file"
"49611833","upload and post a file from client (react js) to nodejs express server","5","<p>From my client side I have this code, in react js componet I create this:</p>

<pre><code>class PopinForm extends PureComponent {
  constructor() {
    super();
    this.state = {
      file : {},
      isError : {
        file : false,
      }
    };
  }


  //upload here
  _handleUploadFile = () =&gt; {
    uploadFile(this.state.file)
  };

  render() {
    &lt;Root&gt;
      &lt;Input width=""45%"" type=""file"" onChange={ (e) =&gt; this.setState({file: e.target.files[0]}) } /&gt;
      &lt;ButtonPopin width=""20%"" onClick={this._handleUploadFile}&gt;
        Upload
      &lt;/ButtonPopin&gt;
    &lt;/Root&gt;
}
export default translate('translations')(PopinForm);
</code></pre>

<p>Then in my export module, this the function <code>uploadFile</code>:</p>

<pre><code>export function uploadFile(file) {
  fetch(`${apiUrl}/upload`, {
    method: 'post',
    headers: headers,
    mode: 'cors',
    cache: 'default',
    resolveWithFullResponse: true,
    body: file,
  })
    .then(request =&gt; request.post())
    .catch((err) =&gt; {
      console.error(`&gt;&gt;&gt;&gt;&gt;&gt;&gt; an internal error occurred: ${JSON.stringify(err, null, 3)}`)
    })
}
</code></pre>

<p>Using reactjs, I recover my file data from an input type file. This is my file when I made a <code>console.log(file)</code> :</p>

<blockquote>
  <p>File<br>
  lastModified: 1522422082000   ​
  lastModifiedDate: Date
  2018-03-30T15:01:22.000Z<br>
  ​name: ""test.xls""   ​
  size: 7105   ​
  type: ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"" ​ 
  webkitRelativePath: """"</p>
</blockquote>

<p>So it matches well with the right file I upload from the input type file.</p>

<p>But, on my server side I'am using multer and this is the method I use to recover the file, here the code in <code>index.js</code>:</p>

<pre><code>// instantiate multer storage to define the tmp folder path to store file
const storage = multer.diskStorage({
  destination: (req, file, cb) =&gt; {
    cb(null, 'tmp/')
  },
  // register the file with his original name and extension
  filename: (req, file, cb) =&gt; {
    cb(null, file.originalname)
  },
})
// declare the upload method with storage path and filename registration
const upload = multer({storage: storage})

//  upload XLSX massive request import
app.post('/upload', upload.single('uploadRequests'), require(path.join(__dirname, 'some', 'path', 'to', 'uploadRequest.js')))
</code></pre>

<p>WHen I submit the upload file I have this error: <strong>UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 12): TypeError: Cannot read property 'originalname' of undefined</strong> due to the request I made in the file uploadRequests.js here: <code>const fileName = req.file.originalname</code></p>

<p>This is the code for <code>uploadRequests.js</code>:</p>

<pre><code>const uploadRequests = async (req, res) =&gt; {
  // get filename by req
  const fileName = req.file.originalname
  // instantiate excel class
  const workbook = new Excel.Workbook()

  workbook.xlsx.readFile(req.file.path)
    .then(async () =&gt; {
      // treatment on xlsx file test with postman exmaple and files, nothing went wrong here
      // fetch on database request and CRUD method to update or create data
      return res.json({message: 'massive import request success !', data: data})
    })
    .catch((err) =&gt; {
      throw new Error(`workbook readFile method return an ${err}`)
    })
}
module.exports = uploadRequests
</code></pre>

<p>I am new to nodejs, and I would like to know how properly recover my file from the client side on my nodejs server.</p>
","How do you create your FormData?"
"49745660","Trying to pass geolocation values to a child component in React using google-maps-react","0","<p>been working on this for a bit: I've gotten my Map to render into a parent component using google-maps-react, HoC, and recompose but, I'm unable to pass the geolocation values from parent to child. Please see the below (I'm fairly new to React... so please be gentle) :</p>

<p><strong>Parent</strong> </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class MapContainer extends Component {
  constructor(props) {
    super(props);
    this.state = {
      latCords: '',
      longCords: ''
    };
  }
  componentDidMount() {
    if ('geolocation' in navigator) {
      navigator.geolocation.getCurrentPosition(position =&gt; {
        this.setState({
          latCords: position.coords.latitude,
          longCords: position.coords.longitude
        });
        //return position.coords.latitude, position.coords.longitude;
      });
    } else {
      /* geolocation IS NOT available */
      alert(
        ""We're sorry! Geolocation is not available for some reason...""
      );
    }
  }

  render() {
    const userCORDS = [this.state.latCords, this.state.longCords];
    return &lt;MyMapComponent userCords = {
      userCORDS
    }
    /&gt;;
  }
}
export default MapContainer;</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>

<p><strong>Child, using google-maps-react package</strong></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import {
  compose,
  withProps
} from 'recompose';
import {
  withScriptjs,
  withGoogleMap,
  GoogleMap,
  Marker
} from 'react-google-maps';

const MyMapComponent = compose(
  withProps({
    googleMapURL: 'https://maps.googleapis.com/maps/api/js?key=***',
    //'https://maps.googleapis.com/maps/api/js?v=3.exp&amp;libraries=geometry,drawing,places',
    loadingElement: &lt; div style = {
      {
        height: `100%`
      }
    }
    /&gt;,
    containerElement: &lt; div style = {
      {
        height: `400px`
      }
    }
    /&gt;,
    mapElement: &lt; div style = {
      {
        height: `100%`
      }
    }
    /&gt;
  }),
  withScriptjs,
  withGoogleMap
)(props =&gt; ( &lt;
  GoogleMap defaultZoom = {
    12
  }
  defaultCenter = {
    {
      lat: '',
      lng: ''
    }
  } &gt; {
    props.isMarkerShown &amp;&amp; ( &lt;
      Marker position = {
        {
          lat: '',
          lng: ''
        }
      }
      onClick = {
        props.onMarkerClick
      }
      /&gt;
    )
  } &lt;
  /GoogleMap&gt;
));

class MyFancyComponent extends React.PureComponent {
  state = {
    isMarkerShown: false
  };

  componentDidMount() {
    this.delayedShowMarker();
  }

  delayedShowMarker = () =&gt; {
    setTimeout(() =&gt; {
      this.setState({
        isMarkerShown: true
      });
    }, 3000);
  };

  handleMarkerClick = () =&gt; {
    this.setState({
      isMarkerShown: false
    });
    this.delayedShowMarker();
  };

  render() {
    console.log(props.userCords[0]);
    return ( &lt;
      MyMapComponent isMarkerShown = {
        this.state.isMarkerShown
      }
      onMarkerClick = {
        this.handleMarkerClick
      }
      /&gt;
    );
  }
}
export default MyMapComponent;</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
",""
"49892049","ReactTable - react component with REST API Call","0","<p>Can you please suggest me how to update the data in the grid. I am updating the data on the server request. How do re-render the data table? In the render section, I have used react Table component. Can you please suggest me the actual approach to use this react table component></p>

<pre><code>          import React, { PureComponent } from 'react';
          import ReactTable from 'react-table'
          import ""./Vendors.css"";

          export default class VendorsList extends PureComponent {

            data = [{
              name: 'Tanner Linsley',
              age: 26,
              friend: {
                name: 'Jason Maurer',
                age: 23
              }
            }];

            columns = [{
              Header: 'Name',
              accessor: 'name' // String-based value accessors!
            }, {
              Header: 'Age',
              accessor: 'age',
              Cell: props =&gt; &lt;span className='number'&gt;{props.value}&lt;/span&gt; // Custom cell components!
            }, {
              id: 'friendName', // Required because our accessor is not a string
              Header: 'Friend Name',
              accessor: d =&gt; d.friend.name // Custom value accessors!
            }, {
              Header: props =&gt; &lt;span&gt;Friend Age&lt;/span&gt;, // Custom header components!
              accessor: 'friend.age'
            }];

            constructor(props) {
              super(props);

            fetch(""http://api.com/vendor/list"", {
              method : 'POST'
            })
              .then(res =&gt; res.json())
              .then(
                (result) =&gt; {
                  this.data = [{
                    name: 'Tanner Linsley',
                    age: 290,
                    friend: {
                      name: 'Maurer',
                      age: 23
                    }
                  }];
                }
              )   
          }

              render() {
                return 
                  &lt;div&gt; 
                  &lt;div className=""gridsize""&gt;&lt;ReactTable data={this.data} columns={this.columns} /&gt;&lt;/div&gt;
                  &lt;/div&gt;
            }
          }
</code></pre>

<ul>
<li>Raja </li>
</ul>
",""
"50061200","PureComponent decorated by mobx-react throws error about `shouldComponentUpdate` presence","0","<p>In console I see this warning:</p>

<blockquote>
  <p>index.js:2178 Warning: Body has a method called
  shouldComponentUpdate(). shouldComponentUpdate should not be used when
  extending React.PureComponent. Please extend React.Component if
  shouldComponentUpdate is used.</p>
</blockquote>

<p><code>Body</code> component is using</p>

<pre><code>...
import { observer, inject } from 'mobx-react';
...
@inject('store')
@observer
class Body extends React.PureComponent&lt;BodyProps&gt; {
...
</code></pre>

<p>but doesn't have this <code>shouldComponentUpdate</code> method anywhere.</p>

<p><strong>Is this coming from <code>mobx-react</code>? Can I use <code>PureComponent</code> in components decorated by <code>@observable</code> or <code>@inject</code> ?</strong></p>
",""
"50199664","Unexpected token with react","6","<p>Getting unexpected while running. I am trying to load the InfiniteLoader of react virtualized. Would like to know how to call the API through this component If any example is available. I have taken the component from <a href=""https://github.com/bvaughn/react-virtualized/blob/master/docs/InfiniteLoader.md"" rel=""nofollow noreferrer"">https://github.com/bvaughn/react-virtualized/blob/master/docs/InfiniteLoader.md</a>
I am using the example from <a href=""https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader"" rel=""nofollow noreferrer"">https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader</a></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { InfiniteLoader, List } from 'react-virtualized';
import 'react-virtualized/styles.css'; // only needs to be imported once

export default class MyList extends React.PureComponent {

  const remoteRowCount

  const list = [];

  function isRowLoaded ({ index }) {
    return !!list[index];
  }

  function loadMoreRows ({ startIndex, stopIndex }) {
  }

  function rowRenderer ({ key, index, style}) {
    return (
      &lt;div
        key={key}
        style={style}
      &gt;
        {list[index]}
      &lt;/div&gt;
    )
  }

  //Render the list from this function
  render() {
    return(
      &lt;InfiniteLoader
    isRowLoaded={isRowLoaded}
    loadMoreRows={loadMoreRows}
    rowCount={remoteRowCount}
  &gt;
    {({ onRowsRendered, registerChild }) =&gt; (
      &lt;List
        height={200}
        onRowsRendered={onRowsRendered}
        ref={registerChild}
        rowCount={remoteRowCount}
        rowHeight={20}
        rowRenderer={rowRenderer}
        width={300}
      /&gt;
    )}
  &lt;/InfiniteLoader&gt;
    );
  }

}
</code></pre>

<p>Getting the below given exception</p>

<pre><code>Module build failed: SyntaxError: D:/code/react-starter/src/Components/MyList/MyList.js: Unexpected token (8:8)

   6 | export default class MyList extends React.PureComponent {
   7 |
&gt;  8 |   const remoteRowCount
     |         ^
   9 |
  10 |   const list = [];
  11 |
</code></pre>
","I tried that still it gives exception"
"50199664","Unexpected token with react","6","<p>Getting unexpected while running. I am trying to load the InfiniteLoader of react virtualized. Would like to know how to call the API through this component If any example is available. I have taken the component from <a href=""https://github.com/bvaughn/react-virtualized/blob/master/docs/InfiniteLoader.md"" rel=""nofollow noreferrer"">https://github.com/bvaughn/react-virtualized/blob/master/docs/InfiniteLoader.md</a>
I am using the example from <a href=""https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader"" rel=""nofollow noreferrer"">https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader</a></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { InfiniteLoader, List } from 'react-virtualized';
import 'react-virtualized/styles.css'; // only needs to be imported once

export default class MyList extends React.PureComponent {

  const remoteRowCount

  const list = [];

  function isRowLoaded ({ index }) {
    return !!list[index];
  }

  function loadMoreRows ({ startIndex, stopIndex }) {
  }

  function rowRenderer ({ key, index, style}) {
    return (
      &lt;div
        key={key}
        style={style}
      &gt;
        {list[index]}
      &lt;/div&gt;
    )
  }

  //Render the list from this function
  render() {
    return(
      &lt;InfiniteLoader
    isRowLoaded={isRowLoaded}
    loadMoreRows={loadMoreRows}
    rowCount={remoteRowCount}
  &gt;
    {({ onRowsRendered, registerChild }) =&gt; (
      &lt;List
        height={200}
        onRowsRendered={onRowsRendered}
        ref={registerChild}
        rowCount={remoteRowCount}
        rowHeight={20}
        rowRenderer={rowRenderer}
        width={300}
      /&gt;
    )}
  &lt;/InfiniteLoader&gt;
    );
  }

}
</code></pre>

<p>Getting the below given exception</p>

<pre><code>Module build failed: SyntaxError: D:/code/react-starter/src/Components/MyList/MyList.js: Unexpected token (8:8)

   6 | export default class MyList extends React.PureComponent {
   7 |
&gt;  8 |   const remoteRowCount
     |         ^
   9 |
  10 |   const list = [];
  11 |
</code></pre>
","I would like to know these kind of rules , where would I find them ?"
"50199664","Unexpected token with react","6","<p>Getting unexpected while running. I am trying to load the InfiniteLoader of react virtualized. Would like to know how to call the API through this component If any example is available. I have taken the component from <a href=""https://github.com/bvaughn/react-virtualized/blob/master/docs/InfiniteLoader.md"" rel=""nofollow noreferrer"">https://github.com/bvaughn/react-virtualized/blob/master/docs/InfiniteLoader.md</a>
I am using the example from <a href=""https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader"" rel=""nofollow noreferrer"">https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader</a></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { InfiniteLoader, List } from 'react-virtualized';
import 'react-virtualized/styles.css'; // only needs to be imported once

export default class MyList extends React.PureComponent {

  const remoteRowCount

  const list = [];

  function isRowLoaded ({ index }) {
    return !!list[index];
  }

  function loadMoreRows ({ startIndex, stopIndex }) {
  }

  function rowRenderer ({ key, index, style}) {
    return (
      &lt;div
        key={key}
        style={style}
      &gt;
        {list[index]}
      &lt;/div&gt;
    )
  }

  //Render the list from this function
  render() {
    return(
      &lt;InfiniteLoader
    isRowLoaded={isRowLoaded}
    loadMoreRows={loadMoreRows}
    rowCount={remoteRowCount}
  &gt;
    {({ onRowsRendered, registerChild }) =&gt; (
      &lt;List
        height={200}
        onRowsRendered={onRowsRendered}
        ref={registerChild}
        rowCount={remoteRowCount}
        rowHeight={20}
        rowRenderer={rowRenderer}
        width={300}
      /&gt;
    )}
  &lt;/InfiniteLoader&gt;
    );
  }

}
</code></pre>

<p>Getting the below given exception</p>

<pre><code>Module build failed: SyntaxError: D:/code/react-starter/src/Components/MyList/MyList.js: Unexpected token (8:8)

   6 | export default class MyList extends React.PureComponent {
   7 |
&gt;  8 |   const remoteRowCount
     |         ^
   9 |
  10 |   const list = [];
  11 |
</code></pre>
","It's because you declared `remoteRowCount` and `list` inside your component. Put them above the class definition (or if you want them to be part of the component, add them properly in the constructor)"
"50199664","Unexpected token with react","6","<p>Getting unexpected while running. I am trying to load the InfiniteLoader of react virtualized. Would like to know how to call the API through this component If any example is available. I have taken the component from <a href=""https://github.com/bvaughn/react-virtualized/blob/master/docs/InfiniteLoader.md"" rel=""nofollow noreferrer"">https://github.com/bvaughn/react-virtualized/blob/master/docs/InfiniteLoader.md</a>
I am using the example from <a href=""https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader"" rel=""nofollow noreferrer"">https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader</a></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { InfiniteLoader, List } from 'react-virtualized';
import 'react-virtualized/styles.css'; // only needs to be imported once

export default class MyList extends React.PureComponent {

  const remoteRowCount

  const list = [];

  function isRowLoaded ({ index }) {
    return !!list[index];
  }

  function loadMoreRows ({ startIndex, stopIndex }) {
  }

  function rowRenderer ({ key, index, style}) {
    return (
      &lt;div
        key={key}
        style={style}
      &gt;
        {list[index]}
      &lt;/div&gt;
    )
  }

  //Render the list from this function
  render() {
    return(
      &lt;InfiniteLoader
    isRowLoaded={isRowLoaded}
    loadMoreRows={loadMoreRows}
    rowCount={remoteRowCount}
  &gt;
    {({ onRowsRendered, registerChild }) =&gt; (
      &lt;List
        height={200}
        onRowsRendered={onRowsRendered}
        ref={registerChild}
        rowCount={remoteRowCount}
        rowHeight={20}
        rowRenderer={rowRenderer}
        width={300}
      /&gt;
    )}
  &lt;/InfiniteLoader&gt;
    );
  }

}
</code></pre>

<p>Getting the below given exception</p>

<pre><code>Module build failed: SyntaxError: D:/code/react-starter/src/Components/MyList/MyList.js: Unexpected token (8:8)

   6 | export default class MyList extends React.PureComponent {
   7 |
&gt;  8 |   const remoteRowCount
     |         ^
   9 |
  10 |   const list = [];
  11 |
</code></pre>
","Just have a look at the React documentation, it shows you how to set up a component. For the sake of adding properties to your component in the constructor (as either object properties of the actual component, or as state values) check out the lifecycle and constructor stuff: https://reactjs.org/docs/state-and-lifecycle.html"
"50199664","Unexpected token with react","6","<p>Getting unexpected while running. I am trying to load the InfiniteLoader of react virtualized. Would like to know how to call the API through this component If any example is available. I have taken the component from <a href=""https://github.com/bvaughn/react-virtualized/blob/master/docs/InfiniteLoader.md"" rel=""nofollow noreferrer"">https://github.com/bvaughn/react-virtualized/blob/master/docs/InfiniteLoader.md</a>
I am using the example from <a href=""https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader"" rel=""nofollow noreferrer"">https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader</a></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { InfiniteLoader, List } from 'react-virtualized';
import 'react-virtualized/styles.css'; // only needs to be imported once

export default class MyList extends React.PureComponent {

  const remoteRowCount

  const list = [];

  function isRowLoaded ({ index }) {
    return !!list[index];
  }

  function loadMoreRows ({ startIndex, stopIndex }) {
  }

  function rowRenderer ({ key, index, style}) {
    return (
      &lt;div
        key={key}
        style={style}
      &gt;
        {list[index]}
      &lt;/div&gt;
    )
  }

  //Render the list from this function
  render() {
    return(
      &lt;InfiniteLoader
    isRowLoaded={isRowLoaded}
    loadMoreRows={loadMoreRows}
    rowCount={remoteRowCount}
  &gt;
    {({ onRowsRendered, registerChild }) =&gt; (
      &lt;List
        height={200}
        onRowsRendered={onRowsRendered}
        ref={registerChild}
        rowCount={remoteRowCount}
        rowHeight={20}
        rowRenderer={rowRenderer}
        width={300}
      /&gt;
    )}
  &lt;/InfiniteLoader&gt;
    );
  }

}
</code></pre>

<p>Getting the below given exception</p>

<pre><code>Module build failed: SyntaxError: D:/code/react-starter/src/Components/MyList/MyList.js: Unexpected token (8:8)

   6 | export default class MyList extends React.PureComponent {
   7 |
&gt;  8 |   const remoteRowCount
     |         ^
   9 |
  10 |   const list = [];
  11 |
</code></pre>
","Like I said in my first comment, move them out of your class definition"
"50199664","Unexpected token with react","6","<p>Getting unexpected while running. I am trying to load the InfiniteLoader of react virtualized. Would like to know how to call the API through this component If any example is available. I have taken the component from <a href=""https://github.com/bvaughn/react-virtualized/blob/master/docs/InfiniteLoader.md"" rel=""nofollow noreferrer"">https://github.com/bvaughn/react-virtualized/blob/master/docs/InfiniteLoader.md</a>
I am using the example from <a href=""https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader"" rel=""nofollow noreferrer"">https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader</a></p>

<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import { InfiniteLoader, List } from 'react-virtualized';
import 'react-virtualized/styles.css'; // only needs to be imported once

export default class MyList extends React.PureComponent {

  const remoteRowCount

  const list = [];

  function isRowLoaded ({ index }) {
    return !!list[index];
  }

  function loadMoreRows ({ startIndex, stopIndex }) {
  }

  function rowRenderer ({ key, index, style}) {
    return (
      &lt;div
        key={key}
        style={style}
      &gt;
        {list[index]}
      &lt;/div&gt;
    )
  }

  //Render the list from this function
  render() {
    return(
      &lt;InfiniteLoader
    isRowLoaded={isRowLoaded}
    loadMoreRows={loadMoreRows}
    rowCount={remoteRowCount}
  &gt;
    {({ onRowsRendered, registerChild }) =&gt; (
      &lt;List
        height={200}
        onRowsRendered={onRowsRendered}
        ref={registerChild}
        rowCount={remoteRowCount}
        rowHeight={20}
        rowRenderer={rowRenderer}
        width={300}
      /&gt;
    )}
  &lt;/InfiniteLoader&gt;
    );
  }

}
</code></pre>

<p>Getting the below given exception</p>

<pre><code>Module build failed: SyntaxError: D:/code/react-starter/src/Components/MyList/MyList.js: Unexpected token (8:8)

   6 | export default class MyList extends React.PureComponent {
   7 |
&gt;  8 |   const remoteRowCount
     |         ^
   9 |
  10 |   const list = [];
  11 |
</code></pre>
","Thanks , but for this moment , what would be solution to see this component working"
"50211355","Internet Explorer fail compile external react component: Objects are not valid as a React child","2","<p>I have a problem with React in Internet Explorer 11. </p>

<p>I am getting an error</p>

<p><strong>Objects are not valid as a React child (found: object with keys {$$typeof, type, key, ref, props, _owner}).</strong></p>

<p>Detail on:
<a href=""https://reactjs.org/docs/error-decoder.html?invariant=31&amp;args[]=object%20with%20keys%20%7B%24%24typeof%2C%20type%2C%20key%2C%20ref%2C%20props%2C%20_owner%7D&amp;args[]="" rel=""nofollow noreferrer"">https://reactjs.org/docs/error-decoder.html?invariant=31&amp;args[]=object%20with%20keys%20%7B%24%24typeof%2C%20type%2C%20key%2C%20ref%2C%20props%2C%20_owner%7D&amp;args[]=</a></p>

<p>when I use external react component.</p>

<p>Let me show a little code:</p>

<p><strong>node_modules/share-lib/src/components/ExternalComponent.js</strong></p>

<pre><code>import React from 'react';

   class ExternalComponent extends React.PureComponent {

     render() {
       return (
         &lt;div&gt;ExternalComponent&lt;/div&gt;
       )
     }
   }

  export default ExternalComponent;
</code></pre>

<p><strong>Footer.js</strong></p>

<pre><code>import React from 'react';
import ExternalComponent from 'share-lib/src/components/ExternalComponent';

class Footer extends React.PureComponent {
   render() {
      return (
          &lt;ExternalComponent /&gt;
      );
   }
}

export default Footer;
</code></pre>

<p>I use babel. Also tried babel-polyfill (desn't work, but I can did smth wrong, i don't know exactly)</p>

<p>How I can get rid of error:</p>

<p><strong>Objects are not valid as a React child (found: object with keys {$$typeof, type, key, ref, props, _owner}).</strong> ?</p>

<p>Only in Internet Explorer and <strong>only with external modules</strong> </p>

<p>Here is my .babelrc</p>

<pre><code>        {
       ""presets"": [
         [
          ""@babel/preset-env"",
          {
             ""targets"": {
                ""node"": ""current""
              },
              ""useBuiltIns"": ""usage""
          }
        ],
        ""@babel/preset-react""
        ],
      ""plugins"": [
        ""es6-promise"",
        ""transform-flow-strip-types"",
        ""@babel/plugin-proposal-object-rest-spread"",
        ""@babel/plugin-proposal-class-properties"",
        ""@babel/plugin-proposal-function-bind"",
        ""@babel/plugin-transform-object-assign"",
        ""@babel/plugin-proposal-export-default-from""
      ]
    }
</code></pre>

<p>Here are some versions of my packages:</p>

<pre><code>""react"": ""16.2.0""
""react-dom"": ""16.2.0"",
""babel-loader"": ""8.0.0-beta.0"",
""@babel/core"": ""^7.0.0-beta.37"",
""@babel/preset-env"": ""^7.0.0-beta.37"",
""@babel/preset-react"": ""^7.0.0-beta.37"",
</code></pre>
","Added to question.

""react"": ""16.2.0""
""react-dom"": ""16.2.0"","
"50211355","Internet Explorer fail compile external react component: Objects are not valid as a React child","2","<p>I have a problem with React in Internet Explorer 11. </p>

<p>I am getting an error</p>

<p><strong>Objects are not valid as a React child (found: object with keys {$$typeof, type, key, ref, props, _owner}).</strong></p>

<p>Detail on:
<a href=""https://reactjs.org/docs/error-decoder.html?invariant=31&amp;args[]=object%20with%20keys%20%7B%24%24typeof%2C%20type%2C%20key%2C%20ref%2C%20props%2C%20_owner%7D&amp;args[]="" rel=""nofollow noreferrer"">https://reactjs.org/docs/error-decoder.html?invariant=31&amp;args[]=object%20with%20keys%20%7B%24%24typeof%2C%20type%2C%20key%2C%20ref%2C%20props%2C%20_owner%7D&amp;args[]=</a></p>

<p>when I use external react component.</p>

<p>Let me show a little code:</p>

<p><strong>node_modules/share-lib/src/components/ExternalComponent.js</strong></p>

<pre><code>import React from 'react';

   class ExternalComponent extends React.PureComponent {

     render() {
       return (
         &lt;div&gt;ExternalComponent&lt;/div&gt;
       )
     }
   }

  export default ExternalComponent;
</code></pre>

<p><strong>Footer.js</strong></p>

<pre><code>import React from 'react';
import ExternalComponent from 'share-lib/src/components/ExternalComponent';

class Footer extends React.PureComponent {
   render() {
      return (
          &lt;ExternalComponent /&gt;
      );
   }
}

export default Footer;
</code></pre>

<p>I use babel. Also tried babel-polyfill (desn't work, but I can did smth wrong, i don't know exactly)</p>

<p>How I can get rid of error:</p>

<p><strong>Objects are not valid as a React child (found: object with keys {$$typeof, type, key, ref, props, _owner}).</strong> ?</p>

<p>Only in Internet Explorer and <strong>only with external modules</strong> </p>

<p>Here is my .babelrc</p>

<pre><code>        {
       ""presets"": [
         [
          ""@babel/preset-env"",
          {
             ""targets"": {
                ""node"": ""current""
              },
              ""useBuiltIns"": ""usage""
          }
        ],
        ""@babel/preset-react""
        ],
      ""plugins"": [
        ""es6-promise"",
        ""transform-flow-strip-types"",
        ""@babel/plugin-proposal-object-rest-spread"",
        ""@babel/plugin-proposal-class-properties"",
        ""@babel/plugin-proposal-function-bind"",
        ""@babel/plugin-transform-object-assign"",
        ""@babel/plugin-proposal-export-default-from""
      ]
    }
</code></pre>

<p>Here are some versions of my packages:</p>

<pre><code>""react"": ""16.2.0""
""react-dom"": ""16.2.0"",
""babel-loader"": ""8.0.0-beta.0"",
""@babel/core"": ""^7.0.0-beta.37"",
""@babel/preset-env"": ""^7.0.0-beta.37"",
""@babel/preset-react"": ""^7.0.0-beta.37"",
</code></pre>
","What version of react and react-dom are you using?"
"50343833","Write asynccomponent in react router config for lazy loading","6","<p>I'm new to react. Trying to lazy load the components. Am using server side rendering along with react router config. I need to lazy load the components.</p>

<p>asyncComponent.js</p>

<pre><code>import React, { PureComponent } from 'react';

export default class  extends PureComponent {
 constructor(props) {
super(props);

this.state = {
  Component: null
}
}

componentWillMount() {
if(!this.state.Component) {
  this.props.moduleProvider().then( ({Component}) =&gt; this.setState({ Component }));
}
}

render() {
const { Component } = this.state;

//The magic happens here!
return (
  &lt;div&gt;
    {Component ? &lt;Component /&gt; : ''}
  &lt;/div&gt;
);
 }
 };
</code></pre>

<p>Route.js</p>

<pre><code>import React from 'react';
import App from './app';
import asyncComponent from './asyncComponent';

const Home = asyncComponent.moduleProvider(import('./components/Home'));

const routes = [{
    component: App,
    routes: [
        {
          path : '/',
          exact: true,
          component: Home
        }
    ]
}];

export default routes;
</code></pre>

<p>I have refered the example from [<a href=""https://github.com/rubenspgcavalcante/react-webpack-lazy-loading.git][1]"" rel=""nofollow noreferrer"">https://github.com/rubenspgcavalcante/react-webpack-lazy-loading.git][1]</a></p>

<p>This is throwing exception. Is this the correct way to do it?</p>
","Can you post the error you are facing?"
"50343833","Write asynccomponent in react router config for lazy loading","6","<p>I'm new to react. Trying to lazy load the components. Am using server side rendering along with react router config. I need to lazy load the components.</p>

<p>asyncComponent.js</p>

<pre><code>import React, { PureComponent } from 'react';

export default class  extends PureComponent {
 constructor(props) {
super(props);

this.state = {
  Component: null
}
}

componentWillMount() {
if(!this.state.Component) {
  this.props.moduleProvider().then( ({Component}) =&gt; this.setState({ Component }));
}
}

render() {
const { Component } = this.state;

//The magic happens here!
return (
  &lt;div&gt;
    {Component ? &lt;Component /&gt; : ''}
  &lt;/div&gt;
);
 }
 };
</code></pre>

<p>Route.js</p>

<pre><code>import React from 'react';
import App from './app';
import asyncComponent from './asyncComponent';

const Home = asyncComponent.moduleProvider(import('./components/Home'));

const routes = [{
    component: App,
    routes: [
        {
          path : '/',
          exact: true,
          component: Home
        }
    ]
}];

export default routes;
</code></pre>

<p>I have refered the example from [<a href=""https://github.com/rubenspgcavalcante/react-webpack-lazy-loading.git][1]"" rel=""nofollow noreferrer"">https://github.com/rubenspgcavalcante/react-webpack-lazy-loading.git][1]</a></p>

<p>This is throwing exception. Is this the correct way to do it?</p>
","WARNING in ./client/routes.js
24:11-28:5 Critical dependency: the request of a dependency is an expression"
"50343833","Write asynccomponent in react router config for lazy loading","6","<p>I'm new to react. Trying to lazy load the components. Am using server side rendering along with react router config. I need to lazy load the components.</p>

<p>asyncComponent.js</p>

<pre><code>import React, { PureComponent } from 'react';

export default class  extends PureComponent {
 constructor(props) {
super(props);

this.state = {
  Component: null
}
}

componentWillMount() {
if(!this.state.Component) {
  this.props.moduleProvider().then( ({Component}) =&gt; this.setState({ Component }));
}
}

render() {
const { Component } = this.state;

//The magic happens here!
return (
  &lt;div&gt;
    {Component ? &lt;Component /&gt; : ''}
  &lt;/div&gt;
);
 }
 };
</code></pre>

<p>Route.js</p>

<pre><code>import React from 'react';
import App from './app';
import asyncComponent from './asyncComponent';

const Home = asyncComponent.moduleProvider(import('./components/Home'));

const routes = [{
    component: App,
    routes: [
        {
          path : '/',
          exact: true,
          component: Home
        }
    ]
}];

export default routes;
</code></pre>

<p>I have refered the example from [<a href=""https://github.com/rubenspgcavalcante/react-webpack-lazy-loading.git][1]"" rel=""nofollow noreferrer"">https://github.com/rubenspgcavalcante/react-webpack-lazy-loading.git][1]</a></p>

<p>This is throwing exception. Is this the correct way to do it?</p>
","error: [unhandledRejection] TypeError: require.ensure is not a function"
"50343833","Write asynccomponent in react router config for lazy loading","6","<p>I'm new to react. Trying to lazy load the components. Am using server side rendering along with react router config. I need to lazy load the components.</p>

<p>asyncComponent.js</p>

<pre><code>import React, { PureComponent } from 'react';

export default class  extends PureComponent {
 constructor(props) {
super(props);

this.state = {
  Component: null
}
}

componentWillMount() {
if(!this.state.Component) {
  this.props.moduleProvider().then( ({Component}) =&gt; this.setState({ Component }));
}
}

render() {
const { Component } = this.state;

//The magic happens here!
return (
  &lt;div&gt;
    {Component ? &lt;Component /&gt; : ''}
  &lt;/div&gt;
);
 }
 };
</code></pre>

<p>Route.js</p>

<pre><code>import React from 'react';
import App from './app';
import asyncComponent from './asyncComponent';

const Home = asyncComponent.moduleProvider(import('./components/Home'));

const routes = [{
    component: App,
    routes: [
        {
          path : '/',
          exact: true,
          component: Home
        }
    ]
}];

export default routes;
</code></pre>

<p>I have refered the example from [<a href=""https://github.com/rubenspgcavalcante/react-webpack-lazy-loading.git][1]"" rel=""nofollow noreferrer"">https://github.com/rubenspgcavalcante/react-webpack-lazy-loading.git][1]</a></p>

<p>This is throwing exception. Is this the correct way to do it?</p>
","Critical dependency: the request of a dependency is an expression"
"50343833","Write asynccomponent in react router config for lazy loading","6","<p>I'm new to react. Trying to lazy load the components. Am using server side rendering along with react router config. I need to lazy load the components.</p>

<p>asyncComponent.js</p>

<pre><code>import React, { PureComponent } from 'react';

export default class  extends PureComponent {
 constructor(props) {
super(props);

this.state = {
  Component: null
}
}

componentWillMount() {
if(!this.state.Component) {
  this.props.moduleProvider().then( ({Component}) =&gt; this.setState({ Component }));
}
}

render() {
const { Component } = this.state;

//The magic happens here!
return (
  &lt;div&gt;
    {Component ? &lt;Component /&gt; : ''}
  &lt;/div&gt;
);
 }
 };
</code></pre>

<p>Route.js</p>

<pre><code>import React from 'react';
import App from './app';
import asyncComponent from './asyncComponent';

const Home = asyncComponent.moduleProvider(import('./components/Home'));

const routes = [{
    component: App,
    routes: [
        {
          path : '/',
          exact: true,
          component: Home
        }
    ]
}];

export default routes;
</code></pre>

<p>I have refered the example from [<a href=""https://github.com/rubenspgcavalcante/react-webpack-lazy-loading.git][1]"" rel=""nofollow noreferrer"">https://github.com/rubenspgcavalcante/react-webpack-lazy-loading.git][1]</a></p>

<p>This is throwing exception. Is this the correct way to do it?</p>
","Only string can be assinged to component."
"50343833","Write asynccomponent in react router config for lazy loading","6","<p>I'm new to react. Trying to lazy load the components. Am using server side rendering along with react router config. I need to lazy load the components.</p>

<p>asyncComponent.js</p>

<pre><code>import React, { PureComponent } from 'react';

export default class  extends PureComponent {
 constructor(props) {
super(props);

this.state = {
  Component: null
}
}

componentWillMount() {
if(!this.state.Component) {
  this.props.moduleProvider().then( ({Component}) =&gt; this.setState({ Component }));
}
}

render() {
const { Component } = this.state;

//The magic happens here!
return (
  &lt;div&gt;
    {Component ? &lt;Component /&gt; : ''}
  &lt;/div&gt;
);
 }
 };
</code></pre>

<p>Route.js</p>

<pre><code>import React from 'react';
import App from './app';
import asyncComponent from './asyncComponent';

const Home = asyncComponent.moduleProvider(import('./components/Home'));

const routes = [{
    component: App,
    routes: [
        {
          path : '/',
          exact: true,
          component: Home
        }
    ]
}];

export default routes;
</code></pre>

<p>I have refered the example from [<a href=""https://github.com/rubenspgcavalcante/react-webpack-lazy-loading.git][1]"" rel=""nofollow noreferrer"">https://github.com/rubenspgcavalcante/react-webpack-lazy-loading.git][1]</a></p>

<p>This is throwing exception. Is this the correct way to do it?</p>
","Change the declaration of `Home` to `const Home = <AsyncComponent moduleProvider={import('./components/Home')} />;`"
"50393724","How to implement react-transition-group?","0","<p>I'm trying to implement react-transition-group in my project using the new react-router, but I'm not making it work and I do not find very clear documentation, or at least I can understand, if someone can give me a hand to see what I'm doing wrong very thankful :)</p>

<p>I only can do that with CSS Transition of react-transition-group, but i need the js animations instead of css animations.</p>

<p>Here my component</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React from 'react';
import { Route, Switch, withRouter } from 'react-router-dom';
import { TransitionGroup, Transition } from 'react-transition-group';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import Landing from '../../pages/Landing/Landing';
import Example from '../../pages/Example/Example.js';
import { AsyncNotFound, AsyncAbout } from '../../util/async-section-handler';

import './Pages.css';

import checkProps from '../../util/check-props';

const duration = 300;

const defaultStyle = {
  transition: `opacity ${duration}ms ease-in-out`,
  opacity: 0
};

const transitionStyles = {
  entering: { opacity: 0 },
  entered: { opacity: 1 }
};

class Pages extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = { in: false };
  }

  // toggleEnterState = () =&gt; {};

  componentDidMount() {
    this.setState({ in: true });
  }

  componentWillReceiveProps(nextProps) {}

  render() {
    return (
      &lt;main className={classnames(`Pages`, this.props.className)} role=""main""&gt;
        &lt;TransitionGroup&gt;
          &lt;Transition in={this.state.in} timeout={duration}&gt;
            {state =&gt; (
              &lt;div
                style={{
                  ...defaultStyle,
                  ...transitionStyles[state]
                }}
              &gt;
                &lt;Switch location={this.props.location}&gt;
                  &lt;Route exact={true} path=""/"" component={Landing} /&gt;
                  &lt;Route exact={true} path=""/about"" component={AsyncAbout} /&gt;
                  &lt;Route exact={true} path=""/example"" component={Example} /&gt;
                  &lt;Route component={AsyncNotFound} /&gt;
                &lt;/Switch&gt;
              &lt;/div&gt;
            )}
          &lt;/Transition&gt;
        &lt;/TransitionGroup&gt;
      &lt;/main&gt;
    );
  }
}

Pages.propTypes = checkProps({
  className: PropTypes.string
});

Pages.defaultProps = {
  className: ''
};

export default withRouter(Pages);</code></pre>
</div>
</div>
</p>
",""
"50512225","how to send api dynamic latitude longitude using react-google-maps","0","<p>i already creating component maps and i get latitude and longitude but i just send with static latitude</p>

<p><strong>problem</strong> : how can i send dynamic latitude and longitude, i mean like send api without set in default center, but when i open my apps i get my current location and can draggable (marked) my current position</p>

<p>this my component code:</p>

<pre><code>import React from ""react""
import { compose, withProps, lifecycle } from ""recompose""
import { withScriptjs, withGoogleMap, GoogleMap, Marker } from ""react- 
google-maps""


const MyMapComponent = compose(
withProps({
    googleMapURL: ""https://maps.googleapis.com/maps/api/js?key=AIzaSyAvcDy5ZYc2ujCS6TTtI3RYX5QmuoV8Ffw&amp;libraries=geometry,drawing,places"",
    loadingElement: &lt;div style={{ height: `100%` }} /&gt;,
    containerElement: &lt;div style={{ height: `400px` }} /&gt;,
    mapElement: &lt;div style={{ height: `100%` }} /&gt;,
}),
lifecycle({
    componentWillMount() {
        const refs = {}

        this.setState({
            position: null,
            onMarkerMounted: ref =&gt; {
                refs.marker = ref;
            },

            onPositionChanged: () =&gt; {
                const position = refs.marker.getPosition();
                console.log(position.toString());
            }
        })
    },
}),
withScriptjs,
withGoogleMap)((props) =&gt;
&lt;GoogleMap defaultZoom={8} defaultCenter={{ lat: -34.397, lng: 150.644 }}&gt;
    {props.isMarkerShown &amp;&amp; &lt;Marker position={{ lat: -34.397, lng: 150.644 }} draggable={true} ref={props.onMarkerMounted} onPositionChanged={props.onPositionChanged} /&gt;}
&lt;/GoogleMap&gt;
)

class MyMaps extends React.PureComponent {
state = {
    isMarkerShown: false,
}


render() {
    return (
        &lt;div&gt;
            &lt;MyMapComponent isMarkerShown={true} /&gt;
        &lt;/div&gt;
    )
}
[enter link description here][1]}


export default MyMaps;
</code></pre>

<p><strong>this full component code</strong>
<a href=""https://stackblitz.com/edit/react-znzjjj?file=MyMaps.js"" rel=""nofollow noreferrer"">Mymaps Component</a></p>
",""
"50640858","react-select does not clear value when redux-form is reset","2","<p>I have a stateless React function to render a react-select Select to a form. Everything else works nicely with redux-form except when redux-form is reset. I need to reset the form manually after successful post. </p>

<p>onChange and onBlur change the redux-form value correctly when Select has a value change. When I reset the redux-form, the redux-form value is cleared but the Select will have the old value. </p>

<pre class=""lang-js prettyprint-override""><code>function SelectInput(props) {
  const { input, options, label } = props;    
  const { onChange, onBlur } = input;

  const handleChange = ({ value }) =&gt; {
    onChange(value);
  };
  const handleBlur = ({ value }) =&gt; {
    onBlur(value);
  };    
  return (
    &lt;FormField {...props}&gt;
      &lt;Select placeholder={label} options={options} onChange={handleChange} onBlur={handleBlur} /&gt;
    &lt;/FormField&gt;
  );
}
</code></pre>

<p>I converted the SelectInput to React.PureComponent, and added the value as a state inside the component and looked for when the Component received new props:</p>

<pre class=""lang-js prettyprint-override""><code> constructor(props) {
   super(props);
   this.state = {value: ''}
  }
 componentWillReceiveProps(nextProps){ 
   this.setState({value: nextprops.input.value}) 
 }

 &lt;Select value={this.state.value} placeholder={label} options={options} onChange={handleChange} onBlur={handleBlur} /&gt;
</code></pre>

<p>With this Select was not able to show the value at all. </p>

<p>The problem is that how I can update the Select to show empty value  when redux-form that this field is part of is reset? Redux-form resets the value corretly inside the redux state and if I try to submit the form, validation notices that that Select has empty value. The Select will however display the old value so that user thinks that there is a value selected.</p>

<p>Reset is done by dispatching reset in the actual redux-form component. Redux devtools show that fields are reset and the redux state is cleared from all the value, Select component just won't update the DISPLAYED value to empty. </p>

<pre class=""lang-js prettyprint-override""><code>const afterSubmit = (result, dispatch) =&gt;
  dispatch(reset('datainputform'));

export default reduxForm({
  form: 'datainputform',
  onSubmitSuccess: afterSubmit,
})(DataInputForm);
</code></pre>

<p>Versions I use:</p>

<ul>
<li>react-select@v2.0.0-beta.6</li>
<li>redux-form@7.3.0</li>
</ul>
","Added the reset part from the reduxForm component."
"50640858","react-select does not clear value when redux-form is reset","2","<p>I have a stateless React function to render a react-select Select to a form. Everything else works nicely with redux-form except when redux-form is reset. I need to reset the form manually after successful post. </p>

<p>onChange and onBlur change the redux-form value correctly when Select has a value change. When I reset the redux-form, the redux-form value is cleared but the Select will have the old value. </p>

<pre class=""lang-js prettyprint-override""><code>function SelectInput(props) {
  const { input, options, label } = props;    
  const { onChange, onBlur } = input;

  const handleChange = ({ value }) =&gt; {
    onChange(value);
  };
  const handleBlur = ({ value }) =&gt; {
    onBlur(value);
  };    
  return (
    &lt;FormField {...props}&gt;
      &lt;Select placeholder={label} options={options} onChange={handleChange} onBlur={handleBlur} /&gt;
    &lt;/FormField&gt;
  );
}
</code></pre>

<p>I converted the SelectInput to React.PureComponent, and added the value as a state inside the component and looked for when the Component received new props:</p>

<pre class=""lang-js prettyprint-override""><code> constructor(props) {
   super(props);
   this.state = {value: ''}
  }
 componentWillReceiveProps(nextProps){ 
   this.setState({value: nextprops.input.value}) 
 }

 &lt;Select value={this.state.value} placeholder={label} options={options} onChange={handleChange} onBlur={handleBlur} /&gt;
</code></pre>

<p>With this Select was not able to show the value at all. </p>

<p>The problem is that how I can update the Select to show empty value  when redux-form that this field is part of is reset? Redux-form resets the value corretly inside the redux state and if I try to submit the form, validation notices that that Select has empty value. The Select will however display the old value so that user thinks that there is a value selected.</p>

<p>Reset is done by dispatching reset in the actual redux-form component. Redux devtools show that fields are reset and the redux state is cleared from all the value, Select component just won't update the DISPLAYED value to empty. </p>

<pre class=""lang-js prettyprint-override""><code>const afterSubmit = (result, dispatch) =&gt;
  dispatch(reset('datainputform'));

export default reduxForm({
  form: 'datainputform',
  onSubmitSuccess: afterSubmit,
})(DataInputForm);
</code></pre>

<p>Versions I use:</p>

<ul>
<li>react-select@v2.0.0-beta.6</li>
<li>redux-form@7.3.0</li>
</ul>
","can you include your reset function in the code please?"
"50719961","What is the right way to communicate between child and parent component to change view content in Parent in react-native?","5","<p>I have a child component where I have a button.</p>

<p>Now I have three of these child components placed next to each other in one Parent component. </p>

<p>Whenever any of these child comp is touched, I wish to change stuff in my parent component. So whenever the button is clicked, I wish to change state (or whatever is the way to do it) in parent and then go on and change the list that. I am loading in another child component used in parent. But when I press those buttons, my app just freezes after 3-4 clicks every time.</p>

<p>I thought maybe I am doing something very basic wrong. Like using the state/prop wrong and sending the app to infinite loop or something.</p>

<p>Parent Component: </p>

<pre><code>export default class Dash extends PureComponent {
constructor(){
    super();
    // Bind the this context to the handler function
    this.state = {
        activeAuctionsCount: 15,
        wonAuctionsCount: 10,
        convertedLeadsCount: 6,
        isActiveAuctionsSelected: true,
        iswonAuctionsSelected: false,
        isconvertedLeadsSelected: false,
        cardSelected: 'auctions', /* auctions/won/leads */
    };
    this.loadActiveAuctions = this.loadActiveAuctions.bind(this);
    this.loadWonAuctions = this.loadWonAuctions.bind(this);
    this.loadconvertedLeads = this.loadconvertedLeads.bind(this);
}

// This method will be sent to the child component
loadActiveAuctions() {
    console.log('active pressed');
    this.setState({
        cardSelected: 'auctions'
    });
}
loadWonAuctions() {
    console.log('won pressed');
    this.setState({
        cardSelected: 'won'
    });
}
loadconvertedLeads() {
    console.log('leads pressed');
    this.setState({
        cardSelected: 'leads'
    });
}

render() {
    return (
                            &lt;DealerShipDashStatsCard 
                            statCardLayoutPath={statCardLeft}
                            statCardTitle={'NOW'+""\n""+'SHOWING'}
                            statValue={this.state.activeAuctionsCount}
                            isSelected={this.state.isActiveAuctionsSelected} 
                            action={this.loadActiveAuctions}
                            /&gt;                         
                        &lt;/View&gt;
</code></pre>

<p>Child Component:</p>

<pre><code>export default class DealershipDash_StatsCard extends Component {
  render() {
    console.log(""Rendering DashStat Card ""+ this.props.statCardTitle);
    return (
      &lt;ImageBackground 
      source={this.props.statCardLayoutPath} 
      style={styles.stat_card} 
      resizeMode=""cover""
      resizeMethod=""resize""&gt;
        &lt;View style={styles.cardTop}&gt;&lt;/View&gt;
        &lt;View style={styles.cardBottom}&gt;
            &lt;View style={styles.cardStatTitle}&gt;
                &lt;Text style={[styles.statTitleText]}&gt;{this.props.statCardTitle}&lt;/Text&gt;
            &lt;/View&gt;
            &lt;View style={styles.cardStatValue}&gt;
                &lt;Text style={styles.cardStatValueText}&gt;{this.props.statValue}&lt;/Text&gt;
            &lt;/View&gt;
            &lt;View style={styles.cardButton}&gt;
                &lt;Image 
                source={this.props.isSelected ? cardButtonActive : cardButtonInactive } 
                style = {this.props.isSelected ? styles.stat_card_button : styles.stat_card_button_inactive}/&gt;
            &lt;/View&gt;
        &lt;/View&gt;
        &lt;Button onPress={this.props.action} title=""press""/&gt;
      &lt;/ImageBackground&gt;
    );
  }
}
</code></pre>

<p>Is there anything I'm doing wrong or not the react way? (this is my First project with react)</p>

<p>I am also sometimes getting <code>Possible EventEmitter memory leak detected</code> warning in my metro bundler. When i check console, I see everything is getting re-rendered on every click, maybe that's making it so slow that it finally gives up?</p>
","Nothing stands out as obviously wrong, other than your `Dash` component is defined as a `PureComponent` but your `DealershipDash_StatsCard` component is defined as a regular `Component` (the [React docs](https://reactjs.org/docs/react-api.html#reactpurecomponent) recommend against that). The only other suggestion I'd have would be to try to narrow down the issue by taking out code (for example, change the child component to only be a button) to see which prop/style/component is causing the issue?"
"50729880","Do react render props cause remounting of the child components?","0","<p>I was just wondering if people know if using the ""render props"" pattern causes excessive mounting/unmounting of the child component. 
For example, adapting from the react docs (<a href=""https://reactjs.org/docs/render-props.html"" rel=""nofollow noreferrer"">https://reactjs.org/docs/render-props.html</a>): </p>

<pre><code>&lt;Mouse&gt;
{mouse =&gt; (
    &lt;ShowMousePosition mouse={mouse}/&gt;
  )}
&lt;/Mouse&gt;


class ShowMousePosition extends React.Component {
  componentDidMount(){
    console.log('mounting!')
  }
  render () {
    const {mouse} = this.props
    return (
      &lt;p&gt;The mouse position is {mouse.x}, {mouse.y}&lt;/p&gt;
    )
  }
}
</code></pre>

<p>I know the react docs say:</p>

<blockquote>
  <p>Using a render prop can negate the advantage that comes from using React.PureComponent if you create the function inside a render method. This is because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop.</p>
</blockquote>

<p>But, will ""mounting!"" be called over and over as the user moves the mouse around? </p>

<p>Thanks!</p>
",""
"51079479","react native this.props.navigation is undefined in main APP","0","<p>I'm trying to use ""this.props.navigation"" in my main react native App but it is undefined. In my others components included with TabNavigator and ScreenNavigator it work.</p>

<p>My App.js </p>

<pre><code>const MyTabView = TabNavigator(
  {     
    Projects: { screen: Projects },     
    Explorer: { screen: Explorer },
    Profil: { screen: Profil }, ... 
  }        
);



const StackView = StackNavigator(
  {
    global: {
      screen: MyTabView,
      headerMode: ""none"",
      header: null,
      navigationOptions: {
        header: null
      }
    },

    TermsOfUse: { screen: TermsOfUse },
    LegalNotice: { screen: LegalNotice },
    Options: { screen: Options }, ...       
  } 
);

export default class App extends React.PureComponent {
  constructor (props) {
    super(props); 
    console.log(this.props.navigation); // &lt;----------  UNDEFINED
  }


  render() {
    return (
      &lt;Provider store={store}&gt;
        &lt;PersistGate
          loading={&lt;ActivityIndicator /&gt;}
          persistor={persistor}&gt;

          &lt;View style={styles.fullScreen}&gt;
            &lt;StackView /&gt;

            &lt;Tutorial navigation={this.props.navigation} /&gt;  // &lt;----------  this.props.navigation  is  UNDEFINED
          &lt;/View&gt;
        &lt;/PersistGate&gt;
      &lt;/Provider&gt;
    );
  }
}
</code></pre>
",""
"51098355","How to create a speedometer in react native","1","<p>I am creating charts using d3 and svg in react native in which i have created an progress bar chart. I would like to use this progress bar chart as speedometer by having a needle shows the current value.
Can anyone tell me how to create a speedometer in react native.</p>

<pre><code>    import React, { PureComponent } from 'react';
import {
  View,
} from 'react-native';
import PropTypes from 'prop-types';
import * as shape from 'd3-shape';
import Path from './animated-path';
import Svg, { G } from 'react-native-svg';

export default class Gauge extends PureComponent {
  state = {
    height: 0,
    width: 0,
  }

  _onLayout(event) {
    const {
      nativeEvent: {
        layout: {
          height,
          width,
        }
      }
    } = event;
    this.setState({height, width});
  }
  render() {
    const {
      style,
      progressColor,
      backgroundColor,
      strokeWidth,
      startAngle,
      endAngle,
      animate,
      animationDuration,
      children,
      cornerRadius,
    } = this.props

    let { progress } = this.props

    const {
      height, width
    } = this.state

    const outerDiameter = Math.min(width, height)

    if (!isFinite(progress) || isNaN(progress)) {
      progress = 0;
    }

    const data = [
      {
        key: 'rest',
        value: 1 - progress,
        color: backgroundColor,
      },
      {
        key: 'progress',
        value: progress,
        color: progressColor,
      }
    ]

    const pieSlices = shape
          .pie()
          .value(d =&gt; d.value)
          .sort((a) =&gt; a.key === 'rest' ? 1 : -1)
          .startAngle(startAngle)
          .endAngle(endAngle)
          (data)

    const arcs = pieSlices.map((slice, index) =&gt; (
      {
        ...data[index],
        ...slice,
        path: shape.arc()
        .outerRadius(outerDiameter / 2)
        .innerRadius((outerDiameter / 2) - strokeWidth)
        .startAngle(index === 0 ? startAngle : slice.startAngle)
        .endAngle(index === 0 ? endAngle : slice.endAngle)
        .cornerRadius(cornerRadius)
        (),
      }
    ))

    const extraProps = {
      width,
      height,
    }

    return (
      &lt;View style={ style } onLayout={event =&gt; this._onLayout(event)}&gt;
        {
          height &gt; 0 &amp;&amp; width &gt; 0 &amp;&amp;
          &lt;Svg style={{height, width}}&gt;
            &lt;G x={width / 2}
              y={height / 2}
              &gt;
              {
                React.Children.map(children, child =&gt; {
                  if (child &amp;&amp; child.props.belowChart) {
                    return React.cloneElement(child, extraProps)
                  }
                  return null
                })
              }
              {
                arcs.map((shape, index) =&gt; {
                  return (
                    &lt;Path
                       key={index}
                       fill={shape.color}
                       d={shape.path}
                       animate={animate}
                       animationDuration={animationDuration}
                    /&gt;
                  )
                })
              }
              {
                React.Children.map(children, child =&gt; {
                  if (child &amp;&amp; !child.props.belowChart) {
                    return React.cloneElement(child, extraProps)
                  }
                  return null
                })
              }
            &lt;/G&gt;
          &lt;/Svg&gt;
        }
      &lt;/View&gt;
    )
  }
}

Gauge.propTypes = {
  progress: PropTypes.number.isRequired,
  style: PropTypes.any,
  progressColor: PropTypes.any,
  backgroundColor: PropTypes.any,
  strokeWidth: PropTypes.number,
  startAngle: PropTypes.number,
  endAngle: PropTypes.number,
  animate: PropTypes.bool,
  cornerRadius: PropTypes.number,
  animationDuration: PropTypes.number,
}

Gauge.defaultProps = {
  progressColor: 'black',
  backgroundColor: '#ECECEC',
  strokeWidth: 5,
  startAngle: 0,
  endAngle: Math.PI * 2,
  cornerRadius: 45,
}
</code></pre>

<p>App.js</p>

<pre><code>&lt;GaugeChartExample /&gt;
</code></pre>

<p>The output which is got is like as follows:</p>

<p><a href=""https://i.stack.imgur.com/6FJ7F.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6FJ7F.png"" alt=""Output""></a></p>
","Have you try to pass the progress status every time and use [LayoutAnimation](https://facebook.github.io/react-native/docs/layoutanimation.html)?"
"51103649","React native PureComponent anti-pattern","0","<p>Objects/Arrays/Functions created in render are a performance anti pattern, e.g.: 
<a href=""https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f"" rel=""nofollow noreferrer"">https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f</a></p>

<p>My question, is this also true for ""style""? Would this re-render the child if the class re-renders?</p>

<pre><code>class Test extends React.PureComponent {
  render() {
    return &lt;View style={{width:100,height:100}} /&gt;
  }
}
</code></pre>
",""
"51235244","How come react-router-dom does not change URL on click?","1","<p>I am having trouble changing the URL and getting the component to load when using react-router-dom. If I manually enter the URL the component will load, however, the URL (and component) does not change when I click on the link. In this case, I am trying to load the '/industry/aerospace' page. Thanks!</p>

<p>Here's my code:</p>

<p>App.js:</p>

<pre><code>import React from 'react'
import { compose } from 'redux'
import { Route, Switch, withRouter } from 'react-router-dom'
import { MuiThemeProvider } from '@material-ui/core/styles'

import LandingPage from '../../home'
import AnalyzerProductPage from '../../home/analyzer'
import MonitorProductPage from '../../home/monitor'
import Signout from '../../home/signout'
import Industry from '../../home/industry'

class App extends React.PureComponent {
  render() {
    return (
      &lt;div&gt;
        &lt;MuiThemeProvider theme={muiTheme} &gt;
          &lt;Switch&gt;
            &lt;Route exact path=""/"" component={LandingPage} /&gt;
            &lt;Route exact path=""/version"" component={Version} /&gt;
            &lt;Route exact path=""/signout_success"" component={LandingPage} /&gt;
            &lt;Route exact path=""/signout"" component={Signout} /&gt;
            &lt;Route exact path=""/liquidtool-analyzer"" component={AnalyzerProductPage} /&gt;
            &lt;Route exact path=""/liquidtool-monitor"" component={MonitorProductPage} /&gt;
            &lt;Route exact path=""/industry/:industry"" component={Industry} /&gt;
          &lt;/Switch&gt;
        &lt;/MuiThemeProvider&gt;
        &lt;NotificationHandler /&gt;
        &lt;RestCallProgressBar /&gt;
      &lt;/div&gt;
    )
  }
}

export default compose(
  withRouter,
)(App)
</code></pre>

<p>HomeHeader.js (with link to page):</p>

<pre><code>import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { Link } from 'react-router-dom'

// material-ui
import { withStyles } from '@material-ui/core/styles'

class HomeHeader extends Component {
  state = {
    value: false,
    anchorEl: null
  };

  handleIndustriesClick = (event) =&gt; {
    this.setState({ anchorEl: event.currentTarget })
  };

  handleIndustriesClose = (pageID) =&gt; {
    this.setState({ anchorEl: null })
  }

  handleDashboardClick = () =&gt; {
    this.props.history.push('/dashboard')
  };

  handleChange = (event, value) =&gt; {
    this.setState({ value })
  };


  render() {
    const { classes } = this.props
    const { value } = this.state
    const { anchorEl } = this.state

    return (
      &lt;AppBar className={classes.appBar} elevation={this.props.elevation}&gt;
        &lt;Hidden smDown&gt;
          &lt;Grid container justify=""space-between"" alignItems=""center""&gt;
            &lt;Tabs value={value} onChange={this.handleChange}&gt;
              &lt;Tab label=""monitor"" /&gt;
              &lt;Tab label=""sensor"" /&gt;
              &lt;Tab 
                label=""industries"" 
                aria-owns={anchorEl ? 'industries-menu' : null}
                aria-haspopup={true}
                onClick={this.handleIndustriesClick}
              /&gt;
              &lt;Menu
                id=""industries-menu""
                anchorEl={anchorEl}
                open={Boolean(anchorEl)}
                onClose={this.handleIndustriesClose}
              &gt;
                &lt;MenuItem onClick={this.handleIndustriesClose}&gt;&lt;Link to={'/industry/aerospace'}&gt;&lt;/Link&gt;Aerospace&lt;/MenuItem&gt;
              &lt;/Menu&gt;
            &lt;/Tabs&gt;
          &lt;/Grid&gt;
        &lt;/Hidden&gt;
      &lt;/AppBar&gt;
    )
  }
}

export default withStyles(styles)(HomeHeader)
</code></pre>

<p>Industry.js (Component to load):</p>

<pre><code>import React, { Component } from 'react'; 

import Typography from '@material-ui/core/Typography';
import HomeHeader from '../components/HomeHeader'

class Industry extends Component {

  render() {
    return(
      &lt;div&gt;
        &lt;HomeHeader /&gt;
        &lt;Typography&gt;Hey&lt;/Typography&gt;
      &lt;/div&gt;
    )
  }
}

export default Industry
</code></pre>
","your <Link> component does not have any content. Try `<Link to={'/industry/aerospace'}>Aerospace</Link>`"
"51257426","How do you get Material-UI Tabs to work with react-router?","0","<p>I am trying to get Material-UI tabs to work with routing, and while the routing is working and displaying the selected tab, the smooth animation of navigating between tabs is no longer working. How can I use react router with Material-UI tabs to keep the tab animations working as they should?</p>

<p>As of now, I have the tabs in my HomeHeader.js and I am using this component to pass down the vale as props in order to change the value and thus change the selected tab.</p>

<p>For simplicity, I simplified my code to show the tabs I want to be linked.</p>

<p>Here is my code:</p>

<p>Header.js (Component with Tabs):</p>

<pre><code>import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { Link } from 'react-router-dom'

class HomeHeader extends Component {

  state = {
    value: false
  };

  handleChange = (event, value) =&gt; {
    this.setState({ value })
  };

  render() {
    const { classes, value } = this.props

    return (
        &lt;AppBar className={classes.appBar} elevation={this.props.elevation}&gt;
          &lt;Hidden smDown&gt;
            &lt;Grid container justify=""space-between"" alignItems=""center""&gt;
              &lt;Tabs value={value} onChange={this.handleChange}&gt;
                &lt;Tab label=""monitor"" component={Link} to=""/monitor"" /&gt;
                &lt;Tab label=""sensor"" component={Link} to=""/sensor"" /&gt;
              &lt;/Tabs&gt;
            &lt;/Grid&gt;
          &lt;/Hidden&gt;
        &lt;/AppBar&gt;
    )
  }
}

export default withStyles(styles)(HomeHeader)
</code></pre>

<p>Tab 1 Component (pass value into HomeHeader.js as props):</p>

<pre><code>import React from 'react'

import HomeHeader from '../components/HomeHeader'

class SensorProductPage extends React.PureComponent { // eslint-disable-line react/prefer-stateless-function

  render() {
    return (
      &lt;div&gt;
        &lt;HomeHeader value={1} /&gt;
        &lt;div&gt; Hello &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}

export default SensorProductPage
</code></pre>

<p>Tab 2 Component (pass value into HomeHeader.js as props):</p>

<pre><code>import React from 'react'

import HomeHeader from '../components/HomeHeader'

class MonitorProductPage extends React.PureComponent {

  render() {
    return (
      &lt;div&gt;
        &lt;HomeHeader value={0} /&gt;
        &lt;div&gt; Hello &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}

export default MonitorProductPage
</code></pre>
",""
"51308030","React Component OR React PureComponent","7","<p>I am new to React and I want to know when should I be using a <strong>React Component</strong> and when should I be using <strong>React PureComponent</strong>?</p>

<p><strong>Component:</strong></p>

<pre><code>import React, { Component } from 'react'
</code></pre>

<p><strong>PureComponent:</strong></p>

<pre><code>import React, { PureComponent } from 'react'
</code></pre>

<p>Can I use React PureComponent everywhere? </p>

<p><strong>OR</strong> </p>

<p>is it safe to use <strong>shouldComponentUpdate</strong> and check and return <strong>false</strong> of not required</p>

<p>I just read an article stating that using pure components actually cause more harm than good. they recommend using ""react-update-if-changed"". How much true is this?</p>

<p>Article: <a href=""https://hackernoon.com/react-purecomponent-considered-harmful-8155b5c1d4bc"" rel=""nofollow noreferrer"">https://hackernoon.com/react-purecomponent-considered-harmful-8155b5c1d4bc</a></p>
","Not nessecarily harmful, but it can introduce subtle bugs, [as explained here](https://reactjs.org/docs/react-api.html#reactpurecomponent). I would personally just use `PureComponent` when there is a specific case in my app that could need it, not use it by default."
"51432061","How to hoist non react statics with typescript and styled-components?","0","<p>I have a static three static properties (<code>Header</code>, <code>Body</code>, and <code>Footer</code>) set to a <code>Dialog</code> component. However, typescript throws the following error after wrapping the <code>Dialog</code> component in styled-components.</p>

<p><code>Property 'Header' does not exist on type 'StyledComponentClass...</code></p>

<p>Here is my <code>/Dialog.tsx</code>:</p>

<pre><code>import { Dialog as BlueprintDialog, IDialogProps } from '@blueprintjs/core';
import * as React from 'react';
import styled from 'styled-components';

import Body from './Dialog.Body';
import Footer from './Dialog.Footer';
import Header from './Dialog.Header';

/** ************************************************************************* */

type DefaultProps = {
  className: string;
};

export interface DialogProps extends IDialogProps {
  children?: React.ReactNode;
  className?: string;
  primary?: boolean;
}

class Dialog extends React.PureComponent&lt;DialogProps&gt; {
  static displayName = 'UI.Dialog';
  static defaultProps: DefaultProps = {
    className: '',
  };
  static Body: typeof Body;
  static Footer: typeof Footer;
  static Header: typeof Header;
  render() {
    return &lt;BlueprintDialog {...this.props} /&gt;;
  }
}

/** ************************************************************************* */

export default styled(Dialog)``;
</code></pre>

<p>And here is my <code>index.ts</code> where I piece it all together:</p>

<pre><code>import Dialog from './Dialog';
import DialogBody from './Dialog.Body';
import DialogFooter from './Dialog.Footer';
import DialogHeader from './Dialog.Header';

Dialog.Body = DialogBody; // TS Compilation Error :/
Dialog.Footer = DialogFooter; // TS Compilation Error :/
Dialog.Header = DialogHeader; // TS Compilation Error :/
export default Dialog;
</code></pre>

<p>I've tried doing the following, which works, but now interpolation fails for the root <code>Dialog</code> component:</p>

<pre><code>import { Dialog as BlueprintDialog, IDialogProps } from '@blueprintjs/core';
import * as React from 'react';
import styled from 'styled-components';

import Body from './Dialog.Body';
import Footer from './Dialog.Footer';
import Header from './Dialog.Header';

/** ************************************************************************* */

type DefaultProps = {
  className: string;
};

export interface DialogProps extends IDialogProps {
  children?: React.ReactNode;
  className?: string;
  primary?: boolean;
}

class Dialog extends React.PureComponent&lt;DialogProps&gt; {
  static displayName = 'UI.Dialog';
  static defaultProps: DefaultProps = {
    className: '',
  };
  render() {
    return &lt;BlueprintDialog {...this.props} /&gt;;
  }
}

/** ************************************************************************* */

const Styled = styled(Dialog)``;

class WithSubmodules extends Styled {
  static Body: typeof Body;
  static Footer: typeof Footer;
  static Header: typeof Header;
}

export default WithSubmodules;
</code></pre>

<p>An example of interpolation that throws the <code>Cannot call a class as a function</code> error:</p>

<pre><code>export default styled(InterpolationExample)`
  ${Dialog.Header} { /* WORKS :) */
    border: 1px solid green;
  }
  ${Dialog} { { /* Throws Error :/ */
    border: 1px solid pink;
  }
`;
</code></pre>
",""
"51545183","TypeError: Cannot read property '0' of undefined resolveModel react-redux-form","0","<p>Inside of the package.json file I have:</p>

<p>history: ""^4.7.2"",</p>

<p>react: ""^16.4.1"",</p>

<p>react-dom: ""^16.4.1"",</p>

<p>react-redux: ""^5.0.7"",</p>

<p>react-redux-form: ""^1.16.9"",</p>

<p>react-router-dom: ""^4.3.1"",</p>

<p>react-router-redux: ""^4.0.8"",</p>

<p>react-scripts: ""1.1.4"",</p>

<p>redux: ""^3.5.2"",</p>

<p>redux-form: ""^7.3.0"",</p>

<p>redux-logger: ""^2.6.1""</p>

<p>The error I'm getting is</p>

<p>Cannot read property '0' of undefined; 
resolveModel
node_modules/react-redux-form/lib/utils/resolve-model.js:32</p>

<pre><code>function resolveModel(model, parentModel) {
  if (parentModel) {
    console.log('parentModel :', parentModel);
    if (model[0] === '.' || model[0] === '[') {  &lt;-- It points to this line over here.
      return '' + parentModel + model;
    }

    if (typeof model === 'function') {
      return function (state) {
        return model(state, parentModel);
      };
    }
  }

  return model;
}



   function wrapWithModelResolver(WrappedComponent) {
  var ResolvedModelWrapper = function (_PureComponent) {
    _inherits(ResolvedModelWrapper, _PureComponent);

    function ResolvedModelWrapper() {
      _classCallCheck(this, ResolvedModelWrapper);

      return _possibleConstructorReturn(this, (ResolvedModelWrapper.__proto__ || Object.getPrototypeOf(ResolvedModelWrapper)).apply(this, arguments));
    }

    _createClass(ResolvedModelWrapper, [{
      key: 'render',
      value: function render() {
        var _context = this.context,
            parentModel = _context.model,
            localStore = _context.localStore;


        var resolvedModel = resolveModel(this.props.model, parentModel); &lt;------------------------ resolveModel gets called here.

        return _react2.default.createElement(WrappedComponent, _extends({}, this.props, {
          model: resolvedModel,
          store: localStore || undefined
        }));
      }
    }]);

    return ResolvedModelWrapper;
  }(_react.PureComponent);

  ResolvedModelWrapper.displayName = 'Modeled(' + WrappedComponent.displayName + ')';

  process.env.NODE_ENV !== ""production"" ? ResolvedModelWrapper.propTypes = {
    model: _propTypes2.default.any
  } : void 0;

  ResolvedModelWrapper.contextTypes = {
    model: _propTypes2.default.any,
    localStore: _propTypes2.default.shape({
      subscribe: _propTypes2.default.func,
      dispatch: _propTypes2.default.func,
      getState: _propTypes2.default.func
    })
  };

  return ResolvedModelWrapper;
}
</code></pre>

<p>Inside of src/reducers/index.js</p>

<pre><code>import { combineReducers } from 'redux';
import { createForms, formReducer } from 'react-redux-form';
import { routerReducer } from 'react-router-redux';

const SoundCloudState = {
    input: ''
}

const reducer = combineReducers({
    ...createForms({
        SoundCloud: SoundCloudState
    }), 
    routing: routerReducer,
    form: formReducer
});

export default reducer;
</code></pre>

<p>Inside of SoundCloudExp.js. In form component: </p>

<pre><code>import React, { Component } from 'react';
import {querySC} from './actions/index';
import { connect } from 'react-redux';
import { Form, Control, actions, Errors } from 'react-redux-form';

class SoundCloudExp extends Component {

    handleSubmit(query){

        const {querySC, dispatch} = this.props;

        let SCPromise = fetch('/', {
            method: 'post',
            body: query
        })
        .then((res) =&gt; res.json())
        .then((res) =&gt; {
            querySC(res);
        });

        dispatch(actions.submit('SoundCloud', SCPromise));
    }

    render(){

        return (
            &lt;Form id=""SC-search"" model=""SoundCloud"" onSubmit={(query) =&gt; this.handleSubmit(query)}&gt;
                &lt;div className='search-bar'&gt;
                    &lt;Control.text model="".input""
                                  className='search'
                                  placeholder='Search'/&gt;
                    &lt;Errors model="".input""
                            messages={{NoSearchResults: 'This query returned no results.'}}/&gt;
                &lt;/div&gt;
                &lt;Control.button className='search-btn'&gt;
                    Search
                &lt;/Control.button&gt;
            &lt;/Form&gt;
        )
    }
}

export default connect(null, {querySC})(SoundCloudExp);
</code></pre>

<p>What is peculiar is that when I include console.log statements inside of the resolveModel.js file, I get three different variations of the expected response. Why is that?</p>

<p><a href=""https://i.stack.imgur.com/oOkA4.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oOkA4.png"" alt=""enter image description here""></a></p>
",""
"51644080","Definitive guide for styling react-tooltip components?","0","<p>I am using react-tooltip, react-emotion.</p>

<p>I cannot figure out how to style the span in order to override default styles.</p>

<p>Here's what I've got so far:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import React, { PureComponent } from 'react';
import styled from 'react-emotion';

const myTooltip = (Wrapper, toolTip) =&gt; {
  class TooltipWrap extends PureComponent {
    render() {
      return (
        &lt;span
          data-tip={toolTip}
          data-delay-show=""250""
          data-place=""bottom""
          className={TooltipStyle}
        &gt;
          &lt;Wrapper
            {...this.props}
          /&gt;
        &lt;/span&gt;
      );
    }
  }

  return TooltipWrap;
};

export default withToolTip;

const TooltipStyle = styled.span ({
  color: 'red !important';
  fontSize: '48px !important';
})</code></pre>
</div>
</div>
</p>

<p>Anyone have any tips or a specific definitive guide on how to style this span so I can override the defaults in react-tooltip?</p>

<p>The documentation is pretty spotty, and there's literally no examples anywhere on the web.</p>
",""